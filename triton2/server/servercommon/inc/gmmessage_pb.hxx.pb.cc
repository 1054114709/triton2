// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "gmmessage_pb.hxx.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>
#ifdef LEAK_CHK_DEBUG_NEW
#include "debug_new.h"
#endif

namespace {

const ::google::protobuf::Descriptor* CGMMessageKickRoleCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageKickRoleCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageCmdNormalResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageCmdNormalResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageRoleDetailCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageRoleDetailCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBRoleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBRoleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageRoleDetailResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageRoleDetailResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageUserStorageInfoCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageUserStorageInfoCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageUserStorageInfoResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageUserStorageInfoResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageRoleLocationCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageRoleLocationCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageRoleLocationResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageRoleLocationResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageUserLevelInfoCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageUserLevelInfoCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBRoleUpgradeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBRoleUpgradeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageUserLevelInfoResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageUserLevelInfoResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageUserSocialInfoCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageUserSocialInfoCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageUserSocialInfoResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageUserSocialInfoResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageGoodsHistoryToNPCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageGoodsHistoryToNPCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemExchange2Npc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemExchange2Npc_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageGoodsHistoryToNPCResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageGoodsHistoryToNPCResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageGoodsHistoryFromNPCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageGoodsHistoryFromNPCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageGoodsHistoryFromNPCResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageGoodsHistoryFromNPCResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageGoodsHistoryBetweenUsersCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageGoodsHistoryBetweenUsersCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemExchange2Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemExchange2Player_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageGoodsHistoryBetweenUsersResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageGoodsHistoryBetweenUsersResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageGoodsHistoryCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageGoodsHistoryCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageGoodsHistoryResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageGoodsHistoryResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessagePetHistoryCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessagePetHistoryCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPetHistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPetHistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessagePetHistoryResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessagePetHistoryResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageOperationDetailCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageOperationDetailCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageNPCDetailCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageNPCDetailCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBNPCDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBNPCDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageNPCDetailResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageNPCDetailResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageGoodsDropLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageGoodsDropLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGoodsDropLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGoodsDropLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageGoodsDropLogResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageGoodsDropLogResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageTaskInfoCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageTaskInfoCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTaskInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTaskInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageTaskInfoResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageTaskInfoResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageLoginInfoCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageLoginInfoCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBLoginInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBLoginInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageLoginInfoResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageLoginInfoResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageShutUpCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageShutUpCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageCancelShutUpCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageCancelShutUpCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageFreezeAccountCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageFreezeAccountCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageFreezeAccountBatCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageFreezeAccountBatCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageUnFreezeAccountCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageUnFreezeAccountCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageTrusteeUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageTrusteeUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageUnTrusteeUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageUnTrusteeUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageMoveRoleCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageMoveRoleCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageEndTaskCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageEndTaskCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageTrusteeStorageCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageTrusteeStorageCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageUnTrusteeStorageCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageUnTrusteeStorageCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageRecoverRoleCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageRecoverRoleCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessagePostBulletinCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessagePostBulletinCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageMultiExpCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageMultiExpCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageCancelMultiExpCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageCancelMultiExpCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageChangeMoneyCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageChangeMoneyCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageChangeExpCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageChangeExpCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageChangeItemCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageChangeItemCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageDeleteRoleCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageDeleteRoleCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageClearBagCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageClearBagCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageChangePetCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageChangePetCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageSetOLGMAccountCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageSetOLGMAccountCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageIbInfoCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageIbInfoCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBIbItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBIbItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageIbInfoResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageIbInfoResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageSetIbPriceCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageSetIbPriceCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageSetIbLocationCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageSetIbLocationCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageIbOnSaleCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageIbOnSaleCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageIbNotSaleCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageIbNotSaleCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageIbDescriptCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageIbDescriptCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageIpBindCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageIpBindCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageRoleProtoCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageRoleProtoCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageRoleEquipmentCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageRoleEquipmentCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageRolePackInfoCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageRolePackInfoCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageRoleItemInPackCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageRoleItemInPackCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageRoleSkillInfoCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageRoleSkillInfoCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageRoleSkillDetailCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageRoleSkillDetailCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageRoleEquipmentResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageRoleEquipmentResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageRolePackInfoResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageRolePackInfoResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageRoleItemInPackResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageRoleItemInPackResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageRoleSkillInfoResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageRoleSkillInfoResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageRoleSkillDetailResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageRoleSkillDetailResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageActivityListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageActivityListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBActivity_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageActivityListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageActivityListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUserItemListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUserItemListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBActivityItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBActivityItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUserItemListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUserItemListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUserItemMinusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUserItemMinusRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUserItemMinusResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUserItemMinusResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageRoleEquipmentDetailCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageRoleEquipmentDetailCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageRoleStorageDetailCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageRoleStorageDetailCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageRoleEquipmentDetailResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageRoleEquipmentDetailResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageRoleStorageDetailResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageRoleStorageDetailResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSubjectAmount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSubjectAmount_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFangChenMiResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFangChenMiResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBFangChenMi_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBFangChenMi_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFangChenMiRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFangChenMiRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFCMPlayerListNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFCMPlayerListNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFCMPlayerResetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFCMPlayerResetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeGateNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeGateNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageResetRolePasswordRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageResetRolePasswordRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageResetRolePasswordResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageResetRolePasswordResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageRoleItemOperatedCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageRoleItemOperatedCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageRoleMoneyOperateCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageRoleMoneyOperateCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageRoleExpCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageRoleExpCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageRoleItemLevelUpCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageRoleItemLevelUpCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageFreezeMacCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageFreezeMacCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageUnFreezeMacCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageUnFreezeMacCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageCorpsTotalCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageCorpsTotalCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageCorpsDetailCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageCorpsDetailCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageCorpsInfoCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageCorpsInfoCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageRoleInfoCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageRoleInfoCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMsgRoleItemRecoveryCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMsgRoleItemRecoveryCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageOfflineSysMailNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageOfflineSysMailNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageSqlQueryResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageSqlQueryResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageUserInfoByIPCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageUserInfoByIPCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IPInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IPInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMsgUserInfoByIPResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMsgUserInfoByIPResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMMessageQueryRoleMailCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMMessageQueryRoleMailCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EMGMCmdMessageID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_gmmessage_5fpb_2ehxx() {
  protobuf_AddDesc_gmmessage_5fpb_2ehxx();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gmmessage_pb.hxx");
  GOOGLE_CHECK(file != NULL);
  CGMMessageKickRoleCmd_descriptor_ = file->message_type(0);
  static const int CGMMessageKickRoleCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageKickRoleCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageKickRoleCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageKickRoleCmd, role_id_),
  };
  CGMMessageKickRoleCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageKickRoleCmd_descriptor_,
      CGMMessageKickRoleCmd::default_instance_,
      CGMMessageKickRoleCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageKickRoleCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageKickRoleCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageKickRoleCmd));
  CGMMessageCmdNormalResult_descriptor_ = file->message_type(1);
  static const int CGMMessageCmdNormalResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageCmdNormalResult, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageCmdNormalResult, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageCmdNormalResult, result_),
  };
  CGMMessageCmdNormalResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageCmdNormalResult_descriptor_,
      CGMMessageCmdNormalResult::default_instance_,
      CGMMessageCmdNormalResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageCmdNormalResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageCmdNormalResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageCmdNormalResult));
  CGMMessageRoleDetailCmd_descriptor_ = file->message_type(2);
  static const int CGMMessageRoleDetailCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleDetailCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleDetailCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleDetailCmd, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleDetailCmd, type_),
  };
  CGMMessageRoleDetailCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageRoleDetailCmd_descriptor_,
      CGMMessageRoleDetailCmd::default_instance_,
      CGMMessageRoleDetailCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleDetailCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleDetailCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageRoleDetailCmd));
  PBRoleInfo_descriptor_ = file->message_type(3);
  static const int PBRoleInfo_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleInfo, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleInfo, role_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleInfo, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleInfo, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleInfo, is_alive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleInfo, gender_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleInfo, metier_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleInfo, nationality_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleInfo, face_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleInfo, line_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleInfo, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleInfo, pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleInfo, pos_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleInfo, role_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleInfo, role_expr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleInfo, role_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleInfo, bounded_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleInfo, login_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleInfo, online_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleInfo, update_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleInfo, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleInfo, proto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleInfo, login_ip_),
  };
  PBRoleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBRoleInfo_descriptor_,
      PBRoleInfo::default_instance_,
      PBRoleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBRoleInfo));
  CGMMessageRoleDetailResult_descriptor_ = file->message_type(4);
  static const int CGMMessageRoleDetailResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleDetailResult, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleDetailResult, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleDetailResult, proto_),
  };
  CGMMessageRoleDetailResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageRoleDetailResult_descriptor_,
      CGMMessageRoleDetailResult::default_instance_,
      CGMMessageRoleDetailResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleDetailResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleDetailResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageRoleDetailResult));
  CGMMessageUserStorageInfoCmd_descriptor_ = file->message_type(5);
  static const int CGMMessageUserStorageInfoCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserStorageInfoCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserStorageInfoCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserStorageInfoCmd, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserStorageInfoCmd, page_),
  };
  CGMMessageUserStorageInfoCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageUserStorageInfoCmd_descriptor_,
      CGMMessageUserStorageInfoCmd::default_instance_,
      CGMMessageUserStorageInfoCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserStorageInfoCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserStorageInfoCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageUserStorageInfoCmd));
  CGMMessageUserStorageInfoResult_descriptor_ = file->message_type(6);
  static const int CGMMessageUserStorageInfoResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserStorageInfoResult, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserStorageInfoResult, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserStorageInfoResult, items_),
  };
  CGMMessageUserStorageInfoResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageUserStorageInfoResult_descriptor_,
      CGMMessageUserStorageInfoResult::default_instance_,
      CGMMessageUserStorageInfoResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserStorageInfoResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserStorageInfoResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageUserStorageInfoResult));
  CGMMessageRoleLocationCmd_descriptor_ = file->message_type(7);
  static const int CGMMessageRoleLocationCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleLocationCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleLocationCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleLocationCmd, role_id_),
  };
  CGMMessageRoleLocationCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageRoleLocationCmd_descriptor_,
      CGMMessageRoleLocationCmd::default_instance_,
      CGMMessageRoleLocationCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleLocationCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleLocationCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageRoleLocationCmd));
  CGMMessageRoleLocationResult_descriptor_ = file->message_type(8);
  static const int CGMMessageRoleLocationResult_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleLocationResult, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleLocationResult, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleLocationResult, line_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleLocationResult, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleLocationResult, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleLocationResult, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleLocationResult, role_id_),
  };
  CGMMessageRoleLocationResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageRoleLocationResult_descriptor_,
      CGMMessageRoleLocationResult::default_instance_,
      CGMMessageRoleLocationResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleLocationResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleLocationResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageRoleLocationResult));
  CGMMessageUserLevelInfoCmd_descriptor_ = file->message_type(9);
  static const int CGMMessageUserLevelInfoCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserLevelInfoCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserLevelInfoCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserLevelInfoCmd, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserLevelInfoCmd, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserLevelInfoCmd, end_time_),
  };
  CGMMessageUserLevelInfoCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageUserLevelInfoCmd_descriptor_,
      CGMMessageUserLevelInfoCmd::default_instance_,
      CGMMessageUserLevelInfoCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserLevelInfoCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserLevelInfoCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageUserLevelInfoCmd));
  PBRoleUpgradeInfo_descriptor_ = file->message_type(10);
  static const int PBRoleUpgradeInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleUpgradeInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleUpgradeInfo, up_period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleUpgradeInfo, up_time_),
  };
  PBRoleUpgradeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBRoleUpgradeInfo_descriptor_,
      PBRoleUpgradeInfo::default_instance_,
      PBRoleUpgradeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleUpgradeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleUpgradeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBRoleUpgradeInfo));
  CGMMessageUserLevelInfoResult_descriptor_ = file->message_type(11);
  static const int CGMMessageUserLevelInfoResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserLevelInfoResult, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserLevelInfoResult, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserLevelInfoResult, role_upgrade_info_),
  };
  CGMMessageUserLevelInfoResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageUserLevelInfoResult_descriptor_,
      CGMMessageUserLevelInfoResult::default_instance_,
      CGMMessageUserLevelInfoResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserLevelInfoResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserLevelInfoResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageUserLevelInfoResult));
  CGMMessageUserSocialInfoCmd_descriptor_ = file->message_type(12);
  static const int CGMMessageUserSocialInfoCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserSocialInfoCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserSocialInfoCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserSocialInfoCmd, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserSocialInfoCmd, type_),
  };
  CGMMessageUserSocialInfoCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageUserSocialInfoCmd_descriptor_,
      CGMMessageUserSocialInfoCmd::default_instance_,
      CGMMessageUserSocialInfoCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserSocialInfoCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserSocialInfoCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageUserSocialInfoCmd));
  CGMMessageUserSocialInfoResult_descriptor_ = file->message_type(13);
  static const int CGMMessageUserSocialInfoResult_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserSocialInfoResult, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserSocialInfoResult, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserSocialInfoResult, friends_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserSocialInfoResult, familyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserSocialInfoResult, corpsname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserSocialInfoResult, spouseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserSocialInfoResult, weddingmodule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserSocialInfoResult, marriageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserSocialInfoResult, weddingtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserSocialInfoResult, marriagetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserSocialInfoResult, matrixinfo_),
  };
  CGMMessageUserSocialInfoResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageUserSocialInfoResult_descriptor_,
      CGMMessageUserSocialInfoResult::default_instance_,
      CGMMessageUserSocialInfoResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserSocialInfoResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserSocialInfoResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageUserSocialInfoResult));
  CGMMessageGoodsHistoryToNPCCmd_descriptor_ = file->message_type(14);
  static const int CGMMessageGoodsHistoryToNPCCmd_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryToNPCCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryToNPCCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryToNPCCmd, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryToNPCCmd, role_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryToNPCCmd, npc_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryToNPCCmd, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryToNPCCmd, end_time_),
  };
  CGMMessageGoodsHistoryToNPCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageGoodsHistoryToNPCCmd_descriptor_,
      CGMMessageGoodsHistoryToNPCCmd::default_instance_,
      CGMMessageGoodsHistoryToNPCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryToNPCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryToNPCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageGoodsHistoryToNPCCmd));
  PBItemExchange2Npc_descriptor_ = file->message_type(15);
  static const int PBItemExchange2Npc_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemExchange2Npc, npc_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemExchange2Npc, item_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemExchange2Npc, item_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemExchange2Npc, exchange_time_),
  };
  PBItemExchange2Npc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemExchange2Npc_descriptor_,
      PBItemExchange2Npc::default_instance_,
      PBItemExchange2Npc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemExchange2Npc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemExchange2Npc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemExchange2Npc));
  CGMMessageGoodsHistoryToNPCResult_descriptor_ = file->message_type(16);
  static const int CGMMessageGoodsHistoryToNPCResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryToNPCResult, items_selled_),
  };
  CGMMessageGoodsHistoryToNPCResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageGoodsHistoryToNPCResult_descriptor_,
      CGMMessageGoodsHistoryToNPCResult::default_instance_,
      CGMMessageGoodsHistoryToNPCResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryToNPCResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryToNPCResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageGoodsHistoryToNPCResult));
  CGMMessageGoodsHistoryFromNPCCmd_descriptor_ = file->message_type(17);
  static const int CGMMessageGoodsHistoryFromNPCCmd_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryFromNPCCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryFromNPCCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryFromNPCCmd, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryFromNPCCmd, role_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryFromNPCCmd, npc_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryFromNPCCmd, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryFromNPCCmd, end_time_),
  };
  CGMMessageGoodsHistoryFromNPCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageGoodsHistoryFromNPCCmd_descriptor_,
      CGMMessageGoodsHistoryFromNPCCmd::default_instance_,
      CGMMessageGoodsHistoryFromNPCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryFromNPCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryFromNPCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageGoodsHistoryFromNPCCmd));
  CGMMessageGoodsHistoryFromNPCResult_descriptor_ = file->message_type(18);
  static const int CGMMessageGoodsHistoryFromNPCResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryFromNPCResult, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryFromNPCResult, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryFromNPCResult, items_buyed_),
  };
  CGMMessageGoodsHistoryFromNPCResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageGoodsHistoryFromNPCResult_descriptor_,
      CGMMessageGoodsHistoryFromNPCResult::default_instance_,
      CGMMessageGoodsHistoryFromNPCResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryFromNPCResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryFromNPCResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageGoodsHistoryFromNPCResult));
  CGMMessageGoodsHistoryBetweenUsersCmd_descriptor_ = file->message_type(19);
  static const int CGMMessageGoodsHistoryBetweenUsersCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryBetweenUsersCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryBetweenUsersCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryBetweenUsersCmd, role_id1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryBetweenUsersCmd, role_id2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryBetweenUsersCmd, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryBetweenUsersCmd, end_time_),
  };
  CGMMessageGoodsHistoryBetweenUsersCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageGoodsHistoryBetweenUsersCmd_descriptor_,
      CGMMessageGoodsHistoryBetweenUsersCmd::default_instance_,
      CGMMessageGoodsHistoryBetweenUsersCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryBetweenUsersCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryBetweenUsersCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageGoodsHistoryBetweenUsersCmd));
  PBItemExchange2Player_descriptor_ = file->message_type(20);
  static const int PBItemExchange2Player_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemExchange2Player, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemExchange2Player, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemExchange2Player, item_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemExchange2Player, item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemExchange2Player, exchange_time_),
  };
  PBItemExchange2Player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemExchange2Player_descriptor_,
      PBItemExchange2Player::default_instance_,
      PBItemExchange2Player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemExchange2Player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemExchange2Player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemExchange2Player));
  CGMMessageGoodsHistoryBetweenUsersResult_descriptor_ = file->message_type(21);
  static const int CGMMessageGoodsHistoryBetweenUsersResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryBetweenUsersResult, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryBetweenUsersResult, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryBetweenUsersResult, item_exchanged_),
  };
  CGMMessageGoodsHistoryBetweenUsersResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageGoodsHistoryBetweenUsersResult_descriptor_,
      CGMMessageGoodsHistoryBetweenUsersResult::default_instance_,
      CGMMessageGoodsHistoryBetweenUsersResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryBetweenUsersResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryBetweenUsersResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageGoodsHistoryBetweenUsersResult));
  CGMMessageGoodsHistoryCmd_descriptor_ = file->message_type(22);
  static const int CGMMessageGoodsHistoryCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryCmd, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryCmd, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryCmd, end_time_),
  };
  CGMMessageGoodsHistoryCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageGoodsHistoryCmd_descriptor_,
      CGMMessageGoodsHistoryCmd::default_instance_,
      CGMMessageGoodsHistoryCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageGoodsHistoryCmd));
  PBItemAction_descriptor_ = file->message_type(23);
  static const int PBItemAction_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemAction, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemAction, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemAction, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemAction, action_time_),
  };
  PBItemAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemAction_descriptor_,
      PBItemAction::default_instance_,
      PBItemAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemAction));
  CGMMessageGoodsHistoryResult_descriptor_ = file->message_type(24);
  static const int CGMMessageGoodsHistoryResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryResult, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryResult, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryResult, item_actioned_),
  };
  CGMMessageGoodsHistoryResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageGoodsHistoryResult_descriptor_,
      CGMMessageGoodsHistoryResult::default_instance_,
      CGMMessageGoodsHistoryResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsHistoryResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageGoodsHistoryResult));
  CGMMessagePetHistoryCmd_descriptor_ = file->message_type(25);
  static const int CGMMessagePetHistoryCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessagePetHistoryCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessagePetHistoryCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessagePetHistoryCmd, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessagePetHistoryCmd, pet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessagePetHistoryCmd, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessagePetHistoryCmd, end_time_),
  };
  CGMMessagePetHistoryCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessagePetHistoryCmd_descriptor_,
      CGMMessagePetHistoryCmd::default_instance_,
      CGMMessagePetHistoryCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessagePetHistoryCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessagePetHistoryCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessagePetHistoryCmd));
  PBPetHistory_descriptor_ = file->message_type(26);
  static const int PBPetHistory_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPetHistory, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPetHistory, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPetHistory, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPetHistory, action_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPetHistory, action_attr_),
  };
  PBPetHistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPetHistory_descriptor_,
      PBPetHistory::default_instance_,
      PBPetHistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPetHistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPetHistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPetHistory));
  CGMMessagePetHistoryResult_descriptor_ = file->message_type(27);
  static const int CGMMessagePetHistoryResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessagePetHistoryResult, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessagePetHistoryResult, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessagePetHistoryResult, pet_history_),
  };
  CGMMessagePetHistoryResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessagePetHistoryResult_descriptor_,
      CGMMessagePetHistoryResult::default_instance_,
      CGMMessagePetHistoryResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessagePetHistoryResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessagePetHistoryResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessagePetHistoryResult));
  CGMMessageOperationDetailCmd_descriptor_ = file->message_type(28);
  static const int CGMMessageOperationDetailCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageOperationDetailCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageOperationDetailCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageOperationDetailCmd, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageOperationDetailCmd, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageOperationDetailCmd, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageOperationDetailCmd, end_time_),
  };
  CGMMessageOperationDetailCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageOperationDetailCmd_descriptor_,
      CGMMessageOperationDetailCmd::default_instance_,
      CGMMessageOperationDetailCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageOperationDetailCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageOperationDetailCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageOperationDetailCmd));
  CGMMessageNPCDetailCmd_descriptor_ = file->message_type(29);
  static const int CGMMessageNPCDetailCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageNPCDetailCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageNPCDetailCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageNPCDetailCmd, npc_name_),
  };
  CGMMessageNPCDetailCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageNPCDetailCmd_descriptor_,
      CGMMessageNPCDetailCmd::default_instance_,
      CGMMessageNPCDetailCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageNPCDetailCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageNPCDetailCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageNPCDetailCmd));
  PBNPCDetail_descriptor_ = file->message_type(30);
  static const int PBNPCDetail_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNPCDetail, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNPCDetail, npc_location_),
  };
  PBNPCDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBNPCDetail_descriptor_,
      PBNPCDetail::default_instance_,
      PBNPCDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNPCDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNPCDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBNPCDetail));
  CGMMessageNPCDetailResult_descriptor_ = file->message_type(31);
  static const int CGMMessageNPCDetailResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageNPCDetailResult, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageNPCDetailResult, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageNPCDetailResult, npc_detail_),
  };
  CGMMessageNPCDetailResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageNPCDetailResult_descriptor_,
      CGMMessageNPCDetailResult::default_instance_,
      CGMMessageNPCDetailResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageNPCDetailResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageNPCDetailResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageNPCDetailResult));
  CGMMessageGoodsDropLogCmd_descriptor_ = file->message_type(32);
  static const int CGMMessageGoodsDropLogCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsDropLogCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsDropLogCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsDropLogCmd, goods_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsDropLogCmd, map_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsDropLogCmd, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsDropLogCmd, end_time_),
  };
  CGMMessageGoodsDropLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageGoodsDropLogCmd_descriptor_,
      CGMMessageGoodsDropLogCmd::default_instance_,
      CGMMessageGoodsDropLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsDropLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsDropLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageGoodsDropLogCmd));
  PBGoodsDropLog_descriptor_ = file->message_type(33);
  static const int PBGoodsDropLog_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGoodsDropLog, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGoodsDropLog, drop_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGoodsDropLog, total_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGoodsDropLog, drop_rate_),
  };
  PBGoodsDropLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGoodsDropLog_descriptor_,
      PBGoodsDropLog::default_instance_,
      PBGoodsDropLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGoodsDropLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGoodsDropLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGoodsDropLog));
  CGMMessageGoodsDropLogResult_descriptor_ = file->message_type(34);
  static const int CGMMessageGoodsDropLogResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsDropLogResult, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsDropLogResult, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsDropLogResult, goods_drop_log_),
  };
  CGMMessageGoodsDropLogResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageGoodsDropLogResult_descriptor_,
      CGMMessageGoodsDropLogResult::default_instance_,
      CGMMessageGoodsDropLogResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsDropLogResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageGoodsDropLogResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageGoodsDropLogResult));
  CGMMessageTaskInfoCmd_descriptor_ = file->message_type(35);
  static const int CGMMessageTaskInfoCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageTaskInfoCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageTaskInfoCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageTaskInfoCmd, role_id_),
  };
  CGMMessageTaskInfoCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageTaskInfoCmd_descriptor_,
      CGMMessageTaskInfoCmd::default_instance_,
      CGMMessageTaskInfoCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageTaskInfoCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageTaskInfoCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageTaskInfoCmd));
  PBTaskInfo_descriptor_ = file->message_type(36);
  static const int PBTaskInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskInfo, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskInfo, task_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskInfo, finish_type_),
  };
  PBTaskInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTaskInfo_descriptor_,
      PBTaskInfo::default_instance_,
      PBTaskInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTaskInfo));
  CGMMessageTaskInfoResult_descriptor_ = file->message_type(37);
  static const int CGMMessageTaskInfoResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageTaskInfoResult, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageTaskInfoResult, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageTaskInfoResult, task_detail_),
  };
  CGMMessageTaskInfoResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageTaskInfoResult_descriptor_,
      CGMMessageTaskInfoResult::default_instance_,
      CGMMessageTaskInfoResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageTaskInfoResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageTaskInfoResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageTaskInfoResult));
  CGMMessageLoginInfoCmd_descriptor_ = file->message_type(38);
  static const int CGMMessageLoginInfoCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageLoginInfoCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageLoginInfoCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageLoginInfoCmd, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageLoginInfoCmd, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageLoginInfoCmd, end_time_),
  };
  CGMMessageLoginInfoCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageLoginInfoCmd_descriptor_,
      CGMMessageLoginInfoCmd::default_instance_,
      CGMMessageLoginInfoCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageLoginInfoCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageLoginInfoCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageLoginInfoCmd));
  PBLoginInfo_descriptor_ = file->message_type(39);
  static const int PBLoginInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginInfo, login_in_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginInfo, login_in_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginInfo, login_in_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginInfo, login_in_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginInfo, login_out_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginInfo, login_out_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginInfo, login_out_exp_),
  };
  PBLoginInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBLoginInfo_descriptor_,
      PBLoginInfo::default_instance_,
      PBLoginInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBLoginInfo));
  CGMMessageLoginInfoResult_descriptor_ = file->message_type(40);
  static const int CGMMessageLoginInfoResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageLoginInfoResult, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageLoginInfoResult, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageLoginInfoResult, login_info_),
  };
  CGMMessageLoginInfoResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageLoginInfoResult_descriptor_,
      CGMMessageLoginInfoResult::default_instance_,
      CGMMessageLoginInfoResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageLoginInfoResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageLoginInfoResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageLoginInfoResult));
  CGMMessageShutUpCmd_descriptor_ = file->message_type(41);
  static const int CGMMessageShutUpCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageShutUpCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageShutUpCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageShutUpCmd, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageShutUpCmd, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageShutUpCmd, period_),
  };
  CGMMessageShutUpCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageShutUpCmd_descriptor_,
      CGMMessageShutUpCmd::default_instance_,
      CGMMessageShutUpCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageShutUpCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageShutUpCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageShutUpCmd));
  CGMMessageCancelShutUpCmd_descriptor_ = file->message_type(42);
  static const int CGMMessageCancelShutUpCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageCancelShutUpCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageCancelShutUpCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageCancelShutUpCmd, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageCancelShutUpCmd, channel_),
  };
  CGMMessageCancelShutUpCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageCancelShutUpCmd_descriptor_,
      CGMMessageCancelShutUpCmd::default_instance_,
      CGMMessageCancelShutUpCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageCancelShutUpCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageCancelShutUpCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageCancelShutUpCmd));
  CGMMessageFreezeAccountCmd_descriptor_ = file->message_type(43);
  static const int CGMMessageFreezeAccountCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageFreezeAccountCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageFreezeAccountCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageFreezeAccountCmd, user_id_),
  };
  CGMMessageFreezeAccountCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageFreezeAccountCmd_descriptor_,
      CGMMessageFreezeAccountCmd::default_instance_,
      CGMMessageFreezeAccountCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageFreezeAccountCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageFreezeAccountCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageFreezeAccountCmd));
  CGMMessageFreezeAccountBatCmd_descriptor_ = file->message_type(44);
  static const int CGMMessageFreezeAccountBatCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageFreezeAccountBatCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageFreezeAccountBatCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageFreezeAccountBatCmd, uid_list_),
  };
  CGMMessageFreezeAccountBatCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageFreezeAccountBatCmd_descriptor_,
      CGMMessageFreezeAccountBatCmd::default_instance_,
      CGMMessageFreezeAccountBatCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageFreezeAccountBatCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageFreezeAccountBatCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageFreezeAccountBatCmd));
  CGMMessageUnFreezeAccountCmd_descriptor_ = file->message_type(45);
  static const int CGMMessageUnFreezeAccountCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUnFreezeAccountCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUnFreezeAccountCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUnFreezeAccountCmd, user_id_),
  };
  CGMMessageUnFreezeAccountCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageUnFreezeAccountCmd_descriptor_,
      CGMMessageUnFreezeAccountCmd::default_instance_,
      CGMMessageUnFreezeAccountCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUnFreezeAccountCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUnFreezeAccountCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageUnFreezeAccountCmd));
  CGMMessageTrusteeUserCmd_descriptor_ = file->message_type(46);
  static const int CGMMessageTrusteeUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageTrusteeUserCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageTrusteeUserCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageTrusteeUserCmd, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageTrusteeUserCmd, password_),
  };
  CGMMessageTrusteeUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageTrusteeUserCmd_descriptor_,
      CGMMessageTrusteeUserCmd::default_instance_,
      CGMMessageTrusteeUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageTrusteeUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageTrusteeUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageTrusteeUserCmd));
  CGMMessageUnTrusteeUserCmd_descriptor_ = file->message_type(47);
  static const int CGMMessageUnTrusteeUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUnTrusteeUserCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUnTrusteeUserCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUnTrusteeUserCmd, user_id_),
  };
  CGMMessageUnTrusteeUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageUnTrusteeUserCmd_descriptor_,
      CGMMessageUnTrusteeUserCmd::default_instance_,
      CGMMessageUnTrusteeUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUnTrusteeUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUnTrusteeUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageUnTrusteeUserCmd));
  CGMMessageMoveRoleCmd_descriptor_ = file->message_type(48);
  static const int CGMMessageMoveRoleCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageMoveRoleCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageMoveRoleCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageMoveRoleCmd, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageMoveRoleCmd, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageMoveRoleCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageMoveRoleCmd, target_location_),
  };
  CGMMessageMoveRoleCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageMoveRoleCmd_descriptor_,
      CGMMessageMoveRoleCmd::default_instance_,
      CGMMessageMoveRoleCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageMoveRoleCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageMoveRoleCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageMoveRoleCmd));
  CGMMessageEndTaskCmd_descriptor_ = file->message_type(49);
  static const int CGMMessageEndTaskCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageEndTaskCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageEndTaskCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageEndTaskCmd, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageEndTaskCmd, task_id_),
  };
  CGMMessageEndTaskCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageEndTaskCmd_descriptor_,
      CGMMessageEndTaskCmd::default_instance_,
      CGMMessageEndTaskCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageEndTaskCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageEndTaskCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageEndTaskCmd));
  CGMMessageTrusteeStorageCmd_descriptor_ = file->message_type(50);
  static const int CGMMessageTrusteeStorageCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageTrusteeStorageCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageTrusteeStorageCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageTrusteeStorageCmd, role_id_),
  };
  CGMMessageTrusteeStorageCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageTrusteeStorageCmd_descriptor_,
      CGMMessageTrusteeStorageCmd::default_instance_,
      CGMMessageTrusteeStorageCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageTrusteeStorageCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageTrusteeStorageCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageTrusteeStorageCmd));
  CGMMessageUnTrusteeStorageCmd_descriptor_ = file->message_type(51);
  static const int CGMMessageUnTrusteeStorageCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUnTrusteeStorageCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUnTrusteeStorageCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUnTrusteeStorageCmd, role_id_),
  };
  CGMMessageUnTrusteeStorageCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageUnTrusteeStorageCmd_descriptor_,
      CGMMessageUnTrusteeStorageCmd::default_instance_,
      CGMMessageUnTrusteeStorageCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUnTrusteeStorageCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUnTrusteeStorageCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageUnTrusteeStorageCmd));
  CGMMessageRecoverRoleCmd_descriptor_ = file->message_type(52);
  static const int CGMMessageRecoverRoleCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRecoverRoleCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRecoverRoleCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRecoverRoleCmd, role_id_),
  };
  CGMMessageRecoverRoleCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageRecoverRoleCmd_descriptor_,
      CGMMessageRecoverRoleCmd::default_instance_,
      CGMMessageRecoverRoleCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRecoverRoleCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRecoverRoleCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageRecoverRoleCmd));
  CGMMessagePostBulletinCmd_descriptor_ = file->message_type(53);
  static const int CGMMessagePostBulletinCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessagePostBulletinCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessagePostBulletinCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessagePostBulletinCmd, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessagePostBulletinCmd, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessagePostBulletinCmd, interval_),
  };
  CGMMessagePostBulletinCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessagePostBulletinCmd_descriptor_,
      CGMMessagePostBulletinCmd::default_instance_,
      CGMMessagePostBulletinCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessagePostBulletinCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessagePostBulletinCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessagePostBulletinCmd));
  CGMMessageMultiExpCmd_descriptor_ = file->message_type(54);
  static const int CGMMessageMultiExpCmd_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageMultiExpCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageMultiExpCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageMultiExpCmd, gateway_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageMultiExpCmd, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageMultiExpCmd, exp_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageMultiExpCmd, multi_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageMultiExpCmd, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageMultiExpCmd, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageMultiExpCmd, end_time_),
  };
  CGMMessageMultiExpCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageMultiExpCmd_descriptor_,
      CGMMessageMultiExpCmd::default_instance_,
      CGMMessageMultiExpCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageMultiExpCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageMultiExpCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageMultiExpCmd));
  CGMMessageCancelMultiExpCmd_descriptor_ = file->message_type(55);
  static const int CGMMessageCancelMultiExpCmd_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageCancelMultiExpCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageCancelMultiExpCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageCancelMultiExpCmd, gateway_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageCancelMultiExpCmd, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageCancelMultiExpCmd, exp_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageCancelMultiExpCmd, multi_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageCancelMultiExpCmd, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageCancelMultiExpCmd, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageCancelMultiExpCmd, end_time_),
  };
  CGMMessageCancelMultiExpCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageCancelMultiExpCmd_descriptor_,
      CGMMessageCancelMultiExpCmd::default_instance_,
      CGMMessageCancelMultiExpCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageCancelMultiExpCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageCancelMultiExpCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageCancelMultiExpCmd));
  CGMMessageChangeMoneyCmd_descriptor_ = file->message_type(56);
  static const int CGMMessageChangeMoneyCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageChangeMoneyCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageChangeMoneyCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageChangeMoneyCmd, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageChangeMoneyCmd, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageChangeMoneyCmd, change_num_),
  };
  CGMMessageChangeMoneyCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageChangeMoneyCmd_descriptor_,
      CGMMessageChangeMoneyCmd::default_instance_,
      CGMMessageChangeMoneyCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageChangeMoneyCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageChangeMoneyCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageChangeMoneyCmd));
  CGMMessageChangeExpCmd_descriptor_ = file->message_type(57);
  static const int CGMMessageChangeExpCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageChangeExpCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageChangeExpCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageChangeExpCmd, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageChangeExpCmd, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageChangeExpCmd, change_num_),
  };
  CGMMessageChangeExpCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageChangeExpCmd_descriptor_,
      CGMMessageChangeExpCmd::default_instance_,
      CGMMessageChangeExpCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageChangeExpCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageChangeExpCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageChangeExpCmd));
  CGMMessageChangeItemCmd_descriptor_ = file->message_type(58);
  static const int CGMMessageChangeItemCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageChangeItemCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageChangeItemCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageChangeItemCmd, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageChangeItemCmd, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageChangeItemCmd, item_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageChangeItemCmd, item_num_),
  };
  CGMMessageChangeItemCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageChangeItemCmd_descriptor_,
      CGMMessageChangeItemCmd::default_instance_,
      CGMMessageChangeItemCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageChangeItemCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageChangeItemCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageChangeItemCmd));
  CGMMessageDeleteRoleCmd_descriptor_ = file->message_type(59);
  static const int CGMMessageDeleteRoleCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageDeleteRoleCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageDeleteRoleCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageDeleteRoleCmd, role_id_),
  };
  CGMMessageDeleteRoleCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageDeleteRoleCmd_descriptor_,
      CGMMessageDeleteRoleCmd::default_instance_,
      CGMMessageDeleteRoleCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageDeleteRoleCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageDeleteRoleCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageDeleteRoleCmd));
  CGMMessageClearBagCmd_descriptor_ = file->message_type(60);
  static const int CGMMessageClearBagCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageClearBagCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageClearBagCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageClearBagCmd, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageClearBagCmd, bag_name_),
  };
  CGMMessageClearBagCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageClearBagCmd_descriptor_,
      CGMMessageClearBagCmd::default_instance_,
      CGMMessageClearBagCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageClearBagCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageClearBagCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageClearBagCmd));
  CGMMessageChangePetCmd_descriptor_ = file->message_type(61);
  static const int CGMMessageChangePetCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageChangePetCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageChangePetCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageChangePetCmd, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageChangePetCmd, user_name_),
  };
  CGMMessageChangePetCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageChangePetCmd_descriptor_,
      CGMMessageChangePetCmd::default_instance_,
      CGMMessageChangePetCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageChangePetCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageChangePetCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageChangePetCmd));
  CGMMessageSetOLGMAccountCmd_descriptor_ = file->message_type(62);
  static const int CGMMessageSetOLGMAccountCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageSetOLGMAccountCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageSetOLGMAccountCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageSetOLGMAccountCmd, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageSetOLGMAccountCmd, password_),
  };
  CGMMessageSetOLGMAccountCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageSetOLGMAccountCmd_descriptor_,
      CGMMessageSetOLGMAccountCmd::default_instance_,
      CGMMessageSetOLGMAccountCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageSetOLGMAccountCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageSetOLGMAccountCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageSetOLGMAccountCmd));
  CGMMessageIbInfoCmd_descriptor_ = file->message_type(63);
  static const int CGMMessageIbInfoCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageIbInfoCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageIbInfoCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageIbInfoCmd, item_id_),
  };
  CGMMessageIbInfoCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageIbInfoCmd_descriptor_,
      CGMMessageIbInfoCmd::default_instance_,
      CGMMessageIbInfoCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageIbInfoCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageIbInfoCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageIbInfoCmd));
  PBIbItem_descriptor_ = file->message_type(64);
  static const int PBIbItem_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBIbItem, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBIbItem, item_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBIbItem, pay_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBIbItem, item_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBIbItem, item_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBIbItem, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBIbItem, discount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBIbItem, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBIbItem, sale_room_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBIbItem, on_sale_),
  };
  PBIbItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBIbItem_descriptor_,
      PBIbItem::default_instance_,
      PBIbItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBIbItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBIbItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBIbItem));
  CGMMessageIbInfoResult_descriptor_ = file->message_type(65);
  static const int CGMMessageIbInfoResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageIbInfoResult, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageIbInfoResult, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageIbInfoResult, isall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageIbInfoResult, ibitems_),
  };
  CGMMessageIbInfoResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageIbInfoResult_descriptor_,
      CGMMessageIbInfoResult::default_instance_,
      CGMMessageIbInfoResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageIbInfoResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageIbInfoResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageIbInfoResult));
  CGMMessageSetIbPriceCmd_descriptor_ = file->message_type(66);
  static const int CGMMessageSetIbPriceCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageSetIbPriceCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageSetIbPriceCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageSetIbPriceCmd, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageSetIbPriceCmd, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageSetIbPriceCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageSetIbPriceCmd, limit_num_),
  };
  CGMMessageSetIbPriceCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageSetIbPriceCmd_descriptor_,
      CGMMessageSetIbPriceCmd::default_instance_,
      CGMMessageSetIbPriceCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageSetIbPriceCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageSetIbPriceCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageSetIbPriceCmd));
  CGMMessageSetIbLocationCmd_descriptor_ = file->message_type(67);
  static const int CGMMessageSetIbLocationCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageSetIbLocationCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageSetIbLocationCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageSetIbLocationCmd, pos_),
  };
  CGMMessageSetIbLocationCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageSetIbLocationCmd_descriptor_,
      CGMMessageSetIbLocationCmd::default_instance_,
      CGMMessageSetIbLocationCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageSetIbLocationCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageSetIbLocationCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageSetIbLocationCmd));
  CGMMessageIbOnSaleCmd_descriptor_ = file->message_type(68);
  static const int CGMMessageIbOnSaleCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageIbOnSaleCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageIbOnSaleCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageIbOnSaleCmd, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageIbOnSaleCmd, pos_),
  };
  CGMMessageIbOnSaleCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageIbOnSaleCmd_descriptor_,
      CGMMessageIbOnSaleCmd::default_instance_,
      CGMMessageIbOnSaleCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageIbOnSaleCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageIbOnSaleCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageIbOnSaleCmd));
  CGMMessageIbNotSaleCmd_descriptor_ = file->message_type(69);
  static const int CGMMessageIbNotSaleCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageIbNotSaleCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageIbNotSaleCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageIbNotSaleCmd, item_id_),
  };
  CGMMessageIbNotSaleCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageIbNotSaleCmd_descriptor_,
      CGMMessageIbNotSaleCmd::default_instance_,
      CGMMessageIbNotSaleCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageIbNotSaleCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageIbNotSaleCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageIbNotSaleCmd));
  CGMMessageIbDescriptCmd_descriptor_ = file->message_type(70);
  static const int CGMMessageIbDescriptCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageIbDescriptCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageIbDescriptCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageIbDescriptCmd, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageIbDescriptCmd, description_),
  };
  CGMMessageIbDescriptCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageIbDescriptCmd_descriptor_,
      CGMMessageIbDescriptCmd::default_instance_,
      CGMMessageIbDescriptCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageIbDescriptCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageIbDescriptCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageIbDescriptCmd));
  CGMMessageIpBindCmd_descriptor_ = file->message_type(71);
  static const int CGMMessageIpBindCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageIpBindCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageIpBindCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageIpBindCmd, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageIpBindCmd, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageIpBindCmd, type_),
  };
  CGMMessageIpBindCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageIpBindCmd_descriptor_,
      CGMMessageIpBindCmd::default_instance_,
      CGMMessageIpBindCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageIpBindCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageIpBindCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageIpBindCmd));
  CGMMessageRoleProtoCmd_descriptor_ = file->message_type(72);
  static const int CGMMessageRoleProtoCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleProtoCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleProtoCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleProtoCmd, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleProtoCmd, field_name_),
  };
  CGMMessageRoleProtoCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageRoleProtoCmd_descriptor_,
      CGMMessageRoleProtoCmd::default_instance_,
      CGMMessageRoleProtoCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleProtoCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleProtoCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageRoleProtoCmd));
  CGMMessageRoleEquipmentCmd_descriptor_ = file->message_type(73);
  static const int CGMMessageRoleEquipmentCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleEquipmentCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleEquipmentCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleEquipmentCmd, role_id_),
  };
  CGMMessageRoleEquipmentCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageRoleEquipmentCmd_descriptor_,
      CGMMessageRoleEquipmentCmd::default_instance_,
      CGMMessageRoleEquipmentCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleEquipmentCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleEquipmentCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageRoleEquipmentCmd));
  CGMMessageRolePackInfoCmd_descriptor_ = file->message_type(74);
  static const int CGMMessageRolePackInfoCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRolePackInfoCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRolePackInfoCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRolePackInfoCmd, role_id_),
  };
  CGMMessageRolePackInfoCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageRolePackInfoCmd_descriptor_,
      CGMMessageRolePackInfoCmd::default_instance_,
      CGMMessageRolePackInfoCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRolePackInfoCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRolePackInfoCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageRolePackInfoCmd));
  CGMMessageRoleItemInPackCmd_descriptor_ = file->message_type(75);
  static const int CGMMessageRoleItemInPackCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleItemInPackCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleItemInPackCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleItemInPackCmd, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleItemInPackCmd, item_id_),
  };
  CGMMessageRoleItemInPackCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageRoleItemInPackCmd_descriptor_,
      CGMMessageRoleItemInPackCmd::default_instance_,
      CGMMessageRoleItemInPackCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleItemInPackCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleItemInPackCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageRoleItemInPackCmd));
  CGMMessageRoleSkillInfoCmd_descriptor_ = file->message_type(76);
  static const int CGMMessageRoleSkillInfoCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleSkillInfoCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleSkillInfoCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleSkillInfoCmd, role_id_),
  };
  CGMMessageRoleSkillInfoCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageRoleSkillInfoCmd_descriptor_,
      CGMMessageRoleSkillInfoCmd::default_instance_,
      CGMMessageRoleSkillInfoCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleSkillInfoCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleSkillInfoCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageRoleSkillInfoCmd));
  CGMMessageRoleSkillDetailCmd_descriptor_ = file->message_type(77);
  static const int CGMMessageRoleSkillDetailCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleSkillDetailCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleSkillDetailCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleSkillDetailCmd, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleSkillDetailCmd, skill_id_),
  };
  CGMMessageRoleSkillDetailCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageRoleSkillDetailCmd_descriptor_,
      CGMMessageRoleSkillDetailCmd::default_instance_,
      CGMMessageRoleSkillDetailCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleSkillDetailCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleSkillDetailCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageRoleSkillDetailCmd));
  CGMMessageRoleEquipmentResult_descriptor_ = file->message_type(78);
  static const int CGMMessageRoleEquipmentResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleEquipmentResult, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleEquipmentResult, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleEquipmentResult, proto_),
  };
  CGMMessageRoleEquipmentResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageRoleEquipmentResult_descriptor_,
      CGMMessageRoleEquipmentResult::default_instance_,
      CGMMessageRoleEquipmentResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleEquipmentResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleEquipmentResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageRoleEquipmentResult));
  CGMMessageRolePackInfoResult_descriptor_ = file->message_type(79);
  static const int CGMMessageRolePackInfoResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRolePackInfoResult, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRolePackInfoResult, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRolePackInfoResult, proto_),
  };
  CGMMessageRolePackInfoResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageRolePackInfoResult_descriptor_,
      CGMMessageRolePackInfoResult::default_instance_,
      CGMMessageRolePackInfoResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRolePackInfoResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRolePackInfoResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageRolePackInfoResult));
  CGMMessageRoleItemInPackResult_descriptor_ = file->message_type(80);
  static const int CGMMessageRoleItemInPackResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleItemInPackResult, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleItemInPackResult, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleItemInPackResult, proto_),
  };
  CGMMessageRoleItemInPackResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageRoleItemInPackResult_descriptor_,
      CGMMessageRoleItemInPackResult::default_instance_,
      CGMMessageRoleItemInPackResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleItemInPackResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleItemInPackResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageRoleItemInPackResult));
  CGMMessageRoleSkillInfoResult_descriptor_ = file->message_type(81);
  static const int CGMMessageRoleSkillInfoResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleSkillInfoResult, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleSkillInfoResult, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleSkillInfoResult, proto_),
  };
  CGMMessageRoleSkillInfoResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageRoleSkillInfoResult_descriptor_,
      CGMMessageRoleSkillInfoResult::default_instance_,
      CGMMessageRoleSkillInfoResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleSkillInfoResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleSkillInfoResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageRoleSkillInfoResult));
  CGMMessageRoleSkillDetailResult_descriptor_ = file->message_type(82);
  static const int CGMMessageRoleSkillDetailResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleSkillDetailResult, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleSkillDetailResult, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleSkillDetailResult, proto_),
  };
  CGMMessageRoleSkillDetailResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageRoleSkillDetailResult_descriptor_,
      CGMMessageRoleSkillDetailResult::default_instance_,
      CGMMessageRoleSkillDetailResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleSkillDetailResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleSkillDetailResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageRoleSkillDetailResult));
  CMessageActivityListRequest_descriptor_ = file->message_type(83);
  static const int CMessageActivityListRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageActivityListRequest, roleid_),
  };
  CMessageActivityListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageActivityListRequest_descriptor_,
      CMessageActivityListRequest::default_instance_,
      CMessageActivityListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageActivityListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageActivityListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageActivityListRequest));
  PBActivity_descriptor_ = file->message_type(84);
  static const int PBActivity_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivity, menuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivity, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivity, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivity, endtime_),
  };
  PBActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBActivity_descriptor_,
      PBActivity::default_instance_,
      PBActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBActivity));
  CMessageActivityListResponse_descriptor_ = file->message_type(85);
  static const int CMessageActivityListResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageActivityListResponse, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageActivityListResponse, activity_),
  };
  CMessageActivityListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageActivityListResponse_descriptor_,
      CMessageActivityListResponse::default_instance_,
      CMessageActivityListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageActivityListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageActivityListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageActivityListResponse));
  CMessageUserItemListRequest_descriptor_ = file->message_type(86);
  static const int CMessageUserItemListRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserItemListRequest, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserItemListRequest, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserItemListRequest, menuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserItemListRequest, rolelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserItemListRequest, rolemetier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserItemListRequest, rolegender_),
  };
  CMessageUserItemListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUserItemListRequest_descriptor_,
      CMessageUserItemListRequest::default_instance_,
      CMessageUserItemListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserItemListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserItemListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUserItemListRequest));
  PBActivityItem_descriptor_ = file->message_type(87);
  static const int PBActivityItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivityItem, itemcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivityItem, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivityItem, activityid_),
  };
  PBActivityItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBActivityItem_descriptor_,
      PBActivityItem::default_instance_,
      PBActivityItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivityItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivityItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBActivityItem));
  CMessageUserItemListResponse_descriptor_ = file->message_type(88);
  static const int CMessageUserItemListResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserItemListResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserItemListResponse, menuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserItemListResponse, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserItemListResponse, items_),
  };
  CMessageUserItemListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUserItemListResponse_descriptor_,
      CMessageUserItemListResponse::default_instance_,
      CMessageUserItemListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserItemListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserItemListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUserItemListResponse));
  CMessageUserItemMinusRequest_descriptor_ = file->message_type(89);
  static const int CMessageUserItemMinusRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserItemMinusRequest, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserItemMinusRequest, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserItemMinusRequest, activityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserItemMinusRequest, itemcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserItemMinusRequest, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserItemMinusRequest, rolelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserItemMinusRequest, rolemetier_),
  };
  CMessageUserItemMinusRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUserItemMinusRequest_descriptor_,
      CMessageUserItemMinusRequest::default_instance_,
      CMessageUserItemMinusRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserItemMinusRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserItemMinusRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUserItemMinusRequest));
  CMessageUserItemMinusResponse_descriptor_ = file->message_type(90);
  static const int CMessageUserItemMinusResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserItemMinusResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserItemMinusResponse, menuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserItemMinusResponse, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserItemMinusResponse, item_),
  };
  CMessageUserItemMinusResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUserItemMinusResponse_descriptor_,
      CMessageUserItemMinusResponse::default_instance_,
      CMessageUserItemMinusResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserItemMinusResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserItemMinusResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUserItemMinusResponse));
  CGMMessageRoleEquipmentDetailCmd_descriptor_ = file->message_type(91);
  static const int CGMMessageRoleEquipmentDetailCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleEquipmentDetailCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleEquipmentDetailCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleEquipmentDetailCmd, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleEquipmentDetailCmd, item_id_),
  };
  CGMMessageRoleEquipmentDetailCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageRoleEquipmentDetailCmd_descriptor_,
      CGMMessageRoleEquipmentDetailCmd::default_instance_,
      CGMMessageRoleEquipmentDetailCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleEquipmentDetailCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleEquipmentDetailCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageRoleEquipmentDetailCmd));
  CGMMessageRoleStorageDetailCmd_descriptor_ = file->message_type(92);
  static const int CGMMessageRoleStorageDetailCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleStorageDetailCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleStorageDetailCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleStorageDetailCmd, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleStorageDetailCmd, item_id_),
  };
  CGMMessageRoleStorageDetailCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageRoleStorageDetailCmd_descriptor_,
      CGMMessageRoleStorageDetailCmd::default_instance_,
      CGMMessageRoleStorageDetailCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleStorageDetailCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleStorageDetailCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageRoleStorageDetailCmd));
  CGMMessageRoleEquipmentDetailResult_descriptor_ = file->message_type(93);
  static const int CGMMessageRoleEquipmentDetailResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleEquipmentDetailResult, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleEquipmentDetailResult, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleEquipmentDetailResult, proto_),
  };
  CGMMessageRoleEquipmentDetailResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageRoleEquipmentDetailResult_descriptor_,
      CGMMessageRoleEquipmentDetailResult::default_instance_,
      CGMMessageRoleEquipmentDetailResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleEquipmentDetailResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleEquipmentDetailResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageRoleEquipmentDetailResult));
  CGMMessageRoleStorageDetailResult_descriptor_ = file->message_type(94);
  static const int CGMMessageRoleStorageDetailResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleStorageDetailResult, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleStorageDetailResult, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleStorageDetailResult, proto_),
  };
  CGMMessageRoleStorageDetailResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageRoleStorageDetailResult_descriptor_,
      CGMMessageRoleStorageDetailResult::default_instance_,
      CGMMessageRoleStorageDetailResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleStorageDetailResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleStorageDetailResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageRoleStorageDetailResult));
  PBSubjectAmount_descriptor_ = file->message_type(95);
  static const int PBSubjectAmount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSubjectAmount, subjectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSubjectAmount, amount_),
  };
  PBSubjectAmount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSubjectAmount_descriptor_,
      PBSubjectAmount::default_instance_,
      PBSubjectAmount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSubjectAmount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSubjectAmount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSubjectAmount));
  CMessageFangChenMiResponse_descriptor_ = file->message_type(96);
  static const int CMessageFangChenMiResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFangChenMiResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFangChenMiResponse, subjects_),
  };
  CMessageFangChenMiResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFangChenMiResponse_descriptor_,
      CMessageFangChenMiResponse::default_instance_,
      CMessageFangChenMiResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFangChenMiResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFangChenMiResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFangChenMiResponse));
  PBFangChenMi_descriptor_ = file->message_type(97);
  static const int PBFangChenMi_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFangChenMi, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFangChenMi, charlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFangChenMi, charmetier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFangChenMi, money1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFangChenMi, money2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFangChenMi, exp_),
  };
  PBFangChenMi_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBFangChenMi_descriptor_,
      PBFangChenMi::default_instance_,
      PBFangChenMi_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFangChenMi, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFangChenMi, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBFangChenMi));
  CMessageFangChenMiRequest_descriptor_ = file->message_type(98);
  static const int CMessageFangChenMiRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFangChenMiRequest, roledetail_),
  };
  CMessageFangChenMiRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFangChenMiRequest_descriptor_,
      CMessageFangChenMiRequest::default_instance_,
      CMessageFangChenMiRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFangChenMiRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFangChenMiRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFangChenMiRequest));
  CMessageFCMPlayerListNotify_descriptor_ = file->message_type(99);
  static const int CMessageFCMPlayerListNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFCMPlayerListNotify, reportplayer_),
  };
  CMessageFCMPlayerListNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFCMPlayerListNotify_descriptor_,
      CMessageFCMPlayerListNotify::default_instance_,
      CMessageFCMPlayerListNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFCMPlayerListNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFCMPlayerListNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFCMPlayerListNotify));
  CMessageFCMPlayerResetRequest_descriptor_ = file->message_type(100);
  static const int CMessageFCMPlayerResetRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFCMPlayerResetRequest, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFCMPlayerResetRequest, seconds_),
  };
  CMessageFCMPlayerResetRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFCMPlayerResetRequest_descriptor_,
      CMessageFCMPlayerResetRequest::default_instance_,
      CMessageFCMPlayerResetRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFCMPlayerResetRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFCMPlayerResetRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFCMPlayerResetRequest));
  CMessageChangeGateNotify_descriptor_ = file->message_type(101);
  static const int CMessageChangeGateNotify_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeGateNotify, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeGateNotify, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeGateNotify, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeGateNotify, param2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeGateNotify, param3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeGateNotify, param4_),
  };
  CMessageChangeGateNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeGateNotify_descriptor_,
      CMessageChangeGateNotify::default_instance_,
      CMessageChangeGateNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeGateNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeGateNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeGateNotify));
  CMessageResetRolePasswordRequest_descriptor_ = file->message_type(102);
  static const int CMessageResetRolePasswordRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageResetRolePasswordRequest, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageResetRolePasswordRequest, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageResetRolePasswordRequest, role_id_),
  };
  CMessageResetRolePasswordRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageResetRolePasswordRequest_descriptor_,
      CMessageResetRolePasswordRequest::default_instance_,
      CMessageResetRolePasswordRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageResetRolePasswordRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageResetRolePasswordRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageResetRolePasswordRequest));
  CMessageResetRolePasswordResponse_descriptor_ = file->message_type(103);
  static const int CMessageResetRolePasswordResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageResetRolePasswordResponse, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageResetRolePasswordResponse, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageResetRolePasswordResponse, errcode_),
  };
  CMessageResetRolePasswordResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageResetRolePasswordResponse_descriptor_,
      CMessageResetRolePasswordResponse::default_instance_,
      CMessageResetRolePasswordResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageResetRolePasswordResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageResetRolePasswordResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageResetRolePasswordResponse));
  CGMMessageRoleItemOperatedCmd_descriptor_ = file->message_type(104);
  static const int CGMMessageRoleItemOperatedCmd_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleItemOperatedCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleItemOperatedCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleItemOperatedCmd, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleItemOperatedCmd, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleItemOperatedCmd, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleItemOperatedCmd, item_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleItemOperatedCmd, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleItemOperatedCmd, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleItemOperatedCmd, page_),
  };
  CGMMessageRoleItemOperatedCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageRoleItemOperatedCmd_descriptor_,
      CGMMessageRoleItemOperatedCmd::default_instance_,
      CGMMessageRoleItemOperatedCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleItemOperatedCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleItemOperatedCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageRoleItemOperatedCmd));
  CGMMessageRoleMoneyOperateCmd_descriptor_ = file->message_type(105);
  static const int CGMMessageRoleMoneyOperateCmd_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleMoneyOperateCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleMoneyOperateCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleMoneyOperateCmd, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleMoneyOperateCmd, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleMoneyOperateCmd, item_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleMoneyOperateCmd, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleMoneyOperateCmd, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleMoneyOperateCmd, page_),
  };
  CGMMessageRoleMoneyOperateCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageRoleMoneyOperateCmd_descriptor_,
      CGMMessageRoleMoneyOperateCmd::default_instance_,
      CGMMessageRoleMoneyOperateCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleMoneyOperateCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleMoneyOperateCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageRoleMoneyOperateCmd));
  CGMMessageRoleExpCmd_descriptor_ = file->message_type(106);
  static const int CGMMessageRoleExpCmd_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleExpCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleExpCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleExpCmd, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleExpCmd, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleExpCmd, exp_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleExpCmd, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleExpCmd, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleExpCmd, page_),
  };
  CGMMessageRoleExpCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageRoleExpCmd_descriptor_,
      CGMMessageRoleExpCmd::default_instance_,
      CGMMessageRoleExpCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleExpCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleExpCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageRoleExpCmd));
  CGMMessageRoleItemLevelUpCmd_descriptor_ = file->message_type(107);
  static const int CGMMessageRoleItemLevelUpCmd_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleItemLevelUpCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleItemLevelUpCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleItemLevelUpCmd, page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleItemLevelUpCmd, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleItemLevelUpCmd, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleItemLevelUpCmd, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleItemLevelUpCmd, end_time_),
  };
  CGMMessageRoleItemLevelUpCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageRoleItemLevelUpCmd_descriptor_,
      CGMMessageRoleItemLevelUpCmd::default_instance_,
      CGMMessageRoleItemLevelUpCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleItemLevelUpCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleItemLevelUpCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageRoleItemLevelUpCmd));
  CGMMessageFreezeMacCmd_descriptor_ = file->message_type(108);
  static const int CGMMessageFreezeMacCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageFreezeMacCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageFreezeMacCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageFreezeMacCmd, mac_),
  };
  CGMMessageFreezeMacCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageFreezeMacCmd_descriptor_,
      CGMMessageFreezeMacCmd::default_instance_,
      CGMMessageFreezeMacCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageFreezeMacCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageFreezeMacCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageFreezeMacCmd));
  CGMMessageUnFreezeMacCmd_descriptor_ = file->message_type(109);
  static const int CGMMessageUnFreezeMacCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUnFreezeMacCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUnFreezeMacCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUnFreezeMacCmd, mac_),
  };
  CGMMessageUnFreezeMacCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageUnFreezeMacCmd_descriptor_,
      CGMMessageUnFreezeMacCmd::default_instance_,
      CGMMessageUnFreezeMacCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUnFreezeMacCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUnFreezeMacCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageUnFreezeMacCmd));
  CGMMessageCorpsTotalCmd_descriptor_ = file->message_type(110);
  static const int CGMMessageCorpsTotalCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageCorpsTotalCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageCorpsTotalCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageCorpsTotalCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageCorpsTotalCmd, page_),
  };
  CGMMessageCorpsTotalCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageCorpsTotalCmd_descriptor_,
      CGMMessageCorpsTotalCmd::default_instance_,
      CGMMessageCorpsTotalCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageCorpsTotalCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageCorpsTotalCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageCorpsTotalCmd));
  CGMMessageCorpsDetailCmd_descriptor_ = file->message_type(111);
  static const int CGMMessageCorpsDetailCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageCorpsDetailCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageCorpsDetailCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageCorpsDetailCmd, corps_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageCorpsDetailCmd, type_),
  };
  CGMMessageCorpsDetailCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageCorpsDetailCmd_descriptor_,
      CGMMessageCorpsDetailCmd::default_instance_,
      CGMMessageCorpsDetailCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageCorpsDetailCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageCorpsDetailCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageCorpsDetailCmd));
  CGMMessageCorpsInfoCmd_descriptor_ = file->message_type(112);
  static const int CGMMessageCorpsInfoCmd_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageCorpsInfoCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageCorpsInfoCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageCorpsInfoCmd, corps_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageCorpsInfoCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageCorpsInfoCmd, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageCorpsInfoCmd, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageCorpsInfoCmd, page_),
  };
  CGMMessageCorpsInfoCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageCorpsInfoCmd_descriptor_,
      CGMMessageCorpsInfoCmd::default_instance_,
      CGMMessageCorpsInfoCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageCorpsInfoCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageCorpsInfoCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageCorpsInfoCmd));
  CGMMessageRoleInfoCmd_descriptor_ = file->message_type(113);
  static const int CGMMessageRoleInfoCmd_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleInfoCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleInfoCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleInfoCmd, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleInfoCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleInfoCmd, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleInfoCmd, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleInfoCmd, page_),
  };
  CGMMessageRoleInfoCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageRoleInfoCmd_descriptor_,
      CGMMessageRoleInfoCmd::default_instance_,
      CGMMessageRoleInfoCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleInfoCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageRoleInfoCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageRoleInfoCmd));
  CGMMsgRoleItemRecoveryCmd_descriptor_ = file->message_type(114);
  static const int CGMMsgRoleItemRecoveryCmd_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMsgRoleItemRecoveryCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMsgRoleItemRecoveryCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMsgRoleItemRecoveryCmd, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMsgRoleItemRecoveryCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMsgRoleItemRecoveryCmd, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMsgRoleItemRecoveryCmd, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMsgRoleItemRecoveryCmd, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMsgRoleItemRecoveryCmd, page_),
  };
  CGMMsgRoleItemRecoveryCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMsgRoleItemRecoveryCmd_descriptor_,
      CGMMsgRoleItemRecoveryCmd::default_instance_,
      CGMMsgRoleItemRecoveryCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMsgRoleItemRecoveryCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMsgRoleItemRecoveryCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMsgRoleItemRecoveryCmd));
  CMessageOfflineSysMailNotify_descriptor_ = file->message_type(115);
  static const int CMessageOfflineSysMailNotify_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOfflineSysMailNotify, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOfflineSysMailNotify, mailtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOfflineSysMailNotify, attachmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOfflineSysMailNotify, attachitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOfflineSysMailNotify, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOfflineSysMailNotify, fd_),
  };
  CMessageOfflineSysMailNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageOfflineSysMailNotify_descriptor_,
      CMessageOfflineSysMailNotify::default_instance_,
      CMessageOfflineSysMailNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOfflineSysMailNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOfflineSysMailNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageOfflineSysMailNotify));
  CGMMessageSqlQueryResult_descriptor_ = file->message_type(116);
  static const int CGMMessageSqlQueryResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageSqlQueryResult, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageSqlQueryResult, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageSqlQueryResult, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageSqlQueryResult, sqlresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageSqlQueryResult, page_),
  };
  CGMMessageSqlQueryResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageSqlQueryResult_descriptor_,
      CGMMessageSqlQueryResult::default_instance_,
      CGMMessageSqlQueryResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageSqlQueryResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageSqlQueryResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageSqlQueryResult));
  CGMMessageUserInfoByIPCmd_descriptor_ = file->message_type(117);
  static const int CGMMessageUserInfoByIPCmd_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserInfoByIPCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserInfoByIPCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserInfoByIPCmd, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserInfoByIPCmd, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserInfoByIPCmd, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserInfoByIPCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserInfoByIPCmd, page_),
  };
  CGMMessageUserInfoByIPCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageUserInfoByIPCmd_descriptor_,
      CGMMessageUserInfoByIPCmd::default_instance_,
      CGMMessageUserInfoByIPCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserInfoByIPCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageUserInfoByIPCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageUserInfoByIPCmd));
  PlayerInfo_descriptor_ = file->message_type(118);
  static const int PlayerInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, account_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, login_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, role_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, metier_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, cpu_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, disk_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, mac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, line_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, game_id_),
  };
  PlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerInfo_descriptor_,
      PlayerInfo::default_instance_,
      PlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerInfo));
  IPInfo_descriptor_ = file->message_type(119);
  static const int IPInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPInfo, role_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPInfo, player_info_),
  };
  IPInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IPInfo_descriptor_,
      IPInfo::default_instance_,
      IPInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IPInfo));
  CGMMsgUserInfoByIPResult_descriptor_ = file->message_type(120);
  static const int CGMMsgUserInfoByIPResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMsgUserInfoByIPResult, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMsgUserInfoByIPResult, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMsgUserInfoByIPResult, ipinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMsgUserInfoByIPResult, zeroip_),
  };
  CGMMsgUserInfoByIPResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMsgUserInfoByIPResult_descriptor_,
      CGMMsgUserInfoByIPResult::default_instance_,
      CGMMsgUserInfoByIPResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMsgUserInfoByIPResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMsgUserInfoByIPResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMsgUserInfoByIPResult));
  CGMMessageQueryRoleMailCmd_descriptor_ = file->message_type(121);
  static const int CGMMessageQueryRoleMailCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageQueryRoleMailCmd, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageQueryRoleMailCmd, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageQueryRoleMailCmd, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageQueryRoleMailCmd, page_),
  };
  CGMMessageQueryRoleMailCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMMessageQueryRoleMailCmd_descriptor_,
      CGMMessageQueryRoleMailCmd::default_instance_,
      CGMMessageQueryRoleMailCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageQueryRoleMailCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMMessageQueryRoleMailCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMMessageQueryRoleMailCmd));
  EMGMCmdMessageID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gmmessage_5fpb_2ehxx);
}

void protobuf_RegisterTypes() {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageKickRoleCmd_descriptor_, &CGMMessageKickRoleCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageCmdNormalResult_descriptor_, &CGMMessageCmdNormalResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageRoleDetailCmd_descriptor_, &CGMMessageRoleDetailCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBRoleInfo_descriptor_, &PBRoleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageRoleDetailResult_descriptor_, &CGMMessageRoleDetailResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageUserStorageInfoCmd_descriptor_, &CGMMessageUserStorageInfoCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageUserStorageInfoResult_descriptor_, &CGMMessageUserStorageInfoResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageRoleLocationCmd_descriptor_, &CGMMessageRoleLocationCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageRoleLocationResult_descriptor_, &CGMMessageRoleLocationResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageUserLevelInfoCmd_descriptor_, &CGMMessageUserLevelInfoCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBRoleUpgradeInfo_descriptor_, &PBRoleUpgradeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageUserLevelInfoResult_descriptor_, &CGMMessageUserLevelInfoResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageUserSocialInfoCmd_descriptor_, &CGMMessageUserSocialInfoCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageUserSocialInfoResult_descriptor_, &CGMMessageUserSocialInfoResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageGoodsHistoryToNPCCmd_descriptor_, &CGMMessageGoodsHistoryToNPCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemExchange2Npc_descriptor_, &PBItemExchange2Npc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageGoodsHistoryToNPCResult_descriptor_, &CGMMessageGoodsHistoryToNPCResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageGoodsHistoryFromNPCCmd_descriptor_, &CGMMessageGoodsHistoryFromNPCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageGoodsHistoryFromNPCResult_descriptor_, &CGMMessageGoodsHistoryFromNPCResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageGoodsHistoryBetweenUsersCmd_descriptor_, &CGMMessageGoodsHistoryBetweenUsersCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemExchange2Player_descriptor_, &PBItemExchange2Player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageGoodsHistoryBetweenUsersResult_descriptor_, &CGMMessageGoodsHistoryBetweenUsersResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageGoodsHistoryCmd_descriptor_, &CGMMessageGoodsHistoryCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemAction_descriptor_, &PBItemAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageGoodsHistoryResult_descriptor_, &CGMMessageGoodsHistoryResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessagePetHistoryCmd_descriptor_, &CGMMessagePetHistoryCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPetHistory_descriptor_, &PBPetHistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessagePetHistoryResult_descriptor_, &CGMMessagePetHistoryResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageOperationDetailCmd_descriptor_, &CGMMessageOperationDetailCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageNPCDetailCmd_descriptor_, &CGMMessageNPCDetailCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBNPCDetail_descriptor_, &PBNPCDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageNPCDetailResult_descriptor_, &CGMMessageNPCDetailResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageGoodsDropLogCmd_descriptor_, &CGMMessageGoodsDropLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGoodsDropLog_descriptor_, &PBGoodsDropLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageGoodsDropLogResult_descriptor_, &CGMMessageGoodsDropLogResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageTaskInfoCmd_descriptor_, &CGMMessageTaskInfoCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTaskInfo_descriptor_, &PBTaskInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageTaskInfoResult_descriptor_, &CGMMessageTaskInfoResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageLoginInfoCmd_descriptor_, &CGMMessageLoginInfoCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBLoginInfo_descriptor_, &PBLoginInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageLoginInfoResult_descriptor_, &CGMMessageLoginInfoResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageShutUpCmd_descriptor_, &CGMMessageShutUpCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageCancelShutUpCmd_descriptor_, &CGMMessageCancelShutUpCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageFreezeAccountCmd_descriptor_, &CGMMessageFreezeAccountCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageFreezeAccountBatCmd_descriptor_, &CGMMessageFreezeAccountBatCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageUnFreezeAccountCmd_descriptor_, &CGMMessageUnFreezeAccountCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageTrusteeUserCmd_descriptor_, &CGMMessageTrusteeUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageUnTrusteeUserCmd_descriptor_, &CGMMessageUnTrusteeUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageMoveRoleCmd_descriptor_, &CGMMessageMoveRoleCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageEndTaskCmd_descriptor_, &CGMMessageEndTaskCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageTrusteeStorageCmd_descriptor_, &CGMMessageTrusteeStorageCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageUnTrusteeStorageCmd_descriptor_, &CGMMessageUnTrusteeStorageCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageRecoverRoleCmd_descriptor_, &CGMMessageRecoverRoleCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessagePostBulletinCmd_descriptor_, &CGMMessagePostBulletinCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageMultiExpCmd_descriptor_, &CGMMessageMultiExpCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageCancelMultiExpCmd_descriptor_, &CGMMessageCancelMultiExpCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageChangeMoneyCmd_descriptor_, &CGMMessageChangeMoneyCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageChangeExpCmd_descriptor_, &CGMMessageChangeExpCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageChangeItemCmd_descriptor_, &CGMMessageChangeItemCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageDeleteRoleCmd_descriptor_, &CGMMessageDeleteRoleCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageClearBagCmd_descriptor_, &CGMMessageClearBagCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageChangePetCmd_descriptor_, &CGMMessageChangePetCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageSetOLGMAccountCmd_descriptor_, &CGMMessageSetOLGMAccountCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageIbInfoCmd_descriptor_, &CGMMessageIbInfoCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBIbItem_descriptor_, &PBIbItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageIbInfoResult_descriptor_, &CGMMessageIbInfoResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageSetIbPriceCmd_descriptor_, &CGMMessageSetIbPriceCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageSetIbLocationCmd_descriptor_, &CGMMessageSetIbLocationCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageIbOnSaleCmd_descriptor_, &CGMMessageIbOnSaleCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageIbNotSaleCmd_descriptor_, &CGMMessageIbNotSaleCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageIbDescriptCmd_descriptor_, &CGMMessageIbDescriptCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageIpBindCmd_descriptor_, &CGMMessageIpBindCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageRoleProtoCmd_descriptor_, &CGMMessageRoleProtoCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageRoleEquipmentCmd_descriptor_, &CGMMessageRoleEquipmentCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageRolePackInfoCmd_descriptor_, &CGMMessageRolePackInfoCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageRoleItemInPackCmd_descriptor_, &CGMMessageRoleItemInPackCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageRoleSkillInfoCmd_descriptor_, &CGMMessageRoleSkillInfoCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageRoleSkillDetailCmd_descriptor_, &CGMMessageRoleSkillDetailCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageRoleEquipmentResult_descriptor_, &CGMMessageRoleEquipmentResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageRolePackInfoResult_descriptor_, &CGMMessageRolePackInfoResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageRoleItemInPackResult_descriptor_, &CGMMessageRoleItemInPackResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageRoleSkillInfoResult_descriptor_, &CGMMessageRoleSkillInfoResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageRoleSkillDetailResult_descriptor_, &CGMMessageRoleSkillDetailResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageActivityListRequest_descriptor_, &CMessageActivityListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBActivity_descriptor_, &PBActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageActivityListResponse_descriptor_, &CMessageActivityListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUserItemListRequest_descriptor_, &CMessageUserItemListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBActivityItem_descriptor_, &PBActivityItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUserItemListResponse_descriptor_, &CMessageUserItemListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUserItemMinusRequest_descriptor_, &CMessageUserItemMinusRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUserItemMinusResponse_descriptor_, &CMessageUserItemMinusResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageRoleEquipmentDetailCmd_descriptor_, &CGMMessageRoleEquipmentDetailCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageRoleStorageDetailCmd_descriptor_, &CGMMessageRoleStorageDetailCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageRoleEquipmentDetailResult_descriptor_, &CGMMessageRoleEquipmentDetailResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageRoleStorageDetailResult_descriptor_, &CGMMessageRoleStorageDetailResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSubjectAmount_descriptor_, &PBSubjectAmount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFangChenMiResponse_descriptor_, &CMessageFangChenMiResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBFangChenMi_descriptor_, &PBFangChenMi::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFangChenMiRequest_descriptor_, &CMessageFangChenMiRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFCMPlayerListNotify_descriptor_, &CMessageFCMPlayerListNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFCMPlayerResetRequest_descriptor_, &CMessageFCMPlayerResetRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeGateNotify_descriptor_, &CMessageChangeGateNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageResetRolePasswordRequest_descriptor_, &CMessageResetRolePasswordRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageResetRolePasswordResponse_descriptor_, &CMessageResetRolePasswordResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageRoleItemOperatedCmd_descriptor_, &CGMMessageRoleItemOperatedCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageRoleMoneyOperateCmd_descriptor_, &CGMMessageRoleMoneyOperateCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageRoleExpCmd_descriptor_, &CGMMessageRoleExpCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageRoleItemLevelUpCmd_descriptor_, &CGMMessageRoleItemLevelUpCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageFreezeMacCmd_descriptor_, &CGMMessageFreezeMacCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageUnFreezeMacCmd_descriptor_, &CGMMessageUnFreezeMacCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageCorpsTotalCmd_descriptor_, &CGMMessageCorpsTotalCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageCorpsDetailCmd_descriptor_, &CGMMessageCorpsDetailCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageCorpsInfoCmd_descriptor_, &CGMMessageCorpsInfoCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageRoleInfoCmd_descriptor_, &CGMMessageRoleInfoCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMsgRoleItemRecoveryCmd_descriptor_, &CGMMsgRoleItemRecoveryCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageOfflineSysMailNotify_descriptor_, &CMessageOfflineSysMailNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageSqlQueryResult_descriptor_, &CGMMessageSqlQueryResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageUserInfoByIPCmd_descriptor_, &CGMMessageUserInfoByIPCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerInfo_descriptor_, &PlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IPInfo_descriptor_, &IPInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMsgUserInfoByIPResult_descriptor_, &CGMMsgUserInfoByIPResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMMessageQueryRoleMailCmd_descriptor_, &CGMMessageQueryRoleMailCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gmmessage_5fpb_2ehxx() {
  delete CGMMessageKickRoleCmd::default_instance_;
  delete CGMMessageKickRoleCmd_reflection_;
  delete CGMMessageCmdNormalResult::default_instance_;
  delete CGMMessageCmdNormalResult_reflection_;
  delete CGMMessageRoleDetailCmd::default_instance_;
  delete CGMMessageRoleDetailCmd_reflection_;
  delete PBRoleInfo::default_instance_;
  delete PBRoleInfo_reflection_;
  delete CGMMessageRoleDetailResult::default_instance_;
  delete CGMMessageRoleDetailResult_reflection_;
  delete CGMMessageUserStorageInfoCmd::default_instance_;
  delete CGMMessageUserStorageInfoCmd_reflection_;
  delete CGMMessageUserStorageInfoResult::default_instance_;
  delete CGMMessageUserStorageInfoResult_reflection_;
  delete CGMMessageRoleLocationCmd::default_instance_;
  delete CGMMessageRoleLocationCmd_reflection_;
  delete CGMMessageRoleLocationResult::default_instance_;
  delete CGMMessageRoleLocationResult_reflection_;
  delete CGMMessageUserLevelInfoCmd::default_instance_;
  delete CGMMessageUserLevelInfoCmd_reflection_;
  delete PBRoleUpgradeInfo::default_instance_;
  delete PBRoleUpgradeInfo_reflection_;
  delete CGMMessageUserLevelInfoResult::default_instance_;
  delete CGMMessageUserLevelInfoResult_reflection_;
  delete CGMMessageUserSocialInfoCmd::default_instance_;
  delete CGMMessageUserSocialInfoCmd_reflection_;
  delete CGMMessageUserSocialInfoResult::default_instance_;
  delete CGMMessageUserSocialInfoResult_reflection_;
  delete CGMMessageGoodsHistoryToNPCCmd::default_instance_;
  delete CGMMessageGoodsHistoryToNPCCmd_reflection_;
  delete PBItemExchange2Npc::default_instance_;
  delete PBItemExchange2Npc_reflection_;
  delete CGMMessageGoodsHistoryToNPCResult::default_instance_;
  delete CGMMessageGoodsHistoryToNPCResult_reflection_;
  delete CGMMessageGoodsHistoryFromNPCCmd::default_instance_;
  delete CGMMessageGoodsHistoryFromNPCCmd_reflection_;
  delete CGMMessageGoodsHistoryFromNPCResult::default_instance_;
  delete CGMMessageGoodsHistoryFromNPCResult_reflection_;
  delete CGMMessageGoodsHistoryBetweenUsersCmd::default_instance_;
  delete CGMMessageGoodsHistoryBetweenUsersCmd_reflection_;
  delete PBItemExchange2Player::default_instance_;
  delete PBItemExchange2Player_reflection_;
  delete CGMMessageGoodsHistoryBetweenUsersResult::default_instance_;
  delete CGMMessageGoodsHistoryBetweenUsersResult_reflection_;
  delete CGMMessageGoodsHistoryCmd::default_instance_;
  delete CGMMessageGoodsHistoryCmd_reflection_;
  delete PBItemAction::default_instance_;
  delete PBItemAction_reflection_;
  delete CGMMessageGoodsHistoryResult::default_instance_;
  delete CGMMessageGoodsHistoryResult_reflection_;
  delete CGMMessagePetHistoryCmd::default_instance_;
  delete CGMMessagePetHistoryCmd_reflection_;
  delete PBPetHistory::default_instance_;
  delete PBPetHistory_reflection_;
  delete CGMMessagePetHistoryResult::default_instance_;
  delete CGMMessagePetHistoryResult_reflection_;
  delete CGMMessageOperationDetailCmd::default_instance_;
  delete CGMMessageOperationDetailCmd_reflection_;
  delete CGMMessageNPCDetailCmd::default_instance_;
  delete CGMMessageNPCDetailCmd_reflection_;
  delete PBNPCDetail::default_instance_;
  delete PBNPCDetail_reflection_;
  delete CGMMessageNPCDetailResult::default_instance_;
  delete CGMMessageNPCDetailResult_reflection_;
  delete CGMMessageGoodsDropLogCmd::default_instance_;
  delete CGMMessageGoodsDropLogCmd_reflection_;
  delete PBGoodsDropLog::default_instance_;
  delete PBGoodsDropLog_reflection_;
  delete CGMMessageGoodsDropLogResult::default_instance_;
  delete CGMMessageGoodsDropLogResult_reflection_;
  delete CGMMessageTaskInfoCmd::default_instance_;
  delete CGMMessageTaskInfoCmd_reflection_;
  delete PBTaskInfo::default_instance_;
  delete PBTaskInfo_reflection_;
  delete CGMMessageTaskInfoResult::default_instance_;
  delete CGMMessageTaskInfoResult_reflection_;
  delete CGMMessageLoginInfoCmd::default_instance_;
  delete CGMMessageLoginInfoCmd_reflection_;
  delete PBLoginInfo::default_instance_;
  delete PBLoginInfo_reflection_;
  delete CGMMessageLoginInfoResult::default_instance_;
  delete CGMMessageLoginInfoResult_reflection_;
  delete CGMMessageShutUpCmd::default_instance_;
  delete CGMMessageShutUpCmd_reflection_;
  delete CGMMessageCancelShutUpCmd::default_instance_;
  delete CGMMessageCancelShutUpCmd_reflection_;
  delete CGMMessageFreezeAccountCmd::default_instance_;
  delete CGMMessageFreezeAccountCmd_reflection_;
  delete CGMMessageFreezeAccountBatCmd::default_instance_;
  delete CGMMessageFreezeAccountBatCmd_reflection_;
  delete CGMMessageUnFreezeAccountCmd::default_instance_;
  delete CGMMessageUnFreezeAccountCmd_reflection_;
  delete CGMMessageTrusteeUserCmd::default_instance_;
  delete CGMMessageTrusteeUserCmd_reflection_;
  delete CGMMessageUnTrusteeUserCmd::default_instance_;
  delete CGMMessageUnTrusteeUserCmd_reflection_;
  delete CGMMessageMoveRoleCmd::default_instance_;
  delete CGMMessageMoveRoleCmd_reflection_;
  delete CGMMessageEndTaskCmd::default_instance_;
  delete CGMMessageEndTaskCmd_reflection_;
  delete CGMMessageTrusteeStorageCmd::default_instance_;
  delete CGMMessageTrusteeStorageCmd_reflection_;
  delete CGMMessageUnTrusteeStorageCmd::default_instance_;
  delete CGMMessageUnTrusteeStorageCmd_reflection_;
  delete CGMMessageRecoverRoleCmd::default_instance_;
  delete CGMMessageRecoverRoleCmd_reflection_;
  delete CGMMessagePostBulletinCmd::default_instance_;
  delete CGMMessagePostBulletinCmd_reflection_;
  delete CGMMessageMultiExpCmd::default_instance_;
  delete CGMMessageMultiExpCmd_reflection_;
  delete CGMMessageCancelMultiExpCmd::default_instance_;
  delete CGMMessageCancelMultiExpCmd_reflection_;
  delete CGMMessageChangeMoneyCmd::default_instance_;
  delete CGMMessageChangeMoneyCmd_reflection_;
  delete CGMMessageChangeExpCmd::default_instance_;
  delete CGMMessageChangeExpCmd_reflection_;
  delete CGMMessageChangeItemCmd::default_instance_;
  delete CGMMessageChangeItemCmd_reflection_;
  delete CGMMessageDeleteRoleCmd::default_instance_;
  delete CGMMessageDeleteRoleCmd_reflection_;
  delete CGMMessageClearBagCmd::default_instance_;
  delete CGMMessageClearBagCmd_reflection_;
  delete CGMMessageChangePetCmd::default_instance_;
  delete CGMMessageChangePetCmd_reflection_;
  delete CGMMessageSetOLGMAccountCmd::default_instance_;
  delete CGMMessageSetOLGMAccountCmd_reflection_;
  delete CGMMessageIbInfoCmd::default_instance_;
  delete CGMMessageIbInfoCmd_reflection_;
  delete PBIbItem::default_instance_;
  delete PBIbItem_reflection_;
  delete CGMMessageIbInfoResult::default_instance_;
  delete CGMMessageIbInfoResult_reflection_;
  delete CGMMessageSetIbPriceCmd::default_instance_;
  delete CGMMessageSetIbPriceCmd_reflection_;
  delete CGMMessageSetIbLocationCmd::default_instance_;
  delete CGMMessageSetIbLocationCmd_reflection_;
  delete CGMMessageIbOnSaleCmd::default_instance_;
  delete CGMMessageIbOnSaleCmd_reflection_;
  delete CGMMessageIbNotSaleCmd::default_instance_;
  delete CGMMessageIbNotSaleCmd_reflection_;
  delete CGMMessageIbDescriptCmd::default_instance_;
  delete CGMMessageIbDescriptCmd_reflection_;
  delete CGMMessageIpBindCmd::default_instance_;
  delete CGMMessageIpBindCmd_reflection_;
  delete CGMMessageRoleProtoCmd::default_instance_;
  delete CGMMessageRoleProtoCmd_reflection_;
  delete CGMMessageRoleEquipmentCmd::default_instance_;
  delete CGMMessageRoleEquipmentCmd_reflection_;
  delete CGMMessageRolePackInfoCmd::default_instance_;
  delete CGMMessageRolePackInfoCmd_reflection_;
  delete CGMMessageRoleItemInPackCmd::default_instance_;
  delete CGMMessageRoleItemInPackCmd_reflection_;
  delete CGMMessageRoleSkillInfoCmd::default_instance_;
  delete CGMMessageRoleSkillInfoCmd_reflection_;
  delete CGMMessageRoleSkillDetailCmd::default_instance_;
  delete CGMMessageRoleSkillDetailCmd_reflection_;
  delete CGMMessageRoleEquipmentResult::default_instance_;
  delete CGMMessageRoleEquipmentResult_reflection_;
  delete CGMMessageRolePackInfoResult::default_instance_;
  delete CGMMessageRolePackInfoResult_reflection_;
  delete CGMMessageRoleItemInPackResult::default_instance_;
  delete CGMMessageRoleItemInPackResult_reflection_;
  delete CGMMessageRoleSkillInfoResult::default_instance_;
  delete CGMMessageRoleSkillInfoResult_reflection_;
  delete CGMMessageRoleSkillDetailResult::default_instance_;
  delete CGMMessageRoleSkillDetailResult_reflection_;
  delete CMessageActivityListRequest::default_instance_;
  delete CMessageActivityListRequest_reflection_;
  delete PBActivity::default_instance_;
  delete PBActivity_reflection_;
  delete CMessageActivityListResponse::default_instance_;
  delete CMessageActivityListResponse_reflection_;
  delete CMessageUserItemListRequest::default_instance_;
  delete CMessageUserItemListRequest_reflection_;
  delete PBActivityItem::default_instance_;
  delete PBActivityItem_reflection_;
  delete CMessageUserItemListResponse::default_instance_;
  delete CMessageUserItemListResponse_reflection_;
  delete CMessageUserItemMinusRequest::default_instance_;
  delete CMessageUserItemMinusRequest_reflection_;
  delete CMessageUserItemMinusResponse::default_instance_;
  delete CMessageUserItemMinusResponse_reflection_;
  delete CGMMessageRoleEquipmentDetailCmd::default_instance_;
  delete CGMMessageRoleEquipmentDetailCmd_reflection_;
  delete CGMMessageRoleStorageDetailCmd::default_instance_;
  delete CGMMessageRoleStorageDetailCmd_reflection_;
  delete CGMMessageRoleEquipmentDetailResult::default_instance_;
  delete CGMMessageRoleEquipmentDetailResult_reflection_;
  delete CGMMessageRoleStorageDetailResult::default_instance_;
  delete CGMMessageRoleStorageDetailResult_reflection_;
  delete PBSubjectAmount::default_instance_;
  delete PBSubjectAmount_reflection_;
  delete CMessageFangChenMiResponse::default_instance_;
  delete CMessageFangChenMiResponse_reflection_;
  delete PBFangChenMi::default_instance_;
  delete PBFangChenMi_reflection_;
  delete CMessageFangChenMiRequest::default_instance_;
  delete CMessageFangChenMiRequest_reflection_;
  delete CMessageFCMPlayerListNotify::default_instance_;
  delete CMessageFCMPlayerListNotify_reflection_;
  delete CMessageFCMPlayerResetRequest::default_instance_;
  delete CMessageFCMPlayerResetRequest_reflection_;
  delete CMessageChangeGateNotify::default_instance_;
  delete CMessageChangeGateNotify_reflection_;
  delete CMessageResetRolePasswordRequest::default_instance_;
  delete CMessageResetRolePasswordRequest_reflection_;
  delete CMessageResetRolePasswordResponse::default_instance_;
  delete CMessageResetRolePasswordResponse_reflection_;
  delete CGMMessageRoleItemOperatedCmd::default_instance_;
  delete CGMMessageRoleItemOperatedCmd_reflection_;
  delete CGMMessageRoleMoneyOperateCmd::default_instance_;
  delete CGMMessageRoleMoneyOperateCmd_reflection_;
  delete CGMMessageRoleExpCmd::default_instance_;
  delete CGMMessageRoleExpCmd_reflection_;
  delete CGMMessageRoleItemLevelUpCmd::default_instance_;
  delete CGMMessageRoleItemLevelUpCmd_reflection_;
  delete CGMMessageFreezeMacCmd::default_instance_;
  delete CGMMessageFreezeMacCmd_reflection_;
  delete CGMMessageUnFreezeMacCmd::default_instance_;
  delete CGMMessageUnFreezeMacCmd_reflection_;
  delete CGMMessageCorpsTotalCmd::default_instance_;
  delete CGMMessageCorpsTotalCmd_reflection_;
  delete CGMMessageCorpsDetailCmd::default_instance_;
  delete CGMMessageCorpsDetailCmd_reflection_;
  delete CGMMessageCorpsInfoCmd::default_instance_;
  delete CGMMessageCorpsInfoCmd_reflection_;
  delete CGMMessageRoleInfoCmd::default_instance_;
  delete CGMMessageRoleInfoCmd_reflection_;
  delete CGMMsgRoleItemRecoveryCmd::default_instance_;
  delete CGMMsgRoleItemRecoveryCmd_reflection_;
  delete CMessageOfflineSysMailNotify::default_instance_;
  delete CMessageOfflineSysMailNotify_reflection_;
  delete CGMMessageSqlQueryResult::default_instance_;
  delete CGMMessageSqlQueryResult_reflection_;
  delete CGMMessageUserInfoByIPCmd::default_instance_;
  delete CGMMessageUserInfoByIPCmd_reflection_;
  delete PlayerInfo::default_instance_;
  delete PlayerInfo_reflection_;
  delete IPInfo::default_instance_;
  delete IPInfo_reflection_;
  delete CGMMsgUserInfoByIPResult::default_instance_;
  delete CGMMsgUserInfoByIPResult_reflection_;
  delete CGMMessageQueryRoleMailCmd::default_instance_;
  delete CGMMessageQueryRoleMailCmd_reflection_;
}

void protobuf_AddDesc_gmmessage_5fpb_2ehxx() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_property_5fpb_2ehxx();
  ::protobuf_AddDesc_db_5fmsg_5fpb_2ehxx();
  #ifndef _NO_PROTOBUF_STR_
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020gmmessage_pb.hxx\032\017property_pb.hxx\032\rdb_"
    "msg_pb.hxx\"H\n\025CGMMessageKickRoleCmd\022\022\n\ns"
    "ession_id\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022\017\n\007role_id\030\003"
    " \001(\005\"K\n\031CGMMessageCmdNormalResult\022\022\n\nses"
    "sion_id\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022\016\n\006result\030\003 \001("
    "\005\"X\n\027CGMMessageRoleDetailCmd\022\022\n\nsession_"
    "id\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022\017\n\007role_id\030\003 \001(\005\022\014\n"
    "\004type\030\004 \001(\005\"\322\003\n\nPBRoleInfo\022\017\n\007role_id\030\001 "
    "\001(\005\022\023\n\013role_status\030\002 \001(\005\022\022\n\naccount_id\030\003"
    " \001(\005\022\021\n\trole_name\030\004 \001(\t\022\020\n\010is_alive\030\005 \001("
    "\005\022\021\n\tgender_id\030\006 \001(\005\022\021\n\tmetier_id\030\007 \001(\005\022"
    "\026\n\016nationality_id\030\010 \001(\005\022\021\n\tface_type\030\t \001"
    "(\005\022\017\n\007line_id\030\n \001(\005\022\016\n\006map_id\030\013 \001(\005\022\r\n\005p"
    "os_x\030\014 \001(\005\022\r\n\005pos_y\030\r \001(\005\022\022\n\nrole_level\030"
    "\016 \001(\005\022\021\n\trole_expr\030\017 \001(\003\022\022\n\nrole_money\030\020"
    " \001(\005\022\025\n\rbounded_money\030\021 \001(\005\022\022\n\nlogin_tim"
    "e\030\022 \001(\005\022\027\n\017online_duration\030\023 \001(\005\022\023\n\013upda"
    "te_time\030\024 \001(\005\022\023\n\013create_time\030\025 \001(\005\022\032\n\005pr"
    "oto\030\026 \001(\0132\013.PBProperty\022\020\n\010login_ip\030\027 \001(\t"
    "\"X\n\032CGMMessageRoleDetailResult\022\022\n\nsessio"
    "n_id\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022\032\n\005proto\030\003 \001(\0132\013."
    "PBRoleInfo\"]\n\034CGMMessageUserStorageInfoC"
    "md\022\022\n\nsession_id\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022\017\n\007ro"
    "le_id\030\003 \001(\005\022\014\n\004page\030\004 \001(\005\"\\\n\037CGMMessageU"
    "serStorageInfoResult\022\022\n\nsession_id\030\001 \001(\r"
    "\022\n\n\002fd\030\002 \001(\r\022\031\n\005items\030\003 \001(\0132\n.PBItemBox\""
    "L\n\031CGMMessageRoleLocationCmd\022\022\n\nsession_"
    "id\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022\017\n\007role_id\030\003 \001(\005\"\206\001"
    "\n\034CGMMessageRoleLocationResult\022\022\n\nsessio"
    "n_id\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022\017\n\007line_id\030\003 \001(\005\022"
    "\016\n\006map_id\030\004 \001(\005\022\t\n\001x\030\005 \001(\005\022\t\n\001y\030\006 \001(\005\022\017\n"
    "\007role_id\030\007 \001(\005\"s\n\032CGMMessageUserLevelInf"
    "oCmd\022\022\n\nsession_id\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022\017\n\007"
    "role_id\030\003 \001(\r\022\022\n\nstart_time\030\004 \001(\t\022\020\n\010end"
    "_time\030\005 \001(\t\"F\n\021PBRoleUpgradeInfo\022\r\n\005leve"
    "l\030\001 \001(\005\022\021\n\tup_period\030\002 \001(\005\022\017\n\007up_time\030\003 "
    "\001(\005\"n\n\035CGMMessageUserLevelInfoResult\022\022\n\n"
    "session_id\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022-\n\021role_upg"
    "rade_info\030\003 \003(\0132\022.PBRoleUpgradeInfo\"\\\n\033C"
    "GMMessageUserSocialInfoCmd\022\022\n\nsession_id"
    "\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022\017\n\007role_id\030\003 \001(\005\022\014\n\004t"
    "ype\030\004 \001(\r\"\216\002\n\036CGMMessageUserSocialInfoRe"
    "sult\022\022\n\nsession_id\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022\032\n\007"
    "friends\030\003 \001(\0132\t.PBFriend\022\022\n\nfamilyname\030\004"
    " \001(\t\022\021\n\tcorpsname\030\005 \001(\t\022\020\n\010spouseid\030\006 \001("
    "\r\022\025\n\rWeddingModule\030\007 \001(\r\022\022\n\nMarriageID\030\010"
    " \001(\r\022\023\n\013WeddingTime\030\t \001(\t\022\024\n\014MarriageTim"
    "e\030\n \001(\t\022!\n\nMatrixInfo\030\013 \001(\0132\r.PBMatrixIn"
    "fo\"\234\001\n\036CGMMessageGoodsHistoryToNPCCmd\022\022\n"
    "\nsession_id\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022\017\n\007role_id"
    "\030\003 \001(\005\022\021\n\trole_flag\030\004 \001(\005\022\020\n\010npc_name\030\005 "
    "\001(\t\022\022\n\nstart_time\030\006 \001(\t\022\020\n\010end_time\030\007 \001("
    "\t\"b\n\022PBItemExchange2Npc\022\020\n\010npc_name\030\001 \001("
    "\t\022\021\n\titem_name\030\002 \001(\t\022\020\n\010item_num\030\003 \001(\005\022\025"
    "\n\rexchange_time\030\004 \001(\t\"N\n!CGMMessageGoods"
    "HistoryToNPCResult\022)\n\014items_selled\030\001 \003(\013"
    "2\023.PBItemExchange2Npc\"\236\001\n CGMMessageGood"
    "sHistoryFromNPCCmd\022\022\n\nsession_id\030\001 \001(\r\022\n"
    "\n\002fd\030\002 \001(\r\022\017\n\007role_id\030\003 \001(\005\022\021\n\trole_flag"
    "\030\004 \001(\005\022\020\n\010npc_name\030\005 \001(\t\022\022\n\nstart_time\030\006"
    " \001(\t\022\020\n\010end_time\030\007 \001(\t\"o\n#CGMMessageGood"
    "sHistoryFromNPCResult\022\022\n\nsession_id\030\001 \001("
    "\r\022\n\n\002fd\030\002 \001(\r\022(\n\013items_buyed\030\003 \003(\0132\023.PBI"
    "temExchange2Npc\"\221\001\n%CGMMessageGoodsHisto"
    "ryBetweenUsersCmd\022\022\n\nsession_id\030\001 \001(\r\022\n\n"
    "\002fd\030\002 \001(\r\022\020\n\010role_id1\030\003 \001(\005\022\020\n\010role_id2\030"
    "\004 \001(\005\022\022\n\nstart_time\030\005 \001(\t\022\020\n\010end_time\030\006 "
    "\001(\t\"o\n\025PBItemExchange2Player\022\014\n\004from\030\001 \001"
    "(\t\022\n\n\002to\030\002 \001(\t\022\021\n\titem_name\030\003 \001(\t\022\022\n\nite"
    "m_count\030\004 \001(\t\022\025\n\rexchange_time\030\005 \001(\t\"z\n("
    "CGMMessageGoodsHistoryBetweenUsersResult"
    "\022\022\n\nsession_id\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022.\n\016item"
    "_exchanged\030\003 \003(\0132\026.PBItemExchange2Player"
    "\"r\n\031CGMMessageGoodsHistoryCmd\022\022\n\nsession"
    "_id\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022\017\n\007item_id\030\003 \001(\t\022\022"
    "\n\nstart_time\030\004 \001(\t\022\020\n\010end_time\030\005 \001(\t\"M\n\014"
    "PBItemAction\022\014\n\004from\030\001 \001(\t\022\n\n\002to\030\002 \001(\t\022\016"
    "\n\006action\030\003 \001(\t\022\023\n\013action_time\030\004 \001(\t\"d\n\034C"
    "GMMessageGoodsHistoryResult\022\022\n\nsession_i"
    "d\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022$\n\ritem_actioned\030\003 \003"
    "(\0132\r.PBItemAction\"\202\001\n\027CGMMessagePetHisto"
    "ryCmd\022\022\n\nsession_id\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022\021\n"
    "\trole_name\030\003 \001(\t\022\016\n\006pet_id\030\004 \001(\005\022\022\n\nstar"
    "t_time\030\005 \001(\t\022\020\n\010end_time\030\006 \001(\t\"b\n\014PBPetH"
    "istory\022\014\n\004from\030\001 \001(\t\022\n\n\002to\030\002 \001(\t\022\016\n\006acti"
    "on\030\003 \001(\t\022\023\n\013action_time\030\004 \001(\t\022\023\n\013action_"
    "attr\030\005 \001(\t\"`\n\032CGMMessagePetHistoryResult"
    "\022\022\n\nsession_id\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022\"\n\013pet_"
    "history\030\003 \003(\0132\r.PBPetHistory\"\210\001\n\034CGMMess"
    "ageOperationDetailCmd\022\022\n\nsession_id\030\001 \001("
    "\r\022\n\n\002fd\030\002 \001(\r\022\021\n\tserver_id\030\003 \001(\005\022\017\n\007role"
    "_id\030\004 \001(\005\022\022\n\nstart_time\030\005 \001(\t\022\020\n\010end_tim"
    "e\030\006 \001(\t\"J\n\026CGMMessageNPCDetailCmd\022\022\n\nses"
    "sion_id\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022\020\n\010npc_name\030\003 "
    "\001(\t\"3\n\013PBNPCDetail\022\016\n\006map_id\030\001 \001(\005\022\024\n\014np"
    "c_location\030\002 \001(\t\"]\n\031CGMMessageNPCDetailR"
    "esult\022\022\n\nsession_id\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022 \n"
    "\nnpc_detail\030\003 \003(\0132\014.PBNPCDetail\"\205\001\n\031CGMM"
    "essageGoodsDropLogCmd\022\022\n\nsession_id\030\001 \001("
    "\r\022\n\n\002fd\030\002 \001(\r\022\020\n\010goods_id\030\003 \001(\005\022\020\n\010map_n"
    "ame\030\004 \001(\t\022\022\n\nstart_time\030\005 \001(\t\022\020\n\010end_tim"
    "e\030\006 \001(\t\"\\\n\016PBGoodsDropLog\022\021\n\trole_name\030\001"
    " \001(\t\022\021\n\tdrop_time\030\002 \001(\t\022\021\n\ttotal_num\030\003 \001"
    "(\005\022\021\n\tdrop_rate\030\004 \001(\005\"g\n\034CGMMessageGoods"
    "DropLogResult\022\022\n\nsession_id\030\001 \001(\r\022\n\n\002fd\030"
    "\002 \001(\r\022\'\n\016goods_drop_log\030\003 \003(\0132\017.PBGoodsD"
    "ropLog\"H\n\025CGMMessageTaskInfoCmd\022\022\n\nsessi"
    "on_id\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022\017\n\007role_id\030\003 \001(\005"
    "\"E\n\nPBTaskInfo\022\017\n\007task_id\030\001 \001(\005\022\021\n\ttask_"
    "name\030\002 \001(\t\022\023\n\013finish_type\030\003 \001(\005\"\\\n\030CGMMe"
    "ssageTaskInfoResult\022\022\n\nsession_id\030\001 \001(\r\022"
    "\n\n\002fd\030\002 \001(\r\022 \n\013task_detail\030\003 \003(\0132\013.PBTas"
    "kInfo\"q\n\026CGMMessageLoginInfoCmd\022\022\n\nsessi"
    "on_id\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022\021\n\tuser_name\030\003 \001"
    "(\t\022\022\n\nstart_time\030\004 \001(\t\022\020\n\010end_time\030\005 \001(\t"
    "\"\257\001\n\013PBLoginInfo\022\025\n\rlogin_in_time\030\001 \001(\005\022"
    "\026\n\016login_in_money\030\002 \001(\005\022\024\n\014login_in_exp\030"
    "\003 \001(\005\022\023\n\013login_in_ip\030\004 \001(\005\022\026\n\016login_out_"
    "time\030\005 \001(\005\022\027\n\017login_out_money\030\006 \001(\005\022\025\n\rl"
    "ogin_out_exp\030\007 \001(\005\"]\n\031CGMMessageLoginInf"
    "oResult\022\022\n\nsession_id\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022"
    " \n\nlogin_info\030\003 \003(\0132\014.PBLoginInfo\"g\n\023CGM"
    "MessageShutUpCmd\022\022\n\nsession_id\030\001 \001(\r\022\n\n\002"
    "fd\030\002 \001(\r\022\017\n\007role_id\030\003 \001(\005\022\017\n\007channel\030\004 \001"
    "(\005\022\016\n\006period\030\005 \001(\005\"]\n\031CGMMessageCancelSh"
    "utUpCmd\022\022\n\nsession_id\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022"
    "\017\n\007role_id\030\003 \001(\005\022\017\n\007channel\030\004 \001(\005\"M\n\032CGM"
    "MessageFreezeAccountCmd\022\022\n\nsession_id\030\001 "
    "\001(\r\022\n\n\002fd\030\002 \001(\r\022\017\n\007user_id\030\003 \001(\005\"Q\n\035CGMM"
    "essageFreezeAccountBatCmd\022\022\n\nsession_id\030"
    "\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022\020\n\010uid_list\030\003 \001(\t\"O\n\034C"
    "GMMessageUnFreezeAccountCmd\022\022\n\nsession_i"
    "d\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022\017\n\007user_id\030\003 \001(\005\"]\n\030"
    "CGMMessageTrusteeUserCmd\022\022\n\nsession_id\030\001"
    " \001(\r\022\n\n\002fd\030\002 \001(\r\022\017\n\007user_id\030\003 \001(\005\022\020\n\010pas"
    "sword\030\004 \001(\t\"M\n\032CGMMessageUnTrusteeUserCm"
    "d\022\022\n\nsession_id\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022\017\n\007use"
    "r_id\030\003 \001(\005\"\202\001\n\025CGMMessageMoveRoleCmd\022\022\n\n"
    "session_id\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022\017\n\007role_id\030"
    "\003 \001(\005\022\021\n\tserver_id\030\004 \001(\005\022\014\n\004type\030\005 \001(\005\022\027"
    "\n\017target_location\030\006 \001(\t\"X\n\024CGMMessageEnd"
    "TaskCmd\022\022\n\nsession_id\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022"
    "\017\n\007role_id\030\003 \001(\005\022\017\n\007task_id\030\004 \001(\005\"N\n\033CGM"
    "MessageTrusteeStorageCmd\022\022\n\nsession_id\030\001"
    " \001(\r\022\n\n\002fd\030\002 \001(\r\022\017\n\007role_id\030\003 \001(\005\"P\n\035CGM"
    "MessageUnTrusteeStorageCmd\022\022\n\nsession_id"
    "\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022\017\n\007role_id\030\003 \001(\005\"K\n\030C"
    "GMMessageRecoverRoleCmd\022\022\n\nsession_id\030\001 "
    "\001(\r\022\n\n\002fd\030\002 \001(\r\022\017\n\007role_id\030\003 \001(\005\"m\n\031CGMM"
    "essagePostBulletinCmd\022\022\n\nsession_id\030\001 \001("
    "\r\022\n\n\002fd\030\002 \001(\r\022\017\n\007content\030\003 \001(\t\022\r\n\005times\030"
    "\004 \001(\r\022\020\n\010interval\030\005 \001(\r\"\271\001\n\025CGMMessageMu"
    "ltiExpCmd\022\022\n\nsession_id\030\001 \001(\r\022\n\n\002fd\030\002 \001("
    "\r\022\022\n\ngateway_id\030\003 \001(\005\022\021\n\tserver_id\030\004 \001(\005"
    "\022\020\n\010exp_type\030\005 \001(\005\022\021\n\tmulti_num\030\006 \001(\t\022\016\n"
    "\006reason\030\007 \001(\t\022\022\n\nstart_time\030\010 \001(\005\022\020\n\010end"
    "_time\030\t \001(\005\"\277\001\n\033CGMMessageCancelMultiExp"
    "Cmd\022\022\n\nsession_id\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022\022\n\ng"
    "ateway_id\030\003 \001(\005\022\021\n\tserver_id\030\004 \001(\005\022\020\n\010ex"
    "p_type\030\005 \001(\005\022\021\n\tmulti_num\030\006 \001(\005\022\016\n\006reaso"
    "n\030\007 \001(\t\022\022\n\nstart_time\030\010 \001(\005\022\020\n\010end_time\030"
    "\t \001(\005\"r\n\030CGMMessageChangeMoneyCmd\022\022\n\nses"
    "sion_id\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022\021\n\tserver_id\030\003"
    " \001(\005\022\017\n\007role_id\030\004 \001(\005\022\022\n\nchange_num\030\005 \001("
    "\005\"p\n\026CGMMessageChangeExpCmd\022\022\n\nsession_i"
    "d\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022\021\n\tserver_id\030\003 \001(\005\022\017"
    "\n\007role_id\030\004 \001(\005\022\022\n\nchange_num\030\005 \001(\005\"\202\001\n\027"
    "CGMMessageChangeItemCmd\022\022\n\nsession_id\030\001 "
    "\001(\r\022\n\n\002fd\030\002 \001(\r\022\021\n\tserver_id\030\003 \001(\005\022\017\n\007ro"
    "le_id\030\004 \001(\005\022\021\n\titem_code\030\005 \001(\005\022\020\n\010item_n"
    "um\030\006 \001(\005\"J\n\027CGMMessageDeleteRoleCmd\022\022\n\ns"
    "ession_id\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022\017\n\007role_id\030\003"
    " \001(\005\"Z\n\025CGMMessageClearBagCmd\022\022\n\nsession"
    "_id\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022\017\n\007role_id\030\003 \001(\005\022\020"
    "\n\010bag_name\030\004 \001(\t\"\\\n\026CGMMessageChangePetC"
    "md\022\022\n\nsession_id\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022\017\n\007ro"
    "le_id\030\003 \001(\r\022\021\n\tuser_name\030\004 \001(\t\"`\n\033CGMMes"
    "sageSetOLGMAccountCmd\022\022\n\nsession_id\030\001 \001("
    "\r\022\n\n\002fd\030\002 \001(\r\022\017\n\007user_id\030\003 \001(\r\022\020\n\010passwo"
    "rd\030\004 \001(\t\"F\n\023CGMMessageIbInfoCmd\022\022\n\nsessi"
    "on_id\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022\017\n\007item_id\030\003 \001(\r"
    "\"\304\001\n\010PBIbItem\022\017\n\007item_id\030\001 \001(\r\022\025\n\ritem_l"
    "ocation\030\002 \001(\t\022\020\n\010pay_type\030\003 \001(\r\022\021\n\titem_"
    "type\030\004 \001(\r\022\022\n\nitem_limit\030\005 \001(\r\022\r\n\005price\030"
    "\006 \001(\r\022\020\n\010discount\030\007 \001(\r\022\022\n\nstart_time\030\010 "
    "\001(\r\022\021\n\tsale_room\030\t \001(\r\022\017\n\007on_sale\030\n \001(\r\""
    "c\n\026CGMMessageIbInfoResult\022\022\n\nsession_id\030"
    "\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022\r\n\005isall\030\003 \001(\r\022\032\n\007ibit"
    "ems\030\004 \003(\0132\t.PBIbItem\"z\n\027CGMMessageSetIbP"
    "riceCmd\022\022\n\nsession_id\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022"
    "\017\n\007item_id\030\003 \001(\r\022\r\n\005price\030\004 \001(\r\022\014\n\004time\030"
    "\005 \001(\r\022\021\n\tlimit_num\030\006 \001(\r\"I\n\032CGMMessageSe"
    "tIbLocationCmd\022\022\n\nsession_id\030\001 \001(\r\022\n\n\002fd"
    "\030\002 \001(\r\022\013\n\003pos\030\003 \001(\t\"U\n\025CGMMessageIbOnSal"
    "eCmd\022\022\n\nsession_id\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022\017\n\007"
    "item_id\030\003 \001(\r\022\013\n\003pos\030\004 \001(\t\"I\n\026CGMMessage"
    "IbNotSaleCmd\022\022\n\nsession_id\030\001 \001(\r\022\n\n\002fd\030\002"
    " \001(\r\022\017\n\007item_id\030\003 \001(\r\"_\n\027CGMMessageIbDes"
    "criptCmd\022\022\n\nsession_id\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r"
    "\022\017\n\007item_id\030\003 \001(\r\022\023\n\013description\030\004 \001(\t\"`"
    "\n\023CGMMessageIpBindCmd\022\022\n\nsession_id\030\001 \001("
    "\r\022\n\n\002fd\030\002 \001(\r\022\017\n\007user_id\030\003 \001(\r\022\n\n\002ip\030\004 \001"
    "(\t\022\014\n\004type\030\005 \001(\r\"]\n\026CGMMessageRoleProtoC"
    "md\022\022\n\nsession_id\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022\017\n\007ro"
    "le_id\030\003 \001(\r\022\022\n\nfield_name\030\004 \001(\t\"M\n\032CGMMe"
    "ssageRoleEquipmentCmd\022\022\n\nsession_id\030\001 \001("
    "\r\022\n\n\002fd\030\002 \001(\r\022\017\n\007role_id\030\003 \001(\r\"L\n\031CGMMes"
    "sageRolePackInfoCmd\022\022\n\nsession_id\030\001 \001(\r\022"
    "\n\n\002fd\030\002 \001(\r\022\017\n\007role_id\030\003 \001(\r\"_\n\033CGMMessa"
    "geRoleItemInPackCmd\022\022\n\nsession_id\030\001 \001(\r\022"
    "\n\n\002fd\030\002 \001(\r\022\017\n\007role_id\030\003 \001(\r\022\017\n\007item_id\030"
    "\004 \001(\r\"M\n\032CGMMessageRoleSkillInfoCmd\022\022\n\ns"
    "ession_id\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022\017\n\007role_id\030\003"
    " \001(\r\"a\n\034CGMMessageRoleSkillDetailCmd\022\022\n\n"
    "session_id\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022\017\n\007role_id\030"
    "\003 \001(\r\022\020\n\010skill_id\030\004 \001(\r\"Z\n\035CGMMessageRol"
    "eEquipmentResult\022\022\n\nsession_id\030\001 \001(\r\022\n\n\002"
    "fd\030\002 \001(\r\022\031\n\005proto\030\003 \001(\0132\n.PBItemBox\"Y\n\034C"
    "GMMessageRolePackInfoResult\022\022\n\nsession_i"
    "d\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022\031\n\005proto\030\003 \001(\0132\n.PBI"
    "temBox\"^\n\036CGMMessageRoleItemInPackResult"
    "\022\022\n\nsession_id\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022\034\n\005prot"
    "o\030\003 \001(\0132\r.PBItemObject\"\\\n\035CGMMessageRole"
    "SkillInfoResult\022\022\n\nsession_id\030\001 \001(\r\022\n\n\002f"
    "d\030\002 \001(\r\022\033\n\005proto\030\003 \001(\0132\014.PBSkillList\"`\n\037"
    "CGMMessageRoleSkillDetailResult\022\022\n\nsessi"
    "on_id\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022\035\n\005proto\030\003 \001(\0132\016"
    ".PBSkillObject\"-\n\033CMessageActivityListRe"
    "quest\022\016\n\006RoleID\030\001 \001(\r\"N\n\nPBActivity\022\016\n\006M"
    "enuID\030\001 \001(\r\022\014\n\004Desc\030\002 \001(\t\022\021\n\tBeginTime\030\003"
    " \001(\r\022\017\n\007EndTime\030\004 \001(\r\"M\n\034CMessageActivit"
    "yListResponse\022\016\n\006RoleID\030\001 \001(\r\022\035\n\010activit"
    "y\030\002 \003(\0132\013.PBActivity\"\213\001\n\033CMessageUserIte"
    "mListRequest\022\021\n\tAccountID\030\001 \001(\r\022\016\n\006RoleI"
    "D\030\002 \001(\r\022\016\n\006MenuID\030\003 \001(\r\022\021\n\tRoleLevel\030\004 \001"
    "(\r\022\022\n\nRoleMetier\030\005 \001(\r\022\022\n\nRoleGender\030\006 \001"
    "(\r\"F\n\016PBActivityItem\022\020\n\010ItemCode\030\001 \001(\t\022\016"
    "\n\006Number\030\002 \001(\r\022\022\n\nActivityID\030\003 \001(\r\"n\n\034CM"
    "essageUserItemListResponse\022\016\n\006Result\030\001 \001"
    "(\005\022\016\n\006MenuID\030\002 \001(\r\022\016\n\006RoleID\030\003 \001(\r\022\036\n\005it"
    "ems\030\004 \003(\0132\017.PBActivityItem\"\237\001\n\034CMessageU"
    "serItemMinusRequest\022\021\n\tAccountID\030\001 \001(\r\022\016"
    "\n\006RoleID\030\002 \001(\r\022\022\n\nActivityID\030\003 \001(\r\022\020\n\010It"
    "emCode\030\004 \001(\t\022\017\n\007ItemNum\030\005 \001(\r\022\021\n\tRoleLev"
    "el\030\006 \001(\r\022\022\n\nRoleMetier\030\007 \001(\r\"n\n\035CMessage"
    "UserItemMinusResponse\022\016\n\006Result\030\001 \001(\005\022\016\n"
    "\006MenuID\030\002 \001(\005\022\016\n\006RoleID\030\003 \001(\005\022\035\n\004Item\030\004 "
    "\001(\0132\017.PBActivityItem\"d\n CGMMessageRoleEq"
    "uipmentDetailCmd\022\022\n\nsession_id\030\001 \001(\r\022\n\n\002"
    "fd\030\002 \001(\r\022\017\n\007role_id\030\003 \001(\r\022\017\n\007item_id\030\004 \001"
    "(\r\"b\n\036CGMMessageRoleStorageDetailCmd\022\022\n\n"
    "session_id\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022\017\n\007role_id\030"
    "\003 \001(\r\022\017\n\007item_id\030\004 \001(\r\"c\n#CGMMessageRole"
    "EquipmentDetailResult\022\022\n\nsession_id\030\001 \001("
    "\r\022\n\n\002fd\030\002 \001(\r\022\034\n\005proto\030\003 \001(\0132\r.PBItemObj"
    "ect\"a\n!CGMMessageRoleStorageDetailResult"
    "\022\022\n\nsession_id\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022\034\n\005prot"
    "o\030\003 \001(\0132\r.PBItemObject\"4\n\017PBSubjectAmoun"
    "t\022\021\n\tSubjectID\030\001 \001(\r\022\016\n\006Amount\030\002 \001(\r\"P\n\032"
    "CMessageFangChenMiResponse\022\016\n\006CharID\030\001 \001"
    "(\r\022\"\n\010Subjects\030\002 \003(\0132\020.PBSubjectAmount\"r"
    "\n\014PBFangChenMi\022\016\n\006CharID\030\001 \001(\r\022\021\n\tCharLe"
    "vel\030\002 \001(\r\022\022\n\nCharMetier\030\003 \001(\r\022\016\n\006Money1\030"
    "\004 \001(\r\022\016\n\006Money2\030\005 \001(\r\022\013\n\003Exp\030\006 \001(\004\">\n\031CM"
    "essageFangChenMiRequest\022!\n\nRoleDetail\030\001 "
    "\003(\0132\r.PBFangChenMi\"3\n\033CMessageFCMPlayerL"
    "istNotify\022\024\n\014ReportPlayer\030\001 \003(\r\"C\n\035CMess"
    "ageFCMPlayerResetRequest\022\021\n\tAccountID\030\001 "
    "\001(\r\022\017\n\007Seconds\030\002 \001(\r\"v\n\030CMessageChangeGa"
    "teNotify\022\014\n\004Type\030\001 \001(\r\022\014\n\004Name\030\002 \001(\t\022\016\n\006"
    "Param1\030\003 \001(\005\022\016\n\006Param2\030\004 \001(\005\022\016\n\006Param3\030\005"
    " \001(\005\022\016\n\006Param4\030\006 \001(\005\"S\n CMessageResetRol"
    "ePasswordRequest\022\022\n\nsession_id\030\001 \001(\r\022\n\n\002"
    "fd\030\002 \001(\r\022\017\n\007role_id\030\003 \001(\r\"T\n!CMessageRes"
    "etRolePasswordResponse\022\022\n\nsession_id\030\001 \001"
    "(\r\022\n\n\002fd\030\002 \001(\r\022\017\n\007Errcode\030\003 \001(\r\"\271\001\n\035CGMM"
    "essageRoleItemOperatedCmd\022\022\n\nsession_id\030"
    "\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022\017\n\007role_id\030\003 \001(\r\022\017\n\007op"
    "_type\030\004 \001(\005\022\017\n\007item_id\030\005 \001(\005\022\021\n\titem_gui"
    "d\030\006 \001(\004\022\022\n\nstart_time\030\007 \001(\t\022\020\n\010end_time\030"
    "\010 \001(\t\022\014\n\004page\030\t \001(\005\"\250\001\n\035CGMMessageRoleMo"
    "neyOperateCmd\022\022\n\nsession_id\030\001 \001(\r\022\n\n\002fd\030"
    "\002 \001(\r\022\017\n\007role_id\030\003 \001(\r\022\017\n\007op_type\030\004 \001(\005\022"
    "\021\n\titem_type\030\005 \001(\005\022\022\n\nstart_time\030\006 \001(\t\022\020"
    "\n\010end_time\030\007 \001(\t\022\014\n\004page\030\010 \001(\005\"\236\001\n\024CGMMe"
    "ssageRoleExpCmd\022\022\n\nsession_id\030\001 \001(\r\022\n\n\002f"
    "d\030\002 \001(\r\022\017\n\007role_id\030\003 \001(\r\022\017\n\007op_type\030\004 \001("
    "\005\022\020\n\010exp_type\030\005 \001(\005\022\022\n\nstart_time\030\006 \001(\t\022"
    "\020\n\010end_time\030\007 \001(\t\022\014\n\004page\030\010 \001(\005\"\224\001\n\034CGMM"
    "essageRoleItemLevelUpCmd\022\022\n\nsession_id\030\001"
    " \001(\r\022\n\n\002fd\030\002 \001(\r\022\014\n\004page\030\003 \001(\005\022\017\n\007role_i"
    "d\030\004 \001(\r\022\017\n\007item_id\030\005 \001(\005\022\022\n\nstart_time\030\006"
    " \001(\t\022\020\n\010end_time\030\007 \001(\t\"E\n\026CGMMessageFree"
    "zeMacCmd\022\022\n\nsession_id\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r"
    "\022\013\n\003mac\030\003 \001(\t\"G\n\030CGMMessageUnFreezeMacCm"
    "d\022\022\n\nsession_id\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022\013\n\003mac"
    "\030\003 \001(\t\"U\n\027CGMMessageCorpsTotalCmd\022\022\n\nses"
    "sion_id\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022\014\n\004type\030\003 \001(\005\022"
    "\014\n\004page\030\004 \001(\005\"\\\n\030CGMMessageCorpsDetailCm"
    "d\022\022\n\nsession_id\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022\022\n\ncor"
    "ps_name\030\003 \001(\t\022\014\n\004type\030\004 \001(\005\"\216\001\n\026CGMMessa"
    "geCorpsInfoCmd\022\022\n\nsession_id\030\001 \001(\r\022\n\n\002fd"
    "\030\002 \001(\r\022\022\n\ncorps_name\030\003 \001(\t\022\014\n\004type\030\004 \001(\005"
    "\022\022\n\nstart_time\030\006 \001(\t\022\020\n\010end_time\030\007 \001(\t\022\014"
    "\n\004page\030\010 \001(\005\"\212\001\n\025CGMMessageRoleInfoCmd\022\022"
    "\n\nsession_id\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022\017\n\007role_i"
    "d\030\003 \001(\r\022\014\n\004type\030\004 \001(\005\022\022\n\nstart_time\030\006 \001("
    "\t\022\020\n\010end_time\030\007 \001(\t\022\014\n\004page\030\010 \001(\005\"\237\001\n\031CG"
    "MMsgRoleItemRecoveryCmd\022\022\n\nsession_id\030\001 "
    "\001(\r\022\n\n\002fd\030\002 \001(\r\022\017\n\007role_id\030\003 \001(\r\022\014\n\004type"
    "\030\004 \001(\005\022\017\n\007item_id\030\005 \001(\004\022\022\n\nstart_time\030\006 "
    "\001(\t\022\020\n\010end_time\030\007 \001(\t\022\014\n\004page\030\010 \001(\r\"\230\001\n\034"
    "CMessageOfflineSysMailNotify\022\016\n\006RoleId\030\001"
    " \001(\r\022\020\n\010MailType\030\002 \001(\r\022\023\n\013AttachMoney\030\003 "
    "\001(\r\022!\n\nAttachItem\030\004 \003(\0132\r.PBItemObject\022\022"
    "\n\nsession_id\030\005 \001(\r\022\n\n\002fd\030\006 \001(\r\"\207\001\n\030CGMMe"
    "ssageSqlQueryResult\022\022\n\nsession_id\030\001 \001(\r\022"
    "\n\n\002fd\030\002 \001(\r\022\014\n\004type\030\003 \001(\r\022/\n\tSqlResult\030\004"
    " \001(\0132\034.CMessageExecuteSqlResponse3\022\014\n\004pa"
    "ge\030\005 \001(\r\"\211\001\n\031CGMMessageUserInfoByIPCmd\022\022"
    "\n\nsession_id\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022\n\n\002ip\030\003 \001"
    "(\t\022\022\n\nstart_time\030\004 \001(\t\022\020\n\010end_time\030\005 \001(\t"
    "\022\014\n\004type\030\006 \001(\005\022\014\n\004page\030\007 \001(\005\"\365\001\n\nPlayerI"
    "nfo\022\022\n\naccount_id\030\001 \001(\r\022\024\n\014account_name\030"
    "\002 \001(\t\022\017\n\007role_id\030\003 \001(\r\022\021\n\trole_name\030\004 \001("
    "\t\022\022\n\nlogin_time\030\005 \001(\005\022\022\n\nrole_level\030\006 \001("
    "\005\022\021\n\tmetier_id\030\007 \001(\005\022\016\n\006cpu_id\030\010 \001(\005\022\017\n\007"
    "disk_id\030\t \001(\005\022\013\n\003mac\030\n \001(\t\022\017\n\007line_id\030\013 "
    "\001(\005\022\016\n\006map_id\030\014 \001(\005\022\017\n\007game_id\030\r \001(\005\"H\n\006"
    "IPInfo\022\n\n\002ip\030\001 \001(\r\022\020\n\010role_num\030\002 \001(\r\022 \n\013"
    "player_info\030\003 \003(\0132\013.PlayerInfo\"c\n\030CGMMsg"
    "UserInfoByIPResult\022\022\n\nsession_id\030\001 \001(\r\022\n"
    "\n\002fd\030\002 \001(\r\022\027\n\006ipinfo\030\003 \003(\0132\007.IPInfo\022\016\n\006Z"
    "eroIP\030\004 \001(\r\"[\n\032CGMMessageQueryRoleMailCm"
    "d\022\022\n\nsession_id\030\001 \001(\r\022\n\n\002fd\030\002 \001(\r\022\017\n\007rol"
    "e_id\030\003 \001(\r\022\014\n\004page\030\004 \001(\005*\352\035\n\020EMGMCmdMess"
    "ageID\022\035\n\027ID_G2M_CMDNORMAL_RESULT\020\200\200\003\022\031\n\023"
    "ID_M2G_KICKROLE_CMD\020\201\200\003\022\031\n\023ID_M2G_MOVERO"
    "LE_CMD\020\202\200\003\022\027\n\021ID_M2G_SHUTUP_CMD\020\203\200\003\022\035\n\027I"
    "D_M2G_CANCLESHUTUP_CMD\020\204\200\003\022\036\n\030ID_M2G_FRO"
    "ZENACCOUNT_CMD\020\205\200\003\022 \n\032ID_M2G_UNFROZENACC"
    "OUNT_CMD\020\206\200\003\022\034\n\026ID_M2G_TRUSTEEUSER_CMD\020\207"
    "\200\003\022\036\n\030ID_M2G_UNTRUSTEEUSER_CMD\020\210\200\003\022\030\n\022ID"
    "_M2G_ENDTASK_CMD\020\211\200\003\022\037\n\031ID_M2G_TRUSTEEST"
    "ORAGE_CMD\020\212\200\003\022!\n\033ID_M2G_UNTRUSTEESTORAGE"
    "_CMD\020\213\200\003\022\034\n\026ID_M2G_RECOVERROLE_CMD\020\214\200\003\022\035"
    "\n\027ID_M2G_POSTBULLETIN_CMD\020\215\200\003\022\031\n\023ID_M2G_"
    "MULTIEXP_CMD\020\216\200\003\022\037\n\031ID_M2G_CANCELMULTIEX"
    "P_CMD\020\217\200\003\022\034\n\026ID_M2G_CHANGEMONEY_CMD\020\220\200\003\022"
    "\032\n\024ID_M2G_CHANGEEXP_CMD\020\221\200\003\022\033\n\025ID_M2G_CH"
    "ANGEITEM_CMD\020\222\200\003\022\033\n\025ID_M2G_DELETEROLE_CM"
    "D\020\223\200\003\022\031\n\023ID_M2G_CLEARBAG_CMD\020\224\200\003\022\037\n\031ID_M"
    "2G_USERSOCIALINFO_CMD\020\225\200\003\022\"\n\034ID_G2M_USER"
    "SOCIALINFO_RESULT\020\226\200\003\022\033\n\025ID_M2G_ROLEDETA"
    "IL_CMD\020\240\200\003\022\036\n\030ID_G2M_ROLEDETAIL_RESULT\020\241"
    "\200\003\022 \n\032ID_M2G_USERSTORAGEINFO_CMD\020\242\200\003\022#\n\035"
    "ID_G2M_USERSTORAGEINFO_RESULT\020\243\200\003\022\035\n\027ID_"
    "M2G_ROLELOCATION_CMD\020\244\200\003\022 \n\032ID_G2M_ROLEL"
    "OCATION_RESULT\020\245\200\003\022\036\n\030ID_M2G_USERLEVELIN"
    "FO_CMD\020\246\200\003\022!\n\033ID_G2M_USERLEVELINFO_RESUL"
    "T\020\247\200\003\022\"\n\034ID_M2G_GOODSHISTORYTONPC_CMD\020\250\200"
    "\003\022%\n\037ID_G2M_GOODSHISTORYTONPC_RESULT\020\251\200\003"
    "\022$\n\036ID_M2G_GOODSHISTORYFROMNPC_CMD\020\252\200\003\022\'"
    "\n!ID_G2M_GOODSHISTORYFROMNPC_RESULT\020\253\200\003\022"
    ")\n#ID_M2G_GOODSHISTORYBETWEENUSERS_CMD\020\254"
    "\200\003\022,\n&ID_G2M_GOODSHISTORYBETWEENUSERS_RE"
    "SULT\020\255\200\003\022\035\n\027ID_M2G_GOODSHISTORY_CMD\020\256\200\003\022"
    " \n\032ID_G2M_GOODSHISTORY_RESULT\020\257\200\003\022\033\n\025ID_"
    "M2G_PETHISTORY_CMD\020\260\200\003\022\036\n\030ID_G2M_PETHIST"
    "ORY_RESULT\020\261\200\003\022 \n\032ID_M2G_OPERATIONDETAIL"
    "_CMD\020\262\200\003\022#\n\035ID_G2M_OPERATIONDETAIL_RESUL"
    "T\020\263\200\003\022\032\n\024ID_M2G_NPCDETAIL_CMD\020\264\200\003\022\035\n\027ID_"
    "G2M_NPCDETAIL_RESULT\020\265\200\003\022\035\n\027ID_M2G_GOODS"
    "DROPLOG_CMD\020\266\200\003\022 \n\032ID_G2M_GOODSDROPLOG_R"
    "ESULT\020\267\200\003\022\031\n\023ID_M2G_TASKINFO_CMD\020\270\200\003\022\034\n\026"
    "ID_G2M_TASKINFO_RESULT\020\271\200\003\022\032\n\024ID_M2G_LOG"
    "ININFO_CMD\020\272\200\003\022\035\n\027ID_G2M_LOGININFO_RESUL"
    "T\020\273\200\003\022\033\n\025ID_M2G_ONLINETIME_CMD\020\274\200\003\022\036\n\030ID"
    "_G2M_ONLINETIME_RESULT\020\275\200\003\022\027\n\021ID_M2G_IPI"
    "NFO_CMD\020\276\200\003\022\032\n\024ID_G2M_IPINFO_RESULT\020\277\200\003\022"
    "\035\n\027ID_M2G_USERINFOBYIP_CMD\020\300\200\003\022 \n\032ID_G2M"
    "_USERINFOBYIP_RESULT\020\301\200\003\022\"\n\034ID_M2G_ATTRC"
    "HANGEHISTORY_CMD\020\302\200\003\022%\n\037ID_G2M_ATTRCHANG"
    "EHISTORY_RESULT\020\303\200\003\022\032\n\024ID_M2G_ROLEPROTO_"
    "CMD\020\304\200\003\022\027\n\021ID_M2G_IBINFO_CMD\020\305\200\003\022\033\n\025ID_M"
    "2G_SETIBPRICE_CMD\020\306\200\003\022\036\n\030ID_M2G_SETIBLOC"
    "ATION_CMD\020\307\200\003\022\031\n\023ID_M2G_IBONSALE_CMD\020\310\200\003"
    "\022\032\n\024ID_M2G_IBNOTSALE_CMD\020\311\200\003\022\033\n\025ID_M2G_I"
    "BDESCRIPT_CMD\020\312\200\003\022\027\n\021ID_M2G_IPBIND_CMD\020\313"
    "\200\003\022\036\n\030ID_M2G_ROLEEQUIPMENT_CMD\020\314\200\003\022\035\n\027ID"
    "_M2G_ROLEPACKINFO_CMD\020\315\200\003\022\037\n\031ID_M2G_ROLE"
    "ITEMINPACK_CMD\020\316\200\003\022\036\n\030ID_M2G_ROLESKILLIN"
    "FO_CMD\020\317\200\003\022 \n\032ID_M2G_ROLESKILLDETAIL_CMD"
    "\020\320\200\003\022!\n\033ID_G2M_ROLEEQUIPMENT_RESULT\020\321\200\003\022"
    " \n\032ID_G2M_ROLEPACKINFO_RESULT\020\322\200\003\022\"\n\034ID_"
    "G2M_ROLEITEMINPACK_RESULT\020\323\200\003\022!\n\033ID_G2M_"
    "ROLESKILLINFO_RESULT\020\324\200\003\022#\n\035ID_G2M_ROLES"
    "KILLDETAIL_RESULT\020\325\200\003\022\032\n\024ID_G2M_IBINFO_R"
    "ESULT\020\326\200\003\022%\n\037ID_M2G_ROLEEQUIPMENT_DETAIL"
    "_CMD\020\330\200\003\022#\n\035ID_M2G_ROLESTORAGE_DETAIL_CM"
    "D\020\331\200\003\022(\n\"ID_G2M_ROLEEQUIPMENT_DETAIL_RES"
    "ULT\020\332\200\003\022&\n ID_G2M_ROLESTORAGE_DETAIL_RES"
    "ULT\020\333\200\003\022!\n\033ID_S2E_USERITEMLIST_REQUEST\020\340"
    "\200\003\022\"\n\034ID_E2S_USERITEMLIST_RESPONSE\020\341\200\003\022\""
    "\n\034ID_S2E_USERITEMMINUS_REQUEST\020\342\200\003\022#\n\035ID"
    "_E2S_USERITEMMINUS_RESPONSE\020\343\200\003\022!\n\033ID_S2"
    "E_ACTIVITYLIST_REQUEST\020\344\200\003\022\"\n\034ID_E2S_ACT"
    "IVITYLIST_RESPONSE\020\345\200\003\022\037\n\031ID_M2G_USER_CH"
    "ARGE_NOTICE\020\346\220\003\022\037\n\031ID_S2G_FANGCHENMI_REQ"
    "UEST\020\347\200\003\022 \n\032ID_G2S_FANGCHENMI_RESPONSE\020\350"
    "\200\003\022!\n\033ID_G2S_FCMPLAYERLIST_NOTIFY\020\351\200\003\022\"\n"
    "\034ID_G2S_FCMPLAYERRESET_NOTIFY\020\352\200\003\022#\n\035ID_"
    "S2G_FCMPLAYERRESET_REQUEST\020\356\200\003\022\036\n\030ID_S2G"
    "_CHANGEGATE_NOTIFY\020\353\200\003\022&\n ID_S2G_REQUEST"
    "_RESETROLEPASSWORD\020\354\200\003\022\'\n!ID_G2S_RESPONS"
    "E_RESETROLEPASSWORD\020\355\200\003\022$\n\036ID_M2G_REQUES"
    "T_ROLEITEMOPERATE\020\360\200\003\022\035\n\027ID_M2G_ROLEMONE"
    "YOPERATE\020\361\200\003\022\034\n\026ID_M2G_REQUEST_ROLEEXP\020\362"
    "\200\003\022$\n\036ID_M2G_REQUEST_ROLEITEMLEVELUP\020\363\200\003"
    "\022\032\n\024ID_M2G_FROZENMAC_CMD\020\365\200\003\022\034\n\026ID_M2G_U"
    "NFROZENMAC_CMD\020\366\200\003\022#\n\035ID_M2G_REQUEST_FAS"
    "TFREEZE_CMD\020\367\200\003\022%\n\037ID_M2G_REQUEST_UNFAST"
    "FREEZE_CMD\020\370\200\003\022#\n\035ID_M2G_REQUEST_CORPSTO"
    "TAL_CMD\020\371\200\003\022$\n\036ID_M2G_REQUEST_CORPSDETAI"
    "L_CMD\020\372\200\003\022\"\n\034ID_M2G_REQUEST_CORPSINFO_CM"
    "D\020\373\200\003\022!\n\033ID_M2G_REQUEST_ROLEINFO_CMD\020\374\200\003"
    "\022\037\n\031ID_S2G_NOTIFY_OFFLINEMAIL\020\375\200\003\022#\n\035ID_"
    "M2G_ROLE_ITEM_RECOVERY_CMD\020\376\200\003\022\035\n\027ID_G2M"
    "_SQL_QUERY_RESULT\020\377\200\003\022 \n\032ID_M2G_QUERY_RO"
    "LE_MAIL_CMD\020\200\201\003\022\"\n\034ID_M2G_FINISHED_TASKI"
    "NFO_CMD\020\201\201\003\022 \n\032ID_M2G_QUERY_ROLETITLE_CM"
    "D\020\202\201\003B\002H\001", 17249);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gmmessage_pb.hxx", &protobuf_RegisterTypes);
  #endif
  CGMMessageKickRoleCmd::default_instance_ = new CGMMessageKickRoleCmd();
  CGMMessageCmdNormalResult::default_instance_ = new CGMMessageCmdNormalResult();
  CGMMessageRoleDetailCmd::default_instance_ = new CGMMessageRoleDetailCmd();
  PBRoleInfo::default_instance_ = new PBRoleInfo();
  CGMMessageRoleDetailResult::default_instance_ = new CGMMessageRoleDetailResult();
  CGMMessageUserStorageInfoCmd::default_instance_ = new CGMMessageUserStorageInfoCmd();
  CGMMessageUserStorageInfoResult::default_instance_ = new CGMMessageUserStorageInfoResult();
  CGMMessageRoleLocationCmd::default_instance_ = new CGMMessageRoleLocationCmd();
  CGMMessageRoleLocationResult::default_instance_ = new CGMMessageRoleLocationResult();
  CGMMessageUserLevelInfoCmd::default_instance_ = new CGMMessageUserLevelInfoCmd();
  PBRoleUpgradeInfo::default_instance_ = new PBRoleUpgradeInfo();
  CGMMessageUserLevelInfoResult::default_instance_ = new CGMMessageUserLevelInfoResult();
  CGMMessageUserSocialInfoCmd::default_instance_ = new CGMMessageUserSocialInfoCmd();
  CGMMessageUserSocialInfoResult::default_instance_ = new CGMMessageUserSocialInfoResult();
  CGMMessageGoodsHistoryToNPCCmd::default_instance_ = new CGMMessageGoodsHistoryToNPCCmd();
  PBItemExchange2Npc::default_instance_ = new PBItemExchange2Npc();
  CGMMessageGoodsHistoryToNPCResult::default_instance_ = new CGMMessageGoodsHistoryToNPCResult();
  CGMMessageGoodsHistoryFromNPCCmd::default_instance_ = new CGMMessageGoodsHistoryFromNPCCmd();
  CGMMessageGoodsHistoryFromNPCResult::default_instance_ = new CGMMessageGoodsHistoryFromNPCResult();
  CGMMessageGoodsHistoryBetweenUsersCmd::default_instance_ = new CGMMessageGoodsHistoryBetweenUsersCmd();
  PBItemExchange2Player::default_instance_ = new PBItemExchange2Player();
  CGMMessageGoodsHistoryBetweenUsersResult::default_instance_ = new CGMMessageGoodsHistoryBetweenUsersResult();
  CGMMessageGoodsHistoryCmd::default_instance_ = new CGMMessageGoodsHistoryCmd();
  PBItemAction::default_instance_ = new PBItemAction();
  CGMMessageGoodsHistoryResult::default_instance_ = new CGMMessageGoodsHistoryResult();
  CGMMessagePetHistoryCmd::default_instance_ = new CGMMessagePetHistoryCmd();
  PBPetHistory::default_instance_ = new PBPetHistory();
  CGMMessagePetHistoryResult::default_instance_ = new CGMMessagePetHistoryResult();
  CGMMessageOperationDetailCmd::default_instance_ = new CGMMessageOperationDetailCmd();
  CGMMessageNPCDetailCmd::default_instance_ = new CGMMessageNPCDetailCmd();
  PBNPCDetail::default_instance_ = new PBNPCDetail();
  CGMMessageNPCDetailResult::default_instance_ = new CGMMessageNPCDetailResult();
  CGMMessageGoodsDropLogCmd::default_instance_ = new CGMMessageGoodsDropLogCmd();
  PBGoodsDropLog::default_instance_ = new PBGoodsDropLog();
  CGMMessageGoodsDropLogResult::default_instance_ = new CGMMessageGoodsDropLogResult();
  CGMMessageTaskInfoCmd::default_instance_ = new CGMMessageTaskInfoCmd();
  PBTaskInfo::default_instance_ = new PBTaskInfo();
  CGMMessageTaskInfoResult::default_instance_ = new CGMMessageTaskInfoResult();
  CGMMessageLoginInfoCmd::default_instance_ = new CGMMessageLoginInfoCmd();
  PBLoginInfo::default_instance_ = new PBLoginInfo();
  CGMMessageLoginInfoResult::default_instance_ = new CGMMessageLoginInfoResult();
  CGMMessageShutUpCmd::default_instance_ = new CGMMessageShutUpCmd();
  CGMMessageCancelShutUpCmd::default_instance_ = new CGMMessageCancelShutUpCmd();
  CGMMessageFreezeAccountCmd::default_instance_ = new CGMMessageFreezeAccountCmd();
  CGMMessageFreezeAccountBatCmd::default_instance_ = new CGMMessageFreezeAccountBatCmd();
  CGMMessageUnFreezeAccountCmd::default_instance_ = new CGMMessageUnFreezeAccountCmd();
  CGMMessageTrusteeUserCmd::default_instance_ = new CGMMessageTrusteeUserCmd();
  CGMMessageUnTrusteeUserCmd::default_instance_ = new CGMMessageUnTrusteeUserCmd();
  CGMMessageMoveRoleCmd::default_instance_ = new CGMMessageMoveRoleCmd();
  CGMMessageEndTaskCmd::default_instance_ = new CGMMessageEndTaskCmd();
  CGMMessageTrusteeStorageCmd::default_instance_ = new CGMMessageTrusteeStorageCmd();
  CGMMessageUnTrusteeStorageCmd::default_instance_ = new CGMMessageUnTrusteeStorageCmd();
  CGMMessageRecoverRoleCmd::default_instance_ = new CGMMessageRecoverRoleCmd();
  CGMMessagePostBulletinCmd::default_instance_ = new CGMMessagePostBulletinCmd();
  CGMMessageMultiExpCmd::default_instance_ = new CGMMessageMultiExpCmd();
  CGMMessageCancelMultiExpCmd::default_instance_ = new CGMMessageCancelMultiExpCmd();
  CGMMessageChangeMoneyCmd::default_instance_ = new CGMMessageChangeMoneyCmd();
  CGMMessageChangeExpCmd::default_instance_ = new CGMMessageChangeExpCmd();
  CGMMessageChangeItemCmd::default_instance_ = new CGMMessageChangeItemCmd();
  CGMMessageDeleteRoleCmd::default_instance_ = new CGMMessageDeleteRoleCmd();
  CGMMessageClearBagCmd::default_instance_ = new CGMMessageClearBagCmd();
  CGMMessageChangePetCmd::default_instance_ = new CGMMessageChangePetCmd();
  CGMMessageSetOLGMAccountCmd::default_instance_ = new CGMMessageSetOLGMAccountCmd();
  CGMMessageIbInfoCmd::default_instance_ = new CGMMessageIbInfoCmd();
  PBIbItem::default_instance_ = new PBIbItem();
  CGMMessageIbInfoResult::default_instance_ = new CGMMessageIbInfoResult();
  CGMMessageSetIbPriceCmd::default_instance_ = new CGMMessageSetIbPriceCmd();
  CGMMessageSetIbLocationCmd::default_instance_ = new CGMMessageSetIbLocationCmd();
  CGMMessageIbOnSaleCmd::default_instance_ = new CGMMessageIbOnSaleCmd();
  CGMMessageIbNotSaleCmd::default_instance_ = new CGMMessageIbNotSaleCmd();
  CGMMessageIbDescriptCmd::default_instance_ = new CGMMessageIbDescriptCmd();
  CGMMessageIpBindCmd::default_instance_ = new CGMMessageIpBindCmd();
  CGMMessageRoleProtoCmd::default_instance_ = new CGMMessageRoleProtoCmd();
  CGMMessageRoleEquipmentCmd::default_instance_ = new CGMMessageRoleEquipmentCmd();
  CGMMessageRolePackInfoCmd::default_instance_ = new CGMMessageRolePackInfoCmd();
  CGMMessageRoleItemInPackCmd::default_instance_ = new CGMMessageRoleItemInPackCmd();
  CGMMessageRoleSkillInfoCmd::default_instance_ = new CGMMessageRoleSkillInfoCmd();
  CGMMessageRoleSkillDetailCmd::default_instance_ = new CGMMessageRoleSkillDetailCmd();
  CGMMessageRoleEquipmentResult::default_instance_ = new CGMMessageRoleEquipmentResult();
  CGMMessageRolePackInfoResult::default_instance_ = new CGMMessageRolePackInfoResult();
  CGMMessageRoleItemInPackResult::default_instance_ = new CGMMessageRoleItemInPackResult();
  CGMMessageRoleSkillInfoResult::default_instance_ = new CGMMessageRoleSkillInfoResult();
  CGMMessageRoleSkillDetailResult::default_instance_ = new CGMMessageRoleSkillDetailResult();
  CMessageActivityListRequest::default_instance_ = new CMessageActivityListRequest();
  PBActivity::default_instance_ = new PBActivity();
  CMessageActivityListResponse::default_instance_ = new CMessageActivityListResponse();
  CMessageUserItemListRequest::default_instance_ = new CMessageUserItemListRequest();
  PBActivityItem::default_instance_ = new PBActivityItem();
  CMessageUserItemListResponse::default_instance_ = new CMessageUserItemListResponse();
  CMessageUserItemMinusRequest::default_instance_ = new CMessageUserItemMinusRequest();
  CMessageUserItemMinusResponse::default_instance_ = new CMessageUserItemMinusResponse();
  CGMMessageRoleEquipmentDetailCmd::default_instance_ = new CGMMessageRoleEquipmentDetailCmd();
  CGMMessageRoleStorageDetailCmd::default_instance_ = new CGMMessageRoleStorageDetailCmd();
  CGMMessageRoleEquipmentDetailResult::default_instance_ = new CGMMessageRoleEquipmentDetailResult();
  CGMMessageRoleStorageDetailResult::default_instance_ = new CGMMessageRoleStorageDetailResult();
  PBSubjectAmount::default_instance_ = new PBSubjectAmount();
  CMessageFangChenMiResponse::default_instance_ = new CMessageFangChenMiResponse();
  PBFangChenMi::default_instance_ = new PBFangChenMi();
  CMessageFangChenMiRequest::default_instance_ = new CMessageFangChenMiRequest();
  CMessageFCMPlayerListNotify::default_instance_ = new CMessageFCMPlayerListNotify();
  CMessageFCMPlayerResetRequest::default_instance_ = new CMessageFCMPlayerResetRequest();
  CMessageChangeGateNotify::default_instance_ = new CMessageChangeGateNotify();
  CMessageResetRolePasswordRequest::default_instance_ = new CMessageResetRolePasswordRequest();
  CMessageResetRolePasswordResponse::default_instance_ = new CMessageResetRolePasswordResponse();
  CGMMessageRoleItemOperatedCmd::default_instance_ = new CGMMessageRoleItemOperatedCmd();
  CGMMessageRoleMoneyOperateCmd::default_instance_ = new CGMMessageRoleMoneyOperateCmd();
  CGMMessageRoleExpCmd::default_instance_ = new CGMMessageRoleExpCmd();
  CGMMessageRoleItemLevelUpCmd::default_instance_ = new CGMMessageRoleItemLevelUpCmd();
  CGMMessageFreezeMacCmd::default_instance_ = new CGMMessageFreezeMacCmd();
  CGMMessageUnFreezeMacCmd::default_instance_ = new CGMMessageUnFreezeMacCmd();
  CGMMessageCorpsTotalCmd::default_instance_ = new CGMMessageCorpsTotalCmd();
  CGMMessageCorpsDetailCmd::default_instance_ = new CGMMessageCorpsDetailCmd();
  CGMMessageCorpsInfoCmd::default_instance_ = new CGMMessageCorpsInfoCmd();
  CGMMessageRoleInfoCmd::default_instance_ = new CGMMessageRoleInfoCmd();
  CGMMsgRoleItemRecoveryCmd::default_instance_ = new CGMMsgRoleItemRecoveryCmd();
  CMessageOfflineSysMailNotify::default_instance_ = new CMessageOfflineSysMailNotify();
  CGMMessageSqlQueryResult::default_instance_ = new CGMMessageSqlQueryResult();
  CGMMessageUserInfoByIPCmd::default_instance_ = new CGMMessageUserInfoByIPCmd();
  PlayerInfo::default_instance_ = new PlayerInfo();
  IPInfo::default_instance_ = new IPInfo();
  CGMMsgUserInfoByIPResult::default_instance_ = new CGMMsgUserInfoByIPResult();
  CGMMessageQueryRoleMailCmd::default_instance_ = new CGMMessageQueryRoleMailCmd();
  CGMMessageKickRoleCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageCmdNormalResult::default_instance_->InitAsDefaultInstance();
  CGMMessageRoleDetailCmd::default_instance_->InitAsDefaultInstance();
  PBRoleInfo::default_instance_->InitAsDefaultInstance();
  CGMMessageRoleDetailResult::default_instance_->InitAsDefaultInstance();
  CGMMessageUserStorageInfoCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageUserStorageInfoResult::default_instance_->InitAsDefaultInstance();
  CGMMessageRoleLocationCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageRoleLocationResult::default_instance_->InitAsDefaultInstance();
  CGMMessageUserLevelInfoCmd::default_instance_->InitAsDefaultInstance();
  PBRoleUpgradeInfo::default_instance_->InitAsDefaultInstance();
  CGMMessageUserLevelInfoResult::default_instance_->InitAsDefaultInstance();
  CGMMessageUserSocialInfoCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageUserSocialInfoResult::default_instance_->InitAsDefaultInstance();
  CGMMessageGoodsHistoryToNPCCmd::default_instance_->InitAsDefaultInstance();
  PBItemExchange2Npc::default_instance_->InitAsDefaultInstance();
  CGMMessageGoodsHistoryToNPCResult::default_instance_->InitAsDefaultInstance();
  CGMMessageGoodsHistoryFromNPCCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageGoodsHistoryFromNPCResult::default_instance_->InitAsDefaultInstance();
  CGMMessageGoodsHistoryBetweenUsersCmd::default_instance_->InitAsDefaultInstance();
  PBItemExchange2Player::default_instance_->InitAsDefaultInstance();
  CGMMessageGoodsHistoryBetweenUsersResult::default_instance_->InitAsDefaultInstance();
  CGMMessageGoodsHistoryCmd::default_instance_->InitAsDefaultInstance();
  PBItemAction::default_instance_->InitAsDefaultInstance();
  CGMMessageGoodsHistoryResult::default_instance_->InitAsDefaultInstance();
  CGMMessagePetHistoryCmd::default_instance_->InitAsDefaultInstance();
  PBPetHistory::default_instance_->InitAsDefaultInstance();
  CGMMessagePetHistoryResult::default_instance_->InitAsDefaultInstance();
  CGMMessageOperationDetailCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageNPCDetailCmd::default_instance_->InitAsDefaultInstance();
  PBNPCDetail::default_instance_->InitAsDefaultInstance();
  CGMMessageNPCDetailResult::default_instance_->InitAsDefaultInstance();
  CGMMessageGoodsDropLogCmd::default_instance_->InitAsDefaultInstance();
  PBGoodsDropLog::default_instance_->InitAsDefaultInstance();
  CGMMessageGoodsDropLogResult::default_instance_->InitAsDefaultInstance();
  CGMMessageTaskInfoCmd::default_instance_->InitAsDefaultInstance();
  PBTaskInfo::default_instance_->InitAsDefaultInstance();
  CGMMessageTaskInfoResult::default_instance_->InitAsDefaultInstance();
  CGMMessageLoginInfoCmd::default_instance_->InitAsDefaultInstance();
  PBLoginInfo::default_instance_->InitAsDefaultInstance();
  CGMMessageLoginInfoResult::default_instance_->InitAsDefaultInstance();
  CGMMessageShutUpCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageCancelShutUpCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageFreezeAccountCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageFreezeAccountBatCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageUnFreezeAccountCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageTrusteeUserCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageUnTrusteeUserCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageMoveRoleCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageEndTaskCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageTrusteeStorageCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageUnTrusteeStorageCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageRecoverRoleCmd::default_instance_->InitAsDefaultInstance();
  CGMMessagePostBulletinCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageMultiExpCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageCancelMultiExpCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageChangeMoneyCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageChangeExpCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageChangeItemCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageDeleteRoleCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageClearBagCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageChangePetCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageSetOLGMAccountCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageIbInfoCmd::default_instance_->InitAsDefaultInstance();
  PBIbItem::default_instance_->InitAsDefaultInstance();
  CGMMessageIbInfoResult::default_instance_->InitAsDefaultInstance();
  CGMMessageSetIbPriceCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageSetIbLocationCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageIbOnSaleCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageIbNotSaleCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageIbDescriptCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageIpBindCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageRoleProtoCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageRoleEquipmentCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageRolePackInfoCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageRoleItemInPackCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageRoleSkillInfoCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageRoleSkillDetailCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageRoleEquipmentResult::default_instance_->InitAsDefaultInstance();
  CGMMessageRolePackInfoResult::default_instance_->InitAsDefaultInstance();
  CGMMessageRoleItemInPackResult::default_instance_->InitAsDefaultInstance();
  CGMMessageRoleSkillInfoResult::default_instance_->InitAsDefaultInstance();
  CGMMessageRoleSkillDetailResult::default_instance_->InitAsDefaultInstance();
  CMessageActivityListRequest::default_instance_->InitAsDefaultInstance();
  PBActivity::default_instance_->InitAsDefaultInstance();
  CMessageActivityListResponse::default_instance_->InitAsDefaultInstance();
  CMessageUserItemListRequest::default_instance_->InitAsDefaultInstance();
  PBActivityItem::default_instance_->InitAsDefaultInstance();
  CMessageUserItemListResponse::default_instance_->InitAsDefaultInstance();
  CMessageUserItemMinusRequest::default_instance_->InitAsDefaultInstance();
  CMessageUserItemMinusResponse::default_instance_->InitAsDefaultInstance();
  CGMMessageRoleEquipmentDetailCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageRoleStorageDetailCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageRoleEquipmentDetailResult::default_instance_->InitAsDefaultInstance();
  CGMMessageRoleStorageDetailResult::default_instance_->InitAsDefaultInstance();
  PBSubjectAmount::default_instance_->InitAsDefaultInstance();
  CMessageFangChenMiResponse::default_instance_->InitAsDefaultInstance();
  PBFangChenMi::default_instance_->InitAsDefaultInstance();
  CMessageFangChenMiRequest::default_instance_->InitAsDefaultInstance();
  CMessageFCMPlayerListNotify::default_instance_->InitAsDefaultInstance();
  CMessageFCMPlayerResetRequest::default_instance_->InitAsDefaultInstance();
  CMessageChangeGateNotify::default_instance_->InitAsDefaultInstance();
  CMessageResetRolePasswordRequest::default_instance_->InitAsDefaultInstance();
  CMessageResetRolePasswordResponse::default_instance_->InitAsDefaultInstance();
  CGMMessageRoleItemOperatedCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageRoleMoneyOperateCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageRoleExpCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageRoleItemLevelUpCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageFreezeMacCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageUnFreezeMacCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageCorpsTotalCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageCorpsDetailCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageCorpsInfoCmd::default_instance_->InitAsDefaultInstance();
  CGMMessageRoleInfoCmd::default_instance_->InitAsDefaultInstance();
  CGMMsgRoleItemRecoveryCmd::default_instance_->InitAsDefaultInstance();
  CMessageOfflineSysMailNotify::default_instance_->InitAsDefaultInstance();
  CGMMessageSqlQueryResult::default_instance_->InitAsDefaultInstance();
  CGMMessageUserInfoByIPCmd::default_instance_->InitAsDefaultInstance();
  PlayerInfo::default_instance_->InitAsDefaultInstance();
  IPInfo::default_instance_->InitAsDefaultInstance();
  CGMMsgUserInfoByIPResult::default_instance_->InitAsDefaultInstance();
  CGMMessageQueryRoleMailCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gmmessage_5fpb_2ehxx);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gmmessage_5fpb_2ehxx {
  StaticDescriptorInitializer_gmmessage_5fpb_2ehxx() {
    protobuf_AddDesc_gmmessage_5fpb_2ehxx();
  }
} static_descriptor_initializer_gmmessage_5fpb_2ehxx_;

const ::google::protobuf::EnumDescriptor* EMGMCmdMessageID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMGMCmdMessageID_descriptor_;
}
bool EMGMCmdMessageID_IsValid(int value) {
  switch(value) {
    case 49152:
    case 49153:
    case 49154:
    case 49155:
    case 49156:
    case 49157:
    case 49158:
    case 49159:
    case 49160:
    case 49161:
    case 49162:
    case 49163:
    case 49164:
    case 49165:
    case 49166:
    case 49167:
    case 49168:
    case 49169:
    case 49170:
    case 49171:
    case 49172:
    case 49173:
    case 49174:
    case 49184:
    case 49185:
    case 49186:
    case 49187:
    case 49188:
    case 49189:
    case 49190:
    case 49191:
    case 49192:
    case 49193:
    case 49194:
    case 49195:
    case 49196:
    case 49197:
    case 49198:
    case 49199:
    case 49200:
    case 49201:
    case 49202:
    case 49203:
    case 49204:
    case 49205:
    case 49206:
    case 49207:
    case 49208:
    case 49209:
    case 49210:
    case 49211:
    case 49212:
    case 49213:
    case 49214:
    case 49215:
    case 49216:
    case 49217:
    case 49218:
    case 49219:
    case 49220:
    case 49221:
    case 49222:
    case 49223:
    case 49224:
    case 49225:
    case 49226:
    case 49227:
    case 49228:
    case 49229:
    case 49230:
    case 49231:
    case 49232:
    case 49233:
    case 49234:
    case 49235:
    case 49236:
    case 49237:
    case 49238:
    case 49240:
    case 49241:
    case 49242:
    case 49243:
    case 49248:
    case 49249:
    case 49250:
    case 49251:
    case 49252:
    case 49253:
    case 49255:
    case 49256:
    case 49257:
    case 49258:
    case 49259:
    case 49260:
    case 49261:
    case 49262:
    case 49264:
    case 49265:
    case 49266:
    case 49267:
    case 49269:
    case 49270:
    case 49271:
    case 49272:
    case 49273:
    case 49274:
    case 49275:
    case 49276:
    case 49277:
    case 49278:
    case 49279:
    case 49280:
    case 49281:
    case 49282:
    case 51302:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CGMMessageKickRoleCmd::kSessionIdFieldNumber;
const int CGMMessageKickRoleCmd::kFdFieldNumber;
const int CGMMessageKickRoleCmd::kRoleIdFieldNumber;
#endif  // !_MSC_VER

CGMMessageKickRoleCmd::CGMMessageKickRoleCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageKickRoleCmd::InitAsDefaultInstance() {}

CGMMessageKickRoleCmd::CGMMessageKickRoleCmd(const CGMMessageKickRoleCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageKickRoleCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  role_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageKickRoleCmd::~CGMMessageKickRoleCmd() {
  SharedDtor();
}

void CGMMessageKickRoleCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageKickRoleCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageKickRoleCmd_descriptor_;
}

const CGMMessageKickRoleCmd& CGMMessageKickRoleCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageKickRoleCmd* CGMMessageKickRoleCmd::default_instance_ = NULL;

CGMMessageKickRoleCmd* CGMMessageKickRoleCmd::New() const {
  return new CGMMessageKickRoleCmd;
}

void CGMMessageKickRoleCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    role_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageKickRoleCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }
      
      // optional int32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &role_id_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageKickRoleCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageKickRoleCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional int32 role_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->role_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageKickRoleCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional int32 role_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->role_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageKickRoleCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional int32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->role_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageKickRoleCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageKickRoleCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageKickRoleCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageKickRoleCmd::MergeFrom(const CGMMessageKickRoleCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageKickRoleCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageKickRoleCmd::CopyFrom(const CGMMessageKickRoleCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageKickRoleCmd::Swap(CGMMessageKickRoleCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageKickRoleCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageKickRoleCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageKickRoleCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageKickRoleCmd_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageCmdNormalResult::kSessionIdFieldNumber;
const int CGMMessageCmdNormalResult::kFdFieldNumber;
const int CGMMessageCmdNormalResult::kResultFieldNumber;
#endif  // !_MSC_VER

CGMMessageCmdNormalResult::CGMMessageCmdNormalResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageCmdNormalResult::InitAsDefaultInstance() {}

CGMMessageCmdNormalResult::CGMMessageCmdNormalResult(const CGMMessageCmdNormalResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageCmdNormalResult::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageCmdNormalResult::~CGMMessageCmdNormalResult() {
  SharedDtor();
}

void CGMMessageCmdNormalResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageCmdNormalResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageCmdNormalResult_descriptor_;
}

const CGMMessageCmdNormalResult& CGMMessageCmdNormalResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageCmdNormalResult* CGMMessageCmdNormalResult::default_instance_ = NULL;

CGMMessageCmdNormalResult* CGMMessageCmdNormalResult::New() const {
  return new CGMMessageCmdNormalResult;
}

void CGMMessageCmdNormalResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageCmdNormalResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }
      
      // optional int32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_result:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &result_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageCmdNormalResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageCmdNormalResult::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional int32 result = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageCmdNormalResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional int32 result = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageCmdNormalResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageCmdNormalResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageCmdNormalResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageCmdNormalResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageCmdNormalResult::MergeFrom(const CGMMessageCmdNormalResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageCmdNormalResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageCmdNormalResult::CopyFrom(const CGMMessageCmdNormalResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageCmdNormalResult::Swap(CGMMessageCmdNormalResult* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageCmdNormalResult::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageCmdNormalResult::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageCmdNormalResult::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageCmdNormalResult_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageRoleDetailCmd::kSessionIdFieldNumber;
const int CGMMessageRoleDetailCmd::kFdFieldNumber;
const int CGMMessageRoleDetailCmd::kRoleIdFieldNumber;
const int CGMMessageRoleDetailCmd::kTypeFieldNumber;
#endif  // !_MSC_VER

CGMMessageRoleDetailCmd::CGMMessageRoleDetailCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageRoleDetailCmd::InitAsDefaultInstance() {}

CGMMessageRoleDetailCmd::CGMMessageRoleDetailCmd(const CGMMessageRoleDetailCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageRoleDetailCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  role_id_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageRoleDetailCmd::~CGMMessageRoleDetailCmd() {
  SharedDtor();
}

void CGMMessageRoleDetailCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageRoleDetailCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRoleDetailCmd_descriptor_;
}

const CGMMessageRoleDetailCmd& CGMMessageRoleDetailCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageRoleDetailCmd* CGMMessageRoleDetailCmd::default_instance_ = NULL;

CGMMessageRoleDetailCmd* CGMMessageRoleDetailCmd::New() const {
  return new CGMMessageRoleDetailCmd;
}

void CGMMessageRoleDetailCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    role_id_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageRoleDetailCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }
      
      // optional int32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &role_id_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }
      
      // optional int32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &type_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageRoleDetailCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageRoleDetailCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional int32 role_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->role_id(), output);
  }
  
  // optional int32 type = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageRoleDetailCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional int32 role_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->role_id(), target);
  }
  
  // optional int32 type = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageRoleDetailCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional int32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->role_id());
    }
    
    // optional int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageRoleDetailCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageRoleDetailCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageRoleDetailCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageRoleDetailCmd::MergeFrom(const CGMMessageRoleDetailCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_role_id(from.role_id());
    }
    if (from._has_bit(3)) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageRoleDetailCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRoleDetailCmd::CopyFrom(const CGMMessageRoleDetailCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRoleDetailCmd::Swap(CGMMessageRoleDetailCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(role_id_, other->role_id_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageRoleDetailCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageRoleDetailCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageRoleDetailCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRoleDetailCmd_reflection_;
}

// ===================================================================

const ::std::string PBRoleInfo::_default_role_name_;
const ::std::string PBRoleInfo::_default_login_ip_;
#ifndef _MSC_VER
const int PBRoleInfo::kRoleIdFieldNumber;
const int PBRoleInfo::kRoleStatusFieldNumber;
const int PBRoleInfo::kAccountIdFieldNumber;
const int PBRoleInfo::kRoleNameFieldNumber;
const int PBRoleInfo::kIsAliveFieldNumber;
const int PBRoleInfo::kGenderIdFieldNumber;
const int PBRoleInfo::kMetierIdFieldNumber;
const int PBRoleInfo::kNationalityIdFieldNumber;
const int PBRoleInfo::kFaceTypeFieldNumber;
const int PBRoleInfo::kLineIdFieldNumber;
const int PBRoleInfo::kMapIdFieldNumber;
const int PBRoleInfo::kPosXFieldNumber;
const int PBRoleInfo::kPosYFieldNumber;
const int PBRoleInfo::kRoleLevelFieldNumber;
const int PBRoleInfo::kRoleExprFieldNumber;
const int PBRoleInfo::kRoleMoneyFieldNumber;
const int PBRoleInfo::kBoundedMoneyFieldNumber;
const int PBRoleInfo::kLoginTimeFieldNumber;
const int PBRoleInfo::kOnlineDurationFieldNumber;
const int PBRoleInfo::kUpdateTimeFieldNumber;
const int PBRoleInfo::kCreateTimeFieldNumber;
const int PBRoleInfo::kProtoFieldNumber;
const int PBRoleInfo::kLoginIpFieldNumber;
#endif  // !_MSC_VER

PBRoleInfo::PBRoleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBRoleInfo::InitAsDefaultInstance() {  proto_ = const_cast< ::PBProperty*>(&::PBProperty::default_instance());
}

PBRoleInfo::PBRoleInfo(const PBRoleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBRoleInfo::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0;
  role_status_ = 0;
  account_id_ = 0;
  role_name_ = const_cast< ::std::string*>(&_default_role_name_);
  is_alive_ = 0;
  gender_id_ = 0;
  metier_id_ = 0;
  nationality_id_ = 0;
  face_type_ = 0;
  line_id_ = 0;
  map_id_ = 0;
  pos_x_ = 0;
  pos_y_ = 0;
  role_level_ = 0;
  role_expr_ = GOOGLE_LONGLONG(0);
  role_money_ = 0;
  bounded_money_ = 0;
  login_time_ = 0;
  online_duration_ = 0;
  update_time_ = 0;
  create_time_ = 0;
  proto_ = NULL;
  login_ip_ = const_cast< ::std::string*>(&_default_login_ip_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBRoleInfo::~PBRoleInfo() {
  SharedDtor();
}

void PBRoleInfo::SharedDtor() {
  if (role_name_ != &_default_role_name_) {
    delete role_name_;
  }
  if (login_ip_ != &_default_login_ip_) {
    delete login_ip_;
  }
  if (this != default_instance_) {
    delete proto_;
  }
}

const ::google::protobuf::Descriptor* PBRoleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBRoleInfo_descriptor_;
}

const PBRoleInfo& PBRoleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

PBRoleInfo* PBRoleInfo::default_instance_ = NULL;

PBRoleInfo* PBRoleInfo::New() const {
  return new PBRoleInfo;
}

void PBRoleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0;
    role_status_ = 0;
    account_id_ = 0;
    if (_has_bit(3)) {
      if (role_name_ != &_default_role_name_) {
        role_name_->clear();
      }
    }
    is_alive_ = 0;
    gender_id_ = 0;
    metier_id_ = 0;
    nationality_id_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    face_type_ = 0;
    line_id_ = 0;
    map_id_ = 0;
    pos_x_ = 0;
    pos_y_ = 0;
    role_level_ = 0;
    role_expr_ = GOOGLE_LONGLONG(0);
    role_money_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    bounded_money_ = 0;
    login_time_ = 0;
    online_duration_ = 0;
    update_time_ = 0;
    create_time_ = 0;
    if (_has_bit(21)) {
      if (proto_ != NULL) proto_->::PBProperty::Clear();
    }
    if (_has_bit(22)) {
      if (login_ip_ != &_default_login_ip_) {
        login_ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBRoleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional int32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &role_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_role_status;
        break;
      }
      
      // optional int32 role_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_status:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &role_status_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_account_id;
        break;
      }
      
      // optional int32 account_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_account_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &account_id_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_role_name;
        break;
      }
      
      // optional string role_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_role_name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_role_name()));
        if (input->ExpectTag(40)) goto parse_is_alive;
        break;
      }
      
      // optional int32 is_alive = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_is_alive:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &is_alive_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_gender_id;
        break;
      }
      
      // optional int32 gender_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_gender_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &gender_id_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_metier_id;
        break;
      }
      
      // optional int32 metier_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_metier_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &metier_id_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_nationality_id;
        break;
      }
      
      // optional int32 nationality_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nationality_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &nationality_id_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_face_type;
        break;
      }
      
      // optional int32 face_type = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_face_type:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &face_type_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_line_id;
        break;
      }
      
      // optional int32 line_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_line_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &line_id_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_map_id;
        break;
      }
      
      // optional int32 map_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_map_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &map_id_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_pos_x;
        break;
      }
      
      // optional int32 pos_x = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_pos_x:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &pos_x_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_pos_y;
        break;
      }
      
      // optional int32 pos_y = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_pos_y:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &pos_y_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_role_level;
        break;
      }
      
      // optional int32 role_level = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_level:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &role_level_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_role_expr;
        break;
      }
      
      // optional int64 role_expr = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_expr:
        DO_(::google::protobuf::internal::WireFormat::ReadInt64(
              input, &role_expr_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_role_money;
        break;
      }
      
      // optional int32 role_money = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_money:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &role_money_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_bounded_money;
        break;
      }
      
      // optional int32 bounded_money = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_bounded_money:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &bounded_money_));
        _set_bit(16);
        if (input->ExpectTag(144)) goto parse_login_time;
        break;
      }
      
      // optional int32 login_time = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_login_time:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &login_time_));
        _set_bit(17);
        if (input->ExpectTag(152)) goto parse_online_duration;
        break;
      }
      
      // optional int32 online_duration = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_online_duration:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &online_duration_));
        _set_bit(18);
        if (input->ExpectTag(160)) goto parse_update_time;
        break;
      }
      
      // optional int32 update_time = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_update_time:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &update_time_));
        _set_bit(19);
        if (input->ExpectTag(168)) goto parse_create_time;
        break;
      }
      
      // optional int32 create_time = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_create_time:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &create_time_));
        _set_bit(20);
        if (input->ExpectTag(178)) goto parse_proto;
        break;
      }
      
      // optional .PBProperty proto = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_proto:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_proto()));
        if (input->ExpectTag(186)) goto parse_login_ip;
        break;
      }
      
      // optional string login_ip = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_login_ip:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_login_ip()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBRoleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBRoleInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 role_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(1, this->role_id(), output);
  }
  
  // optional int32 role_status = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(2, this->role_status(), output);
  }
  
  // optional int32 account_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->account_id(), output);
  }
  
  // optional string role_name = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->role_name(), output);
  }
  
  // optional int32 is_alive = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(5, this->is_alive(), output);
  }
  
  // optional int32 gender_id = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(6, this->gender_id(), output);
  }
  
  // optional int32 metier_id = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(7, this->metier_id(), output);
  }
  
  // optional int32 nationality_id = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(8, this->nationality_id(), output);
  }
  
  // optional int32 face_type = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(9, this->face_type(), output);
  }
  
  // optional int32 line_id = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(10, this->line_id(), output);
  }
  
  // optional int32 map_id = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(11, this->map_id(), output);
  }
  
  // optional int32 pos_x = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(12, this->pos_x(), output);
  }
  
  // optional int32 pos_y = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(13, this->pos_y(), output);
  }
  
  // optional int32 role_level = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(14, this->role_level(), output);
  }
  
  // optional int64 role_expr = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteInt64(15, this->role_expr(), output);
  }
  
  // optional int32 role_money = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(16, this->role_money(), output);
  }
  
  // optional int32 bounded_money = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(17, this->bounded_money(), output);
  }
  
  // optional int32 login_time = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(18, this->login_time(), output);
  }
  
  // optional int32 online_duration = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(19, this->online_duration(), output);
  }
  
  // optional int32 update_time = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(20, this->update_time(), output);
  }
  
  // optional int32 create_time = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(21, this->create_time(), output);
  }
  
  // optional .PBProperty proto = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(22, this->proto(), output);
  }
  
  // optional string login_ip = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormat::WriteString(23, this->login_ip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBRoleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 role_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(1, this->role_id(), target);
  }
  
  // optional int32 role_status = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(2, this->role_status(), target);
  }
  
  // optional int32 account_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->account_id(), target);
  }
  
  // optional string role_name = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->role_name(), target);
  }
  
  // optional int32 is_alive = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(5, this->is_alive(), target);
  }
  
  // optional int32 gender_id = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(6, this->gender_id(), target);
  }
  
  // optional int32 metier_id = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(7, this->metier_id(), target);
  }
  
  // optional int32 nationality_id = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(8, this->nationality_id(), target);
  }
  
  // optional int32 face_type = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(9, this->face_type(), target);
  }
  
  // optional int32 line_id = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(10, this->line_id(), target);
  }
  
  // optional int32 map_id = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(11, this->map_id(), target);
  }
  
  // optional int32 pos_x = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(12, this->pos_x(), target);
  }
  
  // optional int32 pos_y = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(13, this->pos_y(), target);
  }
  
  // optional int32 role_level = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(14, this->role_level(), target);
  }
  
  // optional int64 role_expr = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt64ToArray(15, this->role_expr(), target);
  }
  
  // optional int32 role_money = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(16, this->role_money(), target);
  }
  
  // optional int32 bounded_money = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(17, this->bounded_money(), target);
  }
  
  // optional int32 login_time = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(18, this->login_time(), target);
  }
  
  // optional int32 online_duration = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(19, this->online_duration(), target);
  }
  
  // optional int32 update_time = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(20, this->update_time(), target);
  }
  
  // optional int32 create_time = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(21, this->create_time(), target);
  }
  
  // optional .PBProperty proto = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(22, this->proto(), target);
  }
  
  // optional string login_ip = 23;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(23, this->login_ip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBRoleInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->role_id());
    }
    
    // optional int32 role_status = 2;
    if (has_role_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->role_status());
    }
    
    // optional int32 account_id = 3;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->account_id());
    }
    
    // optional string role_name = 4;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->role_name());
    }
    
    // optional int32 is_alive = 5;
    if (has_is_alive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->is_alive());
    }
    
    // optional int32 gender_id = 6;
    if (has_gender_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->gender_id());
    }
    
    // optional int32 metier_id = 7;
    if (has_metier_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->metier_id());
    }
    
    // optional int32 nationality_id = 8;
    if (has_nationality_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->nationality_id());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 face_type = 9;
    if (has_face_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->face_type());
    }
    
    // optional int32 line_id = 10;
    if (has_line_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->line_id());
    }
    
    // optional int32 map_id = 11;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->map_id());
    }
    
    // optional int32 pos_x = 12;
    if (has_pos_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->pos_x());
    }
    
    // optional int32 pos_y = 13;
    if (has_pos_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->pos_y());
    }
    
    // optional int32 role_level = 14;
    if (has_role_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->role_level());
    }
    
    // optional int64 role_expr = 15;
    if (has_role_expr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int64Size(
          this->role_expr());
    }
    
    // optional int32 role_money = 16;
    if (has_role_money()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->role_money());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 bounded_money = 17;
    if (has_bounded_money()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->bounded_money());
    }
    
    // optional int32 login_time = 18;
    if (has_login_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->login_time());
    }
    
    // optional int32 online_duration = 19;
    if (has_online_duration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->online_duration());
    }
    
    // optional int32 update_time = 20;
    if (has_update_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->update_time());
    }
    
    // optional int32 create_time = 21;
    if (has_create_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->create_time());
    }
    
    // optional .PBProperty proto = 22;
    if (has_proto()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->proto());
    }
    
    // optional string login_ip = 23;
    if (has_login_ip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::StringSize(this->login_ip());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBRoleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBRoleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBRoleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBRoleInfo::MergeFrom(const PBRoleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_role_id(from.role_id());
    }
    if (from._has_bit(1)) {
      set_role_status(from.role_status());
    }
    if (from._has_bit(2)) {
      set_account_id(from.account_id());
    }
    if (from._has_bit(3)) {
      set_role_name(from.role_name());
    }
    if (from._has_bit(4)) {
      set_is_alive(from.is_alive());
    }
    if (from._has_bit(5)) {
      set_gender_id(from.gender_id());
    }
    if (from._has_bit(6)) {
      set_metier_id(from.metier_id());
    }
    if (from._has_bit(7)) {
      set_nationality_id(from.nationality_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_face_type(from.face_type());
    }
    if (from._has_bit(9)) {
      set_line_id(from.line_id());
    }
    if (from._has_bit(10)) {
      set_map_id(from.map_id());
    }
    if (from._has_bit(11)) {
      set_pos_x(from.pos_x());
    }
    if (from._has_bit(12)) {
      set_pos_y(from.pos_y());
    }
    if (from._has_bit(13)) {
      set_role_level(from.role_level());
    }
    if (from._has_bit(14)) {
      set_role_expr(from.role_expr());
    }
    if (from._has_bit(15)) {
      set_role_money(from.role_money());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_bounded_money(from.bounded_money());
    }
    if (from._has_bit(17)) {
      set_login_time(from.login_time());
    }
    if (from._has_bit(18)) {
      set_online_duration(from.online_duration());
    }
    if (from._has_bit(19)) {
      set_update_time(from.update_time());
    }
    if (from._has_bit(20)) {
      set_create_time(from.create_time());
    }
    if (from._has_bit(21)) {
      mutable_proto()->::PBProperty::MergeFrom(from.proto());
    }
    if (from._has_bit(22)) {
      set_login_ip(from.login_ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBRoleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRoleInfo::CopyFrom(const PBRoleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRoleInfo::Swap(PBRoleInfo* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(role_status_, other->role_status_);
    std::swap(account_id_, other->account_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(is_alive_, other->is_alive_);
    std::swap(gender_id_, other->gender_id_);
    std::swap(metier_id_, other->metier_id_);
    std::swap(nationality_id_, other->nationality_id_);
    std::swap(face_type_, other->face_type_);
    std::swap(line_id_, other->line_id_);
    std::swap(map_id_, other->map_id_);
    std::swap(pos_x_, other->pos_x_);
    std::swap(pos_y_, other->pos_y_);
    std::swap(role_level_, other->role_level_);
    std::swap(role_expr_, other->role_expr_);
    std::swap(role_money_, other->role_money_);
    std::swap(bounded_money_, other->bounded_money_);
    std::swap(login_time_, other->login_time_);
    std::swap(online_duration_, other->online_duration_);
    std::swap(update_time_, other->update_time_);
    std::swap(create_time_, other->create_time_);
    std::swap(proto_, other->proto_);
    std::swap(login_ip_, other->login_ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBRoleInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBRoleInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBRoleInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBRoleInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageRoleDetailResult::kSessionIdFieldNumber;
const int CGMMessageRoleDetailResult::kFdFieldNumber;
const int CGMMessageRoleDetailResult::kProtoFieldNumber;
#endif  // !_MSC_VER

CGMMessageRoleDetailResult::CGMMessageRoleDetailResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageRoleDetailResult::InitAsDefaultInstance() {  proto_ = const_cast< ::PBRoleInfo*>(&::PBRoleInfo::default_instance());
}

CGMMessageRoleDetailResult::CGMMessageRoleDetailResult(const CGMMessageRoleDetailResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageRoleDetailResult::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  proto_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageRoleDetailResult::~CGMMessageRoleDetailResult() {
  SharedDtor();
}

void CGMMessageRoleDetailResult::SharedDtor() {
  if (this != default_instance_) {
    delete proto_;
  }
}

const ::google::protobuf::Descriptor* CGMMessageRoleDetailResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRoleDetailResult_descriptor_;
}

const CGMMessageRoleDetailResult& CGMMessageRoleDetailResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageRoleDetailResult* CGMMessageRoleDetailResult::default_instance_ = NULL;

CGMMessageRoleDetailResult* CGMMessageRoleDetailResult::New() const {
  return new CGMMessageRoleDetailResult;
}

void CGMMessageRoleDetailResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    if (_has_bit(2)) {
      if (proto_ != NULL) proto_->::PBRoleInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageRoleDetailResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_proto;
        break;
      }
      
      // optional .PBRoleInfo proto = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_proto:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_proto()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageRoleDetailResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageRoleDetailResult::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional .PBRoleInfo proto = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->proto(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageRoleDetailResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional .PBRoleInfo proto = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->proto(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageRoleDetailResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional .PBRoleInfo proto = 3;
    if (has_proto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->proto());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageRoleDetailResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageRoleDetailResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageRoleDetailResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageRoleDetailResult::MergeFrom(const CGMMessageRoleDetailResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      mutable_proto()->::PBRoleInfo::MergeFrom(from.proto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageRoleDetailResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRoleDetailResult::CopyFrom(const CGMMessageRoleDetailResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRoleDetailResult::Swap(CGMMessageRoleDetailResult* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(proto_, other->proto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageRoleDetailResult::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageRoleDetailResult::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageRoleDetailResult::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRoleDetailResult_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageUserStorageInfoCmd::kSessionIdFieldNumber;
const int CGMMessageUserStorageInfoCmd::kFdFieldNumber;
const int CGMMessageUserStorageInfoCmd::kRoleIdFieldNumber;
const int CGMMessageUserStorageInfoCmd::kPageFieldNumber;
#endif  // !_MSC_VER

CGMMessageUserStorageInfoCmd::CGMMessageUserStorageInfoCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageUserStorageInfoCmd::InitAsDefaultInstance() {}

CGMMessageUserStorageInfoCmd::CGMMessageUserStorageInfoCmd(const CGMMessageUserStorageInfoCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageUserStorageInfoCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  role_id_ = 0;
  page_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageUserStorageInfoCmd::~CGMMessageUserStorageInfoCmd() {
  SharedDtor();
}

void CGMMessageUserStorageInfoCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageUserStorageInfoCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageUserStorageInfoCmd_descriptor_;
}

const CGMMessageUserStorageInfoCmd& CGMMessageUserStorageInfoCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageUserStorageInfoCmd* CGMMessageUserStorageInfoCmd::default_instance_ = NULL;

CGMMessageUserStorageInfoCmd* CGMMessageUserStorageInfoCmd::New() const {
  return new CGMMessageUserStorageInfoCmd;
}

void CGMMessageUserStorageInfoCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    role_id_ = 0;
    page_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageUserStorageInfoCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }
      
      // optional int32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &role_id_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_page;
        break;
      }
      
      // optional int32 page = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_page:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &page_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageUserStorageInfoCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageUserStorageInfoCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional int32 role_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->role_id(), output);
  }
  
  // optional int32 page = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->page(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageUserStorageInfoCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional int32 role_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->role_id(), target);
  }
  
  // optional int32 page = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->page(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageUserStorageInfoCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional int32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->role_id());
    }
    
    // optional int32 page = 4;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->page());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageUserStorageInfoCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageUserStorageInfoCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageUserStorageInfoCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageUserStorageInfoCmd::MergeFrom(const CGMMessageUserStorageInfoCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_role_id(from.role_id());
    }
    if (from._has_bit(3)) {
      set_page(from.page());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageUserStorageInfoCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageUserStorageInfoCmd::CopyFrom(const CGMMessageUserStorageInfoCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageUserStorageInfoCmd::Swap(CGMMessageUserStorageInfoCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(role_id_, other->role_id_);
    std::swap(page_, other->page_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageUserStorageInfoCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageUserStorageInfoCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageUserStorageInfoCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageUserStorageInfoCmd_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageUserStorageInfoResult::kSessionIdFieldNumber;
const int CGMMessageUserStorageInfoResult::kFdFieldNumber;
const int CGMMessageUserStorageInfoResult::kItemsFieldNumber;
#endif  // !_MSC_VER

CGMMessageUserStorageInfoResult::CGMMessageUserStorageInfoResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageUserStorageInfoResult::InitAsDefaultInstance() {  items_ = const_cast< ::PBItemBox*>(&::PBItemBox::default_instance());
}

CGMMessageUserStorageInfoResult::CGMMessageUserStorageInfoResult(const CGMMessageUserStorageInfoResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageUserStorageInfoResult::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  items_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageUserStorageInfoResult::~CGMMessageUserStorageInfoResult() {
  SharedDtor();
}

void CGMMessageUserStorageInfoResult::SharedDtor() {
  if (this != default_instance_) {
    delete items_;
  }
}

const ::google::protobuf::Descriptor* CGMMessageUserStorageInfoResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageUserStorageInfoResult_descriptor_;
}

const CGMMessageUserStorageInfoResult& CGMMessageUserStorageInfoResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageUserStorageInfoResult* CGMMessageUserStorageInfoResult::default_instance_ = NULL;

CGMMessageUserStorageInfoResult* CGMMessageUserStorageInfoResult::New() const {
  return new CGMMessageUserStorageInfoResult;
}

void CGMMessageUserStorageInfoResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    if (_has_bit(2)) {
      if (items_ != NULL) items_->::PBItemBox::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageUserStorageInfoResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }
      
      // optional .PBItemBox items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_items:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_items()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageUserStorageInfoResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageUserStorageInfoResult::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional .PBItemBox items = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->items(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageUserStorageInfoResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional .PBItemBox items = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->items(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageUserStorageInfoResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional .PBItemBox items = 3;
    if (has_items()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->items());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageUserStorageInfoResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageUserStorageInfoResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageUserStorageInfoResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageUserStorageInfoResult::MergeFrom(const CGMMessageUserStorageInfoResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      mutable_items()->::PBItemBox::MergeFrom(from.items());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageUserStorageInfoResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageUserStorageInfoResult::CopyFrom(const CGMMessageUserStorageInfoResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageUserStorageInfoResult::Swap(CGMMessageUserStorageInfoResult* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(items_, other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageUserStorageInfoResult::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageUserStorageInfoResult::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageUserStorageInfoResult::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageUserStorageInfoResult_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageRoleLocationCmd::kSessionIdFieldNumber;
const int CGMMessageRoleLocationCmd::kFdFieldNumber;
const int CGMMessageRoleLocationCmd::kRoleIdFieldNumber;
#endif  // !_MSC_VER

CGMMessageRoleLocationCmd::CGMMessageRoleLocationCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageRoleLocationCmd::InitAsDefaultInstance() {}

CGMMessageRoleLocationCmd::CGMMessageRoleLocationCmd(const CGMMessageRoleLocationCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageRoleLocationCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  role_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageRoleLocationCmd::~CGMMessageRoleLocationCmd() {
  SharedDtor();
}

void CGMMessageRoleLocationCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageRoleLocationCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRoleLocationCmd_descriptor_;
}

const CGMMessageRoleLocationCmd& CGMMessageRoleLocationCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageRoleLocationCmd* CGMMessageRoleLocationCmd::default_instance_ = NULL;

CGMMessageRoleLocationCmd* CGMMessageRoleLocationCmd::New() const {
  return new CGMMessageRoleLocationCmd;
}

void CGMMessageRoleLocationCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    role_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageRoleLocationCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }
      
      // optional int32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &role_id_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageRoleLocationCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageRoleLocationCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional int32 role_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->role_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageRoleLocationCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional int32 role_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->role_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageRoleLocationCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional int32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->role_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageRoleLocationCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageRoleLocationCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageRoleLocationCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageRoleLocationCmd::MergeFrom(const CGMMessageRoleLocationCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageRoleLocationCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRoleLocationCmd::CopyFrom(const CGMMessageRoleLocationCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRoleLocationCmd::Swap(CGMMessageRoleLocationCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageRoleLocationCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageRoleLocationCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageRoleLocationCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRoleLocationCmd_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageRoleLocationResult::kSessionIdFieldNumber;
const int CGMMessageRoleLocationResult::kFdFieldNumber;
const int CGMMessageRoleLocationResult::kLineIdFieldNumber;
const int CGMMessageRoleLocationResult::kMapIdFieldNumber;
const int CGMMessageRoleLocationResult::kXFieldNumber;
const int CGMMessageRoleLocationResult::kYFieldNumber;
const int CGMMessageRoleLocationResult::kRoleIdFieldNumber;
#endif  // !_MSC_VER

CGMMessageRoleLocationResult::CGMMessageRoleLocationResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageRoleLocationResult::InitAsDefaultInstance() {}

CGMMessageRoleLocationResult::CGMMessageRoleLocationResult(const CGMMessageRoleLocationResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageRoleLocationResult::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  line_id_ = 0;
  map_id_ = 0;
  x_ = 0;
  y_ = 0;
  role_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageRoleLocationResult::~CGMMessageRoleLocationResult() {
  SharedDtor();
}

void CGMMessageRoleLocationResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageRoleLocationResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRoleLocationResult_descriptor_;
}

const CGMMessageRoleLocationResult& CGMMessageRoleLocationResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageRoleLocationResult* CGMMessageRoleLocationResult::default_instance_ = NULL;

CGMMessageRoleLocationResult* CGMMessageRoleLocationResult::New() const {
  return new CGMMessageRoleLocationResult;
}

void CGMMessageRoleLocationResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    line_id_ = 0;
    map_id_ = 0;
    x_ = 0;
    y_ = 0;
    role_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageRoleLocationResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_line_id;
        break;
      }
      
      // optional int32 line_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_line_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &line_id_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_map_id;
        break;
      }
      
      // optional int32 map_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_map_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &map_id_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_x;
        break;
      }
      
      // optional int32 x = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_x:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &x_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_y;
        break;
      }
      
      // optional int32 y = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_y:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &y_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_role_id;
        break;
      }
      
      // optional int32 role_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &role_id_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageRoleLocationResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageRoleLocationResult::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional int32 line_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->line_id(), output);
  }
  
  // optional int32 map_id = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->map_id(), output);
  }
  
  // optional int32 x = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(5, this->x(), output);
  }
  
  // optional int32 y = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(6, this->y(), output);
  }
  
  // optional int32 role_id = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(7, this->role_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageRoleLocationResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional int32 line_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->line_id(), target);
  }
  
  // optional int32 map_id = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->map_id(), target);
  }
  
  // optional int32 x = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(5, this->x(), target);
  }
  
  // optional int32 y = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(6, this->y(), target);
  }
  
  // optional int32 role_id = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(7, this->role_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageRoleLocationResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional int32 line_id = 3;
    if (has_line_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->line_id());
    }
    
    // optional int32 map_id = 4;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->map_id());
    }
    
    // optional int32 x = 5;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->x());
    }
    
    // optional int32 y = 6;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->y());
    }
    
    // optional int32 role_id = 7;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->role_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageRoleLocationResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageRoleLocationResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageRoleLocationResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageRoleLocationResult::MergeFrom(const CGMMessageRoleLocationResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_line_id(from.line_id());
    }
    if (from._has_bit(3)) {
      set_map_id(from.map_id());
    }
    if (from._has_bit(4)) {
      set_x(from.x());
    }
    if (from._has_bit(5)) {
      set_y(from.y());
    }
    if (from._has_bit(6)) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageRoleLocationResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRoleLocationResult::CopyFrom(const CGMMessageRoleLocationResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRoleLocationResult::Swap(CGMMessageRoleLocationResult* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(line_id_, other->line_id_);
    std::swap(map_id_, other->map_id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageRoleLocationResult::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageRoleLocationResult::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageRoleLocationResult::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRoleLocationResult_reflection_;
}

// ===================================================================

const ::std::string CGMMessageUserLevelInfoCmd::_default_start_time_;
const ::std::string CGMMessageUserLevelInfoCmd::_default_end_time_;
#ifndef _MSC_VER
const int CGMMessageUserLevelInfoCmd::kSessionIdFieldNumber;
const int CGMMessageUserLevelInfoCmd::kFdFieldNumber;
const int CGMMessageUserLevelInfoCmd::kRoleIdFieldNumber;
const int CGMMessageUserLevelInfoCmd::kStartTimeFieldNumber;
const int CGMMessageUserLevelInfoCmd::kEndTimeFieldNumber;
#endif  // !_MSC_VER

CGMMessageUserLevelInfoCmd::CGMMessageUserLevelInfoCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageUserLevelInfoCmd::InitAsDefaultInstance() {}

CGMMessageUserLevelInfoCmd::CGMMessageUserLevelInfoCmd(const CGMMessageUserLevelInfoCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageUserLevelInfoCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  role_id_ = 0u;
  start_time_ = const_cast< ::std::string*>(&_default_start_time_);
  end_time_ = const_cast< ::std::string*>(&_default_end_time_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageUserLevelInfoCmd::~CGMMessageUserLevelInfoCmd() {
  SharedDtor();
}

void CGMMessageUserLevelInfoCmd::SharedDtor() {
  if (start_time_ != &_default_start_time_) {
    delete start_time_;
  }
  if (end_time_ != &_default_end_time_) {
    delete end_time_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageUserLevelInfoCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageUserLevelInfoCmd_descriptor_;
}

const CGMMessageUserLevelInfoCmd& CGMMessageUserLevelInfoCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageUserLevelInfoCmd* CGMMessageUserLevelInfoCmd::default_instance_ = NULL;

CGMMessageUserLevelInfoCmd* CGMMessageUserLevelInfoCmd::New() const {
  return new CGMMessageUserLevelInfoCmd;
}

void CGMMessageUserLevelInfoCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    role_id_ = 0u;
    if (_has_bit(3)) {
      if (start_time_ != &_default_start_time_) {
        start_time_->clear();
      }
    }
    if (_has_bit(4)) {
      if (end_time_ != &_default_end_time_) {
        end_time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageUserLevelInfoCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }
      
      // optional uint32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &role_id_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_start_time;
        break;
      }
      
      // optional string start_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_start_time:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_start_time()));
        if (input->ExpectTag(42)) goto parse_end_time;
        break;
      }
      
      // optional string end_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_end_time:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_end_time()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageUserLevelInfoCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageUserLevelInfoCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional uint32 role_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->role_id(), output);
  }
  
  // optional string start_time = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->start_time(), output);
  }
  
  // optional string end_time = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->end_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageUserLevelInfoCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional uint32 role_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->role_id(), target);
  }
  
  // optional string start_time = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->start_time(), target);
  }
  
  // optional string end_time = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->end_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageUserLevelInfoCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional uint32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->role_id());
    }
    
    // optional string start_time = 4;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->start_time());
    }
    
    // optional string end_time = 5;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->end_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageUserLevelInfoCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageUserLevelInfoCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageUserLevelInfoCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageUserLevelInfoCmd::MergeFrom(const CGMMessageUserLevelInfoCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_role_id(from.role_id());
    }
    if (from._has_bit(3)) {
      set_start_time(from.start_time());
    }
    if (from._has_bit(4)) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageUserLevelInfoCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageUserLevelInfoCmd::CopyFrom(const CGMMessageUserLevelInfoCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageUserLevelInfoCmd::Swap(CGMMessageUserLevelInfoCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(role_id_, other->role_id_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageUserLevelInfoCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageUserLevelInfoCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageUserLevelInfoCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageUserLevelInfoCmd_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBRoleUpgradeInfo::kLevelFieldNumber;
const int PBRoleUpgradeInfo::kUpPeriodFieldNumber;
const int PBRoleUpgradeInfo::kUpTimeFieldNumber;
#endif  // !_MSC_VER

PBRoleUpgradeInfo::PBRoleUpgradeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBRoleUpgradeInfo::InitAsDefaultInstance() {}

PBRoleUpgradeInfo::PBRoleUpgradeInfo(const PBRoleUpgradeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBRoleUpgradeInfo::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  up_period_ = 0;
  up_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBRoleUpgradeInfo::~PBRoleUpgradeInfo() {
  SharedDtor();
}

void PBRoleUpgradeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBRoleUpgradeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBRoleUpgradeInfo_descriptor_;
}

const PBRoleUpgradeInfo& PBRoleUpgradeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

PBRoleUpgradeInfo* PBRoleUpgradeInfo::default_instance_ = NULL;

PBRoleUpgradeInfo* PBRoleUpgradeInfo::New() const {
  return new PBRoleUpgradeInfo;
}

void PBRoleUpgradeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    up_period_ = 0;
    up_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBRoleUpgradeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &level_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_up_period;
        break;
      }
      
      // optional int32 up_period = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_up_period:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &up_period_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_up_time;
        break;
      }
      
      // optional int32 up_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_up_time:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &up_time_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBRoleUpgradeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBRoleUpgradeInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 level = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(1, this->level(), output);
  }
  
  // optional int32 up_period = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(2, this->up_period(), output);
  }
  
  // optional int32 up_time = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->up_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBRoleUpgradeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 level = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(1, this->level(), target);
  }
  
  // optional int32 up_period = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(2, this->up_period(), target);
  }
  
  // optional int32 up_time = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->up_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBRoleUpgradeInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->level());
    }
    
    // optional int32 up_period = 2;
    if (has_up_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->up_period());
    }
    
    // optional int32 up_time = 3;
    if (has_up_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->up_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBRoleUpgradeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBRoleUpgradeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBRoleUpgradeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBRoleUpgradeInfo::MergeFrom(const PBRoleUpgradeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_level(from.level());
    }
    if (from._has_bit(1)) {
      set_up_period(from.up_period());
    }
    if (from._has_bit(2)) {
      set_up_time(from.up_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBRoleUpgradeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRoleUpgradeInfo::CopyFrom(const PBRoleUpgradeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRoleUpgradeInfo::Swap(PBRoleUpgradeInfo* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(up_period_, other->up_period_);
    std::swap(up_time_, other->up_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBRoleUpgradeInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBRoleUpgradeInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBRoleUpgradeInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBRoleUpgradeInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageUserLevelInfoResult::kSessionIdFieldNumber;
const int CGMMessageUserLevelInfoResult::kFdFieldNumber;
const int CGMMessageUserLevelInfoResult::kRoleUpgradeInfoFieldNumber;
#endif  // !_MSC_VER

CGMMessageUserLevelInfoResult::CGMMessageUserLevelInfoResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageUserLevelInfoResult::InitAsDefaultInstance() {}

CGMMessageUserLevelInfoResult::CGMMessageUserLevelInfoResult(const CGMMessageUserLevelInfoResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageUserLevelInfoResult::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageUserLevelInfoResult::~CGMMessageUserLevelInfoResult() {
  SharedDtor();
}

void CGMMessageUserLevelInfoResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageUserLevelInfoResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageUserLevelInfoResult_descriptor_;
}

const CGMMessageUserLevelInfoResult& CGMMessageUserLevelInfoResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageUserLevelInfoResult* CGMMessageUserLevelInfoResult::default_instance_ = NULL;

CGMMessageUserLevelInfoResult* CGMMessageUserLevelInfoResult::New() const {
  return new CGMMessageUserLevelInfoResult;
}

void CGMMessageUserLevelInfoResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
  }
  role_upgrade_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageUserLevelInfoResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_role_upgrade_info;
        break;
      }
      
      // repeated .PBRoleUpgradeInfo role_upgrade_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_role_upgrade_info:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_role_upgrade_info()));
        if (input->ExpectTag(26)) goto parse_role_upgrade_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageUserLevelInfoResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageUserLevelInfoResult::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // repeated .PBRoleUpgradeInfo role_upgrade_info = 3;
  for (int i = 0; i < this->role_upgrade_info_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->role_upgrade_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageUserLevelInfoResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // repeated .PBRoleUpgradeInfo role_upgrade_info = 3;
  for (int i = 0; i < this->role_upgrade_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->role_upgrade_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageUserLevelInfoResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
  }
  // repeated .PBRoleUpgradeInfo role_upgrade_info = 3;
  total_size += 1 * this->role_upgrade_info_size();
  for (int i = 0; i < this->role_upgrade_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->role_upgrade_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageUserLevelInfoResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageUserLevelInfoResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageUserLevelInfoResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageUserLevelInfoResult::MergeFrom(const CGMMessageUserLevelInfoResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_upgrade_info_.MergeFrom(from.role_upgrade_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageUserLevelInfoResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageUserLevelInfoResult::CopyFrom(const CGMMessageUserLevelInfoResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageUserLevelInfoResult::Swap(CGMMessageUserLevelInfoResult* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    role_upgrade_info_.Swap(&other->role_upgrade_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageUserLevelInfoResult::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageUserLevelInfoResult::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageUserLevelInfoResult::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageUserLevelInfoResult_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageUserSocialInfoCmd::kSessionIdFieldNumber;
const int CGMMessageUserSocialInfoCmd::kFdFieldNumber;
const int CGMMessageUserSocialInfoCmd::kRoleIdFieldNumber;
const int CGMMessageUserSocialInfoCmd::kTypeFieldNumber;
#endif  // !_MSC_VER

CGMMessageUserSocialInfoCmd::CGMMessageUserSocialInfoCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageUserSocialInfoCmd::InitAsDefaultInstance() {}

CGMMessageUserSocialInfoCmd::CGMMessageUserSocialInfoCmd(const CGMMessageUserSocialInfoCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageUserSocialInfoCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  role_id_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageUserSocialInfoCmd::~CGMMessageUserSocialInfoCmd() {
  SharedDtor();
}

void CGMMessageUserSocialInfoCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageUserSocialInfoCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageUserSocialInfoCmd_descriptor_;
}

const CGMMessageUserSocialInfoCmd& CGMMessageUserSocialInfoCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageUserSocialInfoCmd* CGMMessageUserSocialInfoCmd::default_instance_ = NULL;

CGMMessageUserSocialInfoCmd* CGMMessageUserSocialInfoCmd::New() const {
  return new CGMMessageUserSocialInfoCmd;
}

void CGMMessageUserSocialInfoCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    role_id_ = 0;
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageUserSocialInfoCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }
      
      // optional int32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &role_id_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }
      
      // optional uint32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageUserSocialInfoCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageUserSocialInfoCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional int32 role_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->role_id(), output);
  }
  
  // optional uint32 type = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageUserSocialInfoCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional int32 role_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->role_id(), target);
  }
  
  // optional uint32 type = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageUserSocialInfoCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional int32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->role_id());
    }
    
    // optional uint32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageUserSocialInfoCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageUserSocialInfoCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageUserSocialInfoCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageUserSocialInfoCmd::MergeFrom(const CGMMessageUserSocialInfoCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_role_id(from.role_id());
    }
    if (from._has_bit(3)) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageUserSocialInfoCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageUserSocialInfoCmd::CopyFrom(const CGMMessageUserSocialInfoCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageUserSocialInfoCmd::Swap(CGMMessageUserSocialInfoCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(role_id_, other->role_id_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageUserSocialInfoCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageUserSocialInfoCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageUserSocialInfoCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageUserSocialInfoCmd_reflection_;
}

// ===================================================================

const ::std::string CGMMessageUserSocialInfoResult::_default_familyname_;
const ::std::string CGMMessageUserSocialInfoResult::_default_corpsname_;
const ::std::string CGMMessageUserSocialInfoResult::_default_weddingtime_;
const ::std::string CGMMessageUserSocialInfoResult::_default_marriagetime_;
#ifndef _MSC_VER
const int CGMMessageUserSocialInfoResult::kSessionIdFieldNumber;
const int CGMMessageUserSocialInfoResult::kFdFieldNumber;
const int CGMMessageUserSocialInfoResult::kFriendsFieldNumber;
const int CGMMessageUserSocialInfoResult::kFamilynameFieldNumber;
const int CGMMessageUserSocialInfoResult::kCorpsnameFieldNumber;
const int CGMMessageUserSocialInfoResult::kSpouseidFieldNumber;
const int CGMMessageUserSocialInfoResult::kWeddingModuleFieldNumber;
const int CGMMessageUserSocialInfoResult::kMarriageIDFieldNumber;
const int CGMMessageUserSocialInfoResult::kWeddingTimeFieldNumber;
const int CGMMessageUserSocialInfoResult::kMarriageTimeFieldNumber;
const int CGMMessageUserSocialInfoResult::kMatrixInfoFieldNumber;
#endif  // !_MSC_VER

CGMMessageUserSocialInfoResult::CGMMessageUserSocialInfoResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageUserSocialInfoResult::InitAsDefaultInstance() {  friends_ = const_cast< ::PBFriend*>(&::PBFriend::default_instance());
  matrixinfo_ = const_cast< ::PBMatrixInfo*>(&::PBMatrixInfo::default_instance());
}

CGMMessageUserSocialInfoResult::CGMMessageUserSocialInfoResult(const CGMMessageUserSocialInfoResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageUserSocialInfoResult::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  friends_ = NULL;
  familyname_ = const_cast< ::std::string*>(&_default_familyname_);
  corpsname_ = const_cast< ::std::string*>(&_default_corpsname_);
  spouseid_ = 0u;
  weddingmodule_ = 0u;
  marriageid_ = 0u;
  weddingtime_ = const_cast< ::std::string*>(&_default_weddingtime_);
  marriagetime_ = const_cast< ::std::string*>(&_default_marriagetime_);
  matrixinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageUserSocialInfoResult::~CGMMessageUserSocialInfoResult() {
  SharedDtor();
}

void CGMMessageUserSocialInfoResult::SharedDtor() {
  if (familyname_ != &_default_familyname_) {
    delete familyname_;
  }
  if (corpsname_ != &_default_corpsname_) {
    delete corpsname_;
  }
  if (weddingtime_ != &_default_weddingtime_) {
    delete weddingtime_;
  }
  if (marriagetime_ != &_default_marriagetime_) {
    delete marriagetime_;
  }
  if (this != default_instance_) {
    delete friends_;
    delete matrixinfo_;
  }
}

const ::google::protobuf::Descriptor* CGMMessageUserSocialInfoResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageUserSocialInfoResult_descriptor_;
}

const CGMMessageUserSocialInfoResult& CGMMessageUserSocialInfoResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageUserSocialInfoResult* CGMMessageUserSocialInfoResult::default_instance_ = NULL;

CGMMessageUserSocialInfoResult* CGMMessageUserSocialInfoResult::New() const {
  return new CGMMessageUserSocialInfoResult;
}

void CGMMessageUserSocialInfoResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    if (_has_bit(2)) {
      if (friends_ != NULL) friends_->::PBFriend::Clear();
    }
    if (_has_bit(3)) {
      if (familyname_ != &_default_familyname_) {
        familyname_->clear();
      }
    }
    if (_has_bit(4)) {
      if (corpsname_ != &_default_corpsname_) {
        corpsname_->clear();
      }
    }
    spouseid_ = 0u;
    weddingmodule_ = 0u;
    marriageid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (weddingtime_ != &_default_weddingtime_) {
        weddingtime_->clear();
      }
    }
    if (_has_bit(9)) {
      if (marriagetime_ != &_default_marriagetime_) {
        marriagetime_->clear();
      }
    }
    if (_has_bit(10)) {
      if (matrixinfo_ != NULL) matrixinfo_->::PBMatrixInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageUserSocialInfoResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_friends;
        break;
      }
      
      // optional .PBFriend friends = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_friends:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_friends()));
        if (input->ExpectTag(34)) goto parse_familyname;
        break;
      }
      
      // optional string familyname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_familyname:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_familyname()));
        if (input->ExpectTag(42)) goto parse_corpsname;
        break;
      }
      
      // optional string corpsname = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_corpsname:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_corpsname()));
        if (input->ExpectTag(48)) goto parse_spouseid;
        break;
      }
      
      // optional uint32 spouseid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_spouseid:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &spouseid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_WeddingModule;
        break;
      }
      
      // optional uint32 WeddingModule = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WeddingModule:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &weddingmodule_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_MarriageID;
        break;
      }
      
      // optional uint32 MarriageID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MarriageID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &marriageid_));
        _set_bit(7);
        if (input->ExpectTag(74)) goto parse_WeddingTime;
        break;
      }
      
      // optional string WeddingTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_WeddingTime:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_weddingtime()));
        if (input->ExpectTag(82)) goto parse_MarriageTime;
        break;
      }
      
      // optional string MarriageTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MarriageTime:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_marriagetime()));
        if (input->ExpectTag(90)) goto parse_MatrixInfo;
        break;
      }
      
      // optional .PBMatrixInfo MatrixInfo = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MatrixInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_matrixinfo()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageUserSocialInfoResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageUserSocialInfoResult::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional .PBFriend friends = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->friends(), output);
  }
  
  // optional string familyname = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->familyname(), output);
  }
  
  // optional string corpsname = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->corpsname(), output);
  }
  
  // optional uint32 spouseid = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->spouseid(), output);
  }
  
  // optional uint32 WeddingModule = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->weddingmodule(), output);
  }
  
  // optional uint32 MarriageID = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->marriageid(), output);
  }
  
  // optional string WeddingTime = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteString(9, this->weddingtime(), output);
  }
  
  // optional string MarriageTime = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteString(10, this->marriagetime(), output);
  }
  
  // optional .PBMatrixInfo MatrixInfo = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(11, this->matrixinfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageUserSocialInfoResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional .PBFriend friends = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->friends(), target);
  }
  
  // optional string familyname = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->familyname(), target);
  }
  
  // optional string corpsname = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->corpsname(), target);
  }
  
  // optional uint32 spouseid = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->spouseid(), target);
  }
  
  // optional uint32 WeddingModule = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->weddingmodule(), target);
  }
  
  // optional uint32 MarriageID = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->marriageid(), target);
  }
  
  // optional string WeddingTime = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(9, this->weddingtime(), target);
  }
  
  // optional string MarriageTime = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(10, this->marriagetime(), target);
  }
  
  // optional .PBMatrixInfo MatrixInfo = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(11, this->matrixinfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageUserSocialInfoResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional .PBFriend friends = 3;
    if (has_friends()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->friends());
    }
    
    // optional string familyname = 4;
    if (has_familyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->familyname());
    }
    
    // optional string corpsname = 5;
    if (has_corpsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->corpsname());
    }
    
    // optional uint32 spouseid = 6;
    if (has_spouseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->spouseid());
    }
    
    // optional uint32 WeddingModule = 7;
    if (has_weddingmodule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->weddingmodule());
    }
    
    // optional uint32 MarriageID = 8;
    if (has_marriageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->marriageid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string WeddingTime = 9;
    if (has_weddingtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->weddingtime());
    }
    
    // optional string MarriageTime = 10;
    if (has_marriagetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->marriagetime());
    }
    
    // optional .PBMatrixInfo MatrixInfo = 11;
    if (has_matrixinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->matrixinfo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageUserSocialInfoResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageUserSocialInfoResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageUserSocialInfoResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageUserSocialInfoResult::MergeFrom(const CGMMessageUserSocialInfoResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      mutable_friends()->::PBFriend::MergeFrom(from.friends());
    }
    if (from._has_bit(3)) {
      set_familyname(from.familyname());
    }
    if (from._has_bit(4)) {
      set_corpsname(from.corpsname());
    }
    if (from._has_bit(5)) {
      set_spouseid(from.spouseid());
    }
    if (from._has_bit(6)) {
      set_weddingmodule(from.weddingmodule());
    }
    if (from._has_bit(7)) {
      set_marriageid(from.marriageid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_weddingtime(from.weddingtime());
    }
    if (from._has_bit(9)) {
      set_marriagetime(from.marriagetime());
    }
    if (from._has_bit(10)) {
      mutable_matrixinfo()->::PBMatrixInfo::MergeFrom(from.matrixinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageUserSocialInfoResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageUserSocialInfoResult::CopyFrom(const CGMMessageUserSocialInfoResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageUserSocialInfoResult::Swap(CGMMessageUserSocialInfoResult* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(friends_, other->friends_);
    std::swap(familyname_, other->familyname_);
    std::swap(corpsname_, other->corpsname_);
    std::swap(spouseid_, other->spouseid_);
    std::swap(weddingmodule_, other->weddingmodule_);
    std::swap(marriageid_, other->marriageid_);
    std::swap(weddingtime_, other->weddingtime_);
    std::swap(marriagetime_, other->marriagetime_);
    std::swap(matrixinfo_, other->matrixinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageUserSocialInfoResult::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageUserSocialInfoResult::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageUserSocialInfoResult::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageUserSocialInfoResult_reflection_;
}

// ===================================================================

const ::std::string CGMMessageGoodsHistoryToNPCCmd::_default_npc_name_;
const ::std::string CGMMessageGoodsHistoryToNPCCmd::_default_start_time_;
const ::std::string CGMMessageGoodsHistoryToNPCCmd::_default_end_time_;
#ifndef _MSC_VER
const int CGMMessageGoodsHistoryToNPCCmd::kSessionIdFieldNumber;
const int CGMMessageGoodsHistoryToNPCCmd::kFdFieldNumber;
const int CGMMessageGoodsHistoryToNPCCmd::kRoleIdFieldNumber;
const int CGMMessageGoodsHistoryToNPCCmd::kRoleFlagFieldNumber;
const int CGMMessageGoodsHistoryToNPCCmd::kNpcNameFieldNumber;
const int CGMMessageGoodsHistoryToNPCCmd::kStartTimeFieldNumber;
const int CGMMessageGoodsHistoryToNPCCmd::kEndTimeFieldNumber;
#endif  // !_MSC_VER

CGMMessageGoodsHistoryToNPCCmd::CGMMessageGoodsHistoryToNPCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageGoodsHistoryToNPCCmd::InitAsDefaultInstance() {}

CGMMessageGoodsHistoryToNPCCmd::CGMMessageGoodsHistoryToNPCCmd(const CGMMessageGoodsHistoryToNPCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageGoodsHistoryToNPCCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  role_id_ = 0;
  role_flag_ = 0;
  npc_name_ = const_cast< ::std::string*>(&_default_npc_name_);
  start_time_ = const_cast< ::std::string*>(&_default_start_time_);
  end_time_ = const_cast< ::std::string*>(&_default_end_time_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageGoodsHistoryToNPCCmd::~CGMMessageGoodsHistoryToNPCCmd() {
  SharedDtor();
}

void CGMMessageGoodsHistoryToNPCCmd::SharedDtor() {
  if (npc_name_ != &_default_npc_name_) {
    delete npc_name_;
  }
  if (start_time_ != &_default_start_time_) {
    delete start_time_;
  }
  if (end_time_ != &_default_end_time_) {
    delete end_time_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageGoodsHistoryToNPCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageGoodsHistoryToNPCCmd_descriptor_;
}

const CGMMessageGoodsHistoryToNPCCmd& CGMMessageGoodsHistoryToNPCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageGoodsHistoryToNPCCmd* CGMMessageGoodsHistoryToNPCCmd::default_instance_ = NULL;

CGMMessageGoodsHistoryToNPCCmd* CGMMessageGoodsHistoryToNPCCmd::New() const {
  return new CGMMessageGoodsHistoryToNPCCmd;
}

void CGMMessageGoodsHistoryToNPCCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    role_id_ = 0;
    role_flag_ = 0;
    if (_has_bit(4)) {
      if (npc_name_ != &_default_npc_name_) {
        npc_name_->clear();
      }
    }
    if (_has_bit(5)) {
      if (start_time_ != &_default_start_time_) {
        start_time_->clear();
      }
    }
    if (_has_bit(6)) {
      if (end_time_ != &_default_end_time_) {
        end_time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageGoodsHistoryToNPCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }
      
      // optional int32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &role_id_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_role_flag;
        break;
      }
      
      // optional int32 role_flag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_flag:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &role_flag_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_npc_name;
        break;
      }
      
      // optional string npc_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_npc_name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_npc_name()));
        if (input->ExpectTag(50)) goto parse_start_time;
        break;
      }
      
      // optional string start_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_start_time:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_start_time()));
        if (input->ExpectTag(58)) goto parse_end_time;
        break;
      }
      
      // optional string end_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_end_time:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_end_time()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageGoodsHistoryToNPCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageGoodsHistoryToNPCCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional int32 role_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->role_id(), output);
  }
  
  // optional int32 role_flag = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->role_flag(), output);
  }
  
  // optional string npc_name = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->npc_name(), output);
  }
  
  // optional string start_time = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteString(6, this->start_time(), output);
  }
  
  // optional string end_time = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteString(7, this->end_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageGoodsHistoryToNPCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional int32 role_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->role_id(), target);
  }
  
  // optional int32 role_flag = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->role_flag(), target);
  }
  
  // optional string npc_name = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->npc_name(), target);
  }
  
  // optional string start_time = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(6, this->start_time(), target);
  }
  
  // optional string end_time = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(7, this->end_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageGoodsHistoryToNPCCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional int32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->role_id());
    }
    
    // optional int32 role_flag = 4;
    if (has_role_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->role_flag());
    }
    
    // optional string npc_name = 5;
    if (has_npc_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->npc_name());
    }
    
    // optional string start_time = 6;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->start_time());
    }
    
    // optional string end_time = 7;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->end_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageGoodsHistoryToNPCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageGoodsHistoryToNPCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageGoodsHistoryToNPCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageGoodsHistoryToNPCCmd::MergeFrom(const CGMMessageGoodsHistoryToNPCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_role_id(from.role_id());
    }
    if (from._has_bit(3)) {
      set_role_flag(from.role_flag());
    }
    if (from._has_bit(4)) {
      set_npc_name(from.npc_name());
    }
    if (from._has_bit(5)) {
      set_start_time(from.start_time());
    }
    if (from._has_bit(6)) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageGoodsHistoryToNPCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageGoodsHistoryToNPCCmd::CopyFrom(const CGMMessageGoodsHistoryToNPCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageGoodsHistoryToNPCCmd::Swap(CGMMessageGoodsHistoryToNPCCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(role_id_, other->role_id_);
    std::swap(role_flag_, other->role_flag_);
    std::swap(npc_name_, other->npc_name_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageGoodsHistoryToNPCCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageGoodsHistoryToNPCCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageGoodsHistoryToNPCCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageGoodsHistoryToNPCCmd_reflection_;
}

// ===================================================================

const ::std::string PBItemExchange2Npc::_default_npc_name_;
const ::std::string PBItemExchange2Npc::_default_item_name_;
const ::std::string PBItemExchange2Npc::_default_exchange_time_;
#ifndef _MSC_VER
const int PBItemExchange2Npc::kNpcNameFieldNumber;
const int PBItemExchange2Npc::kItemNameFieldNumber;
const int PBItemExchange2Npc::kItemNumFieldNumber;
const int PBItemExchange2Npc::kExchangeTimeFieldNumber;
#endif  // !_MSC_VER

PBItemExchange2Npc::PBItemExchange2Npc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemExchange2Npc::InitAsDefaultInstance() {}

PBItemExchange2Npc::PBItemExchange2Npc(const PBItemExchange2Npc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemExchange2Npc::SharedCtor() {
  _cached_size_ = 0;
  npc_name_ = const_cast< ::std::string*>(&_default_npc_name_);
  item_name_ = const_cast< ::std::string*>(&_default_item_name_);
  item_num_ = 0;
  exchange_time_ = const_cast< ::std::string*>(&_default_exchange_time_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemExchange2Npc::~PBItemExchange2Npc() {
  SharedDtor();
}

void PBItemExchange2Npc::SharedDtor() {
  if (npc_name_ != &_default_npc_name_) {
    delete npc_name_;
  }
  if (item_name_ != &_default_item_name_) {
    delete item_name_;
  }
  if (exchange_time_ != &_default_exchange_time_) {
    delete exchange_time_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBItemExchange2Npc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemExchange2Npc_descriptor_;
}

const PBItemExchange2Npc& PBItemExchange2Npc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

PBItemExchange2Npc* PBItemExchange2Npc::default_instance_ = NULL;

PBItemExchange2Npc* PBItemExchange2Npc::New() const {
  return new PBItemExchange2Npc;
}

void PBItemExchange2Npc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (npc_name_ != &_default_npc_name_) {
        npc_name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (item_name_ != &_default_item_name_) {
        item_name_->clear();
      }
    }
    item_num_ = 0;
    if (_has_bit(3)) {
      if (exchange_time_ != &_default_exchange_time_) {
        exchange_time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemExchange2Npc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string npc_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_npc_name()));
        if (input->ExpectTag(18)) goto parse_item_name;
        break;
      }
      
      // optional string item_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_item_name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_item_name()));
        if (input->ExpectTag(24)) goto parse_item_num;
        break;
      }
      
      // optional int32 item_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_item_num:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &item_num_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_exchange_time;
        break;
      }
      
      // optional string exchange_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_exchange_time:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_exchange_time()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemExchange2Npc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemExchange2Npc::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string npc_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->npc_name(), output);
  }
  
  // optional string item_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->item_name(), output);
  }
  
  // optional int32 item_num = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->item_num(), output);
  }
  
  // optional string exchange_time = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->exchange_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemExchange2Npc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string npc_name = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->npc_name(), target);
  }
  
  // optional string item_name = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->item_name(), target);
  }
  
  // optional int32 item_num = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->item_num(), target);
  }
  
  // optional string exchange_time = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->exchange_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemExchange2Npc::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string npc_name = 1;
    if (has_npc_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->npc_name());
    }
    
    // optional string item_name = 2;
    if (has_item_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->item_name());
    }
    
    // optional int32 item_num = 3;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->item_num());
    }
    
    // optional string exchange_time = 4;
    if (has_exchange_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->exchange_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemExchange2Npc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemExchange2Npc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemExchange2Npc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemExchange2Npc::MergeFrom(const PBItemExchange2Npc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_npc_name(from.npc_name());
    }
    if (from._has_bit(1)) {
      set_item_name(from.item_name());
    }
    if (from._has_bit(2)) {
      set_item_num(from.item_num());
    }
    if (from._has_bit(3)) {
      set_exchange_time(from.exchange_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemExchange2Npc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemExchange2Npc::CopyFrom(const PBItemExchange2Npc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemExchange2Npc::Swap(PBItemExchange2Npc* other) {
  if (other != this) {
    std::swap(npc_name_, other->npc_name_);
    std::swap(item_name_, other->item_name_);
    std::swap(item_num_, other->item_num_);
    std::swap(exchange_time_, other->exchange_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemExchange2Npc::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemExchange2Npc::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemExchange2Npc::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemExchange2Npc_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageGoodsHistoryToNPCResult::kItemsSelledFieldNumber;
#endif  // !_MSC_VER

CGMMessageGoodsHistoryToNPCResult::CGMMessageGoodsHistoryToNPCResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageGoodsHistoryToNPCResult::InitAsDefaultInstance() {}

CGMMessageGoodsHistoryToNPCResult::CGMMessageGoodsHistoryToNPCResult(const CGMMessageGoodsHistoryToNPCResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageGoodsHistoryToNPCResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageGoodsHistoryToNPCResult::~CGMMessageGoodsHistoryToNPCResult() {
  SharedDtor();
}

void CGMMessageGoodsHistoryToNPCResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageGoodsHistoryToNPCResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageGoodsHistoryToNPCResult_descriptor_;
}

const CGMMessageGoodsHistoryToNPCResult& CGMMessageGoodsHistoryToNPCResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageGoodsHistoryToNPCResult* CGMMessageGoodsHistoryToNPCResult::default_instance_ = NULL;

CGMMessageGoodsHistoryToNPCResult* CGMMessageGoodsHistoryToNPCResult::New() const {
  return new CGMMessageGoodsHistoryToNPCResult;
}

void CGMMessageGoodsHistoryToNPCResult::Clear() {
  items_selled_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageGoodsHistoryToNPCResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .PBItemExchange2Npc items_selled = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_items_selled:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_items_selled()));
        if (input->ExpectTag(10)) goto parse_items_selled;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageGoodsHistoryToNPCResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageGoodsHistoryToNPCResult::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .PBItemExchange2Npc items_selled = 1;
  for (int i = 0; i < this->items_selled_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->items_selled(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageGoodsHistoryToNPCResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBItemExchange2Npc items_selled = 1;
  for (int i = 0; i < this->items_selled_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->items_selled(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageGoodsHistoryToNPCResult::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBItemExchange2Npc items_selled = 1;
  total_size += 1 * this->items_selled_size();
  for (int i = 0; i < this->items_selled_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->items_selled(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageGoodsHistoryToNPCResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageGoodsHistoryToNPCResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageGoodsHistoryToNPCResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageGoodsHistoryToNPCResult::MergeFrom(const CGMMessageGoodsHistoryToNPCResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_selled_.MergeFrom(from.items_selled_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageGoodsHistoryToNPCResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageGoodsHistoryToNPCResult::CopyFrom(const CGMMessageGoodsHistoryToNPCResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageGoodsHistoryToNPCResult::Swap(CGMMessageGoodsHistoryToNPCResult* other) {
  if (other != this) {
    items_selled_.Swap(&other->items_selled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageGoodsHistoryToNPCResult::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageGoodsHistoryToNPCResult::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageGoodsHistoryToNPCResult::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageGoodsHistoryToNPCResult_reflection_;
}

// ===================================================================

const ::std::string CGMMessageGoodsHistoryFromNPCCmd::_default_npc_name_;
const ::std::string CGMMessageGoodsHistoryFromNPCCmd::_default_start_time_;
const ::std::string CGMMessageGoodsHistoryFromNPCCmd::_default_end_time_;
#ifndef _MSC_VER
const int CGMMessageGoodsHistoryFromNPCCmd::kSessionIdFieldNumber;
const int CGMMessageGoodsHistoryFromNPCCmd::kFdFieldNumber;
const int CGMMessageGoodsHistoryFromNPCCmd::kRoleIdFieldNumber;
const int CGMMessageGoodsHistoryFromNPCCmd::kRoleFlagFieldNumber;
const int CGMMessageGoodsHistoryFromNPCCmd::kNpcNameFieldNumber;
const int CGMMessageGoodsHistoryFromNPCCmd::kStartTimeFieldNumber;
const int CGMMessageGoodsHistoryFromNPCCmd::kEndTimeFieldNumber;
#endif  // !_MSC_VER

CGMMessageGoodsHistoryFromNPCCmd::CGMMessageGoodsHistoryFromNPCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageGoodsHistoryFromNPCCmd::InitAsDefaultInstance() {}

CGMMessageGoodsHistoryFromNPCCmd::CGMMessageGoodsHistoryFromNPCCmd(const CGMMessageGoodsHistoryFromNPCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageGoodsHistoryFromNPCCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  role_id_ = 0;
  role_flag_ = 0;
  npc_name_ = const_cast< ::std::string*>(&_default_npc_name_);
  start_time_ = const_cast< ::std::string*>(&_default_start_time_);
  end_time_ = const_cast< ::std::string*>(&_default_end_time_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageGoodsHistoryFromNPCCmd::~CGMMessageGoodsHistoryFromNPCCmd() {
  SharedDtor();
}

void CGMMessageGoodsHistoryFromNPCCmd::SharedDtor() {
  if (npc_name_ != &_default_npc_name_) {
    delete npc_name_;
  }
  if (start_time_ != &_default_start_time_) {
    delete start_time_;
  }
  if (end_time_ != &_default_end_time_) {
    delete end_time_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageGoodsHistoryFromNPCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageGoodsHistoryFromNPCCmd_descriptor_;
}

const CGMMessageGoodsHistoryFromNPCCmd& CGMMessageGoodsHistoryFromNPCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageGoodsHistoryFromNPCCmd* CGMMessageGoodsHistoryFromNPCCmd::default_instance_ = NULL;

CGMMessageGoodsHistoryFromNPCCmd* CGMMessageGoodsHistoryFromNPCCmd::New() const {
  return new CGMMessageGoodsHistoryFromNPCCmd;
}

void CGMMessageGoodsHistoryFromNPCCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    role_id_ = 0;
    role_flag_ = 0;
    if (_has_bit(4)) {
      if (npc_name_ != &_default_npc_name_) {
        npc_name_->clear();
      }
    }
    if (_has_bit(5)) {
      if (start_time_ != &_default_start_time_) {
        start_time_->clear();
      }
    }
    if (_has_bit(6)) {
      if (end_time_ != &_default_end_time_) {
        end_time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageGoodsHistoryFromNPCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }
      
      // optional int32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &role_id_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_role_flag;
        break;
      }
      
      // optional int32 role_flag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_flag:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &role_flag_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_npc_name;
        break;
      }
      
      // optional string npc_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_npc_name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_npc_name()));
        if (input->ExpectTag(50)) goto parse_start_time;
        break;
      }
      
      // optional string start_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_start_time:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_start_time()));
        if (input->ExpectTag(58)) goto parse_end_time;
        break;
      }
      
      // optional string end_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_end_time:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_end_time()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageGoodsHistoryFromNPCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageGoodsHistoryFromNPCCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional int32 role_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->role_id(), output);
  }
  
  // optional int32 role_flag = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->role_flag(), output);
  }
  
  // optional string npc_name = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->npc_name(), output);
  }
  
  // optional string start_time = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteString(6, this->start_time(), output);
  }
  
  // optional string end_time = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteString(7, this->end_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageGoodsHistoryFromNPCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional int32 role_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->role_id(), target);
  }
  
  // optional int32 role_flag = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->role_flag(), target);
  }
  
  // optional string npc_name = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->npc_name(), target);
  }
  
  // optional string start_time = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(6, this->start_time(), target);
  }
  
  // optional string end_time = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(7, this->end_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageGoodsHistoryFromNPCCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional int32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->role_id());
    }
    
    // optional int32 role_flag = 4;
    if (has_role_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->role_flag());
    }
    
    // optional string npc_name = 5;
    if (has_npc_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->npc_name());
    }
    
    // optional string start_time = 6;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->start_time());
    }
    
    // optional string end_time = 7;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->end_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageGoodsHistoryFromNPCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageGoodsHistoryFromNPCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageGoodsHistoryFromNPCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageGoodsHistoryFromNPCCmd::MergeFrom(const CGMMessageGoodsHistoryFromNPCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_role_id(from.role_id());
    }
    if (from._has_bit(3)) {
      set_role_flag(from.role_flag());
    }
    if (from._has_bit(4)) {
      set_npc_name(from.npc_name());
    }
    if (from._has_bit(5)) {
      set_start_time(from.start_time());
    }
    if (from._has_bit(6)) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageGoodsHistoryFromNPCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageGoodsHistoryFromNPCCmd::CopyFrom(const CGMMessageGoodsHistoryFromNPCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageGoodsHistoryFromNPCCmd::Swap(CGMMessageGoodsHistoryFromNPCCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(role_id_, other->role_id_);
    std::swap(role_flag_, other->role_flag_);
    std::swap(npc_name_, other->npc_name_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageGoodsHistoryFromNPCCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageGoodsHistoryFromNPCCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageGoodsHistoryFromNPCCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageGoodsHistoryFromNPCCmd_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageGoodsHistoryFromNPCResult::kSessionIdFieldNumber;
const int CGMMessageGoodsHistoryFromNPCResult::kFdFieldNumber;
const int CGMMessageGoodsHistoryFromNPCResult::kItemsBuyedFieldNumber;
#endif  // !_MSC_VER

CGMMessageGoodsHistoryFromNPCResult::CGMMessageGoodsHistoryFromNPCResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageGoodsHistoryFromNPCResult::InitAsDefaultInstance() {}

CGMMessageGoodsHistoryFromNPCResult::CGMMessageGoodsHistoryFromNPCResult(const CGMMessageGoodsHistoryFromNPCResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageGoodsHistoryFromNPCResult::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageGoodsHistoryFromNPCResult::~CGMMessageGoodsHistoryFromNPCResult() {
  SharedDtor();
}

void CGMMessageGoodsHistoryFromNPCResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageGoodsHistoryFromNPCResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageGoodsHistoryFromNPCResult_descriptor_;
}

const CGMMessageGoodsHistoryFromNPCResult& CGMMessageGoodsHistoryFromNPCResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageGoodsHistoryFromNPCResult* CGMMessageGoodsHistoryFromNPCResult::default_instance_ = NULL;

CGMMessageGoodsHistoryFromNPCResult* CGMMessageGoodsHistoryFromNPCResult::New() const {
  return new CGMMessageGoodsHistoryFromNPCResult;
}

void CGMMessageGoodsHistoryFromNPCResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
  }
  items_buyed_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageGoodsHistoryFromNPCResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_items_buyed;
        break;
      }
      
      // repeated .PBItemExchange2Npc items_buyed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_items_buyed:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_items_buyed()));
        if (input->ExpectTag(26)) goto parse_items_buyed;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageGoodsHistoryFromNPCResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageGoodsHistoryFromNPCResult::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // repeated .PBItemExchange2Npc items_buyed = 3;
  for (int i = 0; i < this->items_buyed_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->items_buyed(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageGoodsHistoryFromNPCResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // repeated .PBItemExchange2Npc items_buyed = 3;
  for (int i = 0; i < this->items_buyed_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->items_buyed(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageGoodsHistoryFromNPCResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
  }
  // repeated .PBItemExchange2Npc items_buyed = 3;
  total_size += 1 * this->items_buyed_size();
  for (int i = 0; i < this->items_buyed_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->items_buyed(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageGoodsHistoryFromNPCResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageGoodsHistoryFromNPCResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageGoodsHistoryFromNPCResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageGoodsHistoryFromNPCResult::MergeFrom(const CGMMessageGoodsHistoryFromNPCResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_buyed_.MergeFrom(from.items_buyed_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageGoodsHistoryFromNPCResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageGoodsHistoryFromNPCResult::CopyFrom(const CGMMessageGoodsHistoryFromNPCResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageGoodsHistoryFromNPCResult::Swap(CGMMessageGoodsHistoryFromNPCResult* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    items_buyed_.Swap(&other->items_buyed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageGoodsHistoryFromNPCResult::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageGoodsHistoryFromNPCResult::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageGoodsHistoryFromNPCResult::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageGoodsHistoryFromNPCResult_reflection_;
}

// ===================================================================

const ::std::string CGMMessageGoodsHistoryBetweenUsersCmd::_default_start_time_;
const ::std::string CGMMessageGoodsHistoryBetweenUsersCmd::_default_end_time_;
#ifndef _MSC_VER
const int CGMMessageGoodsHistoryBetweenUsersCmd::kSessionIdFieldNumber;
const int CGMMessageGoodsHistoryBetweenUsersCmd::kFdFieldNumber;
const int CGMMessageGoodsHistoryBetweenUsersCmd::kRoleId1FieldNumber;
const int CGMMessageGoodsHistoryBetweenUsersCmd::kRoleId2FieldNumber;
const int CGMMessageGoodsHistoryBetweenUsersCmd::kStartTimeFieldNumber;
const int CGMMessageGoodsHistoryBetweenUsersCmd::kEndTimeFieldNumber;
#endif  // !_MSC_VER

CGMMessageGoodsHistoryBetweenUsersCmd::CGMMessageGoodsHistoryBetweenUsersCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageGoodsHistoryBetweenUsersCmd::InitAsDefaultInstance() {}

CGMMessageGoodsHistoryBetweenUsersCmd::CGMMessageGoodsHistoryBetweenUsersCmd(const CGMMessageGoodsHistoryBetweenUsersCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageGoodsHistoryBetweenUsersCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  role_id1_ = 0;
  role_id2_ = 0;
  start_time_ = const_cast< ::std::string*>(&_default_start_time_);
  end_time_ = const_cast< ::std::string*>(&_default_end_time_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageGoodsHistoryBetweenUsersCmd::~CGMMessageGoodsHistoryBetweenUsersCmd() {
  SharedDtor();
}

void CGMMessageGoodsHistoryBetweenUsersCmd::SharedDtor() {
  if (start_time_ != &_default_start_time_) {
    delete start_time_;
  }
  if (end_time_ != &_default_end_time_) {
    delete end_time_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageGoodsHistoryBetweenUsersCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageGoodsHistoryBetweenUsersCmd_descriptor_;
}

const CGMMessageGoodsHistoryBetweenUsersCmd& CGMMessageGoodsHistoryBetweenUsersCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageGoodsHistoryBetweenUsersCmd* CGMMessageGoodsHistoryBetweenUsersCmd::default_instance_ = NULL;

CGMMessageGoodsHistoryBetweenUsersCmd* CGMMessageGoodsHistoryBetweenUsersCmd::New() const {
  return new CGMMessageGoodsHistoryBetweenUsersCmd;
}

void CGMMessageGoodsHistoryBetweenUsersCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    role_id1_ = 0;
    role_id2_ = 0;
    if (_has_bit(4)) {
      if (start_time_ != &_default_start_time_) {
        start_time_->clear();
      }
    }
    if (_has_bit(5)) {
      if (end_time_ != &_default_end_time_) {
        end_time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageGoodsHistoryBetweenUsersCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_role_id1;
        break;
      }
      
      // optional int32 role_id1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_id1:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &role_id1_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_role_id2;
        break;
      }
      
      // optional int32 role_id2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_id2:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &role_id2_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_start_time;
        break;
      }
      
      // optional string start_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_start_time:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_start_time()));
        if (input->ExpectTag(50)) goto parse_end_time;
        break;
      }
      
      // optional string end_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_end_time:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_end_time()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageGoodsHistoryBetweenUsersCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageGoodsHistoryBetweenUsersCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional int32 role_id1 = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->role_id1(), output);
  }
  
  // optional int32 role_id2 = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->role_id2(), output);
  }
  
  // optional string start_time = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->start_time(), output);
  }
  
  // optional string end_time = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteString(6, this->end_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageGoodsHistoryBetweenUsersCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional int32 role_id1 = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->role_id1(), target);
  }
  
  // optional int32 role_id2 = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->role_id2(), target);
  }
  
  // optional string start_time = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->start_time(), target);
  }
  
  // optional string end_time = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(6, this->end_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageGoodsHistoryBetweenUsersCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional int32 role_id1 = 3;
    if (has_role_id1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->role_id1());
    }
    
    // optional int32 role_id2 = 4;
    if (has_role_id2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->role_id2());
    }
    
    // optional string start_time = 5;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->start_time());
    }
    
    // optional string end_time = 6;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->end_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageGoodsHistoryBetweenUsersCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageGoodsHistoryBetweenUsersCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageGoodsHistoryBetweenUsersCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageGoodsHistoryBetweenUsersCmd::MergeFrom(const CGMMessageGoodsHistoryBetweenUsersCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_role_id1(from.role_id1());
    }
    if (from._has_bit(3)) {
      set_role_id2(from.role_id2());
    }
    if (from._has_bit(4)) {
      set_start_time(from.start_time());
    }
    if (from._has_bit(5)) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageGoodsHistoryBetweenUsersCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageGoodsHistoryBetweenUsersCmd::CopyFrom(const CGMMessageGoodsHistoryBetweenUsersCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageGoodsHistoryBetweenUsersCmd::Swap(CGMMessageGoodsHistoryBetweenUsersCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(role_id1_, other->role_id1_);
    std::swap(role_id2_, other->role_id2_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageGoodsHistoryBetweenUsersCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageGoodsHistoryBetweenUsersCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageGoodsHistoryBetweenUsersCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageGoodsHistoryBetweenUsersCmd_reflection_;
}

// ===================================================================

const ::std::string PBItemExchange2Player::_default_from_;
const ::std::string PBItemExchange2Player::_default_to_;
const ::std::string PBItemExchange2Player::_default_item_name_;
const ::std::string PBItemExchange2Player::_default_item_count_;
const ::std::string PBItemExchange2Player::_default_exchange_time_;
#ifndef _MSC_VER
const int PBItemExchange2Player::kFromFieldNumber;
const int PBItemExchange2Player::kToFieldNumber;
const int PBItemExchange2Player::kItemNameFieldNumber;
const int PBItemExchange2Player::kItemCountFieldNumber;
const int PBItemExchange2Player::kExchangeTimeFieldNumber;
#endif  // !_MSC_VER

PBItemExchange2Player::PBItemExchange2Player()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemExchange2Player::InitAsDefaultInstance() {}

PBItemExchange2Player::PBItemExchange2Player(const PBItemExchange2Player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemExchange2Player::SharedCtor() {
  _cached_size_ = 0;
  from_ = const_cast< ::std::string*>(&_default_from_);
  to_ = const_cast< ::std::string*>(&_default_to_);
  item_name_ = const_cast< ::std::string*>(&_default_item_name_);
  item_count_ = const_cast< ::std::string*>(&_default_item_count_);
  exchange_time_ = const_cast< ::std::string*>(&_default_exchange_time_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemExchange2Player::~PBItemExchange2Player() {
  SharedDtor();
}

void PBItemExchange2Player::SharedDtor() {
  if (from_ != &_default_from_) {
    delete from_;
  }
  if (to_ != &_default_to_) {
    delete to_;
  }
  if (item_name_ != &_default_item_name_) {
    delete item_name_;
  }
  if (item_count_ != &_default_item_count_) {
    delete item_count_;
  }
  if (exchange_time_ != &_default_exchange_time_) {
    delete exchange_time_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBItemExchange2Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemExchange2Player_descriptor_;
}

const PBItemExchange2Player& PBItemExchange2Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

PBItemExchange2Player* PBItemExchange2Player::default_instance_ = NULL;

PBItemExchange2Player* PBItemExchange2Player::New() const {
  return new PBItemExchange2Player;
}

void PBItemExchange2Player::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (from_ != &_default_from_) {
        from_->clear();
      }
    }
    if (_has_bit(1)) {
      if (to_ != &_default_to_) {
        to_->clear();
      }
    }
    if (_has_bit(2)) {
      if (item_name_ != &_default_item_name_) {
        item_name_->clear();
      }
    }
    if (_has_bit(3)) {
      if (item_count_ != &_default_item_count_) {
        item_count_->clear();
      }
    }
    if (_has_bit(4)) {
      if (exchange_time_ != &_default_exchange_time_) {
        exchange_time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemExchange2Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string from = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_from()));
        if (input->ExpectTag(18)) goto parse_to;
        break;
      }
      
      // optional string to = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_to:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_to()));
        if (input->ExpectTag(26)) goto parse_item_name;
        break;
      }
      
      // optional string item_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_item_name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_item_name()));
        if (input->ExpectTag(34)) goto parse_item_count;
        break;
      }
      
      // optional string item_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_item_count:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_item_count()));
        if (input->ExpectTag(42)) goto parse_exchange_time;
        break;
      }
      
      // optional string exchange_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_exchange_time:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_exchange_time()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemExchange2Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemExchange2Player::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string from = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->from(), output);
  }
  
  // optional string to = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->to(), output);
  }
  
  // optional string item_name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->item_name(), output);
  }
  
  // optional string item_count = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->item_count(), output);
  }
  
  // optional string exchange_time = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->exchange_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemExchange2Player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string from = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->from(), target);
  }
  
  // optional string to = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->to(), target);
  }
  
  // optional string item_name = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->item_name(), target);
  }
  
  // optional string item_count = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->item_count(), target);
  }
  
  // optional string exchange_time = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->exchange_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemExchange2Player::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string from = 1;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->from());
    }
    
    // optional string to = 2;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->to());
    }
    
    // optional string item_name = 3;
    if (has_item_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->item_name());
    }
    
    // optional string item_count = 4;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->item_count());
    }
    
    // optional string exchange_time = 5;
    if (has_exchange_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->exchange_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemExchange2Player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemExchange2Player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemExchange2Player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemExchange2Player::MergeFrom(const PBItemExchange2Player& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_from(from.from());
    }
    if (from._has_bit(1)) {
      set_to(from.to());
    }
    if (from._has_bit(2)) {
      set_item_name(from.item_name());
    }
    if (from._has_bit(3)) {
      set_item_count(from.item_count());
    }
    if (from._has_bit(4)) {
      set_exchange_time(from.exchange_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemExchange2Player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemExchange2Player::CopyFrom(const PBItemExchange2Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemExchange2Player::Swap(PBItemExchange2Player* other) {
  if (other != this) {
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    std::swap(item_name_, other->item_name_);
    std::swap(item_count_, other->item_count_);
    std::swap(exchange_time_, other->exchange_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemExchange2Player::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemExchange2Player::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemExchange2Player::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemExchange2Player_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageGoodsHistoryBetweenUsersResult::kSessionIdFieldNumber;
const int CGMMessageGoodsHistoryBetweenUsersResult::kFdFieldNumber;
const int CGMMessageGoodsHistoryBetweenUsersResult::kItemExchangedFieldNumber;
#endif  // !_MSC_VER

CGMMessageGoodsHistoryBetweenUsersResult::CGMMessageGoodsHistoryBetweenUsersResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageGoodsHistoryBetweenUsersResult::InitAsDefaultInstance() {}

CGMMessageGoodsHistoryBetweenUsersResult::CGMMessageGoodsHistoryBetweenUsersResult(const CGMMessageGoodsHistoryBetweenUsersResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageGoodsHistoryBetweenUsersResult::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageGoodsHistoryBetweenUsersResult::~CGMMessageGoodsHistoryBetweenUsersResult() {
  SharedDtor();
}

void CGMMessageGoodsHistoryBetweenUsersResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageGoodsHistoryBetweenUsersResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageGoodsHistoryBetweenUsersResult_descriptor_;
}

const CGMMessageGoodsHistoryBetweenUsersResult& CGMMessageGoodsHistoryBetweenUsersResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageGoodsHistoryBetweenUsersResult* CGMMessageGoodsHistoryBetweenUsersResult::default_instance_ = NULL;

CGMMessageGoodsHistoryBetweenUsersResult* CGMMessageGoodsHistoryBetweenUsersResult::New() const {
  return new CGMMessageGoodsHistoryBetweenUsersResult;
}

void CGMMessageGoodsHistoryBetweenUsersResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
  }
  item_exchanged_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageGoodsHistoryBetweenUsersResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_item_exchanged;
        break;
      }
      
      // repeated .PBItemExchange2Player item_exchanged = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_item_exchanged:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_item_exchanged()));
        if (input->ExpectTag(26)) goto parse_item_exchanged;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageGoodsHistoryBetweenUsersResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageGoodsHistoryBetweenUsersResult::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // repeated .PBItemExchange2Player item_exchanged = 3;
  for (int i = 0; i < this->item_exchanged_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->item_exchanged(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageGoodsHistoryBetweenUsersResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // repeated .PBItemExchange2Player item_exchanged = 3;
  for (int i = 0; i < this->item_exchanged_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->item_exchanged(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageGoodsHistoryBetweenUsersResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
  }
  // repeated .PBItemExchange2Player item_exchanged = 3;
  total_size += 1 * this->item_exchanged_size();
  for (int i = 0; i < this->item_exchanged_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->item_exchanged(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageGoodsHistoryBetweenUsersResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageGoodsHistoryBetweenUsersResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageGoodsHistoryBetweenUsersResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageGoodsHistoryBetweenUsersResult::MergeFrom(const CGMMessageGoodsHistoryBetweenUsersResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_exchanged_.MergeFrom(from.item_exchanged_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageGoodsHistoryBetweenUsersResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageGoodsHistoryBetweenUsersResult::CopyFrom(const CGMMessageGoodsHistoryBetweenUsersResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageGoodsHistoryBetweenUsersResult::Swap(CGMMessageGoodsHistoryBetweenUsersResult* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    item_exchanged_.Swap(&other->item_exchanged_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageGoodsHistoryBetweenUsersResult::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageGoodsHistoryBetweenUsersResult::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageGoodsHistoryBetweenUsersResult::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageGoodsHistoryBetweenUsersResult_reflection_;
}

// ===================================================================

const ::std::string CGMMessageGoodsHistoryCmd::_default_item_id_;
const ::std::string CGMMessageGoodsHistoryCmd::_default_start_time_;
const ::std::string CGMMessageGoodsHistoryCmd::_default_end_time_;
#ifndef _MSC_VER
const int CGMMessageGoodsHistoryCmd::kSessionIdFieldNumber;
const int CGMMessageGoodsHistoryCmd::kFdFieldNumber;
const int CGMMessageGoodsHistoryCmd::kItemIdFieldNumber;
const int CGMMessageGoodsHistoryCmd::kStartTimeFieldNumber;
const int CGMMessageGoodsHistoryCmd::kEndTimeFieldNumber;
#endif  // !_MSC_VER

CGMMessageGoodsHistoryCmd::CGMMessageGoodsHistoryCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageGoodsHistoryCmd::InitAsDefaultInstance() {}

CGMMessageGoodsHistoryCmd::CGMMessageGoodsHistoryCmd(const CGMMessageGoodsHistoryCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageGoodsHistoryCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  item_id_ = const_cast< ::std::string*>(&_default_item_id_);
  start_time_ = const_cast< ::std::string*>(&_default_start_time_);
  end_time_ = const_cast< ::std::string*>(&_default_end_time_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageGoodsHistoryCmd::~CGMMessageGoodsHistoryCmd() {
  SharedDtor();
}

void CGMMessageGoodsHistoryCmd::SharedDtor() {
  if (item_id_ != &_default_item_id_) {
    delete item_id_;
  }
  if (start_time_ != &_default_start_time_) {
    delete start_time_;
  }
  if (end_time_ != &_default_end_time_) {
    delete end_time_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageGoodsHistoryCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageGoodsHistoryCmd_descriptor_;
}

const CGMMessageGoodsHistoryCmd& CGMMessageGoodsHistoryCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageGoodsHistoryCmd* CGMMessageGoodsHistoryCmd::default_instance_ = NULL;

CGMMessageGoodsHistoryCmd* CGMMessageGoodsHistoryCmd::New() const {
  return new CGMMessageGoodsHistoryCmd;
}

void CGMMessageGoodsHistoryCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    if (_has_bit(2)) {
      if (item_id_ != &_default_item_id_) {
        item_id_->clear();
      }
    }
    if (_has_bit(3)) {
      if (start_time_ != &_default_start_time_) {
        start_time_->clear();
      }
    }
    if (_has_bit(4)) {
      if (end_time_ != &_default_end_time_) {
        end_time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageGoodsHistoryCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_item_id;
        break;
      }
      
      // optional string item_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_item_id:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_item_id()));
        if (input->ExpectTag(34)) goto parse_start_time;
        break;
      }
      
      // optional string start_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_start_time:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_start_time()));
        if (input->ExpectTag(42)) goto parse_end_time;
        break;
      }
      
      // optional string end_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_end_time:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_end_time()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageGoodsHistoryCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageGoodsHistoryCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional string item_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->item_id(), output);
  }
  
  // optional string start_time = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->start_time(), output);
  }
  
  // optional string end_time = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->end_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageGoodsHistoryCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional string item_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->item_id(), target);
  }
  
  // optional string start_time = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->start_time(), target);
  }
  
  // optional string end_time = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->end_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageGoodsHistoryCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional string item_id = 3;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->item_id());
    }
    
    // optional string start_time = 4;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->start_time());
    }
    
    // optional string end_time = 5;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->end_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageGoodsHistoryCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageGoodsHistoryCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageGoodsHistoryCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageGoodsHistoryCmd::MergeFrom(const CGMMessageGoodsHistoryCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_item_id(from.item_id());
    }
    if (from._has_bit(3)) {
      set_start_time(from.start_time());
    }
    if (from._has_bit(4)) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageGoodsHistoryCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageGoodsHistoryCmd::CopyFrom(const CGMMessageGoodsHistoryCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageGoodsHistoryCmd::Swap(CGMMessageGoodsHistoryCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(item_id_, other->item_id_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageGoodsHistoryCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageGoodsHistoryCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageGoodsHistoryCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageGoodsHistoryCmd_reflection_;
}

// ===================================================================

const ::std::string PBItemAction::_default_from_;
const ::std::string PBItemAction::_default_to_;
const ::std::string PBItemAction::_default_action_;
const ::std::string PBItemAction::_default_action_time_;
#ifndef _MSC_VER
const int PBItemAction::kFromFieldNumber;
const int PBItemAction::kToFieldNumber;
const int PBItemAction::kActionFieldNumber;
const int PBItemAction::kActionTimeFieldNumber;
#endif  // !_MSC_VER

PBItemAction::PBItemAction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemAction::InitAsDefaultInstance() {}

PBItemAction::PBItemAction(const PBItemAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemAction::SharedCtor() {
  _cached_size_ = 0;
  from_ = const_cast< ::std::string*>(&_default_from_);
  to_ = const_cast< ::std::string*>(&_default_to_);
  action_ = const_cast< ::std::string*>(&_default_action_);
  action_time_ = const_cast< ::std::string*>(&_default_action_time_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemAction::~PBItemAction() {
  SharedDtor();
}

void PBItemAction::SharedDtor() {
  if (from_ != &_default_from_) {
    delete from_;
  }
  if (to_ != &_default_to_) {
    delete to_;
  }
  if (action_ != &_default_action_) {
    delete action_;
  }
  if (action_time_ != &_default_action_time_) {
    delete action_time_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBItemAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemAction_descriptor_;
}

const PBItemAction& PBItemAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

PBItemAction* PBItemAction::default_instance_ = NULL;

PBItemAction* PBItemAction::New() const {
  return new PBItemAction;
}

void PBItemAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (from_ != &_default_from_) {
        from_->clear();
      }
    }
    if (_has_bit(1)) {
      if (to_ != &_default_to_) {
        to_->clear();
      }
    }
    if (_has_bit(2)) {
      if (action_ != &_default_action_) {
        action_->clear();
      }
    }
    if (_has_bit(3)) {
      if (action_time_ != &_default_action_time_) {
        action_time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string from = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_from()));
        if (input->ExpectTag(18)) goto parse_to;
        break;
      }
      
      // optional string to = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_to:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_to()));
        if (input->ExpectTag(26)) goto parse_action;
        break;
      }
      
      // optional string action = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_action:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_action()));
        if (input->ExpectTag(34)) goto parse_action_time;
        break;
      }
      
      // optional string action_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_action_time:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_action_time()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemAction::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string from = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->from(), output);
  }
  
  // optional string to = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->to(), output);
  }
  
  // optional string action = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->action(), output);
  }
  
  // optional string action_time = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->action_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string from = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->from(), target);
  }
  
  // optional string to = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->to(), target);
  }
  
  // optional string action = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->action(), target);
  }
  
  // optional string action_time = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->action_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemAction::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string from = 1;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->from());
    }
    
    // optional string to = 2;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->to());
    }
    
    // optional string action = 3;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->action());
    }
    
    // optional string action_time = 4;
    if (has_action_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->action_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemAction::MergeFrom(const PBItemAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_from(from.from());
    }
    if (from._has_bit(1)) {
      set_to(from.to());
    }
    if (from._has_bit(2)) {
      set_action(from.action());
    }
    if (from._has_bit(3)) {
      set_action_time(from.action_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemAction::CopyFrom(const PBItemAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemAction::Swap(PBItemAction* other) {
  if (other != this) {
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    std::swap(action_, other->action_);
    std::swap(action_time_, other->action_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemAction::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemAction::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemAction::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemAction_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageGoodsHistoryResult::kSessionIdFieldNumber;
const int CGMMessageGoodsHistoryResult::kFdFieldNumber;
const int CGMMessageGoodsHistoryResult::kItemActionedFieldNumber;
#endif  // !_MSC_VER

CGMMessageGoodsHistoryResult::CGMMessageGoodsHistoryResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageGoodsHistoryResult::InitAsDefaultInstance() {}

CGMMessageGoodsHistoryResult::CGMMessageGoodsHistoryResult(const CGMMessageGoodsHistoryResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageGoodsHistoryResult::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageGoodsHistoryResult::~CGMMessageGoodsHistoryResult() {
  SharedDtor();
}

void CGMMessageGoodsHistoryResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageGoodsHistoryResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageGoodsHistoryResult_descriptor_;
}

const CGMMessageGoodsHistoryResult& CGMMessageGoodsHistoryResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageGoodsHistoryResult* CGMMessageGoodsHistoryResult::default_instance_ = NULL;

CGMMessageGoodsHistoryResult* CGMMessageGoodsHistoryResult::New() const {
  return new CGMMessageGoodsHistoryResult;
}

void CGMMessageGoodsHistoryResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
  }
  item_actioned_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageGoodsHistoryResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_item_actioned;
        break;
      }
      
      // repeated .PBItemAction item_actioned = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_item_actioned:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_item_actioned()));
        if (input->ExpectTag(26)) goto parse_item_actioned;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageGoodsHistoryResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageGoodsHistoryResult::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // repeated .PBItemAction item_actioned = 3;
  for (int i = 0; i < this->item_actioned_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->item_actioned(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageGoodsHistoryResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // repeated .PBItemAction item_actioned = 3;
  for (int i = 0; i < this->item_actioned_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->item_actioned(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageGoodsHistoryResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
  }
  // repeated .PBItemAction item_actioned = 3;
  total_size += 1 * this->item_actioned_size();
  for (int i = 0; i < this->item_actioned_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->item_actioned(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageGoodsHistoryResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageGoodsHistoryResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageGoodsHistoryResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageGoodsHistoryResult::MergeFrom(const CGMMessageGoodsHistoryResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_actioned_.MergeFrom(from.item_actioned_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageGoodsHistoryResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageGoodsHistoryResult::CopyFrom(const CGMMessageGoodsHistoryResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageGoodsHistoryResult::Swap(CGMMessageGoodsHistoryResult* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    item_actioned_.Swap(&other->item_actioned_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageGoodsHistoryResult::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageGoodsHistoryResult::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageGoodsHistoryResult::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageGoodsHistoryResult_reflection_;
}

// ===================================================================

const ::std::string CGMMessagePetHistoryCmd::_default_role_name_;
const ::std::string CGMMessagePetHistoryCmd::_default_start_time_;
const ::std::string CGMMessagePetHistoryCmd::_default_end_time_;
#ifndef _MSC_VER
const int CGMMessagePetHistoryCmd::kSessionIdFieldNumber;
const int CGMMessagePetHistoryCmd::kFdFieldNumber;
const int CGMMessagePetHistoryCmd::kRoleNameFieldNumber;
const int CGMMessagePetHistoryCmd::kPetIdFieldNumber;
const int CGMMessagePetHistoryCmd::kStartTimeFieldNumber;
const int CGMMessagePetHistoryCmd::kEndTimeFieldNumber;
#endif  // !_MSC_VER

CGMMessagePetHistoryCmd::CGMMessagePetHistoryCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessagePetHistoryCmd::InitAsDefaultInstance() {}

CGMMessagePetHistoryCmd::CGMMessagePetHistoryCmd(const CGMMessagePetHistoryCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessagePetHistoryCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  role_name_ = const_cast< ::std::string*>(&_default_role_name_);
  pet_id_ = 0;
  start_time_ = const_cast< ::std::string*>(&_default_start_time_);
  end_time_ = const_cast< ::std::string*>(&_default_end_time_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessagePetHistoryCmd::~CGMMessagePetHistoryCmd() {
  SharedDtor();
}

void CGMMessagePetHistoryCmd::SharedDtor() {
  if (role_name_ != &_default_role_name_) {
    delete role_name_;
  }
  if (start_time_ != &_default_start_time_) {
    delete start_time_;
  }
  if (end_time_ != &_default_end_time_) {
    delete end_time_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessagePetHistoryCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessagePetHistoryCmd_descriptor_;
}

const CGMMessagePetHistoryCmd& CGMMessagePetHistoryCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessagePetHistoryCmd* CGMMessagePetHistoryCmd::default_instance_ = NULL;

CGMMessagePetHistoryCmd* CGMMessagePetHistoryCmd::New() const {
  return new CGMMessagePetHistoryCmd;
}

void CGMMessagePetHistoryCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    if (_has_bit(2)) {
      if (role_name_ != &_default_role_name_) {
        role_name_->clear();
      }
    }
    pet_id_ = 0;
    if (_has_bit(4)) {
      if (start_time_ != &_default_start_time_) {
        start_time_->clear();
      }
    }
    if (_has_bit(5)) {
      if (end_time_ != &_default_end_time_) {
        end_time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessagePetHistoryCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_role_name;
        break;
      }
      
      // optional string role_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_role_name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_role_name()));
        if (input->ExpectTag(32)) goto parse_pet_id;
        break;
      }
      
      // optional int32 pet_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_pet_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &pet_id_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_start_time;
        break;
      }
      
      // optional string start_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_start_time:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_start_time()));
        if (input->ExpectTag(50)) goto parse_end_time;
        break;
      }
      
      // optional string end_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_end_time:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_end_time()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessagePetHistoryCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessagePetHistoryCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional string role_name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->role_name(), output);
  }
  
  // optional int32 pet_id = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->pet_id(), output);
  }
  
  // optional string start_time = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->start_time(), output);
  }
  
  // optional string end_time = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteString(6, this->end_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessagePetHistoryCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional string role_name = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->role_name(), target);
  }
  
  // optional int32 pet_id = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->pet_id(), target);
  }
  
  // optional string start_time = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->start_time(), target);
  }
  
  // optional string end_time = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(6, this->end_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessagePetHistoryCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional string role_name = 3;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->role_name());
    }
    
    // optional int32 pet_id = 4;
    if (has_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->pet_id());
    }
    
    // optional string start_time = 5;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->start_time());
    }
    
    // optional string end_time = 6;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->end_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessagePetHistoryCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessagePetHistoryCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessagePetHistoryCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessagePetHistoryCmd::MergeFrom(const CGMMessagePetHistoryCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_role_name(from.role_name());
    }
    if (from._has_bit(3)) {
      set_pet_id(from.pet_id());
    }
    if (from._has_bit(4)) {
      set_start_time(from.start_time());
    }
    if (from._has_bit(5)) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessagePetHistoryCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessagePetHistoryCmd::CopyFrom(const CGMMessagePetHistoryCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessagePetHistoryCmd::Swap(CGMMessagePetHistoryCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(role_name_, other->role_name_);
    std::swap(pet_id_, other->pet_id_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessagePetHistoryCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessagePetHistoryCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessagePetHistoryCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessagePetHistoryCmd_reflection_;
}

// ===================================================================

const ::std::string PBPetHistory::_default_from_;
const ::std::string PBPetHistory::_default_to_;
const ::std::string PBPetHistory::_default_action_;
const ::std::string PBPetHistory::_default_action_time_;
const ::std::string PBPetHistory::_default_action_attr_;
#ifndef _MSC_VER
const int PBPetHistory::kFromFieldNumber;
const int PBPetHistory::kToFieldNumber;
const int PBPetHistory::kActionFieldNumber;
const int PBPetHistory::kActionTimeFieldNumber;
const int PBPetHistory::kActionAttrFieldNumber;
#endif  // !_MSC_VER

PBPetHistory::PBPetHistory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPetHistory::InitAsDefaultInstance() {}

PBPetHistory::PBPetHistory(const PBPetHistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPetHistory::SharedCtor() {
  _cached_size_ = 0;
  from_ = const_cast< ::std::string*>(&_default_from_);
  to_ = const_cast< ::std::string*>(&_default_to_);
  action_ = const_cast< ::std::string*>(&_default_action_);
  action_time_ = const_cast< ::std::string*>(&_default_action_time_);
  action_attr_ = const_cast< ::std::string*>(&_default_action_attr_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPetHistory::~PBPetHistory() {
  SharedDtor();
}

void PBPetHistory::SharedDtor() {
  if (from_ != &_default_from_) {
    delete from_;
  }
  if (to_ != &_default_to_) {
    delete to_;
  }
  if (action_ != &_default_action_) {
    delete action_;
  }
  if (action_time_ != &_default_action_time_) {
    delete action_time_;
  }
  if (action_attr_ != &_default_action_attr_) {
    delete action_attr_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBPetHistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPetHistory_descriptor_;
}

const PBPetHistory& PBPetHistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

PBPetHistory* PBPetHistory::default_instance_ = NULL;

PBPetHistory* PBPetHistory::New() const {
  return new PBPetHistory;
}

void PBPetHistory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (from_ != &_default_from_) {
        from_->clear();
      }
    }
    if (_has_bit(1)) {
      if (to_ != &_default_to_) {
        to_->clear();
      }
    }
    if (_has_bit(2)) {
      if (action_ != &_default_action_) {
        action_->clear();
      }
    }
    if (_has_bit(3)) {
      if (action_time_ != &_default_action_time_) {
        action_time_->clear();
      }
    }
    if (_has_bit(4)) {
      if (action_attr_ != &_default_action_attr_) {
        action_attr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPetHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string from = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_from()));
        if (input->ExpectTag(18)) goto parse_to;
        break;
      }
      
      // optional string to = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_to:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_to()));
        if (input->ExpectTag(26)) goto parse_action;
        break;
      }
      
      // optional string action = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_action:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_action()));
        if (input->ExpectTag(34)) goto parse_action_time;
        break;
      }
      
      // optional string action_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_action_time:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_action_time()));
        if (input->ExpectTag(42)) goto parse_action_attr;
        break;
      }
      
      // optional string action_attr = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_action_attr:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_action_attr()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPetHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBPetHistory::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string from = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->from(), output);
  }
  
  // optional string to = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->to(), output);
  }
  
  // optional string action = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->action(), output);
  }
  
  // optional string action_time = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->action_time(), output);
  }
  
  // optional string action_attr = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->action_attr(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPetHistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string from = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->from(), target);
  }
  
  // optional string to = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->to(), target);
  }
  
  // optional string action = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->action(), target);
  }
  
  // optional string action_time = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->action_time(), target);
  }
  
  // optional string action_attr = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->action_attr(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPetHistory::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string from = 1;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->from());
    }
    
    // optional string to = 2;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->to());
    }
    
    // optional string action = 3;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->action());
    }
    
    // optional string action_time = 4;
    if (has_action_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->action_time());
    }
    
    // optional string action_attr = 5;
    if (has_action_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->action_attr());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBPetHistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPetHistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPetHistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPetHistory::MergeFrom(const PBPetHistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_from(from.from());
    }
    if (from._has_bit(1)) {
      set_to(from.to());
    }
    if (from._has_bit(2)) {
      set_action(from.action());
    }
    if (from._has_bit(3)) {
      set_action_time(from.action_time());
    }
    if (from._has_bit(4)) {
      set_action_attr(from.action_attr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPetHistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPetHistory::CopyFrom(const PBPetHistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPetHistory::Swap(PBPetHistory* other) {
  if (other != this) {
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    std::swap(action_, other->action_);
    std::swap(action_time_, other->action_time_);
    std::swap(action_attr_, other->action_attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBPetHistory::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBPetHistory::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBPetHistory::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBPetHistory_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessagePetHistoryResult::kSessionIdFieldNumber;
const int CGMMessagePetHistoryResult::kFdFieldNumber;
const int CGMMessagePetHistoryResult::kPetHistoryFieldNumber;
#endif  // !_MSC_VER

CGMMessagePetHistoryResult::CGMMessagePetHistoryResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessagePetHistoryResult::InitAsDefaultInstance() {}

CGMMessagePetHistoryResult::CGMMessagePetHistoryResult(const CGMMessagePetHistoryResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessagePetHistoryResult::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessagePetHistoryResult::~CGMMessagePetHistoryResult() {
  SharedDtor();
}

void CGMMessagePetHistoryResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessagePetHistoryResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessagePetHistoryResult_descriptor_;
}

const CGMMessagePetHistoryResult& CGMMessagePetHistoryResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessagePetHistoryResult* CGMMessagePetHistoryResult::default_instance_ = NULL;

CGMMessagePetHistoryResult* CGMMessagePetHistoryResult::New() const {
  return new CGMMessagePetHistoryResult;
}

void CGMMessagePetHistoryResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
  }
  pet_history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessagePetHistoryResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_pet_history;
        break;
      }
      
      // repeated .PBPetHistory pet_history = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pet_history:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_pet_history()));
        if (input->ExpectTag(26)) goto parse_pet_history;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessagePetHistoryResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessagePetHistoryResult::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // repeated .PBPetHistory pet_history = 3;
  for (int i = 0; i < this->pet_history_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->pet_history(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessagePetHistoryResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // repeated .PBPetHistory pet_history = 3;
  for (int i = 0; i < this->pet_history_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->pet_history(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessagePetHistoryResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
  }
  // repeated .PBPetHistory pet_history = 3;
  total_size += 1 * this->pet_history_size();
  for (int i = 0; i < this->pet_history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->pet_history(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessagePetHistoryResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessagePetHistoryResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessagePetHistoryResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessagePetHistoryResult::MergeFrom(const CGMMessagePetHistoryResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  pet_history_.MergeFrom(from.pet_history_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessagePetHistoryResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessagePetHistoryResult::CopyFrom(const CGMMessagePetHistoryResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessagePetHistoryResult::Swap(CGMMessagePetHistoryResult* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    pet_history_.Swap(&other->pet_history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessagePetHistoryResult::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessagePetHistoryResult::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessagePetHistoryResult::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessagePetHistoryResult_reflection_;
}

// ===================================================================

const ::std::string CGMMessageOperationDetailCmd::_default_start_time_;
const ::std::string CGMMessageOperationDetailCmd::_default_end_time_;
#ifndef _MSC_VER
const int CGMMessageOperationDetailCmd::kSessionIdFieldNumber;
const int CGMMessageOperationDetailCmd::kFdFieldNumber;
const int CGMMessageOperationDetailCmd::kServerIdFieldNumber;
const int CGMMessageOperationDetailCmd::kRoleIdFieldNumber;
const int CGMMessageOperationDetailCmd::kStartTimeFieldNumber;
const int CGMMessageOperationDetailCmd::kEndTimeFieldNumber;
#endif  // !_MSC_VER

CGMMessageOperationDetailCmd::CGMMessageOperationDetailCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageOperationDetailCmd::InitAsDefaultInstance() {}

CGMMessageOperationDetailCmd::CGMMessageOperationDetailCmd(const CGMMessageOperationDetailCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageOperationDetailCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  server_id_ = 0;
  role_id_ = 0;
  start_time_ = const_cast< ::std::string*>(&_default_start_time_);
  end_time_ = const_cast< ::std::string*>(&_default_end_time_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageOperationDetailCmd::~CGMMessageOperationDetailCmd() {
  SharedDtor();
}

void CGMMessageOperationDetailCmd::SharedDtor() {
  if (start_time_ != &_default_start_time_) {
    delete start_time_;
  }
  if (end_time_ != &_default_end_time_) {
    delete end_time_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageOperationDetailCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageOperationDetailCmd_descriptor_;
}

const CGMMessageOperationDetailCmd& CGMMessageOperationDetailCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageOperationDetailCmd* CGMMessageOperationDetailCmd::default_instance_ = NULL;

CGMMessageOperationDetailCmd* CGMMessageOperationDetailCmd::New() const {
  return new CGMMessageOperationDetailCmd;
}

void CGMMessageOperationDetailCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    server_id_ = 0;
    role_id_ = 0;
    if (_has_bit(4)) {
      if (start_time_ != &_default_start_time_) {
        start_time_->clear();
      }
    }
    if (_has_bit(5)) {
      if (end_time_ != &_default_end_time_) {
        end_time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageOperationDetailCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_server_id;
        break;
      }
      
      // optional int32 server_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_server_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &server_id_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_role_id;
        break;
      }
      
      // optional int32 role_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &role_id_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_start_time;
        break;
      }
      
      // optional string start_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_start_time:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_start_time()));
        if (input->ExpectTag(50)) goto parse_end_time;
        break;
      }
      
      // optional string end_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_end_time:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_end_time()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageOperationDetailCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageOperationDetailCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional int32 server_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->server_id(), output);
  }
  
  // optional int32 role_id = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->role_id(), output);
  }
  
  // optional string start_time = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->start_time(), output);
  }
  
  // optional string end_time = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteString(6, this->end_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageOperationDetailCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional int32 server_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->server_id(), target);
  }
  
  // optional int32 role_id = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->role_id(), target);
  }
  
  // optional string start_time = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->start_time(), target);
  }
  
  // optional string end_time = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(6, this->end_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageOperationDetailCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional int32 server_id = 3;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->server_id());
    }
    
    // optional int32 role_id = 4;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->role_id());
    }
    
    // optional string start_time = 5;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->start_time());
    }
    
    // optional string end_time = 6;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->end_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageOperationDetailCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageOperationDetailCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageOperationDetailCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageOperationDetailCmd::MergeFrom(const CGMMessageOperationDetailCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_server_id(from.server_id());
    }
    if (from._has_bit(3)) {
      set_role_id(from.role_id());
    }
    if (from._has_bit(4)) {
      set_start_time(from.start_time());
    }
    if (from._has_bit(5)) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageOperationDetailCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageOperationDetailCmd::CopyFrom(const CGMMessageOperationDetailCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageOperationDetailCmd::Swap(CGMMessageOperationDetailCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(server_id_, other->server_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageOperationDetailCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageOperationDetailCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageOperationDetailCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageOperationDetailCmd_reflection_;
}

// ===================================================================

const ::std::string CGMMessageNPCDetailCmd::_default_npc_name_;
#ifndef _MSC_VER
const int CGMMessageNPCDetailCmd::kSessionIdFieldNumber;
const int CGMMessageNPCDetailCmd::kFdFieldNumber;
const int CGMMessageNPCDetailCmd::kNpcNameFieldNumber;
#endif  // !_MSC_VER

CGMMessageNPCDetailCmd::CGMMessageNPCDetailCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageNPCDetailCmd::InitAsDefaultInstance() {}

CGMMessageNPCDetailCmd::CGMMessageNPCDetailCmd(const CGMMessageNPCDetailCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageNPCDetailCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  npc_name_ = const_cast< ::std::string*>(&_default_npc_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageNPCDetailCmd::~CGMMessageNPCDetailCmd() {
  SharedDtor();
}

void CGMMessageNPCDetailCmd::SharedDtor() {
  if (npc_name_ != &_default_npc_name_) {
    delete npc_name_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageNPCDetailCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageNPCDetailCmd_descriptor_;
}

const CGMMessageNPCDetailCmd& CGMMessageNPCDetailCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageNPCDetailCmd* CGMMessageNPCDetailCmd::default_instance_ = NULL;

CGMMessageNPCDetailCmd* CGMMessageNPCDetailCmd::New() const {
  return new CGMMessageNPCDetailCmd;
}

void CGMMessageNPCDetailCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    if (_has_bit(2)) {
      if (npc_name_ != &_default_npc_name_) {
        npc_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageNPCDetailCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_npc_name;
        break;
      }
      
      // optional string npc_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_npc_name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_npc_name()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageNPCDetailCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageNPCDetailCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional string npc_name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->npc_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageNPCDetailCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional string npc_name = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->npc_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageNPCDetailCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional string npc_name = 3;
    if (has_npc_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->npc_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageNPCDetailCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageNPCDetailCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageNPCDetailCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageNPCDetailCmd::MergeFrom(const CGMMessageNPCDetailCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_npc_name(from.npc_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageNPCDetailCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageNPCDetailCmd::CopyFrom(const CGMMessageNPCDetailCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageNPCDetailCmd::Swap(CGMMessageNPCDetailCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(npc_name_, other->npc_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageNPCDetailCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageNPCDetailCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageNPCDetailCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageNPCDetailCmd_reflection_;
}

// ===================================================================

const ::std::string PBNPCDetail::_default_npc_location_;
#ifndef _MSC_VER
const int PBNPCDetail::kMapIdFieldNumber;
const int PBNPCDetail::kNpcLocationFieldNumber;
#endif  // !_MSC_VER

PBNPCDetail::PBNPCDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBNPCDetail::InitAsDefaultInstance() {}

PBNPCDetail::PBNPCDetail(const PBNPCDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBNPCDetail::SharedCtor() {
  _cached_size_ = 0;
  map_id_ = 0;
  npc_location_ = const_cast< ::std::string*>(&_default_npc_location_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBNPCDetail::~PBNPCDetail() {
  SharedDtor();
}

void PBNPCDetail::SharedDtor() {
  if (npc_location_ != &_default_npc_location_) {
    delete npc_location_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBNPCDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBNPCDetail_descriptor_;
}

const PBNPCDetail& PBNPCDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

PBNPCDetail* PBNPCDetail::default_instance_ = NULL;

PBNPCDetail* PBNPCDetail::New() const {
  return new PBNPCDetail;
}

void PBNPCDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    map_id_ = 0;
    if (_has_bit(1)) {
      if (npc_location_ != &_default_npc_location_) {
        npc_location_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBNPCDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional int32 map_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &map_id_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_npc_location;
        break;
      }
      
      // optional string npc_location = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_npc_location:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_npc_location()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBNPCDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBNPCDetail::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 map_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(1, this->map_id(), output);
  }
  
  // optional string npc_location = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->npc_location(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBNPCDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 map_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(1, this->map_id(), target);
  }
  
  // optional string npc_location = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->npc_location(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBNPCDetail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 map_id = 1;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->map_id());
    }
    
    // optional string npc_location = 2;
    if (has_npc_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->npc_location());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBNPCDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBNPCDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBNPCDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBNPCDetail::MergeFrom(const PBNPCDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_map_id(from.map_id());
    }
    if (from._has_bit(1)) {
      set_npc_location(from.npc_location());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBNPCDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBNPCDetail::CopyFrom(const PBNPCDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBNPCDetail::Swap(PBNPCDetail* other) {
  if (other != this) {
    std::swap(map_id_, other->map_id_);
    std::swap(npc_location_, other->npc_location_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBNPCDetail::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBNPCDetail::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBNPCDetail::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBNPCDetail_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageNPCDetailResult::kSessionIdFieldNumber;
const int CGMMessageNPCDetailResult::kFdFieldNumber;
const int CGMMessageNPCDetailResult::kNpcDetailFieldNumber;
#endif  // !_MSC_VER

CGMMessageNPCDetailResult::CGMMessageNPCDetailResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageNPCDetailResult::InitAsDefaultInstance() {}

CGMMessageNPCDetailResult::CGMMessageNPCDetailResult(const CGMMessageNPCDetailResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageNPCDetailResult::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageNPCDetailResult::~CGMMessageNPCDetailResult() {
  SharedDtor();
}

void CGMMessageNPCDetailResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageNPCDetailResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageNPCDetailResult_descriptor_;
}

const CGMMessageNPCDetailResult& CGMMessageNPCDetailResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageNPCDetailResult* CGMMessageNPCDetailResult::default_instance_ = NULL;

CGMMessageNPCDetailResult* CGMMessageNPCDetailResult::New() const {
  return new CGMMessageNPCDetailResult;
}

void CGMMessageNPCDetailResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
  }
  npc_detail_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageNPCDetailResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_npc_detail;
        break;
      }
      
      // repeated .PBNPCDetail npc_detail = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_npc_detail:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_npc_detail()));
        if (input->ExpectTag(26)) goto parse_npc_detail;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageNPCDetailResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageNPCDetailResult::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // repeated .PBNPCDetail npc_detail = 3;
  for (int i = 0; i < this->npc_detail_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->npc_detail(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageNPCDetailResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // repeated .PBNPCDetail npc_detail = 3;
  for (int i = 0; i < this->npc_detail_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->npc_detail(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageNPCDetailResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
  }
  // repeated .PBNPCDetail npc_detail = 3;
  total_size += 1 * this->npc_detail_size();
  for (int i = 0; i < this->npc_detail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->npc_detail(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageNPCDetailResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageNPCDetailResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageNPCDetailResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageNPCDetailResult::MergeFrom(const CGMMessageNPCDetailResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  npc_detail_.MergeFrom(from.npc_detail_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageNPCDetailResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageNPCDetailResult::CopyFrom(const CGMMessageNPCDetailResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageNPCDetailResult::Swap(CGMMessageNPCDetailResult* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    npc_detail_.Swap(&other->npc_detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageNPCDetailResult::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageNPCDetailResult::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageNPCDetailResult::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageNPCDetailResult_reflection_;
}

// ===================================================================

const ::std::string CGMMessageGoodsDropLogCmd::_default_map_name_;
const ::std::string CGMMessageGoodsDropLogCmd::_default_start_time_;
const ::std::string CGMMessageGoodsDropLogCmd::_default_end_time_;
#ifndef _MSC_VER
const int CGMMessageGoodsDropLogCmd::kSessionIdFieldNumber;
const int CGMMessageGoodsDropLogCmd::kFdFieldNumber;
const int CGMMessageGoodsDropLogCmd::kGoodsIdFieldNumber;
const int CGMMessageGoodsDropLogCmd::kMapNameFieldNumber;
const int CGMMessageGoodsDropLogCmd::kStartTimeFieldNumber;
const int CGMMessageGoodsDropLogCmd::kEndTimeFieldNumber;
#endif  // !_MSC_VER

CGMMessageGoodsDropLogCmd::CGMMessageGoodsDropLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageGoodsDropLogCmd::InitAsDefaultInstance() {}

CGMMessageGoodsDropLogCmd::CGMMessageGoodsDropLogCmd(const CGMMessageGoodsDropLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageGoodsDropLogCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  goods_id_ = 0;
  map_name_ = const_cast< ::std::string*>(&_default_map_name_);
  start_time_ = const_cast< ::std::string*>(&_default_start_time_);
  end_time_ = const_cast< ::std::string*>(&_default_end_time_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageGoodsDropLogCmd::~CGMMessageGoodsDropLogCmd() {
  SharedDtor();
}

void CGMMessageGoodsDropLogCmd::SharedDtor() {
  if (map_name_ != &_default_map_name_) {
    delete map_name_;
  }
  if (start_time_ != &_default_start_time_) {
    delete start_time_;
  }
  if (end_time_ != &_default_end_time_) {
    delete end_time_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageGoodsDropLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageGoodsDropLogCmd_descriptor_;
}

const CGMMessageGoodsDropLogCmd& CGMMessageGoodsDropLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageGoodsDropLogCmd* CGMMessageGoodsDropLogCmd::default_instance_ = NULL;

CGMMessageGoodsDropLogCmd* CGMMessageGoodsDropLogCmd::New() const {
  return new CGMMessageGoodsDropLogCmd;
}

void CGMMessageGoodsDropLogCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    goods_id_ = 0;
    if (_has_bit(3)) {
      if (map_name_ != &_default_map_name_) {
        map_name_->clear();
      }
    }
    if (_has_bit(4)) {
      if (start_time_ != &_default_start_time_) {
        start_time_->clear();
      }
    }
    if (_has_bit(5)) {
      if (end_time_ != &_default_end_time_) {
        end_time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageGoodsDropLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_goods_id;
        break;
      }
      
      // optional int32 goods_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_goods_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &goods_id_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_map_name;
        break;
      }
      
      // optional string map_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_map_name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_map_name()));
        if (input->ExpectTag(42)) goto parse_start_time;
        break;
      }
      
      // optional string start_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_start_time:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_start_time()));
        if (input->ExpectTag(50)) goto parse_end_time;
        break;
      }
      
      // optional string end_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_end_time:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_end_time()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageGoodsDropLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageGoodsDropLogCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional int32 goods_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->goods_id(), output);
  }
  
  // optional string map_name = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->map_name(), output);
  }
  
  // optional string start_time = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->start_time(), output);
  }
  
  // optional string end_time = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteString(6, this->end_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageGoodsDropLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional int32 goods_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->goods_id(), target);
  }
  
  // optional string map_name = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->map_name(), target);
  }
  
  // optional string start_time = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->start_time(), target);
  }
  
  // optional string end_time = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(6, this->end_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageGoodsDropLogCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional int32 goods_id = 3;
    if (has_goods_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->goods_id());
    }
    
    // optional string map_name = 4;
    if (has_map_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->map_name());
    }
    
    // optional string start_time = 5;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->start_time());
    }
    
    // optional string end_time = 6;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->end_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageGoodsDropLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageGoodsDropLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageGoodsDropLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageGoodsDropLogCmd::MergeFrom(const CGMMessageGoodsDropLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_goods_id(from.goods_id());
    }
    if (from._has_bit(3)) {
      set_map_name(from.map_name());
    }
    if (from._has_bit(4)) {
      set_start_time(from.start_time());
    }
    if (from._has_bit(5)) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageGoodsDropLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageGoodsDropLogCmd::CopyFrom(const CGMMessageGoodsDropLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageGoodsDropLogCmd::Swap(CGMMessageGoodsDropLogCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(goods_id_, other->goods_id_);
    std::swap(map_name_, other->map_name_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageGoodsDropLogCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageGoodsDropLogCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageGoodsDropLogCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageGoodsDropLogCmd_reflection_;
}

// ===================================================================

const ::std::string PBGoodsDropLog::_default_role_name_;
const ::std::string PBGoodsDropLog::_default_drop_time_;
#ifndef _MSC_VER
const int PBGoodsDropLog::kRoleNameFieldNumber;
const int PBGoodsDropLog::kDropTimeFieldNumber;
const int PBGoodsDropLog::kTotalNumFieldNumber;
const int PBGoodsDropLog::kDropRateFieldNumber;
#endif  // !_MSC_VER

PBGoodsDropLog::PBGoodsDropLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGoodsDropLog::InitAsDefaultInstance() {}

PBGoodsDropLog::PBGoodsDropLog(const PBGoodsDropLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGoodsDropLog::SharedCtor() {
  _cached_size_ = 0;
  role_name_ = const_cast< ::std::string*>(&_default_role_name_);
  drop_time_ = const_cast< ::std::string*>(&_default_drop_time_);
  total_num_ = 0;
  drop_rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGoodsDropLog::~PBGoodsDropLog() {
  SharedDtor();
}

void PBGoodsDropLog::SharedDtor() {
  if (role_name_ != &_default_role_name_) {
    delete role_name_;
  }
  if (drop_time_ != &_default_drop_time_) {
    delete drop_time_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBGoodsDropLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGoodsDropLog_descriptor_;
}

const PBGoodsDropLog& PBGoodsDropLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

PBGoodsDropLog* PBGoodsDropLog::default_instance_ = NULL;

PBGoodsDropLog* PBGoodsDropLog::New() const {
  return new PBGoodsDropLog;
}

void PBGoodsDropLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (role_name_ != &_default_role_name_) {
        role_name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (drop_time_ != &_default_drop_time_) {
        drop_time_->clear();
      }
    }
    total_num_ = 0;
    drop_rate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGoodsDropLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string role_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_role_name()));
        if (input->ExpectTag(18)) goto parse_drop_time;
        break;
      }
      
      // optional string drop_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_drop_time:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_drop_time()));
        if (input->ExpectTag(24)) goto parse_total_num;
        break;
      }
      
      // optional int32 total_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_total_num:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &total_num_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_drop_rate;
        break;
      }
      
      // optional int32 drop_rate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_drop_rate:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &drop_rate_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGoodsDropLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBGoodsDropLog::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string role_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->role_name(), output);
  }
  
  // optional string drop_time = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->drop_time(), output);
  }
  
  // optional int32 total_num = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->total_num(), output);
  }
  
  // optional int32 drop_rate = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->drop_rate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGoodsDropLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string role_name = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->role_name(), target);
  }
  
  // optional string drop_time = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->drop_time(), target);
  }
  
  // optional int32 total_num = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->total_num(), target);
  }
  
  // optional int32 drop_rate = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->drop_rate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGoodsDropLog::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string role_name = 1;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->role_name());
    }
    
    // optional string drop_time = 2;
    if (has_drop_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->drop_time());
    }
    
    // optional int32 total_num = 3;
    if (has_total_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->total_num());
    }
    
    // optional int32 drop_rate = 4;
    if (has_drop_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->drop_rate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBGoodsDropLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGoodsDropLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGoodsDropLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGoodsDropLog::MergeFrom(const PBGoodsDropLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_role_name(from.role_name());
    }
    if (from._has_bit(1)) {
      set_drop_time(from.drop_time());
    }
    if (from._has_bit(2)) {
      set_total_num(from.total_num());
    }
    if (from._has_bit(3)) {
      set_drop_rate(from.drop_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGoodsDropLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGoodsDropLog::CopyFrom(const PBGoodsDropLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGoodsDropLog::Swap(PBGoodsDropLog* other) {
  if (other != this) {
    std::swap(role_name_, other->role_name_);
    std::swap(drop_time_, other->drop_time_);
    std::swap(total_num_, other->total_num_);
    std::swap(drop_rate_, other->drop_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBGoodsDropLog::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBGoodsDropLog::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBGoodsDropLog::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBGoodsDropLog_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageGoodsDropLogResult::kSessionIdFieldNumber;
const int CGMMessageGoodsDropLogResult::kFdFieldNumber;
const int CGMMessageGoodsDropLogResult::kGoodsDropLogFieldNumber;
#endif  // !_MSC_VER

CGMMessageGoodsDropLogResult::CGMMessageGoodsDropLogResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageGoodsDropLogResult::InitAsDefaultInstance() {}

CGMMessageGoodsDropLogResult::CGMMessageGoodsDropLogResult(const CGMMessageGoodsDropLogResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageGoodsDropLogResult::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageGoodsDropLogResult::~CGMMessageGoodsDropLogResult() {
  SharedDtor();
}

void CGMMessageGoodsDropLogResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageGoodsDropLogResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageGoodsDropLogResult_descriptor_;
}

const CGMMessageGoodsDropLogResult& CGMMessageGoodsDropLogResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageGoodsDropLogResult* CGMMessageGoodsDropLogResult::default_instance_ = NULL;

CGMMessageGoodsDropLogResult* CGMMessageGoodsDropLogResult::New() const {
  return new CGMMessageGoodsDropLogResult;
}

void CGMMessageGoodsDropLogResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
  }
  goods_drop_log_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageGoodsDropLogResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_goods_drop_log;
        break;
      }
      
      // repeated .PBGoodsDropLog goods_drop_log = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_goods_drop_log:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_goods_drop_log()));
        if (input->ExpectTag(26)) goto parse_goods_drop_log;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageGoodsDropLogResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageGoodsDropLogResult::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // repeated .PBGoodsDropLog goods_drop_log = 3;
  for (int i = 0; i < this->goods_drop_log_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->goods_drop_log(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageGoodsDropLogResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // repeated .PBGoodsDropLog goods_drop_log = 3;
  for (int i = 0; i < this->goods_drop_log_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->goods_drop_log(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageGoodsDropLogResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
  }
  // repeated .PBGoodsDropLog goods_drop_log = 3;
  total_size += 1 * this->goods_drop_log_size();
  for (int i = 0; i < this->goods_drop_log_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->goods_drop_log(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageGoodsDropLogResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageGoodsDropLogResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageGoodsDropLogResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageGoodsDropLogResult::MergeFrom(const CGMMessageGoodsDropLogResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  goods_drop_log_.MergeFrom(from.goods_drop_log_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageGoodsDropLogResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageGoodsDropLogResult::CopyFrom(const CGMMessageGoodsDropLogResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageGoodsDropLogResult::Swap(CGMMessageGoodsDropLogResult* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    goods_drop_log_.Swap(&other->goods_drop_log_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageGoodsDropLogResult::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageGoodsDropLogResult::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageGoodsDropLogResult::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageGoodsDropLogResult_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageTaskInfoCmd::kSessionIdFieldNumber;
const int CGMMessageTaskInfoCmd::kFdFieldNumber;
const int CGMMessageTaskInfoCmd::kRoleIdFieldNumber;
#endif  // !_MSC_VER

CGMMessageTaskInfoCmd::CGMMessageTaskInfoCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageTaskInfoCmd::InitAsDefaultInstance() {}

CGMMessageTaskInfoCmd::CGMMessageTaskInfoCmd(const CGMMessageTaskInfoCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageTaskInfoCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  role_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageTaskInfoCmd::~CGMMessageTaskInfoCmd() {
  SharedDtor();
}

void CGMMessageTaskInfoCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageTaskInfoCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageTaskInfoCmd_descriptor_;
}

const CGMMessageTaskInfoCmd& CGMMessageTaskInfoCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageTaskInfoCmd* CGMMessageTaskInfoCmd::default_instance_ = NULL;

CGMMessageTaskInfoCmd* CGMMessageTaskInfoCmd::New() const {
  return new CGMMessageTaskInfoCmd;
}

void CGMMessageTaskInfoCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    role_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageTaskInfoCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }
      
      // optional int32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &role_id_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageTaskInfoCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageTaskInfoCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional int32 role_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->role_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageTaskInfoCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional int32 role_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->role_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageTaskInfoCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional int32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->role_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageTaskInfoCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageTaskInfoCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageTaskInfoCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageTaskInfoCmd::MergeFrom(const CGMMessageTaskInfoCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageTaskInfoCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageTaskInfoCmd::CopyFrom(const CGMMessageTaskInfoCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageTaskInfoCmd::Swap(CGMMessageTaskInfoCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageTaskInfoCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageTaskInfoCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageTaskInfoCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageTaskInfoCmd_reflection_;
}

// ===================================================================

const ::std::string PBTaskInfo::_default_task_name_;
#ifndef _MSC_VER
const int PBTaskInfo::kTaskIdFieldNumber;
const int PBTaskInfo::kTaskNameFieldNumber;
const int PBTaskInfo::kFinishTypeFieldNumber;
#endif  // !_MSC_VER

PBTaskInfo::PBTaskInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTaskInfo::InitAsDefaultInstance() {}

PBTaskInfo::PBTaskInfo(const PBTaskInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTaskInfo::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0;
  task_name_ = const_cast< ::std::string*>(&_default_task_name_);
  finish_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTaskInfo::~PBTaskInfo() {
  SharedDtor();
}

void PBTaskInfo::SharedDtor() {
  if (task_name_ != &_default_task_name_) {
    delete task_name_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBTaskInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTaskInfo_descriptor_;
}

const PBTaskInfo& PBTaskInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

PBTaskInfo* PBTaskInfo::default_instance_ = NULL;

PBTaskInfo* PBTaskInfo::New() const {
  return new PBTaskInfo;
}

void PBTaskInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0;
    if (_has_bit(1)) {
      if (task_name_ != &_default_task_name_) {
        task_name_->clear();
      }
    }
    finish_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTaskInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional int32 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &task_id_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_task_name;
        break;
      }
      
      // optional string task_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_task_name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_task_name()));
        if (input->ExpectTag(24)) goto parse_finish_type;
        break;
      }
      
      // optional int32 finish_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_finish_type:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &finish_type_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTaskInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBTaskInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 task_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(1, this->task_id(), output);
  }
  
  // optional string task_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->task_name(), output);
  }
  
  // optional int32 finish_type = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->finish_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTaskInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 task_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(1, this->task_id(), target);
  }
  
  // optional string task_name = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->task_name(), target);
  }
  
  // optional int32 finish_type = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->finish_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTaskInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->task_id());
    }
    
    // optional string task_name = 2;
    if (has_task_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->task_name());
    }
    
    // optional int32 finish_type = 3;
    if (has_finish_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->finish_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBTaskInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTaskInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTaskInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTaskInfo::MergeFrom(const PBTaskInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_task_id(from.task_id());
    }
    if (from._has_bit(1)) {
      set_task_name(from.task_name());
    }
    if (from._has_bit(2)) {
      set_finish_type(from.finish_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTaskInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTaskInfo::CopyFrom(const PBTaskInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTaskInfo::Swap(PBTaskInfo* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(task_name_, other->task_name_);
    std::swap(finish_type_, other->finish_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBTaskInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBTaskInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBTaskInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBTaskInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageTaskInfoResult::kSessionIdFieldNumber;
const int CGMMessageTaskInfoResult::kFdFieldNumber;
const int CGMMessageTaskInfoResult::kTaskDetailFieldNumber;
#endif  // !_MSC_VER

CGMMessageTaskInfoResult::CGMMessageTaskInfoResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageTaskInfoResult::InitAsDefaultInstance() {}

CGMMessageTaskInfoResult::CGMMessageTaskInfoResult(const CGMMessageTaskInfoResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageTaskInfoResult::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageTaskInfoResult::~CGMMessageTaskInfoResult() {
  SharedDtor();
}

void CGMMessageTaskInfoResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageTaskInfoResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageTaskInfoResult_descriptor_;
}

const CGMMessageTaskInfoResult& CGMMessageTaskInfoResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageTaskInfoResult* CGMMessageTaskInfoResult::default_instance_ = NULL;

CGMMessageTaskInfoResult* CGMMessageTaskInfoResult::New() const {
  return new CGMMessageTaskInfoResult;
}

void CGMMessageTaskInfoResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
  }
  task_detail_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageTaskInfoResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_task_detail;
        break;
      }
      
      // repeated .PBTaskInfo task_detail = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_task_detail:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_task_detail()));
        if (input->ExpectTag(26)) goto parse_task_detail;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageTaskInfoResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageTaskInfoResult::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // repeated .PBTaskInfo task_detail = 3;
  for (int i = 0; i < this->task_detail_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->task_detail(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageTaskInfoResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // repeated .PBTaskInfo task_detail = 3;
  for (int i = 0; i < this->task_detail_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->task_detail(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageTaskInfoResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
  }
  // repeated .PBTaskInfo task_detail = 3;
  total_size += 1 * this->task_detail_size();
  for (int i = 0; i < this->task_detail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->task_detail(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageTaskInfoResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageTaskInfoResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageTaskInfoResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageTaskInfoResult::MergeFrom(const CGMMessageTaskInfoResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  task_detail_.MergeFrom(from.task_detail_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageTaskInfoResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageTaskInfoResult::CopyFrom(const CGMMessageTaskInfoResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageTaskInfoResult::Swap(CGMMessageTaskInfoResult* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    task_detail_.Swap(&other->task_detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageTaskInfoResult::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageTaskInfoResult::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageTaskInfoResult::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageTaskInfoResult_reflection_;
}

// ===================================================================

const ::std::string CGMMessageLoginInfoCmd::_default_user_name_;
const ::std::string CGMMessageLoginInfoCmd::_default_start_time_;
const ::std::string CGMMessageLoginInfoCmd::_default_end_time_;
#ifndef _MSC_VER
const int CGMMessageLoginInfoCmd::kSessionIdFieldNumber;
const int CGMMessageLoginInfoCmd::kFdFieldNumber;
const int CGMMessageLoginInfoCmd::kUserNameFieldNumber;
const int CGMMessageLoginInfoCmd::kStartTimeFieldNumber;
const int CGMMessageLoginInfoCmd::kEndTimeFieldNumber;
#endif  // !_MSC_VER

CGMMessageLoginInfoCmd::CGMMessageLoginInfoCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageLoginInfoCmd::InitAsDefaultInstance() {}

CGMMessageLoginInfoCmd::CGMMessageLoginInfoCmd(const CGMMessageLoginInfoCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageLoginInfoCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  user_name_ = const_cast< ::std::string*>(&_default_user_name_);
  start_time_ = const_cast< ::std::string*>(&_default_start_time_);
  end_time_ = const_cast< ::std::string*>(&_default_end_time_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageLoginInfoCmd::~CGMMessageLoginInfoCmd() {
  SharedDtor();
}

void CGMMessageLoginInfoCmd::SharedDtor() {
  if (user_name_ != &_default_user_name_) {
    delete user_name_;
  }
  if (start_time_ != &_default_start_time_) {
    delete start_time_;
  }
  if (end_time_ != &_default_end_time_) {
    delete end_time_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageLoginInfoCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageLoginInfoCmd_descriptor_;
}

const CGMMessageLoginInfoCmd& CGMMessageLoginInfoCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageLoginInfoCmd* CGMMessageLoginInfoCmd::default_instance_ = NULL;

CGMMessageLoginInfoCmd* CGMMessageLoginInfoCmd::New() const {
  return new CGMMessageLoginInfoCmd;
}

void CGMMessageLoginInfoCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    if (_has_bit(2)) {
      if (user_name_ != &_default_user_name_) {
        user_name_->clear();
      }
    }
    if (_has_bit(3)) {
      if (start_time_ != &_default_start_time_) {
        start_time_->clear();
      }
    }
    if (_has_bit(4)) {
      if (end_time_ != &_default_end_time_) {
        end_time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageLoginInfoCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_user_name;
        break;
      }
      
      // optional string user_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_user_name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_user_name()));
        if (input->ExpectTag(34)) goto parse_start_time;
        break;
      }
      
      // optional string start_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_start_time:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_start_time()));
        if (input->ExpectTag(42)) goto parse_end_time;
        break;
      }
      
      // optional string end_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_end_time:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_end_time()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageLoginInfoCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageLoginInfoCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional string user_name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->user_name(), output);
  }
  
  // optional string start_time = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->start_time(), output);
  }
  
  // optional string end_time = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->end_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageLoginInfoCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional string user_name = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->user_name(), target);
  }
  
  // optional string start_time = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->start_time(), target);
  }
  
  // optional string end_time = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->end_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageLoginInfoCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional string user_name = 3;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->user_name());
    }
    
    // optional string start_time = 4;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->start_time());
    }
    
    // optional string end_time = 5;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->end_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageLoginInfoCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageLoginInfoCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageLoginInfoCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageLoginInfoCmd::MergeFrom(const CGMMessageLoginInfoCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_user_name(from.user_name());
    }
    if (from._has_bit(3)) {
      set_start_time(from.start_time());
    }
    if (from._has_bit(4)) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageLoginInfoCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageLoginInfoCmd::CopyFrom(const CGMMessageLoginInfoCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageLoginInfoCmd::Swap(CGMMessageLoginInfoCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(user_name_, other->user_name_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageLoginInfoCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageLoginInfoCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageLoginInfoCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageLoginInfoCmd_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBLoginInfo::kLoginInTimeFieldNumber;
const int PBLoginInfo::kLoginInMoneyFieldNumber;
const int PBLoginInfo::kLoginInExpFieldNumber;
const int PBLoginInfo::kLoginInIpFieldNumber;
const int PBLoginInfo::kLoginOutTimeFieldNumber;
const int PBLoginInfo::kLoginOutMoneyFieldNumber;
const int PBLoginInfo::kLoginOutExpFieldNumber;
#endif  // !_MSC_VER

PBLoginInfo::PBLoginInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBLoginInfo::InitAsDefaultInstance() {}

PBLoginInfo::PBLoginInfo(const PBLoginInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBLoginInfo::SharedCtor() {
  _cached_size_ = 0;
  login_in_time_ = 0;
  login_in_money_ = 0;
  login_in_exp_ = 0;
  login_in_ip_ = 0;
  login_out_time_ = 0;
  login_out_money_ = 0;
  login_out_exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBLoginInfo::~PBLoginInfo() {
  SharedDtor();
}

void PBLoginInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBLoginInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBLoginInfo_descriptor_;
}

const PBLoginInfo& PBLoginInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

PBLoginInfo* PBLoginInfo::default_instance_ = NULL;

PBLoginInfo* PBLoginInfo::New() const {
  return new PBLoginInfo;
}

void PBLoginInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    login_in_time_ = 0;
    login_in_money_ = 0;
    login_in_exp_ = 0;
    login_in_ip_ = 0;
    login_out_time_ = 0;
    login_out_money_ = 0;
    login_out_exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBLoginInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional int32 login_in_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &login_in_time_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_login_in_money;
        break;
      }
      
      // optional int32 login_in_money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_login_in_money:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &login_in_money_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_login_in_exp;
        break;
      }
      
      // optional int32 login_in_exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_login_in_exp:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &login_in_exp_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_login_in_ip;
        break;
      }
      
      // optional int32 login_in_ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_login_in_ip:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &login_in_ip_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_login_out_time;
        break;
      }
      
      // optional int32 login_out_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_login_out_time:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &login_out_time_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_login_out_money;
        break;
      }
      
      // optional int32 login_out_money = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_login_out_money:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &login_out_money_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_login_out_exp;
        break;
      }
      
      // optional int32 login_out_exp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_login_out_exp:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &login_out_exp_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBLoginInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBLoginInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 login_in_time = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(1, this->login_in_time(), output);
  }
  
  // optional int32 login_in_money = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(2, this->login_in_money(), output);
  }
  
  // optional int32 login_in_exp = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->login_in_exp(), output);
  }
  
  // optional int32 login_in_ip = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->login_in_ip(), output);
  }
  
  // optional int32 login_out_time = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(5, this->login_out_time(), output);
  }
  
  // optional int32 login_out_money = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(6, this->login_out_money(), output);
  }
  
  // optional int32 login_out_exp = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(7, this->login_out_exp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBLoginInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 login_in_time = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(1, this->login_in_time(), target);
  }
  
  // optional int32 login_in_money = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(2, this->login_in_money(), target);
  }
  
  // optional int32 login_in_exp = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->login_in_exp(), target);
  }
  
  // optional int32 login_in_ip = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->login_in_ip(), target);
  }
  
  // optional int32 login_out_time = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(5, this->login_out_time(), target);
  }
  
  // optional int32 login_out_money = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(6, this->login_out_money(), target);
  }
  
  // optional int32 login_out_exp = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(7, this->login_out_exp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBLoginInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 login_in_time = 1;
    if (has_login_in_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->login_in_time());
    }
    
    // optional int32 login_in_money = 2;
    if (has_login_in_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->login_in_money());
    }
    
    // optional int32 login_in_exp = 3;
    if (has_login_in_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->login_in_exp());
    }
    
    // optional int32 login_in_ip = 4;
    if (has_login_in_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->login_in_ip());
    }
    
    // optional int32 login_out_time = 5;
    if (has_login_out_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->login_out_time());
    }
    
    // optional int32 login_out_money = 6;
    if (has_login_out_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->login_out_money());
    }
    
    // optional int32 login_out_exp = 7;
    if (has_login_out_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->login_out_exp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBLoginInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBLoginInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBLoginInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBLoginInfo::MergeFrom(const PBLoginInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_login_in_time(from.login_in_time());
    }
    if (from._has_bit(1)) {
      set_login_in_money(from.login_in_money());
    }
    if (from._has_bit(2)) {
      set_login_in_exp(from.login_in_exp());
    }
    if (from._has_bit(3)) {
      set_login_in_ip(from.login_in_ip());
    }
    if (from._has_bit(4)) {
      set_login_out_time(from.login_out_time());
    }
    if (from._has_bit(5)) {
      set_login_out_money(from.login_out_money());
    }
    if (from._has_bit(6)) {
      set_login_out_exp(from.login_out_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBLoginInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLoginInfo::CopyFrom(const PBLoginInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLoginInfo::Swap(PBLoginInfo* other) {
  if (other != this) {
    std::swap(login_in_time_, other->login_in_time_);
    std::swap(login_in_money_, other->login_in_money_);
    std::swap(login_in_exp_, other->login_in_exp_);
    std::swap(login_in_ip_, other->login_in_ip_);
    std::swap(login_out_time_, other->login_out_time_);
    std::swap(login_out_money_, other->login_out_money_);
    std::swap(login_out_exp_, other->login_out_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBLoginInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBLoginInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBLoginInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBLoginInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageLoginInfoResult::kSessionIdFieldNumber;
const int CGMMessageLoginInfoResult::kFdFieldNumber;
const int CGMMessageLoginInfoResult::kLoginInfoFieldNumber;
#endif  // !_MSC_VER

CGMMessageLoginInfoResult::CGMMessageLoginInfoResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageLoginInfoResult::InitAsDefaultInstance() {}

CGMMessageLoginInfoResult::CGMMessageLoginInfoResult(const CGMMessageLoginInfoResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageLoginInfoResult::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageLoginInfoResult::~CGMMessageLoginInfoResult() {
  SharedDtor();
}

void CGMMessageLoginInfoResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageLoginInfoResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageLoginInfoResult_descriptor_;
}

const CGMMessageLoginInfoResult& CGMMessageLoginInfoResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageLoginInfoResult* CGMMessageLoginInfoResult::default_instance_ = NULL;

CGMMessageLoginInfoResult* CGMMessageLoginInfoResult::New() const {
  return new CGMMessageLoginInfoResult;
}

void CGMMessageLoginInfoResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
  }
  login_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageLoginInfoResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_login_info;
        break;
      }
      
      // repeated .PBLoginInfo login_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_login_info:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_login_info()));
        if (input->ExpectTag(26)) goto parse_login_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageLoginInfoResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageLoginInfoResult::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // repeated .PBLoginInfo login_info = 3;
  for (int i = 0; i < this->login_info_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->login_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageLoginInfoResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // repeated .PBLoginInfo login_info = 3;
  for (int i = 0; i < this->login_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->login_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageLoginInfoResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
  }
  // repeated .PBLoginInfo login_info = 3;
  total_size += 1 * this->login_info_size();
  for (int i = 0; i < this->login_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->login_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageLoginInfoResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageLoginInfoResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageLoginInfoResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageLoginInfoResult::MergeFrom(const CGMMessageLoginInfoResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  login_info_.MergeFrom(from.login_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageLoginInfoResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageLoginInfoResult::CopyFrom(const CGMMessageLoginInfoResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageLoginInfoResult::Swap(CGMMessageLoginInfoResult* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    login_info_.Swap(&other->login_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageLoginInfoResult::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageLoginInfoResult::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageLoginInfoResult::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageLoginInfoResult_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageShutUpCmd::kSessionIdFieldNumber;
const int CGMMessageShutUpCmd::kFdFieldNumber;
const int CGMMessageShutUpCmd::kRoleIdFieldNumber;
const int CGMMessageShutUpCmd::kChannelFieldNumber;
const int CGMMessageShutUpCmd::kPeriodFieldNumber;
#endif  // !_MSC_VER

CGMMessageShutUpCmd::CGMMessageShutUpCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageShutUpCmd::InitAsDefaultInstance() {}

CGMMessageShutUpCmd::CGMMessageShutUpCmd(const CGMMessageShutUpCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageShutUpCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  role_id_ = 0;
  channel_ = 0;
  period_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageShutUpCmd::~CGMMessageShutUpCmd() {
  SharedDtor();
}

void CGMMessageShutUpCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageShutUpCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageShutUpCmd_descriptor_;
}

const CGMMessageShutUpCmd& CGMMessageShutUpCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageShutUpCmd* CGMMessageShutUpCmd::default_instance_ = NULL;

CGMMessageShutUpCmd* CGMMessageShutUpCmd::New() const {
  return new CGMMessageShutUpCmd;
}

void CGMMessageShutUpCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    role_id_ = 0;
    channel_ = 0;
    period_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageShutUpCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }
      
      // optional int32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &role_id_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_channel;
        break;
      }
      
      // optional int32 channel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_channel:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &channel_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_period;
        break;
      }
      
      // optional int32 period = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_period:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &period_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageShutUpCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageShutUpCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional int32 role_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->role_id(), output);
  }
  
  // optional int32 channel = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->channel(), output);
  }
  
  // optional int32 period = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(5, this->period(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageShutUpCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional int32 role_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->role_id(), target);
  }
  
  // optional int32 channel = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->channel(), target);
  }
  
  // optional int32 period = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(5, this->period(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageShutUpCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional int32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->role_id());
    }
    
    // optional int32 channel = 4;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->channel());
    }
    
    // optional int32 period = 5;
    if (has_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->period());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageShutUpCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageShutUpCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageShutUpCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageShutUpCmd::MergeFrom(const CGMMessageShutUpCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_role_id(from.role_id());
    }
    if (from._has_bit(3)) {
      set_channel(from.channel());
    }
    if (from._has_bit(4)) {
      set_period(from.period());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageShutUpCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageShutUpCmd::CopyFrom(const CGMMessageShutUpCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageShutUpCmd::Swap(CGMMessageShutUpCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(role_id_, other->role_id_);
    std::swap(channel_, other->channel_);
    std::swap(period_, other->period_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageShutUpCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageShutUpCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageShutUpCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageShutUpCmd_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageCancelShutUpCmd::kSessionIdFieldNumber;
const int CGMMessageCancelShutUpCmd::kFdFieldNumber;
const int CGMMessageCancelShutUpCmd::kRoleIdFieldNumber;
const int CGMMessageCancelShutUpCmd::kChannelFieldNumber;
#endif  // !_MSC_VER

CGMMessageCancelShutUpCmd::CGMMessageCancelShutUpCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageCancelShutUpCmd::InitAsDefaultInstance() {}

CGMMessageCancelShutUpCmd::CGMMessageCancelShutUpCmd(const CGMMessageCancelShutUpCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageCancelShutUpCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  role_id_ = 0;
  channel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageCancelShutUpCmd::~CGMMessageCancelShutUpCmd() {
  SharedDtor();
}

void CGMMessageCancelShutUpCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageCancelShutUpCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageCancelShutUpCmd_descriptor_;
}

const CGMMessageCancelShutUpCmd& CGMMessageCancelShutUpCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageCancelShutUpCmd* CGMMessageCancelShutUpCmd::default_instance_ = NULL;

CGMMessageCancelShutUpCmd* CGMMessageCancelShutUpCmd::New() const {
  return new CGMMessageCancelShutUpCmd;
}

void CGMMessageCancelShutUpCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    role_id_ = 0;
    channel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageCancelShutUpCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }
      
      // optional int32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &role_id_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_channel;
        break;
      }
      
      // optional int32 channel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_channel:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &channel_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageCancelShutUpCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageCancelShutUpCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional int32 role_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->role_id(), output);
  }
  
  // optional int32 channel = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->channel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageCancelShutUpCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional int32 role_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->role_id(), target);
  }
  
  // optional int32 channel = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->channel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageCancelShutUpCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional int32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->role_id());
    }
    
    // optional int32 channel = 4;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->channel());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageCancelShutUpCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageCancelShutUpCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageCancelShutUpCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageCancelShutUpCmd::MergeFrom(const CGMMessageCancelShutUpCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_role_id(from.role_id());
    }
    if (from._has_bit(3)) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageCancelShutUpCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageCancelShutUpCmd::CopyFrom(const CGMMessageCancelShutUpCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageCancelShutUpCmd::Swap(CGMMessageCancelShutUpCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(role_id_, other->role_id_);
    std::swap(channel_, other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageCancelShutUpCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageCancelShutUpCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageCancelShutUpCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageCancelShutUpCmd_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageFreezeAccountCmd::kSessionIdFieldNumber;
const int CGMMessageFreezeAccountCmd::kFdFieldNumber;
const int CGMMessageFreezeAccountCmd::kUserIdFieldNumber;
#endif  // !_MSC_VER

CGMMessageFreezeAccountCmd::CGMMessageFreezeAccountCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageFreezeAccountCmd::InitAsDefaultInstance() {}

CGMMessageFreezeAccountCmd::CGMMessageFreezeAccountCmd(const CGMMessageFreezeAccountCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageFreezeAccountCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  user_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageFreezeAccountCmd::~CGMMessageFreezeAccountCmd() {
  SharedDtor();
}

void CGMMessageFreezeAccountCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageFreezeAccountCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageFreezeAccountCmd_descriptor_;
}

const CGMMessageFreezeAccountCmd& CGMMessageFreezeAccountCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageFreezeAccountCmd* CGMMessageFreezeAccountCmd::default_instance_ = NULL;

CGMMessageFreezeAccountCmd* CGMMessageFreezeAccountCmd::New() const {
  return new CGMMessageFreezeAccountCmd;
}

void CGMMessageFreezeAccountCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    user_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageFreezeAccountCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_user_id;
        break;
      }
      
      // optional int32 user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_user_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &user_id_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageFreezeAccountCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageFreezeAccountCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional int32 user_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->user_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageFreezeAccountCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional int32 user_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->user_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageFreezeAccountCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional int32 user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->user_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageFreezeAccountCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageFreezeAccountCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageFreezeAccountCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageFreezeAccountCmd::MergeFrom(const CGMMessageFreezeAccountCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageFreezeAccountCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageFreezeAccountCmd::CopyFrom(const CGMMessageFreezeAccountCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageFreezeAccountCmd::Swap(CGMMessageFreezeAccountCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageFreezeAccountCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageFreezeAccountCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageFreezeAccountCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageFreezeAccountCmd_reflection_;
}

// ===================================================================

const ::std::string CGMMessageFreezeAccountBatCmd::_default_uid_list_;
#ifndef _MSC_VER
const int CGMMessageFreezeAccountBatCmd::kSessionIdFieldNumber;
const int CGMMessageFreezeAccountBatCmd::kFdFieldNumber;
const int CGMMessageFreezeAccountBatCmd::kUidListFieldNumber;
#endif  // !_MSC_VER

CGMMessageFreezeAccountBatCmd::CGMMessageFreezeAccountBatCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageFreezeAccountBatCmd::InitAsDefaultInstance() {}

CGMMessageFreezeAccountBatCmd::CGMMessageFreezeAccountBatCmd(const CGMMessageFreezeAccountBatCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageFreezeAccountBatCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  uid_list_ = const_cast< ::std::string*>(&_default_uid_list_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageFreezeAccountBatCmd::~CGMMessageFreezeAccountBatCmd() {
  SharedDtor();
}

void CGMMessageFreezeAccountBatCmd::SharedDtor() {
  if (uid_list_ != &_default_uid_list_) {
    delete uid_list_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageFreezeAccountBatCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageFreezeAccountBatCmd_descriptor_;
}

const CGMMessageFreezeAccountBatCmd& CGMMessageFreezeAccountBatCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageFreezeAccountBatCmd* CGMMessageFreezeAccountBatCmd::default_instance_ = NULL;

CGMMessageFreezeAccountBatCmd* CGMMessageFreezeAccountBatCmd::New() const {
  return new CGMMessageFreezeAccountBatCmd;
}

void CGMMessageFreezeAccountBatCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    if (_has_bit(2)) {
      if (uid_list_ != &_default_uid_list_) {
        uid_list_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageFreezeAccountBatCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_uid_list;
        break;
      }
      
      // optional string uid_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_uid_list:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_uid_list()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageFreezeAccountBatCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageFreezeAccountBatCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional string uid_list = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->uid_list(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageFreezeAccountBatCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional string uid_list = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->uid_list(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageFreezeAccountBatCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional string uid_list = 3;
    if (has_uid_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->uid_list());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageFreezeAccountBatCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageFreezeAccountBatCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageFreezeAccountBatCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageFreezeAccountBatCmd::MergeFrom(const CGMMessageFreezeAccountBatCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_uid_list(from.uid_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageFreezeAccountBatCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageFreezeAccountBatCmd::CopyFrom(const CGMMessageFreezeAccountBatCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageFreezeAccountBatCmd::Swap(CGMMessageFreezeAccountBatCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(uid_list_, other->uid_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageFreezeAccountBatCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageFreezeAccountBatCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageFreezeAccountBatCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageFreezeAccountBatCmd_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageUnFreezeAccountCmd::kSessionIdFieldNumber;
const int CGMMessageUnFreezeAccountCmd::kFdFieldNumber;
const int CGMMessageUnFreezeAccountCmd::kUserIdFieldNumber;
#endif  // !_MSC_VER

CGMMessageUnFreezeAccountCmd::CGMMessageUnFreezeAccountCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageUnFreezeAccountCmd::InitAsDefaultInstance() {}

CGMMessageUnFreezeAccountCmd::CGMMessageUnFreezeAccountCmd(const CGMMessageUnFreezeAccountCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageUnFreezeAccountCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  user_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageUnFreezeAccountCmd::~CGMMessageUnFreezeAccountCmd() {
  SharedDtor();
}

void CGMMessageUnFreezeAccountCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageUnFreezeAccountCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageUnFreezeAccountCmd_descriptor_;
}

const CGMMessageUnFreezeAccountCmd& CGMMessageUnFreezeAccountCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageUnFreezeAccountCmd* CGMMessageUnFreezeAccountCmd::default_instance_ = NULL;

CGMMessageUnFreezeAccountCmd* CGMMessageUnFreezeAccountCmd::New() const {
  return new CGMMessageUnFreezeAccountCmd;
}

void CGMMessageUnFreezeAccountCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    user_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageUnFreezeAccountCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_user_id;
        break;
      }
      
      // optional int32 user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_user_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &user_id_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageUnFreezeAccountCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageUnFreezeAccountCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional int32 user_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->user_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageUnFreezeAccountCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional int32 user_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->user_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageUnFreezeAccountCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional int32 user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->user_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageUnFreezeAccountCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageUnFreezeAccountCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageUnFreezeAccountCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageUnFreezeAccountCmd::MergeFrom(const CGMMessageUnFreezeAccountCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageUnFreezeAccountCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageUnFreezeAccountCmd::CopyFrom(const CGMMessageUnFreezeAccountCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageUnFreezeAccountCmd::Swap(CGMMessageUnFreezeAccountCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageUnFreezeAccountCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageUnFreezeAccountCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageUnFreezeAccountCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageUnFreezeAccountCmd_reflection_;
}

// ===================================================================

const ::std::string CGMMessageTrusteeUserCmd::_default_password_;
#ifndef _MSC_VER
const int CGMMessageTrusteeUserCmd::kSessionIdFieldNumber;
const int CGMMessageTrusteeUserCmd::kFdFieldNumber;
const int CGMMessageTrusteeUserCmd::kUserIdFieldNumber;
const int CGMMessageTrusteeUserCmd::kPasswordFieldNumber;
#endif  // !_MSC_VER

CGMMessageTrusteeUserCmd::CGMMessageTrusteeUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageTrusteeUserCmd::InitAsDefaultInstance() {}

CGMMessageTrusteeUserCmd::CGMMessageTrusteeUserCmd(const CGMMessageTrusteeUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageTrusteeUserCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  user_id_ = 0;
  password_ = const_cast< ::std::string*>(&_default_password_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageTrusteeUserCmd::~CGMMessageTrusteeUserCmd() {
  SharedDtor();
}

void CGMMessageTrusteeUserCmd::SharedDtor() {
  if (password_ != &_default_password_) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageTrusteeUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageTrusteeUserCmd_descriptor_;
}

const CGMMessageTrusteeUserCmd& CGMMessageTrusteeUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageTrusteeUserCmd* CGMMessageTrusteeUserCmd::default_instance_ = NULL;

CGMMessageTrusteeUserCmd* CGMMessageTrusteeUserCmd::New() const {
  return new CGMMessageTrusteeUserCmd;
}

void CGMMessageTrusteeUserCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    user_id_ = 0;
    if (_has_bit(3)) {
      if (password_ != &_default_password_) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageTrusteeUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_user_id;
        break;
      }
      
      // optional int32 user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_user_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &user_id_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_password;
        break;
      }
      
      // optional string password = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_password:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_password()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageTrusteeUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageTrusteeUserCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional int32 user_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->user_id(), output);
  }
  
  // optional string password = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->password(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageTrusteeUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional int32 user_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->user_id(), target);
  }
  
  // optional string password = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->password(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageTrusteeUserCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional int32 user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->user_id());
    }
    
    // optional string password = 4;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->password());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageTrusteeUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageTrusteeUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageTrusteeUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageTrusteeUserCmd::MergeFrom(const CGMMessageTrusteeUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_user_id(from.user_id());
    }
    if (from._has_bit(3)) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageTrusteeUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageTrusteeUserCmd::CopyFrom(const CGMMessageTrusteeUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageTrusteeUserCmd::Swap(CGMMessageTrusteeUserCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(user_id_, other->user_id_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageTrusteeUserCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageTrusteeUserCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageTrusteeUserCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageTrusteeUserCmd_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageUnTrusteeUserCmd::kSessionIdFieldNumber;
const int CGMMessageUnTrusteeUserCmd::kFdFieldNumber;
const int CGMMessageUnTrusteeUserCmd::kUserIdFieldNumber;
#endif  // !_MSC_VER

CGMMessageUnTrusteeUserCmd::CGMMessageUnTrusteeUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageUnTrusteeUserCmd::InitAsDefaultInstance() {}

CGMMessageUnTrusteeUserCmd::CGMMessageUnTrusteeUserCmd(const CGMMessageUnTrusteeUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageUnTrusteeUserCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  user_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageUnTrusteeUserCmd::~CGMMessageUnTrusteeUserCmd() {
  SharedDtor();
}

void CGMMessageUnTrusteeUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageUnTrusteeUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageUnTrusteeUserCmd_descriptor_;
}

const CGMMessageUnTrusteeUserCmd& CGMMessageUnTrusteeUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageUnTrusteeUserCmd* CGMMessageUnTrusteeUserCmd::default_instance_ = NULL;

CGMMessageUnTrusteeUserCmd* CGMMessageUnTrusteeUserCmd::New() const {
  return new CGMMessageUnTrusteeUserCmd;
}

void CGMMessageUnTrusteeUserCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    user_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageUnTrusteeUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_user_id;
        break;
      }
      
      // optional int32 user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_user_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &user_id_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageUnTrusteeUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageUnTrusteeUserCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional int32 user_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->user_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageUnTrusteeUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional int32 user_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->user_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageUnTrusteeUserCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional int32 user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->user_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageUnTrusteeUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageUnTrusteeUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageUnTrusteeUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageUnTrusteeUserCmd::MergeFrom(const CGMMessageUnTrusteeUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageUnTrusteeUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageUnTrusteeUserCmd::CopyFrom(const CGMMessageUnTrusteeUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageUnTrusteeUserCmd::Swap(CGMMessageUnTrusteeUserCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageUnTrusteeUserCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageUnTrusteeUserCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageUnTrusteeUserCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageUnTrusteeUserCmd_reflection_;
}

// ===================================================================

const ::std::string CGMMessageMoveRoleCmd::_default_target_location_;
#ifndef _MSC_VER
const int CGMMessageMoveRoleCmd::kSessionIdFieldNumber;
const int CGMMessageMoveRoleCmd::kFdFieldNumber;
const int CGMMessageMoveRoleCmd::kRoleIdFieldNumber;
const int CGMMessageMoveRoleCmd::kServerIdFieldNumber;
const int CGMMessageMoveRoleCmd::kTypeFieldNumber;
const int CGMMessageMoveRoleCmd::kTargetLocationFieldNumber;
#endif  // !_MSC_VER

CGMMessageMoveRoleCmd::CGMMessageMoveRoleCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageMoveRoleCmd::InitAsDefaultInstance() {}

CGMMessageMoveRoleCmd::CGMMessageMoveRoleCmd(const CGMMessageMoveRoleCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageMoveRoleCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  role_id_ = 0;
  server_id_ = 0;
  type_ = 0;
  target_location_ = const_cast< ::std::string*>(&_default_target_location_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageMoveRoleCmd::~CGMMessageMoveRoleCmd() {
  SharedDtor();
}

void CGMMessageMoveRoleCmd::SharedDtor() {
  if (target_location_ != &_default_target_location_) {
    delete target_location_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageMoveRoleCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageMoveRoleCmd_descriptor_;
}

const CGMMessageMoveRoleCmd& CGMMessageMoveRoleCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageMoveRoleCmd* CGMMessageMoveRoleCmd::default_instance_ = NULL;

CGMMessageMoveRoleCmd* CGMMessageMoveRoleCmd::New() const {
  return new CGMMessageMoveRoleCmd;
}

void CGMMessageMoveRoleCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    role_id_ = 0;
    server_id_ = 0;
    type_ = 0;
    if (_has_bit(5)) {
      if (target_location_ != &_default_target_location_) {
        target_location_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageMoveRoleCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }
      
      // optional int32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &role_id_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_server_id;
        break;
      }
      
      // optional int32 server_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_server_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &server_id_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }
      
      // optional int32 type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &type_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_target_location;
        break;
      }
      
      // optional string target_location = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_target_location:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_target_location()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageMoveRoleCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageMoveRoleCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional int32 role_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->role_id(), output);
  }
  
  // optional int32 server_id = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->server_id(), output);
  }
  
  // optional int32 type = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(5, this->type(), output);
  }
  
  // optional string target_location = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteString(6, this->target_location(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageMoveRoleCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional int32 role_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->role_id(), target);
  }
  
  // optional int32 server_id = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->server_id(), target);
  }
  
  // optional int32 type = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(5, this->type(), target);
  }
  
  // optional string target_location = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(6, this->target_location(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageMoveRoleCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional int32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->role_id());
    }
    
    // optional int32 server_id = 4;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->server_id());
    }
    
    // optional int32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->type());
    }
    
    // optional string target_location = 6;
    if (has_target_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->target_location());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageMoveRoleCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageMoveRoleCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageMoveRoleCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageMoveRoleCmd::MergeFrom(const CGMMessageMoveRoleCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_role_id(from.role_id());
    }
    if (from._has_bit(3)) {
      set_server_id(from.server_id());
    }
    if (from._has_bit(4)) {
      set_type(from.type());
    }
    if (from._has_bit(5)) {
      set_target_location(from.target_location());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageMoveRoleCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageMoveRoleCmd::CopyFrom(const CGMMessageMoveRoleCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageMoveRoleCmd::Swap(CGMMessageMoveRoleCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(role_id_, other->role_id_);
    std::swap(server_id_, other->server_id_);
    std::swap(type_, other->type_);
    std::swap(target_location_, other->target_location_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageMoveRoleCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageMoveRoleCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageMoveRoleCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageMoveRoleCmd_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageEndTaskCmd::kSessionIdFieldNumber;
const int CGMMessageEndTaskCmd::kFdFieldNumber;
const int CGMMessageEndTaskCmd::kRoleIdFieldNumber;
const int CGMMessageEndTaskCmd::kTaskIdFieldNumber;
#endif  // !_MSC_VER

CGMMessageEndTaskCmd::CGMMessageEndTaskCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageEndTaskCmd::InitAsDefaultInstance() {}

CGMMessageEndTaskCmd::CGMMessageEndTaskCmd(const CGMMessageEndTaskCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageEndTaskCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  role_id_ = 0;
  task_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageEndTaskCmd::~CGMMessageEndTaskCmd() {
  SharedDtor();
}

void CGMMessageEndTaskCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageEndTaskCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageEndTaskCmd_descriptor_;
}

const CGMMessageEndTaskCmd& CGMMessageEndTaskCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageEndTaskCmd* CGMMessageEndTaskCmd::default_instance_ = NULL;

CGMMessageEndTaskCmd* CGMMessageEndTaskCmd::New() const {
  return new CGMMessageEndTaskCmd;
}

void CGMMessageEndTaskCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    role_id_ = 0;
    task_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageEndTaskCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }
      
      // optional int32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &role_id_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_task_id;
        break;
      }
      
      // optional int32 task_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_task_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &task_id_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageEndTaskCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageEndTaskCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional int32 role_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->role_id(), output);
  }
  
  // optional int32 task_id = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->task_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageEndTaskCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional int32 role_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->role_id(), target);
  }
  
  // optional int32 task_id = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->task_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageEndTaskCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional int32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->role_id());
    }
    
    // optional int32 task_id = 4;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->task_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageEndTaskCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageEndTaskCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageEndTaskCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageEndTaskCmd::MergeFrom(const CGMMessageEndTaskCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_role_id(from.role_id());
    }
    if (from._has_bit(3)) {
      set_task_id(from.task_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageEndTaskCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageEndTaskCmd::CopyFrom(const CGMMessageEndTaskCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageEndTaskCmd::Swap(CGMMessageEndTaskCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(role_id_, other->role_id_);
    std::swap(task_id_, other->task_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageEndTaskCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageEndTaskCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageEndTaskCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageEndTaskCmd_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageTrusteeStorageCmd::kSessionIdFieldNumber;
const int CGMMessageTrusteeStorageCmd::kFdFieldNumber;
const int CGMMessageTrusteeStorageCmd::kRoleIdFieldNumber;
#endif  // !_MSC_VER

CGMMessageTrusteeStorageCmd::CGMMessageTrusteeStorageCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageTrusteeStorageCmd::InitAsDefaultInstance() {}

CGMMessageTrusteeStorageCmd::CGMMessageTrusteeStorageCmd(const CGMMessageTrusteeStorageCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageTrusteeStorageCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  role_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageTrusteeStorageCmd::~CGMMessageTrusteeStorageCmd() {
  SharedDtor();
}

void CGMMessageTrusteeStorageCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageTrusteeStorageCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageTrusteeStorageCmd_descriptor_;
}

const CGMMessageTrusteeStorageCmd& CGMMessageTrusteeStorageCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageTrusteeStorageCmd* CGMMessageTrusteeStorageCmd::default_instance_ = NULL;

CGMMessageTrusteeStorageCmd* CGMMessageTrusteeStorageCmd::New() const {
  return new CGMMessageTrusteeStorageCmd;
}

void CGMMessageTrusteeStorageCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    role_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageTrusteeStorageCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }
      
      // optional int32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &role_id_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageTrusteeStorageCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageTrusteeStorageCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional int32 role_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->role_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageTrusteeStorageCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional int32 role_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->role_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageTrusteeStorageCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional int32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->role_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageTrusteeStorageCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageTrusteeStorageCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageTrusteeStorageCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageTrusteeStorageCmd::MergeFrom(const CGMMessageTrusteeStorageCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageTrusteeStorageCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageTrusteeStorageCmd::CopyFrom(const CGMMessageTrusteeStorageCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageTrusteeStorageCmd::Swap(CGMMessageTrusteeStorageCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageTrusteeStorageCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageTrusteeStorageCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageTrusteeStorageCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageTrusteeStorageCmd_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageUnTrusteeStorageCmd::kSessionIdFieldNumber;
const int CGMMessageUnTrusteeStorageCmd::kFdFieldNumber;
const int CGMMessageUnTrusteeStorageCmd::kRoleIdFieldNumber;
#endif  // !_MSC_VER

CGMMessageUnTrusteeStorageCmd::CGMMessageUnTrusteeStorageCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageUnTrusteeStorageCmd::InitAsDefaultInstance() {}

CGMMessageUnTrusteeStorageCmd::CGMMessageUnTrusteeStorageCmd(const CGMMessageUnTrusteeStorageCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageUnTrusteeStorageCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  role_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageUnTrusteeStorageCmd::~CGMMessageUnTrusteeStorageCmd() {
  SharedDtor();
}

void CGMMessageUnTrusteeStorageCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageUnTrusteeStorageCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageUnTrusteeStorageCmd_descriptor_;
}

const CGMMessageUnTrusteeStorageCmd& CGMMessageUnTrusteeStorageCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageUnTrusteeStorageCmd* CGMMessageUnTrusteeStorageCmd::default_instance_ = NULL;

CGMMessageUnTrusteeStorageCmd* CGMMessageUnTrusteeStorageCmd::New() const {
  return new CGMMessageUnTrusteeStorageCmd;
}

void CGMMessageUnTrusteeStorageCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    role_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageUnTrusteeStorageCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }
      
      // optional int32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &role_id_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageUnTrusteeStorageCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageUnTrusteeStorageCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional int32 role_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->role_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageUnTrusteeStorageCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional int32 role_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->role_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageUnTrusteeStorageCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional int32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->role_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageUnTrusteeStorageCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageUnTrusteeStorageCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageUnTrusteeStorageCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageUnTrusteeStorageCmd::MergeFrom(const CGMMessageUnTrusteeStorageCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageUnTrusteeStorageCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageUnTrusteeStorageCmd::CopyFrom(const CGMMessageUnTrusteeStorageCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageUnTrusteeStorageCmd::Swap(CGMMessageUnTrusteeStorageCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageUnTrusteeStorageCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageUnTrusteeStorageCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageUnTrusteeStorageCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageUnTrusteeStorageCmd_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageRecoverRoleCmd::kSessionIdFieldNumber;
const int CGMMessageRecoverRoleCmd::kFdFieldNumber;
const int CGMMessageRecoverRoleCmd::kRoleIdFieldNumber;
#endif  // !_MSC_VER

CGMMessageRecoverRoleCmd::CGMMessageRecoverRoleCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageRecoverRoleCmd::InitAsDefaultInstance() {}

CGMMessageRecoverRoleCmd::CGMMessageRecoverRoleCmd(const CGMMessageRecoverRoleCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageRecoverRoleCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  role_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageRecoverRoleCmd::~CGMMessageRecoverRoleCmd() {
  SharedDtor();
}

void CGMMessageRecoverRoleCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageRecoverRoleCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRecoverRoleCmd_descriptor_;
}

const CGMMessageRecoverRoleCmd& CGMMessageRecoverRoleCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageRecoverRoleCmd* CGMMessageRecoverRoleCmd::default_instance_ = NULL;

CGMMessageRecoverRoleCmd* CGMMessageRecoverRoleCmd::New() const {
  return new CGMMessageRecoverRoleCmd;
}

void CGMMessageRecoverRoleCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    role_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageRecoverRoleCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }
      
      // optional int32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &role_id_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageRecoverRoleCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageRecoverRoleCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional int32 role_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->role_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageRecoverRoleCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional int32 role_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->role_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageRecoverRoleCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional int32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->role_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageRecoverRoleCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageRecoverRoleCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageRecoverRoleCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageRecoverRoleCmd::MergeFrom(const CGMMessageRecoverRoleCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageRecoverRoleCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRecoverRoleCmd::CopyFrom(const CGMMessageRecoverRoleCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRecoverRoleCmd::Swap(CGMMessageRecoverRoleCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageRecoverRoleCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageRecoverRoleCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageRecoverRoleCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRecoverRoleCmd_reflection_;
}

// ===================================================================

const ::std::string CGMMessagePostBulletinCmd::_default_content_;
#ifndef _MSC_VER
const int CGMMessagePostBulletinCmd::kSessionIdFieldNumber;
const int CGMMessagePostBulletinCmd::kFdFieldNumber;
const int CGMMessagePostBulletinCmd::kContentFieldNumber;
const int CGMMessagePostBulletinCmd::kTimesFieldNumber;
const int CGMMessagePostBulletinCmd::kIntervalFieldNumber;
#endif  // !_MSC_VER

CGMMessagePostBulletinCmd::CGMMessagePostBulletinCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessagePostBulletinCmd::InitAsDefaultInstance() {}

CGMMessagePostBulletinCmd::CGMMessagePostBulletinCmd(const CGMMessagePostBulletinCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessagePostBulletinCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  content_ = const_cast< ::std::string*>(&_default_content_);
  times_ = 0u;
  interval_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessagePostBulletinCmd::~CGMMessagePostBulletinCmd() {
  SharedDtor();
}

void CGMMessagePostBulletinCmd::SharedDtor() {
  if (content_ != &_default_content_) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessagePostBulletinCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessagePostBulletinCmd_descriptor_;
}

const CGMMessagePostBulletinCmd& CGMMessagePostBulletinCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessagePostBulletinCmd* CGMMessagePostBulletinCmd::default_instance_ = NULL;

CGMMessagePostBulletinCmd* CGMMessagePostBulletinCmd::New() const {
  return new CGMMessagePostBulletinCmd;
}

void CGMMessagePostBulletinCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    if (_has_bit(2)) {
      if (content_ != &_default_content_) {
        content_->clear();
      }
    }
    times_ = 0u;
    interval_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessagePostBulletinCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }
      
      // optional string content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_content:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_content()));
        if (input->ExpectTag(32)) goto parse_times;
        break;
      }
      
      // optional uint32 times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_times:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &times_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_interval;
        break;
      }
      
      // optional uint32 interval = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_interval:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &interval_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessagePostBulletinCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessagePostBulletinCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional string content = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->content(), output);
  }
  
  // optional uint32 times = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->times(), output);
  }
  
  // optional uint32 interval = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->interval(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessagePostBulletinCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional string content = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->content(), target);
  }
  
  // optional uint32 times = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->times(), target);
  }
  
  // optional uint32 interval = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->interval(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessagePostBulletinCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->content());
    }
    
    // optional uint32 times = 4;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->times());
    }
    
    // optional uint32 interval = 5;
    if (has_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->interval());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessagePostBulletinCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessagePostBulletinCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessagePostBulletinCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessagePostBulletinCmd::MergeFrom(const CGMMessagePostBulletinCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_content(from.content());
    }
    if (from._has_bit(3)) {
      set_times(from.times());
    }
    if (from._has_bit(4)) {
      set_interval(from.interval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessagePostBulletinCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessagePostBulletinCmd::CopyFrom(const CGMMessagePostBulletinCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessagePostBulletinCmd::Swap(CGMMessagePostBulletinCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(content_, other->content_);
    std::swap(times_, other->times_);
    std::swap(interval_, other->interval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessagePostBulletinCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessagePostBulletinCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessagePostBulletinCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessagePostBulletinCmd_reflection_;
}

// ===================================================================

const ::std::string CGMMessageMultiExpCmd::_default_multi_num_;
const ::std::string CGMMessageMultiExpCmd::_default_reason_;
#ifndef _MSC_VER
const int CGMMessageMultiExpCmd::kSessionIdFieldNumber;
const int CGMMessageMultiExpCmd::kFdFieldNumber;
const int CGMMessageMultiExpCmd::kGatewayIdFieldNumber;
const int CGMMessageMultiExpCmd::kServerIdFieldNumber;
const int CGMMessageMultiExpCmd::kExpTypeFieldNumber;
const int CGMMessageMultiExpCmd::kMultiNumFieldNumber;
const int CGMMessageMultiExpCmd::kReasonFieldNumber;
const int CGMMessageMultiExpCmd::kStartTimeFieldNumber;
const int CGMMessageMultiExpCmd::kEndTimeFieldNumber;
#endif  // !_MSC_VER

CGMMessageMultiExpCmd::CGMMessageMultiExpCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageMultiExpCmd::InitAsDefaultInstance() {}

CGMMessageMultiExpCmd::CGMMessageMultiExpCmd(const CGMMessageMultiExpCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageMultiExpCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  gateway_id_ = 0;
  server_id_ = 0;
  exp_type_ = 0;
  multi_num_ = const_cast< ::std::string*>(&_default_multi_num_);
  reason_ = const_cast< ::std::string*>(&_default_reason_);
  start_time_ = 0;
  end_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageMultiExpCmd::~CGMMessageMultiExpCmd() {
  SharedDtor();
}

void CGMMessageMultiExpCmd::SharedDtor() {
  if (multi_num_ != &_default_multi_num_) {
    delete multi_num_;
  }
  if (reason_ != &_default_reason_) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageMultiExpCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageMultiExpCmd_descriptor_;
}

const CGMMessageMultiExpCmd& CGMMessageMultiExpCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageMultiExpCmd* CGMMessageMultiExpCmd::default_instance_ = NULL;

CGMMessageMultiExpCmd* CGMMessageMultiExpCmd::New() const {
  return new CGMMessageMultiExpCmd;
}

void CGMMessageMultiExpCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    gateway_id_ = 0;
    server_id_ = 0;
    exp_type_ = 0;
    if (_has_bit(5)) {
      if (multi_num_ != &_default_multi_num_) {
        multi_num_->clear();
      }
    }
    if (_has_bit(6)) {
      if (reason_ != &_default_reason_) {
        reason_->clear();
      }
    }
    start_time_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    end_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageMultiExpCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_gateway_id;
        break;
      }
      
      // optional int32 gateway_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_gateway_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &gateway_id_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_server_id;
        break;
      }
      
      // optional int32 server_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_server_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &server_id_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_exp_type;
        break;
      }
      
      // optional int32 exp_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_exp_type:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &exp_type_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_multi_num;
        break;
      }
      
      // optional string multi_num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_multi_num:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_multi_num()));
        if (input->ExpectTag(58)) goto parse_reason;
        break;
      }
      
      // optional string reason = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_reason:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_reason()));
        if (input->ExpectTag(64)) goto parse_start_time;
        break;
      }
      
      // optional int32 start_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_start_time:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &start_time_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_end_time;
        break;
      }
      
      // optional int32 end_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_end_time:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &end_time_));
        _set_bit(8);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageMultiExpCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageMultiExpCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional int32 gateway_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->gateway_id(), output);
  }
  
  // optional int32 server_id = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->server_id(), output);
  }
  
  // optional int32 exp_type = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(5, this->exp_type(), output);
  }
  
  // optional string multi_num = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteString(6, this->multi_num(), output);
  }
  
  // optional string reason = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteString(7, this->reason(), output);
  }
  
  // optional int32 start_time = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(8, this->start_time(), output);
  }
  
  // optional int32 end_time = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(9, this->end_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageMultiExpCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional int32 gateway_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->gateway_id(), target);
  }
  
  // optional int32 server_id = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->server_id(), target);
  }
  
  // optional int32 exp_type = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(5, this->exp_type(), target);
  }
  
  // optional string multi_num = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(6, this->multi_num(), target);
  }
  
  // optional string reason = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(7, this->reason(), target);
  }
  
  // optional int32 start_time = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(8, this->start_time(), target);
  }
  
  // optional int32 end_time = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(9, this->end_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageMultiExpCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional int32 gateway_id = 3;
    if (has_gateway_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->gateway_id());
    }
    
    // optional int32 server_id = 4;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->server_id());
    }
    
    // optional int32 exp_type = 5;
    if (has_exp_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->exp_type());
    }
    
    // optional string multi_num = 6;
    if (has_multi_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->multi_num());
    }
    
    // optional string reason = 7;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->reason());
    }
    
    // optional int32 start_time = 8;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->start_time());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 end_time = 9;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->end_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageMultiExpCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageMultiExpCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageMultiExpCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageMultiExpCmd::MergeFrom(const CGMMessageMultiExpCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_gateway_id(from.gateway_id());
    }
    if (from._has_bit(3)) {
      set_server_id(from.server_id());
    }
    if (from._has_bit(4)) {
      set_exp_type(from.exp_type());
    }
    if (from._has_bit(5)) {
      set_multi_num(from.multi_num());
    }
    if (from._has_bit(6)) {
      set_reason(from.reason());
    }
    if (from._has_bit(7)) {
      set_start_time(from.start_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageMultiExpCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageMultiExpCmd::CopyFrom(const CGMMessageMultiExpCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageMultiExpCmd::Swap(CGMMessageMultiExpCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(gateway_id_, other->gateway_id_);
    std::swap(server_id_, other->server_id_);
    std::swap(exp_type_, other->exp_type_);
    std::swap(multi_num_, other->multi_num_);
    std::swap(reason_, other->reason_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageMultiExpCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageMultiExpCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageMultiExpCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageMultiExpCmd_reflection_;
}

// ===================================================================

const ::std::string CGMMessageCancelMultiExpCmd::_default_reason_;
#ifndef _MSC_VER
const int CGMMessageCancelMultiExpCmd::kSessionIdFieldNumber;
const int CGMMessageCancelMultiExpCmd::kFdFieldNumber;
const int CGMMessageCancelMultiExpCmd::kGatewayIdFieldNumber;
const int CGMMessageCancelMultiExpCmd::kServerIdFieldNumber;
const int CGMMessageCancelMultiExpCmd::kExpTypeFieldNumber;
const int CGMMessageCancelMultiExpCmd::kMultiNumFieldNumber;
const int CGMMessageCancelMultiExpCmd::kReasonFieldNumber;
const int CGMMessageCancelMultiExpCmd::kStartTimeFieldNumber;
const int CGMMessageCancelMultiExpCmd::kEndTimeFieldNumber;
#endif  // !_MSC_VER

CGMMessageCancelMultiExpCmd::CGMMessageCancelMultiExpCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageCancelMultiExpCmd::InitAsDefaultInstance() {}

CGMMessageCancelMultiExpCmd::CGMMessageCancelMultiExpCmd(const CGMMessageCancelMultiExpCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageCancelMultiExpCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  gateway_id_ = 0;
  server_id_ = 0;
  exp_type_ = 0;
  multi_num_ = 0;
  reason_ = const_cast< ::std::string*>(&_default_reason_);
  start_time_ = 0;
  end_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageCancelMultiExpCmd::~CGMMessageCancelMultiExpCmd() {
  SharedDtor();
}

void CGMMessageCancelMultiExpCmd::SharedDtor() {
  if (reason_ != &_default_reason_) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageCancelMultiExpCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageCancelMultiExpCmd_descriptor_;
}

const CGMMessageCancelMultiExpCmd& CGMMessageCancelMultiExpCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageCancelMultiExpCmd* CGMMessageCancelMultiExpCmd::default_instance_ = NULL;

CGMMessageCancelMultiExpCmd* CGMMessageCancelMultiExpCmd::New() const {
  return new CGMMessageCancelMultiExpCmd;
}

void CGMMessageCancelMultiExpCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    gateway_id_ = 0;
    server_id_ = 0;
    exp_type_ = 0;
    multi_num_ = 0;
    if (_has_bit(6)) {
      if (reason_ != &_default_reason_) {
        reason_->clear();
      }
    }
    start_time_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    end_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageCancelMultiExpCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_gateway_id;
        break;
      }
      
      // optional int32 gateway_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_gateway_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &gateway_id_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_server_id;
        break;
      }
      
      // optional int32 server_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_server_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &server_id_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_exp_type;
        break;
      }
      
      // optional int32 exp_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_exp_type:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &exp_type_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_multi_num;
        break;
      }
      
      // optional int32 multi_num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_multi_num:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &multi_num_));
        _set_bit(5);
        if (input->ExpectTag(58)) goto parse_reason;
        break;
      }
      
      // optional string reason = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_reason:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_reason()));
        if (input->ExpectTag(64)) goto parse_start_time;
        break;
      }
      
      // optional int32 start_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_start_time:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &start_time_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_end_time;
        break;
      }
      
      // optional int32 end_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_end_time:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &end_time_));
        _set_bit(8);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageCancelMultiExpCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageCancelMultiExpCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional int32 gateway_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->gateway_id(), output);
  }
  
  // optional int32 server_id = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->server_id(), output);
  }
  
  // optional int32 exp_type = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(5, this->exp_type(), output);
  }
  
  // optional int32 multi_num = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(6, this->multi_num(), output);
  }
  
  // optional string reason = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteString(7, this->reason(), output);
  }
  
  // optional int32 start_time = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(8, this->start_time(), output);
  }
  
  // optional int32 end_time = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(9, this->end_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageCancelMultiExpCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional int32 gateway_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->gateway_id(), target);
  }
  
  // optional int32 server_id = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->server_id(), target);
  }
  
  // optional int32 exp_type = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(5, this->exp_type(), target);
  }
  
  // optional int32 multi_num = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(6, this->multi_num(), target);
  }
  
  // optional string reason = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(7, this->reason(), target);
  }
  
  // optional int32 start_time = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(8, this->start_time(), target);
  }
  
  // optional int32 end_time = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(9, this->end_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageCancelMultiExpCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional int32 gateway_id = 3;
    if (has_gateway_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->gateway_id());
    }
    
    // optional int32 server_id = 4;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->server_id());
    }
    
    // optional int32 exp_type = 5;
    if (has_exp_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->exp_type());
    }
    
    // optional int32 multi_num = 6;
    if (has_multi_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->multi_num());
    }
    
    // optional string reason = 7;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->reason());
    }
    
    // optional int32 start_time = 8;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->start_time());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 end_time = 9;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->end_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageCancelMultiExpCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageCancelMultiExpCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageCancelMultiExpCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageCancelMultiExpCmd::MergeFrom(const CGMMessageCancelMultiExpCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_gateway_id(from.gateway_id());
    }
    if (from._has_bit(3)) {
      set_server_id(from.server_id());
    }
    if (from._has_bit(4)) {
      set_exp_type(from.exp_type());
    }
    if (from._has_bit(5)) {
      set_multi_num(from.multi_num());
    }
    if (from._has_bit(6)) {
      set_reason(from.reason());
    }
    if (from._has_bit(7)) {
      set_start_time(from.start_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageCancelMultiExpCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageCancelMultiExpCmd::CopyFrom(const CGMMessageCancelMultiExpCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageCancelMultiExpCmd::Swap(CGMMessageCancelMultiExpCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(gateway_id_, other->gateway_id_);
    std::swap(server_id_, other->server_id_);
    std::swap(exp_type_, other->exp_type_);
    std::swap(multi_num_, other->multi_num_);
    std::swap(reason_, other->reason_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageCancelMultiExpCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageCancelMultiExpCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageCancelMultiExpCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageCancelMultiExpCmd_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageChangeMoneyCmd::kSessionIdFieldNumber;
const int CGMMessageChangeMoneyCmd::kFdFieldNumber;
const int CGMMessageChangeMoneyCmd::kServerIdFieldNumber;
const int CGMMessageChangeMoneyCmd::kRoleIdFieldNumber;
const int CGMMessageChangeMoneyCmd::kChangeNumFieldNumber;
#endif  // !_MSC_VER

CGMMessageChangeMoneyCmd::CGMMessageChangeMoneyCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageChangeMoneyCmd::InitAsDefaultInstance() {}

CGMMessageChangeMoneyCmd::CGMMessageChangeMoneyCmd(const CGMMessageChangeMoneyCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageChangeMoneyCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  server_id_ = 0;
  role_id_ = 0;
  change_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageChangeMoneyCmd::~CGMMessageChangeMoneyCmd() {
  SharedDtor();
}

void CGMMessageChangeMoneyCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageChangeMoneyCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageChangeMoneyCmd_descriptor_;
}

const CGMMessageChangeMoneyCmd& CGMMessageChangeMoneyCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageChangeMoneyCmd* CGMMessageChangeMoneyCmd::default_instance_ = NULL;

CGMMessageChangeMoneyCmd* CGMMessageChangeMoneyCmd::New() const {
  return new CGMMessageChangeMoneyCmd;
}

void CGMMessageChangeMoneyCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    server_id_ = 0;
    role_id_ = 0;
    change_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageChangeMoneyCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_server_id;
        break;
      }
      
      // optional int32 server_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_server_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &server_id_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_role_id;
        break;
      }
      
      // optional int32 role_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &role_id_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_change_num;
        break;
      }
      
      // optional int32 change_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_change_num:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &change_num_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageChangeMoneyCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageChangeMoneyCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional int32 server_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->server_id(), output);
  }
  
  // optional int32 role_id = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->role_id(), output);
  }
  
  // optional int32 change_num = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(5, this->change_num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageChangeMoneyCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional int32 server_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->server_id(), target);
  }
  
  // optional int32 role_id = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->role_id(), target);
  }
  
  // optional int32 change_num = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(5, this->change_num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageChangeMoneyCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional int32 server_id = 3;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->server_id());
    }
    
    // optional int32 role_id = 4;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->role_id());
    }
    
    // optional int32 change_num = 5;
    if (has_change_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->change_num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageChangeMoneyCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageChangeMoneyCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageChangeMoneyCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageChangeMoneyCmd::MergeFrom(const CGMMessageChangeMoneyCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_server_id(from.server_id());
    }
    if (from._has_bit(3)) {
      set_role_id(from.role_id());
    }
    if (from._has_bit(4)) {
      set_change_num(from.change_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageChangeMoneyCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageChangeMoneyCmd::CopyFrom(const CGMMessageChangeMoneyCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageChangeMoneyCmd::Swap(CGMMessageChangeMoneyCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(server_id_, other->server_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(change_num_, other->change_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageChangeMoneyCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageChangeMoneyCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageChangeMoneyCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageChangeMoneyCmd_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageChangeExpCmd::kSessionIdFieldNumber;
const int CGMMessageChangeExpCmd::kFdFieldNumber;
const int CGMMessageChangeExpCmd::kServerIdFieldNumber;
const int CGMMessageChangeExpCmd::kRoleIdFieldNumber;
const int CGMMessageChangeExpCmd::kChangeNumFieldNumber;
#endif  // !_MSC_VER

CGMMessageChangeExpCmd::CGMMessageChangeExpCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageChangeExpCmd::InitAsDefaultInstance() {}

CGMMessageChangeExpCmd::CGMMessageChangeExpCmd(const CGMMessageChangeExpCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageChangeExpCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  server_id_ = 0;
  role_id_ = 0;
  change_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageChangeExpCmd::~CGMMessageChangeExpCmd() {
  SharedDtor();
}

void CGMMessageChangeExpCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageChangeExpCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageChangeExpCmd_descriptor_;
}

const CGMMessageChangeExpCmd& CGMMessageChangeExpCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageChangeExpCmd* CGMMessageChangeExpCmd::default_instance_ = NULL;

CGMMessageChangeExpCmd* CGMMessageChangeExpCmd::New() const {
  return new CGMMessageChangeExpCmd;
}

void CGMMessageChangeExpCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    server_id_ = 0;
    role_id_ = 0;
    change_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageChangeExpCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_server_id;
        break;
      }
      
      // optional int32 server_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_server_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &server_id_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_role_id;
        break;
      }
      
      // optional int32 role_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &role_id_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_change_num;
        break;
      }
      
      // optional int32 change_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_change_num:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &change_num_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageChangeExpCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageChangeExpCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional int32 server_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->server_id(), output);
  }
  
  // optional int32 role_id = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->role_id(), output);
  }
  
  // optional int32 change_num = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(5, this->change_num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageChangeExpCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional int32 server_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->server_id(), target);
  }
  
  // optional int32 role_id = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->role_id(), target);
  }
  
  // optional int32 change_num = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(5, this->change_num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageChangeExpCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional int32 server_id = 3;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->server_id());
    }
    
    // optional int32 role_id = 4;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->role_id());
    }
    
    // optional int32 change_num = 5;
    if (has_change_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->change_num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageChangeExpCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageChangeExpCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageChangeExpCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageChangeExpCmd::MergeFrom(const CGMMessageChangeExpCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_server_id(from.server_id());
    }
    if (from._has_bit(3)) {
      set_role_id(from.role_id());
    }
    if (from._has_bit(4)) {
      set_change_num(from.change_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageChangeExpCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageChangeExpCmd::CopyFrom(const CGMMessageChangeExpCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageChangeExpCmd::Swap(CGMMessageChangeExpCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(server_id_, other->server_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(change_num_, other->change_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageChangeExpCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageChangeExpCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageChangeExpCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageChangeExpCmd_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageChangeItemCmd::kSessionIdFieldNumber;
const int CGMMessageChangeItemCmd::kFdFieldNumber;
const int CGMMessageChangeItemCmd::kServerIdFieldNumber;
const int CGMMessageChangeItemCmd::kRoleIdFieldNumber;
const int CGMMessageChangeItemCmd::kItemCodeFieldNumber;
const int CGMMessageChangeItemCmd::kItemNumFieldNumber;
#endif  // !_MSC_VER

CGMMessageChangeItemCmd::CGMMessageChangeItemCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageChangeItemCmd::InitAsDefaultInstance() {}

CGMMessageChangeItemCmd::CGMMessageChangeItemCmd(const CGMMessageChangeItemCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageChangeItemCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  server_id_ = 0;
  role_id_ = 0;
  item_code_ = 0;
  item_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageChangeItemCmd::~CGMMessageChangeItemCmd() {
  SharedDtor();
}

void CGMMessageChangeItemCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageChangeItemCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageChangeItemCmd_descriptor_;
}

const CGMMessageChangeItemCmd& CGMMessageChangeItemCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageChangeItemCmd* CGMMessageChangeItemCmd::default_instance_ = NULL;

CGMMessageChangeItemCmd* CGMMessageChangeItemCmd::New() const {
  return new CGMMessageChangeItemCmd;
}

void CGMMessageChangeItemCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    server_id_ = 0;
    role_id_ = 0;
    item_code_ = 0;
    item_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageChangeItemCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_server_id;
        break;
      }
      
      // optional int32 server_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_server_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &server_id_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_role_id;
        break;
      }
      
      // optional int32 role_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &role_id_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_item_code;
        break;
      }
      
      // optional int32 item_code = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_item_code:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &item_code_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_item_num;
        break;
      }
      
      // optional int32 item_num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_item_num:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &item_num_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageChangeItemCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageChangeItemCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional int32 server_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->server_id(), output);
  }
  
  // optional int32 role_id = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->role_id(), output);
  }
  
  // optional int32 item_code = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(5, this->item_code(), output);
  }
  
  // optional int32 item_num = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(6, this->item_num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageChangeItemCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional int32 server_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->server_id(), target);
  }
  
  // optional int32 role_id = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->role_id(), target);
  }
  
  // optional int32 item_code = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(5, this->item_code(), target);
  }
  
  // optional int32 item_num = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(6, this->item_num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageChangeItemCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional int32 server_id = 3;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->server_id());
    }
    
    // optional int32 role_id = 4;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->role_id());
    }
    
    // optional int32 item_code = 5;
    if (has_item_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->item_code());
    }
    
    // optional int32 item_num = 6;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->item_num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageChangeItemCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageChangeItemCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageChangeItemCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageChangeItemCmd::MergeFrom(const CGMMessageChangeItemCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_server_id(from.server_id());
    }
    if (from._has_bit(3)) {
      set_role_id(from.role_id());
    }
    if (from._has_bit(4)) {
      set_item_code(from.item_code());
    }
    if (from._has_bit(5)) {
      set_item_num(from.item_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageChangeItemCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageChangeItemCmd::CopyFrom(const CGMMessageChangeItemCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageChangeItemCmd::Swap(CGMMessageChangeItemCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(server_id_, other->server_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(item_code_, other->item_code_);
    std::swap(item_num_, other->item_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageChangeItemCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageChangeItemCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageChangeItemCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageChangeItemCmd_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageDeleteRoleCmd::kSessionIdFieldNumber;
const int CGMMessageDeleteRoleCmd::kFdFieldNumber;
const int CGMMessageDeleteRoleCmd::kRoleIdFieldNumber;
#endif  // !_MSC_VER

CGMMessageDeleteRoleCmd::CGMMessageDeleteRoleCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageDeleteRoleCmd::InitAsDefaultInstance() {}

CGMMessageDeleteRoleCmd::CGMMessageDeleteRoleCmd(const CGMMessageDeleteRoleCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageDeleteRoleCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  role_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageDeleteRoleCmd::~CGMMessageDeleteRoleCmd() {
  SharedDtor();
}

void CGMMessageDeleteRoleCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageDeleteRoleCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageDeleteRoleCmd_descriptor_;
}

const CGMMessageDeleteRoleCmd& CGMMessageDeleteRoleCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageDeleteRoleCmd* CGMMessageDeleteRoleCmd::default_instance_ = NULL;

CGMMessageDeleteRoleCmd* CGMMessageDeleteRoleCmd::New() const {
  return new CGMMessageDeleteRoleCmd;
}

void CGMMessageDeleteRoleCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    role_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageDeleteRoleCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }
      
      // optional int32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &role_id_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageDeleteRoleCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageDeleteRoleCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional int32 role_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->role_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageDeleteRoleCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional int32 role_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->role_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageDeleteRoleCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional int32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->role_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageDeleteRoleCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageDeleteRoleCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageDeleteRoleCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageDeleteRoleCmd::MergeFrom(const CGMMessageDeleteRoleCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageDeleteRoleCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageDeleteRoleCmd::CopyFrom(const CGMMessageDeleteRoleCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageDeleteRoleCmd::Swap(CGMMessageDeleteRoleCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageDeleteRoleCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageDeleteRoleCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageDeleteRoleCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageDeleteRoleCmd_reflection_;
}

// ===================================================================

const ::std::string CGMMessageClearBagCmd::_default_bag_name_;
#ifndef _MSC_VER
const int CGMMessageClearBagCmd::kSessionIdFieldNumber;
const int CGMMessageClearBagCmd::kFdFieldNumber;
const int CGMMessageClearBagCmd::kRoleIdFieldNumber;
const int CGMMessageClearBagCmd::kBagNameFieldNumber;
#endif  // !_MSC_VER

CGMMessageClearBagCmd::CGMMessageClearBagCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageClearBagCmd::InitAsDefaultInstance() {}

CGMMessageClearBagCmd::CGMMessageClearBagCmd(const CGMMessageClearBagCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageClearBagCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  role_id_ = 0;
  bag_name_ = const_cast< ::std::string*>(&_default_bag_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageClearBagCmd::~CGMMessageClearBagCmd() {
  SharedDtor();
}

void CGMMessageClearBagCmd::SharedDtor() {
  if (bag_name_ != &_default_bag_name_) {
    delete bag_name_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageClearBagCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageClearBagCmd_descriptor_;
}

const CGMMessageClearBagCmd& CGMMessageClearBagCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageClearBagCmd* CGMMessageClearBagCmd::default_instance_ = NULL;

CGMMessageClearBagCmd* CGMMessageClearBagCmd::New() const {
  return new CGMMessageClearBagCmd;
}

void CGMMessageClearBagCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    role_id_ = 0;
    if (_has_bit(3)) {
      if (bag_name_ != &_default_bag_name_) {
        bag_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageClearBagCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }
      
      // optional int32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &role_id_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_bag_name;
        break;
      }
      
      // optional string bag_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_bag_name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_bag_name()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageClearBagCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageClearBagCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional int32 role_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->role_id(), output);
  }
  
  // optional string bag_name = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->bag_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageClearBagCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional int32 role_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->role_id(), target);
  }
  
  // optional string bag_name = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->bag_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageClearBagCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional int32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->role_id());
    }
    
    // optional string bag_name = 4;
    if (has_bag_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->bag_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageClearBagCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageClearBagCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageClearBagCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageClearBagCmd::MergeFrom(const CGMMessageClearBagCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_role_id(from.role_id());
    }
    if (from._has_bit(3)) {
      set_bag_name(from.bag_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageClearBagCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageClearBagCmd::CopyFrom(const CGMMessageClearBagCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageClearBagCmd::Swap(CGMMessageClearBagCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(role_id_, other->role_id_);
    std::swap(bag_name_, other->bag_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageClearBagCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageClearBagCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageClearBagCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageClearBagCmd_reflection_;
}

// ===================================================================

const ::std::string CGMMessageChangePetCmd::_default_user_name_;
#ifndef _MSC_VER
const int CGMMessageChangePetCmd::kSessionIdFieldNumber;
const int CGMMessageChangePetCmd::kFdFieldNumber;
const int CGMMessageChangePetCmd::kRoleIdFieldNumber;
const int CGMMessageChangePetCmd::kUserNameFieldNumber;
#endif  // !_MSC_VER

CGMMessageChangePetCmd::CGMMessageChangePetCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageChangePetCmd::InitAsDefaultInstance() {}

CGMMessageChangePetCmd::CGMMessageChangePetCmd(const CGMMessageChangePetCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageChangePetCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  role_id_ = 0u;
  user_name_ = const_cast< ::std::string*>(&_default_user_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageChangePetCmd::~CGMMessageChangePetCmd() {
  SharedDtor();
}

void CGMMessageChangePetCmd::SharedDtor() {
  if (user_name_ != &_default_user_name_) {
    delete user_name_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageChangePetCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageChangePetCmd_descriptor_;
}

const CGMMessageChangePetCmd& CGMMessageChangePetCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageChangePetCmd* CGMMessageChangePetCmd::default_instance_ = NULL;

CGMMessageChangePetCmd* CGMMessageChangePetCmd::New() const {
  return new CGMMessageChangePetCmd;
}

void CGMMessageChangePetCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    role_id_ = 0u;
    if (_has_bit(3)) {
      if (user_name_ != &_default_user_name_) {
        user_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageChangePetCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }
      
      // optional uint32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &role_id_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_user_name;
        break;
      }
      
      // optional string user_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_user_name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_user_name()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageChangePetCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageChangePetCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional uint32 role_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->role_id(), output);
  }
  
  // optional string user_name = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->user_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageChangePetCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional uint32 role_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->role_id(), target);
  }
  
  // optional string user_name = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->user_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageChangePetCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional uint32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->role_id());
    }
    
    // optional string user_name = 4;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->user_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageChangePetCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageChangePetCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageChangePetCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageChangePetCmd::MergeFrom(const CGMMessageChangePetCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_role_id(from.role_id());
    }
    if (from._has_bit(3)) {
      set_user_name(from.user_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageChangePetCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageChangePetCmd::CopyFrom(const CGMMessageChangePetCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageChangePetCmd::Swap(CGMMessageChangePetCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(role_id_, other->role_id_);
    std::swap(user_name_, other->user_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageChangePetCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageChangePetCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageChangePetCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageChangePetCmd_reflection_;
}

// ===================================================================

const ::std::string CGMMessageSetOLGMAccountCmd::_default_password_;
#ifndef _MSC_VER
const int CGMMessageSetOLGMAccountCmd::kSessionIdFieldNumber;
const int CGMMessageSetOLGMAccountCmd::kFdFieldNumber;
const int CGMMessageSetOLGMAccountCmd::kUserIdFieldNumber;
const int CGMMessageSetOLGMAccountCmd::kPasswordFieldNumber;
#endif  // !_MSC_VER

CGMMessageSetOLGMAccountCmd::CGMMessageSetOLGMAccountCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageSetOLGMAccountCmd::InitAsDefaultInstance() {}

CGMMessageSetOLGMAccountCmd::CGMMessageSetOLGMAccountCmd(const CGMMessageSetOLGMAccountCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageSetOLGMAccountCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  user_id_ = 0u;
  password_ = const_cast< ::std::string*>(&_default_password_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageSetOLGMAccountCmd::~CGMMessageSetOLGMAccountCmd() {
  SharedDtor();
}

void CGMMessageSetOLGMAccountCmd::SharedDtor() {
  if (password_ != &_default_password_) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageSetOLGMAccountCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageSetOLGMAccountCmd_descriptor_;
}

const CGMMessageSetOLGMAccountCmd& CGMMessageSetOLGMAccountCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageSetOLGMAccountCmd* CGMMessageSetOLGMAccountCmd::default_instance_ = NULL;

CGMMessageSetOLGMAccountCmd* CGMMessageSetOLGMAccountCmd::New() const {
  return new CGMMessageSetOLGMAccountCmd;
}

void CGMMessageSetOLGMAccountCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    user_id_ = 0u;
    if (_has_bit(3)) {
      if (password_ != &_default_password_) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageSetOLGMAccountCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_user_id;
        break;
      }
      
      // optional uint32 user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_user_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &user_id_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_password;
        break;
      }
      
      // optional string password = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_password:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_password()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageSetOLGMAccountCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageSetOLGMAccountCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional uint32 user_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->user_id(), output);
  }
  
  // optional string password = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->password(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageSetOLGMAccountCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional uint32 user_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->user_id(), target);
  }
  
  // optional string password = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->password(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageSetOLGMAccountCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional uint32 user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->user_id());
    }
    
    // optional string password = 4;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->password());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageSetOLGMAccountCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageSetOLGMAccountCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageSetOLGMAccountCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageSetOLGMAccountCmd::MergeFrom(const CGMMessageSetOLGMAccountCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_user_id(from.user_id());
    }
    if (from._has_bit(3)) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageSetOLGMAccountCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageSetOLGMAccountCmd::CopyFrom(const CGMMessageSetOLGMAccountCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageSetOLGMAccountCmd::Swap(CGMMessageSetOLGMAccountCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(user_id_, other->user_id_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageSetOLGMAccountCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageSetOLGMAccountCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageSetOLGMAccountCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageSetOLGMAccountCmd_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageIbInfoCmd::kSessionIdFieldNumber;
const int CGMMessageIbInfoCmd::kFdFieldNumber;
const int CGMMessageIbInfoCmd::kItemIdFieldNumber;
#endif  // !_MSC_VER

CGMMessageIbInfoCmd::CGMMessageIbInfoCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageIbInfoCmd::InitAsDefaultInstance() {}

CGMMessageIbInfoCmd::CGMMessageIbInfoCmd(const CGMMessageIbInfoCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageIbInfoCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  item_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageIbInfoCmd::~CGMMessageIbInfoCmd() {
  SharedDtor();
}

void CGMMessageIbInfoCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageIbInfoCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageIbInfoCmd_descriptor_;
}

const CGMMessageIbInfoCmd& CGMMessageIbInfoCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageIbInfoCmd* CGMMessageIbInfoCmd::default_instance_ = NULL;

CGMMessageIbInfoCmd* CGMMessageIbInfoCmd::New() const {
  return new CGMMessageIbInfoCmd;
}

void CGMMessageIbInfoCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    item_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageIbInfoCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_item_id;
        break;
      }
      
      // optional uint32 item_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_item_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &item_id_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageIbInfoCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageIbInfoCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional uint32 item_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->item_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageIbInfoCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional uint32 item_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->item_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageIbInfoCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional uint32 item_id = 3;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->item_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageIbInfoCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageIbInfoCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageIbInfoCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageIbInfoCmd::MergeFrom(const CGMMessageIbInfoCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageIbInfoCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageIbInfoCmd::CopyFrom(const CGMMessageIbInfoCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageIbInfoCmd::Swap(CGMMessageIbInfoCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageIbInfoCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageIbInfoCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageIbInfoCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageIbInfoCmd_reflection_;
}

// ===================================================================

const ::std::string PBIbItem::_default_item_location_;
#ifndef _MSC_VER
const int PBIbItem::kItemIdFieldNumber;
const int PBIbItem::kItemLocationFieldNumber;
const int PBIbItem::kPayTypeFieldNumber;
const int PBIbItem::kItemTypeFieldNumber;
const int PBIbItem::kItemLimitFieldNumber;
const int PBIbItem::kPriceFieldNumber;
const int PBIbItem::kDiscountFieldNumber;
const int PBIbItem::kStartTimeFieldNumber;
const int PBIbItem::kSaleRoomFieldNumber;
const int PBIbItem::kOnSaleFieldNumber;
#endif  // !_MSC_VER

PBIbItem::PBIbItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBIbItem::InitAsDefaultInstance() {}

PBIbItem::PBIbItem(const PBIbItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBIbItem::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0u;
  item_location_ = const_cast< ::std::string*>(&_default_item_location_);
  pay_type_ = 0u;
  item_type_ = 0u;
  item_limit_ = 0u;
  price_ = 0u;
  discount_ = 0u;
  start_time_ = 0u;
  sale_room_ = 0u;
  on_sale_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBIbItem::~PBIbItem() {
  SharedDtor();
}

void PBIbItem::SharedDtor() {
  if (item_location_ != &_default_item_location_) {
    delete item_location_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBIbItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBIbItem_descriptor_;
}

const PBIbItem& PBIbItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

PBIbItem* PBIbItem::default_instance_ = NULL;

PBIbItem* PBIbItem::New() const {
  return new PBIbItem;
}

void PBIbItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0u;
    if (_has_bit(1)) {
      if (item_location_ != &_default_item_location_) {
        item_location_->clear();
      }
    }
    pay_type_ = 0u;
    item_type_ = 0u;
    item_limit_ = 0u;
    price_ = 0u;
    discount_ = 0u;
    start_time_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    sale_room_ = 0u;
    on_sale_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBIbItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &item_id_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_item_location;
        break;
      }
      
      // optional string item_location = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_item_location:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_item_location()));
        if (input->ExpectTag(24)) goto parse_pay_type;
        break;
      }
      
      // optional uint32 pay_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_pay_type:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pay_type_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_item_type;
        break;
      }
      
      // optional uint32 item_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_item_type:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &item_type_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_item_limit;
        break;
      }
      
      // optional uint32 item_limit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_item_limit:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &item_limit_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_price;
        break;
      }
      
      // optional uint32 price = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_price:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &price_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_discount;
        break;
      }
      
      // optional uint32 discount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_discount:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &discount_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_start_time;
        break;
      }
      
      // optional uint32 start_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_start_time:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &start_time_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_sale_room;
        break;
      }
      
      // optional uint32 sale_room = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_sale_room:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sale_room_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_on_sale;
        break;
      }
      
      // optional uint32 on_sale = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_on_sale:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &on_sale_));
        _set_bit(9);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBIbItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBIbItem::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 item_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->item_id(), output);
  }
  
  // optional string item_location = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->item_location(), output);
  }
  
  // optional uint32 pay_type = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->pay_type(), output);
  }
  
  // optional uint32 item_type = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->item_type(), output);
  }
  
  // optional uint32 item_limit = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->item_limit(), output);
  }
  
  // optional uint32 price = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->price(), output);
  }
  
  // optional uint32 discount = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->discount(), output);
  }
  
  // optional uint32 start_time = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->start_time(), output);
  }
  
  // optional uint32 sale_room = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->sale_room(), output);
  }
  
  // optional uint32 on_sale = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->on_sale(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBIbItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 item_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->item_id(), target);
  }
  
  // optional string item_location = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->item_location(), target);
  }
  
  // optional uint32 pay_type = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->pay_type(), target);
  }
  
  // optional uint32 item_type = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->item_type(), target);
  }
  
  // optional uint32 item_limit = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->item_limit(), target);
  }
  
  // optional uint32 price = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->price(), target);
  }
  
  // optional uint32 discount = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->discount(), target);
  }
  
  // optional uint32 start_time = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->start_time(), target);
  }
  
  // optional uint32 sale_room = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->sale_room(), target);
  }
  
  // optional uint32 on_sale = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->on_sale(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBIbItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->item_id());
    }
    
    // optional string item_location = 2;
    if (has_item_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->item_location());
    }
    
    // optional uint32 pay_type = 3;
    if (has_pay_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pay_type());
    }
    
    // optional uint32 item_type = 4;
    if (has_item_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->item_type());
    }
    
    // optional uint32 item_limit = 5;
    if (has_item_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->item_limit());
    }
    
    // optional uint32 price = 6;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->price());
    }
    
    // optional uint32 discount = 7;
    if (has_discount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->discount());
    }
    
    // optional uint32 start_time = 8;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->start_time());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 sale_room = 9;
    if (has_sale_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sale_room());
    }
    
    // optional uint32 on_sale = 10;
    if (has_on_sale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->on_sale());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBIbItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBIbItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBIbItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBIbItem::MergeFrom(const PBIbItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_item_id(from.item_id());
    }
    if (from._has_bit(1)) {
      set_item_location(from.item_location());
    }
    if (from._has_bit(2)) {
      set_pay_type(from.pay_type());
    }
    if (from._has_bit(3)) {
      set_item_type(from.item_type());
    }
    if (from._has_bit(4)) {
      set_item_limit(from.item_limit());
    }
    if (from._has_bit(5)) {
      set_price(from.price());
    }
    if (from._has_bit(6)) {
      set_discount(from.discount());
    }
    if (from._has_bit(7)) {
      set_start_time(from.start_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_sale_room(from.sale_room());
    }
    if (from._has_bit(9)) {
      set_on_sale(from.on_sale());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBIbItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBIbItem::CopyFrom(const PBIbItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBIbItem::Swap(PBIbItem* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(item_location_, other->item_location_);
    std::swap(pay_type_, other->pay_type_);
    std::swap(item_type_, other->item_type_);
    std::swap(item_limit_, other->item_limit_);
    std::swap(price_, other->price_);
    std::swap(discount_, other->discount_);
    std::swap(start_time_, other->start_time_);
    std::swap(sale_room_, other->sale_room_);
    std::swap(on_sale_, other->on_sale_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBIbItem::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBIbItem::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBIbItem::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBIbItem_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageIbInfoResult::kSessionIdFieldNumber;
const int CGMMessageIbInfoResult::kFdFieldNumber;
const int CGMMessageIbInfoResult::kIsallFieldNumber;
const int CGMMessageIbInfoResult::kIbitemsFieldNumber;
#endif  // !_MSC_VER

CGMMessageIbInfoResult::CGMMessageIbInfoResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageIbInfoResult::InitAsDefaultInstance() {}

CGMMessageIbInfoResult::CGMMessageIbInfoResult(const CGMMessageIbInfoResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageIbInfoResult::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  isall_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageIbInfoResult::~CGMMessageIbInfoResult() {
  SharedDtor();
}

void CGMMessageIbInfoResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageIbInfoResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageIbInfoResult_descriptor_;
}

const CGMMessageIbInfoResult& CGMMessageIbInfoResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageIbInfoResult* CGMMessageIbInfoResult::default_instance_ = NULL;

CGMMessageIbInfoResult* CGMMessageIbInfoResult::New() const {
  return new CGMMessageIbInfoResult;
}

void CGMMessageIbInfoResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    isall_ = 0u;
  }
  ibitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageIbInfoResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_isall;
        break;
      }
      
      // optional uint32 isall = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_isall:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &isall_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_ibitems;
        break;
      }
      
      // repeated .PBIbItem ibitems = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ibitems:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_ibitems()));
        if (input->ExpectTag(34)) goto parse_ibitems;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageIbInfoResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageIbInfoResult::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional uint32 isall = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->isall(), output);
  }
  
  // repeated .PBIbItem ibitems = 4;
  for (int i = 0; i < this->ibitems_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->ibitems(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageIbInfoResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional uint32 isall = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->isall(), target);
  }
  
  // repeated .PBIbItem ibitems = 4;
  for (int i = 0; i < this->ibitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(4, this->ibitems(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageIbInfoResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional uint32 isall = 3;
    if (has_isall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->isall());
    }
    
  }
  // repeated .PBIbItem ibitems = 4;
  total_size += 1 * this->ibitems_size();
  for (int i = 0; i < this->ibitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->ibitems(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageIbInfoResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageIbInfoResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageIbInfoResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageIbInfoResult::MergeFrom(const CGMMessageIbInfoResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  ibitems_.MergeFrom(from.ibitems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_isall(from.isall());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageIbInfoResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageIbInfoResult::CopyFrom(const CGMMessageIbInfoResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageIbInfoResult::Swap(CGMMessageIbInfoResult* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(isall_, other->isall_);
    ibitems_.Swap(&other->ibitems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageIbInfoResult::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageIbInfoResult::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageIbInfoResult::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageIbInfoResult_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageSetIbPriceCmd::kSessionIdFieldNumber;
const int CGMMessageSetIbPriceCmd::kFdFieldNumber;
const int CGMMessageSetIbPriceCmd::kItemIdFieldNumber;
const int CGMMessageSetIbPriceCmd::kPriceFieldNumber;
const int CGMMessageSetIbPriceCmd::kTimeFieldNumber;
const int CGMMessageSetIbPriceCmd::kLimitNumFieldNumber;
#endif  // !_MSC_VER

CGMMessageSetIbPriceCmd::CGMMessageSetIbPriceCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageSetIbPriceCmd::InitAsDefaultInstance() {}

CGMMessageSetIbPriceCmd::CGMMessageSetIbPriceCmd(const CGMMessageSetIbPriceCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageSetIbPriceCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  item_id_ = 0u;
  price_ = 0u;
  time_ = 0u;
  limit_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageSetIbPriceCmd::~CGMMessageSetIbPriceCmd() {
  SharedDtor();
}

void CGMMessageSetIbPriceCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageSetIbPriceCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageSetIbPriceCmd_descriptor_;
}

const CGMMessageSetIbPriceCmd& CGMMessageSetIbPriceCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageSetIbPriceCmd* CGMMessageSetIbPriceCmd::default_instance_ = NULL;

CGMMessageSetIbPriceCmd* CGMMessageSetIbPriceCmd::New() const {
  return new CGMMessageSetIbPriceCmd;
}

void CGMMessageSetIbPriceCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    item_id_ = 0u;
    price_ = 0u;
    time_ = 0u;
    limit_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageSetIbPriceCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_item_id;
        break;
      }
      
      // optional uint32 item_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_item_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &item_id_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_price;
        break;
      }
      
      // optional uint32 price = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_price:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &price_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }
      
      // optional uint32 time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_time:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &time_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_limit_num;
        break;
      }
      
      // optional uint32 limit_num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_limit_num:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &limit_num_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageSetIbPriceCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageSetIbPriceCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional uint32 item_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->item_id(), output);
  }
  
  // optional uint32 price = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->price(), output);
  }
  
  // optional uint32 time = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->time(), output);
  }
  
  // optional uint32 limit_num = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->limit_num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageSetIbPriceCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional uint32 item_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->item_id(), target);
  }
  
  // optional uint32 price = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->price(), target);
  }
  
  // optional uint32 time = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->time(), target);
  }
  
  // optional uint32 limit_num = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->limit_num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageSetIbPriceCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional uint32 item_id = 3;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->item_id());
    }
    
    // optional uint32 price = 4;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->price());
    }
    
    // optional uint32 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->time());
    }
    
    // optional uint32 limit_num = 6;
    if (has_limit_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->limit_num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageSetIbPriceCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageSetIbPriceCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageSetIbPriceCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageSetIbPriceCmd::MergeFrom(const CGMMessageSetIbPriceCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_item_id(from.item_id());
    }
    if (from._has_bit(3)) {
      set_price(from.price());
    }
    if (from._has_bit(4)) {
      set_time(from.time());
    }
    if (from._has_bit(5)) {
      set_limit_num(from.limit_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageSetIbPriceCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageSetIbPriceCmd::CopyFrom(const CGMMessageSetIbPriceCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageSetIbPriceCmd::Swap(CGMMessageSetIbPriceCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(item_id_, other->item_id_);
    std::swap(price_, other->price_);
    std::swap(time_, other->time_);
    std::swap(limit_num_, other->limit_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageSetIbPriceCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageSetIbPriceCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageSetIbPriceCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageSetIbPriceCmd_reflection_;
}

// ===================================================================

const ::std::string CGMMessageSetIbLocationCmd::_default_pos_;
#ifndef _MSC_VER
const int CGMMessageSetIbLocationCmd::kSessionIdFieldNumber;
const int CGMMessageSetIbLocationCmd::kFdFieldNumber;
const int CGMMessageSetIbLocationCmd::kPosFieldNumber;
#endif  // !_MSC_VER

CGMMessageSetIbLocationCmd::CGMMessageSetIbLocationCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageSetIbLocationCmd::InitAsDefaultInstance() {}

CGMMessageSetIbLocationCmd::CGMMessageSetIbLocationCmd(const CGMMessageSetIbLocationCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageSetIbLocationCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  pos_ = const_cast< ::std::string*>(&_default_pos_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageSetIbLocationCmd::~CGMMessageSetIbLocationCmd() {
  SharedDtor();
}

void CGMMessageSetIbLocationCmd::SharedDtor() {
  if (pos_ != &_default_pos_) {
    delete pos_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageSetIbLocationCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageSetIbLocationCmd_descriptor_;
}

const CGMMessageSetIbLocationCmd& CGMMessageSetIbLocationCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageSetIbLocationCmd* CGMMessageSetIbLocationCmd::default_instance_ = NULL;

CGMMessageSetIbLocationCmd* CGMMessageSetIbLocationCmd::New() const {
  return new CGMMessageSetIbLocationCmd;
}

void CGMMessageSetIbLocationCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    if (_has_bit(2)) {
      if (pos_ != &_default_pos_) {
        pos_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageSetIbLocationCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }
      
      // optional string pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pos:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_pos()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageSetIbLocationCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageSetIbLocationCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional string pos = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->pos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageSetIbLocationCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional string pos = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->pos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageSetIbLocationCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional string pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->pos());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageSetIbLocationCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageSetIbLocationCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageSetIbLocationCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageSetIbLocationCmd::MergeFrom(const CGMMessageSetIbLocationCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageSetIbLocationCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageSetIbLocationCmd::CopyFrom(const CGMMessageSetIbLocationCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageSetIbLocationCmd::Swap(CGMMessageSetIbLocationCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageSetIbLocationCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageSetIbLocationCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageSetIbLocationCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageSetIbLocationCmd_reflection_;
}

// ===================================================================

const ::std::string CGMMessageIbOnSaleCmd::_default_pos_;
#ifndef _MSC_VER
const int CGMMessageIbOnSaleCmd::kSessionIdFieldNumber;
const int CGMMessageIbOnSaleCmd::kFdFieldNumber;
const int CGMMessageIbOnSaleCmd::kItemIdFieldNumber;
const int CGMMessageIbOnSaleCmd::kPosFieldNumber;
#endif  // !_MSC_VER

CGMMessageIbOnSaleCmd::CGMMessageIbOnSaleCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageIbOnSaleCmd::InitAsDefaultInstance() {}

CGMMessageIbOnSaleCmd::CGMMessageIbOnSaleCmd(const CGMMessageIbOnSaleCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageIbOnSaleCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  item_id_ = 0u;
  pos_ = const_cast< ::std::string*>(&_default_pos_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageIbOnSaleCmd::~CGMMessageIbOnSaleCmd() {
  SharedDtor();
}

void CGMMessageIbOnSaleCmd::SharedDtor() {
  if (pos_ != &_default_pos_) {
    delete pos_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageIbOnSaleCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageIbOnSaleCmd_descriptor_;
}

const CGMMessageIbOnSaleCmd& CGMMessageIbOnSaleCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageIbOnSaleCmd* CGMMessageIbOnSaleCmd::default_instance_ = NULL;

CGMMessageIbOnSaleCmd* CGMMessageIbOnSaleCmd::New() const {
  return new CGMMessageIbOnSaleCmd;
}

void CGMMessageIbOnSaleCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    item_id_ = 0u;
    if (_has_bit(3)) {
      if (pos_ != &_default_pos_) {
        pos_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageIbOnSaleCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_item_id;
        break;
      }
      
      // optional uint32 item_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_item_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &item_id_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_pos;
        break;
      }
      
      // optional string pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pos:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_pos()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageIbOnSaleCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageIbOnSaleCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional uint32 item_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->item_id(), output);
  }
  
  // optional string pos = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->pos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageIbOnSaleCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional uint32 item_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->item_id(), target);
  }
  
  // optional string pos = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->pos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageIbOnSaleCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional uint32 item_id = 3;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->item_id());
    }
    
    // optional string pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->pos());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageIbOnSaleCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageIbOnSaleCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageIbOnSaleCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageIbOnSaleCmd::MergeFrom(const CGMMessageIbOnSaleCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_item_id(from.item_id());
    }
    if (from._has_bit(3)) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageIbOnSaleCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageIbOnSaleCmd::CopyFrom(const CGMMessageIbOnSaleCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageIbOnSaleCmd::Swap(CGMMessageIbOnSaleCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(item_id_, other->item_id_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageIbOnSaleCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageIbOnSaleCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageIbOnSaleCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageIbOnSaleCmd_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageIbNotSaleCmd::kSessionIdFieldNumber;
const int CGMMessageIbNotSaleCmd::kFdFieldNumber;
const int CGMMessageIbNotSaleCmd::kItemIdFieldNumber;
#endif  // !_MSC_VER

CGMMessageIbNotSaleCmd::CGMMessageIbNotSaleCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageIbNotSaleCmd::InitAsDefaultInstance() {}

CGMMessageIbNotSaleCmd::CGMMessageIbNotSaleCmd(const CGMMessageIbNotSaleCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageIbNotSaleCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  item_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageIbNotSaleCmd::~CGMMessageIbNotSaleCmd() {
  SharedDtor();
}

void CGMMessageIbNotSaleCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageIbNotSaleCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageIbNotSaleCmd_descriptor_;
}

const CGMMessageIbNotSaleCmd& CGMMessageIbNotSaleCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageIbNotSaleCmd* CGMMessageIbNotSaleCmd::default_instance_ = NULL;

CGMMessageIbNotSaleCmd* CGMMessageIbNotSaleCmd::New() const {
  return new CGMMessageIbNotSaleCmd;
}

void CGMMessageIbNotSaleCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    item_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageIbNotSaleCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_item_id;
        break;
      }
      
      // optional uint32 item_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_item_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &item_id_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageIbNotSaleCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageIbNotSaleCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional uint32 item_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->item_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageIbNotSaleCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional uint32 item_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->item_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageIbNotSaleCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional uint32 item_id = 3;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->item_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageIbNotSaleCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageIbNotSaleCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageIbNotSaleCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageIbNotSaleCmd::MergeFrom(const CGMMessageIbNotSaleCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageIbNotSaleCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageIbNotSaleCmd::CopyFrom(const CGMMessageIbNotSaleCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageIbNotSaleCmd::Swap(CGMMessageIbNotSaleCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageIbNotSaleCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageIbNotSaleCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageIbNotSaleCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageIbNotSaleCmd_reflection_;
}

// ===================================================================

const ::std::string CGMMessageIbDescriptCmd::_default_description_;
#ifndef _MSC_VER
const int CGMMessageIbDescriptCmd::kSessionIdFieldNumber;
const int CGMMessageIbDescriptCmd::kFdFieldNumber;
const int CGMMessageIbDescriptCmd::kItemIdFieldNumber;
const int CGMMessageIbDescriptCmd::kDescriptionFieldNumber;
#endif  // !_MSC_VER

CGMMessageIbDescriptCmd::CGMMessageIbDescriptCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageIbDescriptCmd::InitAsDefaultInstance() {}

CGMMessageIbDescriptCmd::CGMMessageIbDescriptCmd(const CGMMessageIbDescriptCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageIbDescriptCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  item_id_ = 0u;
  description_ = const_cast< ::std::string*>(&_default_description_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageIbDescriptCmd::~CGMMessageIbDescriptCmd() {
  SharedDtor();
}

void CGMMessageIbDescriptCmd::SharedDtor() {
  if (description_ != &_default_description_) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageIbDescriptCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageIbDescriptCmd_descriptor_;
}

const CGMMessageIbDescriptCmd& CGMMessageIbDescriptCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageIbDescriptCmd* CGMMessageIbDescriptCmd::default_instance_ = NULL;

CGMMessageIbDescriptCmd* CGMMessageIbDescriptCmd::New() const {
  return new CGMMessageIbDescriptCmd;
}

void CGMMessageIbDescriptCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    item_id_ = 0u;
    if (_has_bit(3)) {
      if (description_ != &_default_description_) {
        description_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageIbDescriptCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_item_id;
        break;
      }
      
      // optional uint32 item_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_item_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &item_id_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_description;
        break;
      }
      
      // optional string description = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_description:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_description()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageIbDescriptCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageIbDescriptCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional uint32 item_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->item_id(), output);
  }
  
  // optional string description = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->description(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageIbDescriptCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional uint32 item_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->item_id(), target);
  }
  
  // optional string description = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->description(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageIbDescriptCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional uint32 item_id = 3;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->item_id());
    }
    
    // optional string description = 4;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->description());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageIbDescriptCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageIbDescriptCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageIbDescriptCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageIbDescriptCmd::MergeFrom(const CGMMessageIbDescriptCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_item_id(from.item_id());
    }
    if (from._has_bit(3)) {
      set_description(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageIbDescriptCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageIbDescriptCmd::CopyFrom(const CGMMessageIbDescriptCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageIbDescriptCmd::Swap(CGMMessageIbDescriptCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(item_id_, other->item_id_);
    std::swap(description_, other->description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageIbDescriptCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageIbDescriptCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageIbDescriptCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageIbDescriptCmd_reflection_;
}

// ===================================================================

const ::std::string CGMMessageIpBindCmd::_default_ip_;
#ifndef _MSC_VER
const int CGMMessageIpBindCmd::kSessionIdFieldNumber;
const int CGMMessageIpBindCmd::kFdFieldNumber;
const int CGMMessageIpBindCmd::kUserIdFieldNumber;
const int CGMMessageIpBindCmd::kIpFieldNumber;
const int CGMMessageIpBindCmd::kTypeFieldNumber;
#endif  // !_MSC_VER

CGMMessageIpBindCmd::CGMMessageIpBindCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageIpBindCmd::InitAsDefaultInstance() {}

CGMMessageIpBindCmd::CGMMessageIpBindCmd(const CGMMessageIpBindCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageIpBindCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  user_id_ = 0u;
  ip_ = const_cast< ::std::string*>(&_default_ip_);
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageIpBindCmd::~CGMMessageIpBindCmd() {
  SharedDtor();
}

void CGMMessageIpBindCmd::SharedDtor() {
  if (ip_ != &_default_ip_) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageIpBindCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageIpBindCmd_descriptor_;
}

const CGMMessageIpBindCmd& CGMMessageIpBindCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageIpBindCmd* CGMMessageIpBindCmd::default_instance_ = NULL;

CGMMessageIpBindCmd* CGMMessageIpBindCmd::New() const {
  return new CGMMessageIpBindCmd;
}

void CGMMessageIpBindCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    user_id_ = 0u;
    if (_has_bit(3)) {
      if (ip_ != &_default_ip_) {
        ip_->clear();
      }
    }
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageIpBindCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_user_id;
        break;
      }
      
      // optional uint32 user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_user_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &user_id_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_ip;
        break;
      }
      
      // optional string ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ip:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_ip()));
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }
      
      // optional uint32 type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageIpBindCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageIpBindCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional uint32 user_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->user_id(), output);
  }
  
  // optional string ip = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->ip(), output);
  }
  
  // optional uint32 type = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageIpBindCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional uint32 user_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->user_id(), target);
  }
  
  // optional string ip = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->ip(), target);
  }
  
  // optional uint32 type = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageIpBindCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional uint32 user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->user_id());
    }
    
    // optional string ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->ip());
    }
    
    // optional uint32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageIpBindCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageIpBindCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageIpBindCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageIpBindCmd::MergeFrom(const CGMMessageIpBindCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_user_id(from.user_id());
    }
    if (from._has_bit(3)) {
      set_ip(from.ip());
    }
    if (from._has_bit(4)) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageIpBindCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageIpBindCmd::CopyFrom(const CGMMessageIpBindCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageIpBindCmd::Swap(CGMMessageIpBindCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(user_id_, other->user_id_);
    std::swap(ip_, other->ip_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageIpBindCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageIpBindCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageIpBindCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageIpBindCmd_reflection_;
}

// ===================================================================

const ::std::string CGMMessageRoleProtoCmd::_default_field_name_;
#ifndef _MSC_VER
const int CGMMessageRoleProtoCmd::kSessionIdFieldNumber;
const int CGMMessageRoleProtoCmd::kFdFieldNumber;
const int CGMMessageRoleProtoCmd::kRoleIdFieldNumber;
const int CGMMessageRoleProtoCmd::kFieldNameFieldNumber;
#endif  // !_MSC_VER

CGMMessageRoleProtoCmd::CGMMessageRoleProtoCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageRoleProtoCmd::InitAsDefaultInstance() {}

CGMMessageRoleProtoCmd::CGMMessageRoleProtoCmd(const CGMMessageRoleProtoCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageRoleProtoCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  role_id_ = 0u;
  field_name_ = const_cast< ::std::string*>(&_default_field_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageRoleProtoCmd::~CGMMessageRoleProtoCmd() {
  SharedDtor();
}

void CGMMessageRoleProtoCmd::SharedDtor() {
  if (field_name_ != &_default_field_name_) {
    delete field_name_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageRoleProtoCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRoleProtoCmd_descriptor_;
}

const CGMMessageRoleProtoCmd& CGMMessageRoleProtoCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageRoleProtoCmd* CGMMessageRoleProtoCmd::default_instance_ = NULL;

CGMMessageRoleProtoCmd* CGMMessageRoleProtoCmd::New() const {
  return new CGMMessageRoleProtoCmd;
}

void CGMMessageRoleProtoCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    role_id_ = 0u;
    if (_has_bit(3)) {
      if (field_name_ != &_default_field_name_) {
        field_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageRoleProtoCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }
      
      // optional uint32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &role_id_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_field_name;
        break;
      }
      
      // optional string field_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_field_name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_field_name()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageRoleProtoCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageRoleProtoCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional uint32 role_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->role_id(), output);
  }
  
  // optional string field_name = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->field_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageRoleProtoCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional uint32 role_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->role_id(), target);
  }
  
  // optional string field_name = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->field_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageRoleProtoCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional uint32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->role_id());
    }
    
    // optional string field_name = 4;
    if (has_field_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->field_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageRoleProtoCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageRoleProtoCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageRoleProtoCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageRoleProtoCmd::MergeFrom(const CGMMessageRoleProtoCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_role_id(from.role_id());
    }
    if (from._has_bit(3)) {
      set_field_name(from.field_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageRoleProtoCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRoleProtoCmd::CopyFrom(const CGMMessageRoleProtoCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRoleProtoCmd::Swap(CGMMessageRoleProtoCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(role_id_, other->role_id_);
    std::swap(field_name_, other->field_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageRoleProtoCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageRoleProtoCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageRoleProtoCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRoleProtoCmd_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageRoleEquipmentCmd::kSessionIdFieldNumber;
const int CGMMessageRoleEquipmentCmd::kFdFieldNumber;
const int CGMMessageRoleEquipmentCmd::kRoleIdFieldNumber;
#endif  // !_MSC_VER

CGMMessageRoleEquipmentCmd::CGMMessageRoleEquipmentCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageRoleEquipmentCmd::InitAsDefaultInstance() {}

CGMMessageRoleEquipmentCmd::CGMMessageRoleEquipmentCmd(const CGMMessageRoleEquipmentCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageRoleEquipmentCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageRoleEquipmentCmd::~CGMMessageRoleEquipmentCmd() {
  SharedDtor();
}

void CGMMessageRoleEquipmentCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageRoleEquipmentCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRoleEquipmentCmd_descriptor_;
}

const CGMMessageRoleEquipmentCmd& CGMMessageRoleEquipmentCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageRoleEquipmentCmd* CGMMessageRoleEquipmentCmd::default_instance_ = NULL;

CGMMessageRoleEquipmentCmd* CGMMessageRoleEquipmentCmd::New() const {
  return new CGMMessageRoleEquipmentCmd;
}

void CGMMessageRoleEquipmentCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    role_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageRoleEquipmentCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }
      
      // optional uint32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &role_id_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageRoleEquipmentCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageRoleEquipmentCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional uint32 role_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->role_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageRoleEquipmentCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional uint32 role_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->role_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageRoleEquipmentCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional uint32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->role_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageRoleEquipmentCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageRoleEquipmentCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageRoleEquipmentCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageRoleEquipmentCmd::MergeFrom(const CGMMessageRoleEquipmentCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageRoleEquipmentCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRoleEquipmentCmd::CopyFrom(const CGMMessageRoleEquipmentCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRoleEquipmentCmd::Swap(CGMMessageRoleEquipmentCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageRoleEquipmentCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageRoleEquipmentCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageRoleEquipmentCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRoleEquipmentCmd_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageRolePackInfoCmd::kSessionIdFieldNumber;
const int CGMMessageRolePackInfoCmd::kFdFieldNumber;
const int CGMMessageRolePackInfoCmd::kRoleIdFieldNumber;
#endif  // !_MSC_VER

CGMMessageRolePackInfoCmd::CGMMessageRolePackInfoCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageRolePackInfoCmd::InitAsDefaultInstance() {}

CGMMessageRolePackInfoCmd::CGMMessageRolePackInfoCmd(const CGMMessageRolePackInfoCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageRolePackInfoCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageRolePackInfoCmd::~CGMMessageRolePackInfoCmd() {
  SharedDtor();
}

void CGMMessageRolePackInfoCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageRolePackInfoCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRolePackInfoCmd_descriptor_;
}

const CGMMessageRolePackInfoCmd& CGMMessageRolePackInfoCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageRolePackInfoCmd* CGMMessageRolePackInfoCmd::default_instance_ = NULL;

CGMMessageRolePackInfoCmd* CGMMessageRolePackInfoCmd::New() const {
  return new CGMMessageRolePackInfoCmd;
}

void CGMMessageRolePackInfoCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    role_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageRolePackInfoCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }
      
      // optional uint32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &role_id_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageRolePackInfoCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageRolePackInfoCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional uint32 role_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->role_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageRolePackInfoCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional uint32 role_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->role_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageRolePackInfoCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional uint32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->role_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageRolePackInfoCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageRolePackInfoCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageRolePackInfoCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageRolePackInfoCmd::MergeFrom(const CGMMessageRolePackInfoCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageRolePackInfoCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRolePackInfoCmd::CopyFrom(const CGMMessageRolePackInfoCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRolePackInfoCmd::Swap(CGMMessageRolePackInfoCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageRolePackInfoCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageRolePackInfoCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageRolePackInfoCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRolePackInfoCmd_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageRoleItemInPackCmd::kSessionIdFieldNumber;
const int CGMMessageRoleItemInPackCmd::kFdFieldNumber;
const int CGMMessageRoleItemInPackCmd::kRoleIdFieldNumber;
const int CGMMessageRoleItemInPackCmd::kItemIdFieldNumber;
#endif  // !_MSC_VER

CGMMessageRoleItemInPackCmd::CGMMessageRoleItemInPackCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageRoleItemInPackCmd::InitAsDefaultInstance() {}

CGMMessageRoleItemInPackCmd::CGMMessageRoleItemInPackCmd(const CGMMessageRoleItemInPackCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageRoleItemInPackCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  role_id_ = 0u;
  item_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageRoleItemInPackCmd::~CGMMessageRoleItemInPackCmd() {
  SharedDtor();
}

void CGMMessageRoleItemInPackCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageRoleItemInPackCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRoleItemInPackCmd_descriptor_;
}

const CGMMessageRoleItemInPackCmd& CGMMessageRoleItemInPackCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageRoleItemInPackCmd* CGMMessageRoleItemInPackCmd::default_instance_ = NULL;

CGMMessageRoleItemInPackCmd* CGMMessageRoleItemInPackCmd::New() const {
  return new CGMMessageRoleItemInPackCmd;
}

void CGMMessageRoleItemInPackCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    role_id_ = 0u;
    item_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageRoleItemInPackCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }
      
      // optional uint32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &role_id_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_item_id;
        break;
      }
      
      // optional uint32 item_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_item_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &item_id_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageRoleItemInPackCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageRoleItemInPackCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional uint32 role_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->role_id(), output);
  }
  
  // optional uint32 item_id = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->item_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageRoleItemInPackCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional uint32 role_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->role_id(), target);
  }
  
  // optional uint32 item_id = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->item_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageRoleItemInPackCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional uint32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->role_id());
    }
    
    // optional uint32 item_id = 4;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->item_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageRoleItemInPackCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageRoleItemInPackCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageRoleItemInPackCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageRoleItemInPackCmd::MergeFrom(const CGMMessageRoleItemInPackCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_role_id(from.role_id());
    }
    if (from._has_bit(3)) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageRoleItemInPackCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRoleItemInPackCmd::CopyFrom(const CGMMessageRoleItemInPackCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRoleItemInPackCmd::Swap(CGMMessageRoleItemInPackCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(role_id_, other->role_id_);
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageRoleItemInPackCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageRoleItemInPackCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageRoleItemInPackCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRoleItemInPackCmd_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageRoleSkillInfoCmd::kSessionIdFieldNumber;
const int CGMMessageRoleSkillInfoCmd::kFdFieldNumber;
const int CGMMessageRoleSkillInfoCmd::kRoleIdFieldNumber;
#endif  // !_MSC_VER

CGMMessageRoleSkillInfoCmd::CGMMessageRoleSkillInfoCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageRoleSkillInfoCmd::InitAsDefaultInstance() {}

CGMMessageRoleSkillInfoCmd::CGMMessageRoleSkillInfoCmd(const CGMMessageRoleSkillInfoCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageRoleSkillInfoCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageRoleSkillInfoCmd::~CGMMessageRoleSkillInfoCmd() {
  SharedDtor();
}

void CGMMessageRoleSkillInfoCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageRoleSkillInfoCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRoleSkillInfoCmd_descriptor_;
}

const CGMMessageRoleSkillInfoCmd& CGMMessageRoleSkillInfoCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageRoleSkillInfoCmd* CGMMessageRoleSkillInfoCmd::default_instance_ = NULL;

CGMMessageRoleSkillInfoCmd* CGMMessageRoleSkillInfoCmd::New() const {
  return new CGMMessageRoleSkillInfoCmd;
}

void CGMMessageRoleSkillInfoCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    role_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageRoleSkillInfoCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }
      
      // optional uint32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &role_id_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageRoleSkillInfoCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageRoleSkillInfoCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional uint32 role_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->role_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageRoleSkillInfoCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional uint32 role_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->role_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageRoleSkillInfoCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional uint32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->role_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageRoleSkillInfoCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageRoleSkillInfoCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageRoleSkillInfoCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageRoleSkillInfoCmd::MergeFrom(const CGMMessageRoleSkillInfoCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageRoleSkillInfoCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRoleSkillInfoCmd::CopyFrom(const CGMMessageRoleSkillInfoCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRoleSkillInfoCmd::Swap(CGMMessageRoleSkillInfoCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageRoleSkillInfoCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageRoleSkillInfoCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageRoleSkillInfoCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRoleSkillInfoCmd_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageRoleSkillDetailCmd::kSessionIdFieldNumber;
const int CGMMessageRoleSkillDetailCmd::kFdFieldNumber;
const int CGMMessageRoleSkillDetailCmd::kRoleIdFieldNumber;
const int CGMMessageRoleSkillDetailCmd::kSkillIdFieldNumber;
#endif  // !_MSC_VER

CGMMessageRoleSkillDetailCmd::CGMMessageRoleSkillDetailCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageRoleSkillDetailCmd::InitAsDefaultInstance() {}

CGMMessageRoleSkillDetailCmd::CGMMessageRoleSkillDetailCmd(const CGMMessageRoleSkillDetailCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageRoleSkillDetailCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  role_id_ = 0u;
  skill_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageRoleSkillDetailCmd::~CGMMessageRoleSkillDetailCmd() {
  SharedDtor();
}

void CGMMessageRoleSkillDetailCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageRoleSkillDetailCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRoleSkillDetailCmd_descriptor_;
}

const CGMMessageRoleSkillDetailCmd& CGMMessageRoleSkillDetailCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageRoleSkillDetailCmd* CGMMessageRoleSkillDetailCmd::default_instance_ = NULL;

CGMMessageRoleSkillDetailCmd* CGMMessageRoleSkillDetailCmd::New() const {
  return new CGMMessageRoleSkillDetailCmd;
}

void CGMMessageRoleSkillDetailCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    role_id_ = 0u;
    skill_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageRoleSkillDetailCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }
      
      // optional uint32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &role_id_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_skill_id;
        break;
      }
      
      // optional uint32 skill_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_skill_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &skill_id_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageRoleSkillDetailCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageRoleSkillDetailCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional uint32 role_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->role_id(), output);
  }
  
  // optional uint32 skill_id = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->skill_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageRoleSkillDetailCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional uint32 role_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->role_id(), target);
  }
  
  // optional uint32 skill_id = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->skill_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageRoleSkillDetailCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional uint32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->role_id());
    }
    
    // optional uint32 skill_id = 4;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->skill_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageRoleSkillDetailCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageRoleSkillDetailCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageRoleSkillDetailCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageRoleSkillDetailCmd::MergeFrom(const CGMMessageRoleSkillDetailCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_role_id(from.role_id());
    }
    if (from._has_bit(3)) {
      set_skill_id(from.skill_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageRoleSkillDetailCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRoleSkillDetailCmd::CopyFrom(const CGMMessageRoleSkillDetailCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRoleSkillDetailCmd::Swap(CGMMessageRoleSkillDetailCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(role_id_, other->role_id_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageRoleSkillDetailCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageRoleSkillDetailCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageRoleSkillDetailCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRoleSkillDetailCmd_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageRoleEquipmentResult::kSessionIdFieldNumber;
const int CGMMessageRoleEquipmentResult::kFdFieldNumber;
const int CGMMessageRoleEquipmentResult::kProtoFieldNumber;
#endif  // !_MSC_VER

CGMMessageRoleEquipmentResult::CGMMessageRoleEquipmentResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageRoleEquipmentResult::InitAsDefaultInstance() {  proto_ = const_cast< ::PBItemBox*>(&::PBItemBox::default_instance());
}

CGMMessageRoleEquipmentResult::CGMMessageRoleEquipmentResult(const CGMMessageRoleEquipmentResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageRoleEquipmentResult::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  proto_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageRoleEquipmentResult::~CGMMessageRoleEquipmentResult() {
  SharedDtor();
}

void CGMMessageRoleEquipmentResult::SharedDtor() {
  if (this != default_instance_) {
    delete proto_;
  }
}

const ::google::protobuf::Descriptor* CGMMessageRoleEquipmentResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRoleEquipmentResult_descriptor_;
}

const CGMMessageRoleEquipmentResult& CGMMessageRoleEquipmentResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageRoleEquipmentResult* CGMMessageRoleEquipmentResult::default_instance_ = NULL;

CGMMessageRoleEquipmentResult* CGMMessageRoleEquipmentResult::New() const {
  return new CGMMessageRoleEquipmentResult;
}

void CGMMessageRoleEquipmentResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    if (_has_bit(2)) {
      if (proto_ != NULL) proto_->::PBItemBox::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageRoleEquipmentResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_proto;
        break;
      }
      
      // optional .PBItemBox proto = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_proto:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_proto()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageRoleEquipmentResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageRoleEquipmentResult::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional .PBItemBox proto = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->proto(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageRoleEquipmentResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional .PBItemBox proto = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->proto(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageRoleEquipmentResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional .PBItemBox proto = 3;
    if (has_proto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->proto());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageRoleEquipmentResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageRoleEquipmentResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageRoleEquipmentResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageRoleEquipmentResult::MergeFrom(const CGMMessageRoleEquipmentResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      mutable_proto()->::PBItemBox::MergeFrom(from.proto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageRoleEquipmentResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRoleEquipmentResult::CopyFrom(const CGMMessageRoleEquipmentResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRoleEquipmentResult::Swap(CGMMessageRoleEquipmentResult* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(proto_, other->proto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageRoleEquipmentResult::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageRoleEquipmentResult::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageRoleEquipmentResult::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRoleEquipmentResult_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageRolePackInfoResult::kSessionIdFieldNumber;
const int CGMMessageRolePackInfoResult::kFdFieldNumber;
const int CGMMessageRolePackInfoResult::kProtoFieldNumber;
#endif  // !_MSC_VER

CGMMessageRolePackInfoResult::CGMMessageRolePackInfoResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageRolePackInfoResult::InitAsDefaultInstance() {  proto_ = const_cast< ::PBItemBox*>(&::PBItemBox::default_instance());
}

CGMMessageRolePackInfoResult::CGMMessageRolePackInfoResult(const CGMMessageRolePackInfoResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageRolePackInfoResult::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  proto_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageRolePackInfoResult::~CGMMessageRolePackInfoResult() {
  SharedDtor();
}

void CGMMessageRolePackInfoResult::SharedDtor() {
  if (this != default_instance_) {
    delete proto_;
  }
}

const ::google::protobuf::Descriptor* CGMMessageRolePackInfoResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRolePackInfoResult_descriptor_;
}

const CGMMessageRolePackInfoResult& CGMMessageRolePackInfoResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageRolePackInfoResult* CGMMessageRolePackInfoResult::default_instance_ = NULL;

CGMMessageRolePackInfoResult* CGMMessageRolePackInfoResult::New() const {
  return new CGMMessageRolePackInfoResult;
}

void CGMMessageRolePackInfoResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    if (_has_bit(2)) {
      if (proto_ != NULL) proto_->::PBItemBox::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageRolePackInfoResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_proto;
        break;
      }
      
      // optional .PBItemBox proto = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_proto:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_proto()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageRolePackInfoResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageRolePackInfoResult::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional .PBItemBox proto = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->proto(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageRolePackInfoResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional .PBItemBox proto = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->proto(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageRolePackInfoResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional .PBItemBox proto = 3;
    if (has_proto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->proto());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageRolePackInfoResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageRolePackInfoResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageRolePackInfoResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageRolePackInfoResult::MergeFrom(const CGMMessageRolePackInfoResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      mutable_proto()->::PBItemBox::MergeFrom(from.proto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageRolePackInfoResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRolePackInfoResult::CopyFrom(const CGMMessageRolePackInfoResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRolePackInfoResult::Swap(CGMMessageRolePackInfoResult* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(proto_, other->proto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageRolePackInfoResult::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageRolePackInfoResult::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageRolePackInfoResult::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRolePackInfoResult_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageRoleItemInPackResult::kSessionIdFieldNumber;
const int CGMMessageRoleItemInPackResult::kFdFieldNumber;
const int CGMMessageRoleItemInPackResult::kProtoFieldNumber;
#endif  // !_MSC_VER

CGMMessageRoleItemInPackResult::CGMMessageRoleItemInPackResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageRoleItemInPackResult::InitAsDefaultInstance() {  proto_ = const_cast< ::PBItemObject*>(&::PBItemObject::default_instance());
}

CGMMessageRoleItemInPackResult::CGMMessageRoleItemInPackResult(const CGMMessageRoleItemInPackResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageRoleItemInPackResult::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  proto_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageRoleItemInPackResult::~CGMMessageRoleItemInPackResult() {
  SharedDtor();
}

void CGMMessageRoleItemInPackResult::SharedDtor() {
  if (this != default_instance_) {
    delete proto_;
  }
}

const ::google::protobuf::Descriptor* CGMMessageRoleItemInPackResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRoleItemInPackResult_descriptor_;
}

const CGMMessageRoleItemInPackResult& CGMMessageRoleItemInPackResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageRoleItemInPackResult* CGMMessageRoleItemInPackResult::default_instance_ = NULL;

CGMMessageRoleItemInPackResult* CGMMessageRoleItemInPackResult::New() const {
  return new CGMMessageRoleItemInPackResult;
}

void CGMMessageRoleItemInPackResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    if (_has_bit(2)) {
      if (proto_ != NULL) proto_->::PBItemObject::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageRoleItemInPackResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_proto;
        break;
      }
      
      // optional .PBItemObject proto = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_proto:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_proto()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageRoleItemInPackResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageRoleItemInPackResult::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional .PBItemObject proto = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->proto(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageRoleItemInPackResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional .PBItemObject proto = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->proto(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageRoleItemInPackResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional .PBItemObject proto = 3;
    if (has_proto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->proto());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageRoleItemInPackResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageRoleItemInPackResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageRoleItemInPackResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageRoleItemInPackResult::MergeFrom(const CGMMessageRoleItemInPackResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      mutable_proto()->::PBItemObject::MergeFrom(from.proto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageRoleItemInPackResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRoleItemInPackResult::CopyFrom(const CGMMessageRoleItemInPackResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRoleItemInPackResult::Swap(CGMMessageRoleItemInPackResult* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(proto_, other->proto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageRoleItemInPackResult::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageRoleItemInPackResult::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageRoleItemInPackResult::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRoleItemInPackResult_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageRoleSkillInfoResult::kSessionIdFieldNumber;
const int CGMMessageRoleSkillInfoResult::kFdFieldNumber;
const int CGMMessageRoleSkillInfoResult::kProtoFieldNumber;
#endif  // !_MSC_VER

CGMMessageRoleSkillInfoResult::CGMMessageRoleSkillInfoResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageRoleSkillInfoResult::InitAsDefaultInstance() {  proto_ = const_cast< ::PBSkillList*>(&::PBSkillList::default_instance());
}

CGMMessageRoleSkillInfoResult::CGMMessageRoleSkillInfoResult(const CGMMessageRoleSkillInfoResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageRoleSkillInfoResult::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  proto_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageRoleSkillInfoResult::~CGMMessageRoleSkillInfoResult() {
  SharedDtor();
}

void CGMMessageRoleSkillInfoResult::SharedDtor() {
  if (this != default_instance_) {
    delete proto_;
  }
}

const ::google::protobuf::Descriptor* CGMMessageRoleSkillInfoResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRoleSkillInfoResult_descriptor_;
}

const CGMMessageRoleSkillInfoResult& CGMMessageRoleSkillInfoResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageRoleSkillInfoResult* CGMMessageRoleSkillInfoResult::default_instance_ = NULL;

CGMMessageRoleSkillInfoResult* CGMMessageRoleSkillInfoResult::New() const {
  return new CGMMessageRoleSkillInfoResult;
}

void CGMMessageRoleSkillInfoResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    if (_has_bit(2)) {
      if (proto_ != NULL) proto_->::PBSkillList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageRoleSkillInfoResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_proto;
        break;
      }
      
      // optional .PBSkillList proto = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_proto:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_proto()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageRoleSkillInfoResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageRoleSkillInfoResult::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional .PBSkillList proto = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->proto(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageRoleSkillInfoResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional .PBSkillList proto = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->proto(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageRoleSkillInfoResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional .PBSkillList proto = 3;
    if (has_proto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->proto());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageRoleSkillInfoResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageRoleSkillInfoResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageRoleSkillInfoResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageRoleSkillInfoResult::MergeFrom(const CGMMessageRoleSkillInfoResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      mutable_proto()->::PBSkillList::MergeFrom(from.proto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageRoleSkillInfoResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRoleSkillInfoResult::CopyFrom(const CGMMessageRoleSkillInfoResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRoleSkillInfoResult::Swap(CGMMessageRoleSkillInfoResult* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(proto_, other->proto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageRoleSkillInfoResult::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageRoleSkillInfoResult::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageRoleSkillInfoResult::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRoleSkillInfoResult_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageRoleSkillDetailResult::kSessionIdFieldNumber;
const int CGMMessageRoleSkillDetailResult::kFdFieldNumber;
const int CGMMessageRoleSkillDetailResult::kProtoFieldNumber;
#endif  // !_MSC_VER

CGMMessageRoleSkillDetailResult::CGMMessageRoleSkillDetailResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageRoleSkillDetailResult::InitAsDefaultInstance() {  proto_ = const_cast< ::PBSkillObject*>(&::PBSkillObject::default_instance());
}

CGMMessageRoleSkillDetailResult::CGMMessageRoleSkillDetailResult(const CGMMessageRoleSkillDetailResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageRoleSkillDetailResult::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  proto_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageRoleSkillDetailResult::~CGMMessageRoleSkillDetailResult() {
  SharedDtor();
}

void CGMMessageRoleSkillDetailResult::SharedDtor() {
  if (this != default_instance_) {
    delete proto_;
  }
}

const ::google::protobuf::Descriptor* CGMMessageRoleSkillDetailResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRoleSkillDetailResult_descriptor_;
}

const CGMMessageRoleSkillDetailResult& CGMMessageRoleSkillDetailResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageRoleSkillDetailResult* CGMMessageRoleSkillDetailResult::default_instance_ = NULL;

CGMMessageRoleSkillDetailResult* CGMMessageRoleSkillDetailResult::New() const {
  return new CGMMessageRoleSkillDetailResult;
}

void CGMMessageRoleSkillDetailResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    if (_has_bit(2)) {
      if (proto_ != NULL) proto_->::PBSkillObject::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageRoleSkillDetailResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_proto;
        break;
      }
      
      // optional .PBSkillObject proto = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_proto:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_proto()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageRoleSkillDetailResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageRoleSkillDetailResult::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional .PBSkillObject proto = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->proto(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageRoleSkillDetailResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional .PBSkillObject proto = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->proto(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageRoleSkillDetailResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional .PBSkillObject proto = 3;
    if (has_proto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->proto());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageRoleSkillDetailResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageRoleSkillDetailResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageRoleSkillDetailResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageRoleSkillDetailResult::MergeFrom(const CGMMessageRoleSkillDetailResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      mutable_proto()->::PBSkillObject::MergeFrom(from.proto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageRoleSkillDetailResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRoleSkillDetailResult::CopyFrom(const CGMMessageRoleSkillDetailResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRoleSkillDetailResult::Swap(CGMMessageRoleSkillDetailResult* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(proto_, other->proto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageRoleSkillDetailResult::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageRoleSkillDetailResult::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageRoleSkillDetailResult::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRoleSkillDetailResult_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageActivityListRequest::kRoleIDFieldNumber;
#endif  // !_MSC_VER

CMessageActivityListRequest::CMessageActivityListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageActivityListRequest::InitAsDefaultInstance() {}

CMessageActivityListRequest::CMessageActivityListRequest(const CMessageActivityListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageActivityListRequest::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageActivityListRequest::~CMessageActivityListRequest() {
  SharedDtor();
}

void CMessageActivityListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageActivityListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageActivityListRequest_descriptor_;
}

const CMessageActivityListRequest& CMessageActivityListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageActivityListRequest* CMessageActivityListRequest::default_instance_ = NULL;

CMessageActivityListRequest* CMessageActivityListRequest::New() const {
  return new CMessageActivityListRequest;
}

void CMessageActivityListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageActivityListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageActivityListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageActivityListRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageActivityListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageActivityListRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageActivityListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageActivityListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageActivityListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageActivityListRequest::MergeFrom(const CMessageActivityListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageActivityListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageActivityListRequest::CopyFrom(const CMessageActivityListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageActivityListRequest::Swap(CMessageActivityListRequest* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageActivityListRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageActivityListRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageActivityListRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageActivityListRequest_reflection_;
}

// ===================================================================

const ::std::string PBActivity::_default_desc_;
#ifndef _MSC_VER
const int PBActivity::kMenuIDFieldNumber;
const int PBActivity::kDescFieldNumber;
const int PBActivity::kBeginTimeFieldNumber;
const int PBActivity::kEndTimeFieldNumber;
#endif  // !_MSC_VER

PBActivity::PBActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBActivity::InitAsDefaultInstance() {}

PBActivity::PBActivity(const PBActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBActivity::SharedCtor() {
  _cached_size_ = 0;
  menuid_ = 0u;
  desc_ = const_cast< ::std::string*>(&_default_desc_);
  begintime_ = 0u;
  endtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBActivity::~PBActivity() {
  SharedDtor();
}

void PBActivity::SharedDtor() {
  if (desc_ != &_default_desc_) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBActivity_descriptor_;
}

const PBActivity& PBActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

PBActivity* PBActivity::default_instance_ = NULL;

PBActivity* PBActivity::New() const {
  return new PBActivity;
}

void PBActivity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    menuid_ = 0u;
    if (_has_bit(1)) {
      if (desc_ != &_default_desc_) {
        desc_->clear();
      }
    }
    begintime_ = 0u;
    endtime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 MenuID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &menuid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Desc;
        break;
      }
      
      // optional string Desc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Desc:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_desc()));
        if (input->ExpectTag(24)) goto parse_BeginTime;
        break;
      }
      
      // optional uint32 BeginTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BeginTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &begintime_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_EndTime;
        break;
      }
      
      // optional uint32 EndTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EndTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &endtime_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBActivity::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 MenuID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->menuid(), output);
  }
  
  // optional string Desc = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->desc(), output);
  }
  
  // optional uint32 BeginTime = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->begintime(), output);
  }
  
  // optional uint32 EndTime = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->endtime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 MenuID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->menuid(), target);
  }
  
  // optional string Desc = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->desc(), target);
  }
  
  // optional uint32 BeginTime = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->begintime(), target);
  }
  
  // optional uint32 EndTime = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->endtime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBActivity::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MenuID = 1;
    if (has_menuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->menuid());
    }
    
    // optional string Desc = 2;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->desc());
    }
    
    // optional uint32 BeginTime = 3;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->begintime());
    }
    
    // optional uint32 EndTime = 4;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->endtime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBActivity::MergeFrom(const PBActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_menuid(from.menuid());
    }
    if (from._has_bit(1)) {
      set_desc(from.desc());
    }
    if (from._has_bit(2)) {
      set_begintime(from.begintime());
    }
    if (from._has_bit(3)) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBActivity::CopyFrom(const PBActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBActivity::Swap(PBActivity* other) {
  if (other != this) {
    std::swap(menuid_, other->menuid_);
    std::swap(desc_, other->desc_);
    std::swap(begintime_, other->begintime_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBActivity::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBActivity::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBActivity::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBActivity_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageActivityListResponse::kRoleIDFieldNumber;
const int CMessageActivityListResponse::kActivityFieldNumber;
#endif  // !_MSC_VER

CMessageActivityListResponse::CMessageActivityListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageActivityListResponse::InitAsDefaultInstance() {}

CMessageActivityListResponse::CMessageActivityListResponse(const CMessageActivityListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageActivityListResponse::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageActivityListResponse::~CMessageActivityListResponse() {
  SharedDtor();
}

void CMessageActivityListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageActivityListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageActivityListResponse_descriptor_;
}

const CMessageActivityListResponse& CMessageActivityListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageActivityListResponse* CMessageActivityListResponse::default_instance_ = NULL;

CMessageActivityListResponse* CMessageActivityListResponse::New() const {
  return new CMessageActivityListResponse;
}

void CMessageActivityListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
  }
  activity_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageActivityListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_activity;
        break;
      }
      
      // repeated .PBActivity activity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_activity:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_activity()));
        if (input->ExpectTag(18)) goto parse_activity;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageActivityListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageActivityListResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  // repeated .PBActivity activity = 2;
  for (int i = 0; i < this->activity_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->activity(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageActivityListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // repeated .PBActivity activity = 2;
  for (int i = 0; i < this->activity_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->activity(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageActivityListResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
  }
  // repeated .PBActivity activity = 2;
  total_size += 1 * this->activity_size();
  for (int i = 0; i < this->activity_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->activity(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageActivityListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageActivityListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageActivityListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageActivityListResponse::MergeFrom(const CMessageActivityListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  activity_.MergeFrom(from.activity_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageActivityListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageActivityListResponse::CopyFrom(const CMessageActivityListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageActivityListResponse::Swap(CMessageActivityListResponse* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    activity_.Swap(&other->activity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageActivityListResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageActivityListResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageActivityListResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageActivityListResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageUserItemListRequest::kAccountIDFieldNumber;
const int CMessageUserItemListRequest::kRoleIDFieldNumber;
const int CMessageUserItemListRequest::kMenuIDFieldNumber;
const int CMessageUserItemListRequest::kRoleLevelFieldNumber;
const int CMessageUserItemListRequest::kRoleMetierFieldNumber;
const int CMessageUserItemListRequest::kRoleGenderFieldNumber;
#endif  // !_MSC_VER

CMessageUserItemListRequest::CMessageUserItemListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUserItemListRequest::InitAsDefaultInstance() {}

CMessageUserItemListRequest::CMessageUserItemListRequest(const CMessageUserItemListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUserItemListRequest::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  roleid_ = 0u;
  menuid_ = 0u;
  rolelevel_ = 0u;
  rolemetier_ = 0u;
  rolegender_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUserItemListRequest::~CMessageUserItemListRequest() {
  SharedDtor();
}

void CMessageUserItemListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageUserItemListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUserItemListRequest_descriptor_;
}

const CMessageUserItemListRequest& CMessageUserItemListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageUserItemListRequest* CMessageUserItemListRequest::default_instance_ = NULL;

CMessageUserItemListRequest* CMessageUserItemListRequest::New() const {
  return new CMessageUserItemListRequest;
}

void CMessageUserItemListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
    roleid_ = 0u;
    menuid_ = 0u;
    rolelevel_ = 0u;
    rolemetier_ = 0u;
    rolegender_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUserItemListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 AccountID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_MenuID;
        break;
      }
      
      // optional uint32 MenuID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MenuID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &menuid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_RoleLevel;
        break;
      }
      
      // optional uint32 RoleLevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rolelevel_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_RoleMetier;
        break;
      }
      
      // optional uint32 RoleMetier = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleMetier:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rolemetier_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_RoleGender;
        break;
      }
      
      // optional uint32 RoleGender = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleGender:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rolegender_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUserItemListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUserItemListRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 AccountID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->accountid(), output);
  }
  
  // optional uint32 RoleID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->roleid(), output);
  }
  
  // optional uint32 MenuID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->menuid(), output);
  }
  
  // optional uint32 RoleLevel = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->rolelevel(), output);
  }
  
  // optional uint32 RoleMetier = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->rolemetier(), output);
  }
  
  // optional uint32 RoleGender = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->rolegender(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUserItemListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 AccountID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->accountid(), target);
  }
  
  // optional uint32 RoleID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->roleid(), target);
  }
  
  // optional uint32 MenuID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->menuid(), target);
  }
  
  // optional uint32 RoleLevel = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->rolelevel(), target);
  }
  
  // optional uint32 RoleMetier = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->rolemetier(), target);
  }
  
  // optional uint32 RoleGender = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->rolegender(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUserItemListRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AccountID = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 RoleID = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 MenuID = 3;
    if (has_menuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->menuid());
    }
    
    // optional uint32 RoleLevel = 4;
    if (has_rolelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rolelevel());
    }
    
    // optional uint32 RoleMetier = 5;
    if (has_rolemetier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rolemetier());
    }
    
    // optional uint32 RoleGender = 6;
    if (has_rolegender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rolegender());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUserItemListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUserItemListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUserItemListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUserItemListRequest::MergeFrom(const CMessageUserItemListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(1)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(2)) {
      set_menuid(from.menuid());
    }
    if (from._has_bit(3)) {
      set_rolelevel(from.rolelevel());
    }
    if (from._has_bit(4)) {
      set_rolemetier(from.rolemetier());
    }
    if (from._has_bit(5)) {
      set_rolegender(from.rolegender());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUserItemListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUserItemListRequest::CopyFrom(const CMessageUserItemListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUserItemListRequest::Swap(CMessageUserItemListRequest* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(roleid_, other->roleid_);
    std::swap(menuid_, other->menuid_);
    std::swap(rolelevel_, other->rolelevel_);
    std::swap(rolemetier_, other->rolemetier_);
    std::swap(rolegender_, other->rolegender_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUserItemListRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUserItemListRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUserItemListRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUserItemListRequest_reflection_;
}

// ===================================================================

const ::std::string PBActivityItem::_default_itemcode_;
#ifndef _MSC_VER
const int PBActivityItem::kItemCodeFieldNumber;
const int PBActivityItem::kNumberFieldNumber;
const int PBActivityItem::kActivityIDFieldNumber;
#endif  // !_MSC_VER

PBActivityItem::PBActivityItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBActivityItem::InitAsDefaultInstance() {}

PBActivityItem::PBActivityItem(const PBActivityItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBActivityItem::SharedCtor() {
  _cached_size_ = 0;
  itemcode_ = const_cast< ::std::string*>(&_default_itemcode_);
  number_ = 0u;
  activityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBActivityItem::~PBActivityItem() {
  SharedDtor();
}

void PBActivityItem::SharedDtor() {
  if (itemcode_ != &_default_itemcode_) {
    delete itemcode_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBActivityItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBActivityItem_descriptor_;
}

const PBActivityItem& PBActivityItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

PBActivityItem* PBActivityItem::default_instance_ = NULL;

PBActivityItem* PBActivityItem::New() const {
  return new PBActivityItem;
}

void PBActivityItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (itemcode_ != &_default_itemcode_) {
        itemcode_->clear();
      }
    }
    number_ = 0u;
    activityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBActivityItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string ItemCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_itemcode()));
        if (input->ExpectTag(16)) goto parse_Number;
        break;
      }
      
      // optional uint32 Number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Number:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &number_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_ActivityID;
        break;
      }
      
      // optional uint32 ActivityID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ActivityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &activityid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBActivityItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBActivityItem::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string ItemCode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->itemcode(), output);
  }
  
  // optional uint32 Number = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->number(), output);
  }
  
  // optional uint32 ActivityID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->activityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBActivityItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string ItemCode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->itemcode(), target);
  }
  
  // optional uint32 Number = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->number(), target);
  }
  
  // optional uint32 ActivityID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->activityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBActivityItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ItemCode = 1;
    if (has_itemcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->itemcode());
    }
    
    // optional uint32 Number = 2;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->number());
    }
    
    // optional uint32 ActivityID = 3;
    if (has_activityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->activityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBActivityItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBActivityItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBActivityItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBActivityItem::MergeFrom(const PBActivityItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_itemcode(from.itemcode());
    }
    if (from._has_bit(1)) {
      set_number(from.number());
    }
    if (from._has_bit(2)) {
      set_activityid(from.activityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBActivityItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBActivityItem::CopyFrom(const PBActivityItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBActivityItem::Swap(PBActivityItem* other) {
  if (other != this) {
    std::swap(itemcode_, other->itemcode_);
    std::swap(number_, other->number_);
    std::swap(activityid_, other->activityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBActivityItem::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBActivityItem::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBActivityItem::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBActivityItem_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageUserItemListResponse::kResultFieldNumber;
const int CMessageUserItemListResponse::kMenuIDFieldNumber;
const int CMessageUserItemListResponse::kRoleIDFieldNumber;
const int CMessageUserItemListResponse::kItemsFieldNumber;
#endif  // !_MSC_VER

CMessageUserItemListResponse::CMessageUserItemListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUserItemListResponse::InitAsDefaultInstance() {}

CMessageUserItemListResponse::CMessageUserItemListResponse(const CMessageUserItemListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUserItemListResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  menuid_ = 0u;
  roleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUserItemListResponse::~CMessageUserItemListResponse() {
  SharedDtor();
}

void CMessageUserItemListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageUserItemListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUserItemListResponse_descriptor_;
}

const CMessageUserItemListResponse& CMessageUserItemListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageUserItemListResponse* CMessageUserItemListResponse::default_instance_ = NULL;

CMessageUserItemListResponse* CMessageUserItemListResponse::New() const {
  return new CMessageUserItemListResponse;
}

void CMessageUserItemListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    menuid_ = 0u;
    roleid_ = 0u;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUserItemListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_MenuID;
        break;
      }
      
      // optional uint32 MenuID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MenuID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &menuid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_items;
        break;
      }
      
      // repeated .PBActivityItem items = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_items:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_items()));
        if (input->ExpectTag(34)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUserItemListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUserItemListResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 Result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(1, this->result(), output);
  }
  
  // optional uint32 MenuID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->menuid(), output);
  }
  
  // optional uint32 RoleID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->roleid(), output);
  }
  
  // repeated .PBActivityItem items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUserItemListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(1, this->result(), target);
  }
  
  // optional uint32 MenuID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->menuid(), target);
  }
  
  // optional uint32 RoleID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->roleid(), target);
  }
  
  // repeated .PBActivityItem items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(4, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUserItemListResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->result());
    }
    
    // optional uint32 MenuID = 2;
    if (has_menuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->menuid());
    }
    
    // optional uint32 RoleID = 3;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
  }
  // repeated .PBActivityItem items = 4;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUserItemListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUserItemListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUserItemListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUserItemListResponse::MergeFrom(const CMessageUserItemListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_menuid(from.menuid());
    }
    if (from._has_bit(2)) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUserItemListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUserItemListResponse::CopyFrom(const CMessageUserItemListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUserItemListResponse::Swap(CMessageUserItemListResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(menuid_, other->menuid_);
    std::swap(roleid_, other->roleid_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUserItemListResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUserItemListResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUserItemListResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUserItemListResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageUserItemMinusRequest::_default_itemcode_;
#ifndef _MSC_VER
const int CMessageUserItemMinusRequest::kAccountIDFieldNumber;
const int CMessageUserItemMinusRequest::kRoleIDFieldNumber;
const int CMessageUserItemMinusRequest::kActivityIDFieldNumber;
const int CMessageUserItemMinusRequest::kItemCodeFieldNumber;
const int CMessageUserItemMinusRequest::kItemNumFieldNumber;
const int CMessageUserItemMinusRequest::kRoleLevelFieldNumber;
const int CMessageUserItemMinusRequest::kRoleMetierFieldNumber;
#endif  // !_MSC_VER

CMessageUserItemMinusRequest::CMessageUserItemMinusRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUserItemMinusRequest::InitAsDefaultInstance() {}

CMessageUserItemMinusRequest::CMessageUserItemMinusRequest(const CMessageUserItemMinusRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUserItemMinusRequest::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  roleid_ = 0u;
  activityid_ = 0u;
  itemcode_ = const_cast< ::std::string*>(&_default_itemcode_);
  itemnum_ = 0u;
  rolelevel_ = 0u;
  rolemetier_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUserItemMinusRequest::~CMessageUserItemMinusRequest() {
  SharedDtor();
}

void CMessageUserItemMinusRequest::SharedDtor() {
  if (itemcode_ != &_default_itemcode_) {
    delete itemcode_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageUserItemMinusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUserItemMinusRequest_descriptor_;
}

const CMessageUserItemMinusRequest& CMessageUserItemMinusRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageUserItemMinusRequest* CMessageUserItemMinusRequest::default_instance_ = NULL;

CMessageUserItemMinusRequest* CMessageUserItemMinusRequest::New() const {
  return new CMessageUserItemMinusRequest;
}

void CMessageUserItemMinusRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
    roleid_ = 0u;
    activityid_ = 0u;
    if (_has_bit(3)) {
      if (itemcode_ != &_default_itemcode_) {
        itemcode_->clear();
      }
    }
    itemnum_ = 0u;
    rolelevel_ = 0u;
    rolemetier_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUserItemMinusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 AccountID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_ActivityID;
        break;
      }
      
      // optional uint32 ActivityID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ActivityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &activityid_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_ItemCode;
        break;
      }
      
      // optional string ItemCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ItemCode:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_itemcode()));
        if (input->ExpectTag(40)) goto parse_ItemNum;
        break;
      }
      
      // optional uint32 ItemNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemnum_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_RoleLevel;
        break;
      }
      
      // optional uint32 RoleLevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rolelevel_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_RoleMetier;
        break;
      }
      
      // optional uint32 RoleMetier = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleMetier:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rolemetier_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUserItemMinusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUserItemMinusRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 AccountID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->accountid(), output);
  }
  
  // optional uint32 RoleID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->roleid(), output);
  }
  
  // optional uint32 ActivityID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->activityid(), output);
  }
  
  // optional string ItemCode = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->itemcode(), output);
  }
  
  // optional uint32 ItemNum = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->itemnum(), output);
  }
  
  // optional uint32 RoleLevel = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->rolelevel(), output);
  }
  
  // optional uint32 RoleMetier = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->rolemetier(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUserItemMinusRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 AccountID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->accountid(), target);
  }
  
  // optional uint32 RoleID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->roleid(), target);
  }
  
  // optional uint32 ActivityID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->activityid(), target);
  }
  
  // optional string ItemCode = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->itemcode(), target);
  }
  
  // optional uint32 ItemNum = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->itemnum(), target);
  }
  
  // optional uint32 RoleLevel = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->rolelevel(), target);
  }
  
  // optional uint32 RoleMetier = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->rolemetier(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUserItemMinusRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AccountID = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 RoleID = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 ActivityID = 3;
    if (has_activityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->activityid());
    }
    
    // optional string ItemCode = 4;
    if (has_itemcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->itemcode());
    }
    
    // optional uint32 ItemNum = 5;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemnum());
    }
    
    // optional uint32 RoleLevel = 6;
    if (has_rolelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rolelevel());
    }
    
    // optional uint32 RoleMetier = 7;
    if (has_rolemetier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rolemetier());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUserItemMinusRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUserItemMinusRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUserItemMinusRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUserItemMinusRequest::MergeFrom(const CMessageUserItemMinusRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(1)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(2)) {
      set_activityid(from.activityid());
    }
    if (from._has_bit(3)) {
      set_itemcode(from.itemcode());
    }
    if (from._has_bit(4)) {
      set_itemnum(from.itemnum());
    }
    if (from._has_bit(5)) {
      set_rolelevel(from.rolelevel());
    }
    if (from._has_bit(6)) {
      set_rolemetier(from.rolemetier());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUserItemMinusRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUserItemMinusRequest::CopyFrom(const CMessageUserItemMinusRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUserItemMinusRequest::Swap(CMessageUserItemMinusRequest* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(roleid_, other->roleid_);
    std::swap(activityid_, other->activityid_);
    std::swap(itemcode_, other->itemcode_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(rolelevel_, other->rolelevel_);
    std::swap(rolemetier_, other->rolemetier_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUserItemMinusRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUserItemMinusRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUserItemMinusRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUserItemMinusRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageUserItemMinusResponse::kResultFieldNumber;
const int CMessageUserItemMinusResponse::kMenuIDFieldNumber;
const int CMessageUserItemMinusResponse::kRoleIDFieldNumber;
const int CMessageUserItemMinusResponse::kItemFieldNumber;
#endif  // !_MSC_VER

CMessageUserItemMinusResponse::CMessageUserItemMinusResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUserItemMinusResponse::InitAsDefaultInstance() {  item_ = const_cast< ::PBActivityItem*>(&::PBActivityItem::default_instance());
}

CMessageUserItemMinusResponse::CMessageUserItemMinusResponse(const CMessageUserItemMinusResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUserItemMinusResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  menuid_ = 0;
  roleid_ = 0;
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUserItemMinusResponse::~CMessageUserItemMinusResponse() {
  SharedDtor();
}

void CMessageUserItemMinusResponse::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

const ::google::protobuf::Descriptor* CMessageUserItemMinusResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUserItemMinusResponse_descriptor_;
}

const CMessageUserItemMinusResponse& CMessageUserItemMinusResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageUserItemMinusResponse* CMessageUserItemMinusResponse::default_instance_ = NULL;

CMessageUserItemMinusResponse* CMessageUserItemMinusResponse::New() const {
  return new CMessageUserItemMinusResponse;
}

void CMessageUserItemMinusResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    menuid_ = 0;
    roleid_ = 0;
    if (_has_bit(3)) {
      if (item_ != NULL) item_->::PBActivityItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUserItemMinusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_MenuID;
        break;
      }
      
      // optional int32 MenuID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MenuID:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &menuid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_RoleID;
        break;
      }
      
      // optional int32 RoleID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &roleid_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_Item;
        break;
      }
      
      // optional .PBActivityItem Item = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Item:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_item()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUserItemMinusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUserItemMinusResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 Result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(1, this->result(), output);
  }
  
  // optional int32 MenuID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(2, this->menuid(), output);
  }
  
  // optional int32 RoleID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->roleid(), output);
  }
  
  // optional .PBActivityItem Item = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->item(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUserItemMinusResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(1, this->result(), target);
  }
  
  // optional int32 MenuID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(2, this->menuid(), target);
  }
  
  // optional int32 RoleID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->roleid(), target);
  }
  
  // optional .PBActivityItem Item = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(4, this->item(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUserItemMinusResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->result());
    }
    
    // optional int32 MenuID = 2;
    if (has_menuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->menuid());
    }
    
    // optional int32 RoleID = 3;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->roleid());
    }
    
    // optional .PBActivityItem Item = 4;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->item());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUserItemMinusResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUserItemMinusResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUserItemMinusResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUserItemMinusResponse::MergeFrom(const CMessageUserItemMinusResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_menuid(from.menuid());
    }
    if (from._has_bit(2)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(3)) {
      mutable_item()->::PBActivityItem::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUserItemMinusResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUserItemMinusResponse::CopyFrom(const CMessageUserItemMinusResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUserItemMinusResponse::Swap(CMessageUserItemMinusResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(menuid_, other->menuid_);
    std::swap(roleid_, other->roleid_);
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUserItemMinusResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUserItemMinusResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUserItemMinusResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUserItemMinusResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageRoleEquipmentDetailCmd::kSessionIdFieldNumber;
const int CGMMessageRoleEquipmentDetailCmd::kFdFieldNumber;
const int CGMMessageRoleEquipmentDetailCmd::kRoleIdFieldNumber;
const int CGMMessageRoleEquipmentDetailCmd::kItemIdFieldNumber;
#endif  // !_MSC_VER

CGMMessageRoleEquipmentDetailCmd::CGMMessageRoleEquipmentDetailCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageRoleEquipmentDetailCmd::InitAsDefaultInstance() {}

CGMMessageRoleEquipmentDetailCmd::CGMMessageRoleEquipmentDetailCmd(const CGMMessageRoleEquipmentDetailCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageRoleEquipmentDetailCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  role_id_ = 0u;
  item_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageRoleEquipmentDetailCmd::~CGMMessageRoleEquipmentDetailCmd() {
  SharedDtor();
}

void CGMMessageRoleEquipmentDetailCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageRoleEquipmentDetailCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRoleEquipmentDetailCmd_descriptor_;
}

const CGMMessageRoleEquipmentDetailCmd& CGMMessageRoleEquipmentDetailCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageRoleEquipmentDetailCmd* CGMMessageRoleEquipmentDetailCmd::default_instance_ = NULL;

CGMMessageRoleEquipmentDetailCmd* CGMMessageRoleEquipmentDetailCmd::New() const {
  return new CGMMessageRoleEquipmentDetailCmd;
}

void CGMMessageRoleEquipmentDetailCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    role_id_ = 0u;
    item_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageRoleEquipmentDetailCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }
      
      // optional uint32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &role_id_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_item_id;
        break;
      }
      
      // optional uint32 item_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_item_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &item_id_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageRoleEquipmentDetailCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageRoleEquipmentDetailCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional uint32 role_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->role_id(), output);
  }
  
  // optional uint32 item_id = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->item_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageRoleEquipmentDetailCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional uint32 role_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->role_id(), target);
  }
  
  // optional uint32 item_id = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->item_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageRoleEquipmentDetailCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional uint32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->role_id());
    }
    
    // optional uint32 item_id = 4;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->item_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageRoleEquipmentDetailCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageRoleEquipmentDetailCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageRoleEquipmentDetailCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageRoleEquipmentDetailCmd::MergeFrom(const CGMMessageRoleEquipmentDetailCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_role_id(from.role_id());
    }
    if (from._has_bit(3)) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageRoleEquipmentDetailCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRoleEquipmentDetailCmd::CopyFrom(const CGMMessageRoleEquipmentDetailCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRoleEquipmentDetailCmd::Swap(CGMMessageRoleEquipmentDetailCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(role_id_, other->role_id_);
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageRoleEquipmentDetailCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageRoleEquipmentDetailCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageRoleEquipmentDetailCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRoleEquipmentDetailCmd_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageRoleStorageDetailCmd::kSessionIdFieldNumber;
const int CGMMessageRoleStorageDetailCmd::kFdFieldNumber;
const int CGMMessageRoleStorageDetailCmd::kRoleIdFieldNumber;
const int CGMMessageRoleStorageDetailCmd::kItemIdFieldNumber;
#endif  // !_MSC_VER

CGMMessageRoleStorageDetailCmd::CGMMessageRoleStorageDetailCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageRoleStorageDetailCmd::InitAsDefaultInstance() {}

CGMMessageRoleStorageDetailCmd::CGMMessageRoleStorageDetailCmd(const CGMMessageRoleStorageDetailCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageRoleStorageDetailCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  role_id_ = 0u;
  item_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageRoleStorageDetailCmd::~CGMMessageRoleStorageDetailCmd() {
  SharedDtor();
}

void CGMMessageRoleStorageDetailCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageRoleStorageDetailCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRoleStorageDetailCmd_descriptor_;
}

const CGMMessageRoleStorageDetailCmd& CGMMessageRoleStorageDetailCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageRoleStorageDetailCmd* CGMMessageRoleStorageDetailCmd::default_instance_ = NULL;

CGMMessageRoleStorageDetailCmd* CGMMessageRoleStorageDetailCmd::New() const {
  return new CGMMessageRoleStorageDetailCmd;
}

void CGMMessageRoleStorageDetailCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    role_id_ = 0u;
    item_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageRoleStorageDetailCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }
      
      // optional uint32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &role_id_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_item_id;
        break;
      }
      
      // optional uint32 item_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_item_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &item_id_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageRoleStorageDetailCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageRoleStorageDetailCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional uint32 role_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->role_id(), output);
  }
  
  // optional uint32 item_id = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->item_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageRoleStorageDetailCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional uint32 role_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->role_id(), target);
  }
  
  // optional uint32 item_id = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->item_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageRoleStorageDetailCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional uint32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->role_id());
    }
    
    // optional uint32 item_id = 4;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->item_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageRoleStorageDetailCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageRoleStorageDetailCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageRoleStorageDetailCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageRoleStorageDetailCmd::MergeFrom(const CGMMessageRoleStorageDetailCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_role_id(from.role_id());
    }
    if (from._has_bit(3)) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageRoleStorageDetailCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRoleStorageDetailCmd::CopyFrom(const CGMMessageRoleStorageDetailCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRoleStorageDetailCmd::Swap(CGMMessageRoleStorageDetailCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(role_id_, other->role_id_);
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageRoleStorageDetailCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageRoleStorageDetailCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageRoleStorageDetailCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRoleStorageDetailCmd_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageRoleEquipmentDetailResult::kSessionIdFieldNumber;
const int CGMMessageRoleEquipmentDetailResult::kFdFieldNumber;
const int CGMMessageRoleEquipmentDetailResult::kProtoFieldNumber;
#endif  // !_MSC_VER

CGMMessageRoleEquipmentDetailResult::CGMMessageRoleEquipmentDetailResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageRoleEquipmentDetailResult::InitAsDefaultInstance() {  proto_ = const_cast< ::PBItemObject*>(&::PBItemObject::default_instance());
}

CGMMessageRoleEquipmentDetailResult::CGMMessageRoleEquipmentDetailResult(const CGMMessageRoleEquipmentDetailResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageRoleEquipmentDetailResult::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  proto_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageRoleEquipmentDetailResult::~CGMMessageRoleEquipmentDetailResult() {
  SharedDtor();
}

void CGMMessageRoleEquipmentDetailResult::SharedDtor() {
  if (this != default_instance_) {
    delete proto_;
  }
}

const ::google::protobuf::Descriptor* CGMMessageRoleEquipmentDetailResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRoleEquipmentDetailResult_descriptor_;
}

const CGMMessageRoleEquipmentDetailResult& CGMMessageRoleEquipmentDetailResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageRoleEquipmentDetailResult* CGMMessageRoleEquipmentDetailResult::default_instance_ = NULL;

CGMMessageRoleEquipmentDetailResult* CGMMessageRoleEquipmentDetailResult::New() const {
  return new CGMMessageRoleEquipmentDetailResult;
}

void CGMMessageRoleEquipmentDetailResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    if (_has_bit(2)) {
      if (proto_ != NULL) proto_->::PBItemObject::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageRoleEquipmentDetailResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_proto;
        break;
      }
      
      // optional .PBItemObject proto = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_proto:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_proto()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageRoleEquipmentDetailResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageRoleEquipmentDetailResult::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional .PBItemObject proto = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->proto(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageRoleEquipmentDetailResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional .PBItemObject proto = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->proto(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageRoleEquipmentDetailResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional .PBItemObject proto = 3;
    if (has_proto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->proto());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageRoleEquipmentDetailResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageRoleEquipmentDetailResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageRoleEquipmentDetailResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageRoleEquipmentDetailResult::MergeFrom(const CGMMessageRoleEquipmentDetailResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      mutable_proto()->::PBItemObject::MergeFrom(from.proto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageRoleEquipmentDetailResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRoleEquipmentDetailResult::CopyFrom(const CGMMessageRoleEquipmentDetailResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRoleEquipmentDetailResult::Swap(CGMMessageRoleEquipmentDetailResult* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(proto_, other->proto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageRoleEquipmentDetailResult::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageRoleEquipmentDetailResult::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageRoleEquipmentDetailResult::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRoleEquipmentDetailResult_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageRoleStorageDetailResult::kSessionIdFieldNumber;
const int CGMMessageRoleStorageDetailResult::kFdFieldNumber;
const int CGMMessageRoleStorageDetailResult::kProtoFieldNumber;
#endif  // !_MSC_VER

CGMMessageRoleStorageDetailResult::CGMMessageRoleStorageDetailResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageRoleStorageDetailResult::InitAsDefaultInstance() {  proto_ = const_cast< ::PBItemObject*>(&::PBItemObject::default_instance());
}

CGMMessageRoleStorageDetailResult::CGMMessageRoleStorageDetailResult(const CGMMessageRoleStorageDetailResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageRoleStorageDetailResult::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  proto_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageRoleStorageDetailResult::~CGMMessageRoleStorageDetailResult() {
  SharedDtor();
}

void CGMMessageRoleStorageDetailResult::SharedDtor() {
  if (this != default_instance_) {
    delete proto_;
  }
}

const ::google::protobuf::Descriptor* CGMMessageRoleStorageDetailResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRoleStorageDetailResult_descriptor_;
}

const CGMMessageRoleStorageDetailResult& CGMMessageRoleStorageDetailResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageRoleStorageDetailResult* CGMMessageRoleStorageDetailResult::default_instance_ = NULL;

CGMMessageRoleStorageDetailResult* CGMMessageRoleStorageDetailResult::New() const {
  return new CGMMessageRoleStorageDetailResult;
}

void CGMMessageRoleStorageDetailResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    if (_has_bit(2)) {
      if (proto_ != NULL) proto_->::PBItemObject::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageRoleStorageDetailResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_proto;
        break;
      }
      
      // optional .PBItemObject proto = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_proto:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_proto()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageRoleStorageDetailResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageRoleStorageDetailResult::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional .PBItemObject proto = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->proto(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageRoleStorageDetailResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional .PBItemObject proto = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->proto(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageRoleStorageDetailResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional .PBItemObject proto = 3;
    if (has_proto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->proto());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageRoleStorageDetailResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageRoleStorageDetailResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageRoleStorageDetailResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageRoleStorageDetailResult::MergeFrom(const CGMMessageRoleStorageDetailResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      mutable_proto()->::PBItemObject::MergeFrom(from.proto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageRoleStorageDetailResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRoleStorageDetailResult::CopyFrom(const CGMMessageRoleStorageDetailResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRoleStorageDetailResult::Swap(CGMMessageRoleStorageDetailResult* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(proto_, other->proto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageRoleStorageDetailResult::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageRoleStorageDetailResult::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageRoleStorageDetailResult::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRoleStorageDetailResult_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBSubjectAmount::kSubjectIDFieldNumber;
const int PBSubjectAmount::kAmountFieldNumber;
#endif  // !_MSC_VER

PBSubjectAmount::PBSubjectAmount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSubjectAmount::InitAsDefaultInstance() {}

PBSubjectAmount::PBSubjectAmount(const PBSubjectAmount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSubjectAmount::SharedCtor() {
  _cached_size_ = 0;
  subjectid_ = 0u;
  amount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSubjectAmount::~PBSubjectAmount() {
  SharedDtor();
}

void PBSubjectAmount::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBSubjectAmount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSubjectAmount_descriptor_;
}

const PBSubjectAmount& PBSubjectAmount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

PBSubjectAmount* PBSubjectAmount::default_instance_ = NULL;

PBSubjectAmount* PBSubjectAmount::New() const {
  return new PBSubjectAmount;
}

void PBSubjectAmount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    subjectid_ = 0u;
    amount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSubjectAmount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 SubjectID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &subjectid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Amount;
        break;
      }
      
      // optional uint32 Amount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Amount:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &amount_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSubjectAmount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBSubjectAmount::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 SubjectID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->subjectid(), output);
  }
  
  // optional uint32 Amount = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->amount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSubjectAmount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 SubjectID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->subjectid(), target);
  }
  
  // optional uint32 Amount = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->amount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSubjectAmount::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SubjectID = 1;
    if (has_subjectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->subjectid());
    }
    
    // optional uint32 Amount = 2;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->amount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBSubjectAmount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSubjectAmount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSubjectAmount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSubjectAmount::MergeFrom(const PBSubjectAmount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_subjectid(from.subjectid());
    }
    if (from._has_bit(1)) {
      set_amount(from.amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSubjectAmount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSubjectAmount::CopyFrom(const PBSubjectAmount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSubjectAmount::Swap(PBSubjectAmount* other) {
  if (other != this) {
    std::swap(subjectid_, other->subjectid_);
    std::swap(amount_, other->amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBSubjectAmount::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBSubjectAmount::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBSubjectAmount::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBSubjectAmount_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageFangChenMiResponse::kCharIDFieldNumber;
const int CMessageFangChenMiResponse::kSubjectsFieldNumber;
#endif  // !_MSC_VER

CMessageFangChenMiResponse::CMessageFangChenMiResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFangChenMiResponse::InitAsDefaultInstance() {}

CMessageFangChenMiResponse::CMessageFangChenMiResponse(const CMessageFangChenMiResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFangChenMiResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFangChenMiResponse::~CMessageFangChenMiResponse() {
  SharedDtor();
}

void CMessageFangChenMiResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageFangChenMiResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFangChenMiResponse_descriptor_;
}

const CMessageFangChenMiResponse& CMessageFangChenMiResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFangChenMiResponse* CMessageFangChenMiResponse::default_instance_ = NULL;

CMessageFangChenMiResponse* CMessageFangChenMiResponse::New() const {
  return new CMessageFangChenMiResponse;
}

void CMessageFangChenMiResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  subjects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFangChenMiResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Subjects;
        break;
      }
      
      // repeated .PBSubjectAmount Subjects = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Subjects:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_subjects()));
        if (input->ExpectTag(18)) goto parse_Subjects;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageFangChenMiResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFangChenMiResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // repeated .PBSubjectAmount Subjects = 2;
  for (int i = 0; i < this->subjects_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->subjects(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFangChenMiResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // repeated .PBSubjectAmount Subjects = 2;
  for (int i = 0; i < this->subjects_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->subjects(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFangChenMiResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  // repeated .PBSubjectAmount Subjects = 2;
  total_size += 1 * this->subjects_size();
  for (int i = 0; i < this->subjects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->subjects(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFangChenMiResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFangChenMiResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFangChenMiResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFangChenMiResponse::MergeFrom(const CMessageFangChenMiResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  subjects_.MergeFrom(from.subjects_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFangChenMiResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFangChenMiResponse::CopyFrom(const CMessageFangChenMiResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFangChenMiResponse::Swap(CMessageFangChenMiResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    subjects_.Swap(&other->subjects_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFangChenMiResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFangChenMiResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFangChenMiResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFangChenMiResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBFangChenMi::kCharIDFieldNumber;
const int PBFangChenMi::kCharLevelFieldNumber;
const int PBFangChenMi::kCharMetierFieldNumber;
const int PBFangChenMi::kMoney1FieldNumber;
const int PBFangChenMi::kMoney2FieldNumber;
const int PBFangChenMi::kExpFieldNumber;
#endif  // !_MSC_VER

PBFangChenMi::PBFangChenMi()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBFangChenMi::InitAsDefaultInstance() {}

PBFangChenMi::PBFangChenMi(const PBFangChenMi& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBFangChenMi::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  charlevel_ = 0u;
  charmetier_ = 0u;
  money1_ = 0u;
  money2_ = 0u;
  exp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBFangChenMi::~PBFangChenMi() {
  SharedDtor();
}

void PBFangChenMi::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBFangChenMi::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBFangChenMi_descriptor_;
}

const PBFangChenMi& PBFangChenMi::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

PBFangChenMi* PBFangChenMi::default_instance_ = NULL;

PBFangChenMi* PBFangChenMi::New() const {
  return new PBFangChenMi;
}

void PBFangChenMi::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    charlevel_ = 0u;
    charmetier_ = 0u;
    money1_ = 0u;
    money2_ = 0u;
    exp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBFangChenMi::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CharLevel;
        break;
      }
      
      // optional uint32 CharLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charlevel_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_CharMetier;
        break;
      }
      
      // optional uint32 CharMetier = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharMetier:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charmetier_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Money1;
        break;
      }
      
      // optional uint32 Money1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money1:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money1_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Money2;
        break;
      }
      
      // optional uint32 Money2 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money2:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money2_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Exp;
        break;
      }
      
      // optional uint64 Exp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Exp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &exp_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBFangChenMi::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBFangChenMi::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 CharLevel = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charlevel(), output);
  }
  
  // optional uint32 CharMetier = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->charmetier(), output);
  }
  
  // optional uint32 Money1 = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->money1(), output);
  }
  
  // optional uint32 Money2 = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->money2(), output);
  }
  
  // optional uint64 Exp = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(6, this->exp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBFangChenMi::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 CharLevel = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charlevel(), target);
  }
  
  // optional uint32 CharMetier = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->charmetier(), target);
  }
  
  // optional uint32 Money1 = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->money1(), target);
  }
  
  // optional uint32 Money2 = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->money2(), target);
  }
  
  // optional uint64 Exp = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(6, this->exp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBFangChenMi::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 CharLevel = 2;
    if (has_charlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charlevel());
    }
    
    // optional uint32 CharMetier = 3;
    if (has_charmetier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charmetier());
    }
    
    // optional uint32 Money1 = 4;
    if (has_money1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money1());
    }
    
    // optional uint32 Money2 = 5;
    if (has_money2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money2());
    }
    
    // optional uint64 Exp = 6;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->exp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBFangChenMi::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBFangChenMi* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBFangChenMi*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBFangChenMi::MergeFrom(const PBFangChenMi& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_charlevel(from.charlevel());
    }
    if (from._has_bit(2)) {
      set_charmetier(from.charmetier());
    }
    if (from._has_bit(3)) {
      set_money1(from.money1());
    }
    if (from._has_bit(4)) {
      set_money2(from.money2());
    }
    if (from._has_bit(5)) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBFangChenMi::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFangChenMi::CopyFrom(const PBFangChenMi& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFangChenMi::Swap(PBFangChenMi* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(charlevel_, other->charlevel_);
    std::swap(charmetier_, other->charmetier_);
    std::swap(money1_, other->money1_);
    std::swap(money2_, other->money2_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBFangChenMi::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBFangChenMi::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBFangChenMi::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBFangChenMi_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageFangChenMiRequest::kRoleDetailFieldNumber;
#endif  // !_MSC_VER

CMessageFangChenMiRequest::CMessageFangChenMiRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFangChenMiRequest::InitAsDefaultInstance() {}

CMessageFangChenMiRequest::CMessageFangChenMiRequest(const CMessageFangChenMiRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFangChenMiRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFangChenMiRequest::~CMessageFangChenMiRequest() {
  SharedDtor();
}

void CMessageFangChenMiRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageFangChenMiRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFangChenMiRequest_descriptor_;
}

const CMessageFangChenMiRequest& CMessageFangChenMiRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFangChenMiRequest* CMessageFangChenMiRequest::default_instance_ = NULL;

CMessageFangChenMiRequest* CMessageFangChenMiRequest::New() const {
  return new CMessageFangChenMiRequest;
}

void CMessageFangChenMiRequest::Clear() {
  roledetail_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFangChenMiRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .PBFangChenMi RoleDetail = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RoleDetail:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_roledetail()));
        if (input->ExpectTag(10)) goto parse_RoleDetail;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageFangChenMiRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFangChenMiRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .PBFangChenMi RoleDetail = 1;
  for (int i = 0; i < this->roledetail_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->roledetail(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFangChenMiRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBFangChenMi RoleDetail = 1;
  for (int i = 0; i < this->roledetail_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->roledetail(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFangChenMiRequest::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBFangChenMi RoleDetail = 1;
  total_size += 1 * this->roledetail_size();
  for (int i = 0; i < this->roledetail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->roledetail(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFangChenMiRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFangChenMiRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFangChenMiRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFangChenMiRequest::MergeFrom(const CMessageFangChenMiRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  roledetail_.MergeFrom(from.roledetail_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFangChenMiRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFangChenMiRequest::CopyFrom(const CMessageFangChenMiRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFangChenMiRequest::Swap(CMessageFangChenMiRequest* other) {
  if (other != this) {
    roledetail_.Swap(&other->roledetail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFangChenMiRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFangChenMiRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFangChenMiRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFangChenMiRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageFCMPlayerListNotify::kReportPlayerFieldNumber;
#endif  // !_MSC_VER

CMessageFCMPlayerListNotify::CMessageFCMPlayerListNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFCMPlayerListNotify::InitAsDefaultInstance() {}

CMessageFCMPlayerListNotify::CMessageFCMPlayerListNotify(const CMessageFCMPlayerListNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFCMPlayerListNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFCMPlayerListNotify::~CMessageFCMPlayerListNotify() {
  SharedDtor();
}

void CMessageFCMPlayerListNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageFCMPlayerListNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFCMPlayerListNotify_descriptor_;
}

const CMessageFCMPlayerListNotify& CMessageFCMPlayerListNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFCMPlayerListNotify* CMessageFCMPlayerListNotify::default_instance_ = NULL;

CMessageFCMPlayerListNotify* CMessageFCMPlayerListNotify::New() const {
  return new CMessageFCMPlayerListNotify;
}

void CMessageFCMPlayerListNotify::Clear() {
  reportplayer_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFCMPlayerListNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated uint32 ReportPlayer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ReportPlayer:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_reportplayer(value);
        if (input->ExpectTag(8)) goto parse_ReportPlayer;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageFCMPlayerListNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFCMPlayerListNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated uint32 ReportPlayer = 1;
  for (int i = 0; i < this->reportplayer_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->reportplayer(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFCMPlayerListNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 ReportPlayer = 1;
  for (int i = 0; i < this->reportplayer_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->reportplayer(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFCMPlayerListNotify::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 ReportPlayer = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->reportplayer_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->reportplayer(i));
    }
    total_size += 1 * this->reportplayer_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFCMPlayerListNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFCMPlayerListNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFCMPlayerListNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFCMPlayerListNotify::MergeFrom(const CMessageFCMPlayerListNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  reportplayer_.MergeFrom(from.reportplayer_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFCMPlayerListNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFCMPlayerListNotify::CopyFrom(const CMessageFCMPlayerListNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFCMPlayerListNotify::Swap(CMessageFCMPlayerListNotify* other) {
  if (other != this) {
    reportplayer_.Swap(&other->reportplayer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFCMPlayerListNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFCMPlayerListNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFCMPlayerListNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFCMPlayerListNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageFCMPlayerResetRequest::kAccountIDFieldNumber;
const int CMessageFCMPlayerResetRequest::kSecondsFieldNumber;
#endif  // !_MSC_VER

CMessageFCMPlayerResetRequest::CMessageFCMPlayerResetRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFCMPlayerResetRequest::InitAsDefaultInstance() {}

CMessageFCMPlayerResetRequest::CMessageFCMPlayerResetRequest(const CMessageFCMPlayerResetRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFCMPlayerResetRequest::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  seconds_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFCMPlayerResetRequest::~CMessageFCMPlayerResetRequest() {
  SharedDtor();
}

void CMessageFCMPlayerResetRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageFCMPlayerResetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFCMPlayerResetRequest_descriptor_;
}

const CMessageFCMPlayerResetRequest& CMessageFCMPlayerResetRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFCMPlayerResetRequest* CMessageFCMPlayerResetRequest::default_instance_ = NULL;

CMessageFCMPlayerResetRequest* CMessageFCMPlayerResetRequest::New() const {
  return new CMessageFCMPlayerResetRequest;
}

void CMessageFCMPlayerResetRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
    seconds_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFCMPlayerResetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 AccountID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Seconds;
        break;
      }
      
      // optional uint32 Seconds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Seconds:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &seconds_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageFCMPlayerResetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFCMPlayerResetRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 AccountID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->accountid(), output);
  }
  
  // optional uint32 Seconds = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->seconds(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFCMPlayerResetRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 AccountID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->accountid(), target);
  }
  
  // optional uint32 Seconds = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->seconds(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFCMPlayerResetRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AccountID = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 Seconds = 2;
    if (has_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->seconds());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFCMPlayerResetRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFCMPlayerResetRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFCMPlayerResetRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFCMPlayerResetRequest::MergeFrom(const CMessageFCMPlayerResetRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(1)) {
      set_seconds(from.seconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFCMPlayerResetRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFCMPlayerResetRequest::CopyFrom(const CMessageFCMPlayerResetRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFCMPlayerResetRequest::Swap(CMessageFCMPlayerResetRequest* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(seconds_, other->seconds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFCMPlayerResetRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFCMPlayerResetRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFCMPlayerResetRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFCMPlayerResetRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageChangeGateNotify::_default_name_;
#ifndef _MSC_VER
const int CMessageChangeGateNotify::kTypeFieldNumber;
const int CMessageChangeGateNotify::kNameFieldNumber;
const int CMessageChangeGateNotify::kParam1FieldNumber;
const int CMessageChangeGateNotify::kParam2FieldNumber;
const int CMessageChangeGateNotify::kParam3FieldNumber;
const int CMessageChangeGateNotify::kParam4FieldNumber;
#endif  // !_MSC_VER

CMessageChangeGateNotify::CMessageChangeGateNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeGateNotify::InitAsDefaultInstance() {}

CMessageChangeGateNotify::CMessageChangeGateNotify(const CMessageChangeGateNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeGateNotify::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  param1_ = 0;
  param2_ = 0;
  param3_ = 0;
  param4_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeGateNotify::~CMessageChangeGateNotify() {
  SharedDtor();
}

void CMessageChangeGateNotify::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageChangeGateNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeGateNotify_descriptor_;
}

const CMessageChangeGateNotify& CMessageChangeGateNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeGateNotify* CMessageChangeGateNotify::default_instance_ = NULL;

CMessageChangeGateNotify* CMessageChangeGateNotify::New() const {
  return new CMessageChangeGateNotify;
}

void CMessageChangeGateNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    param1_ = 0;
    param2_ = 0;
    param3_ = 0;
    param4_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeGateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }
      
      // optional string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(24)) goto parse_Param1;
        break;
      }
      
      // optional int32 Param1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Param1:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &param1_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Param2;
        break;
      }
      
      // optional int32 Param2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Param2:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &param2_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Param3;
        break;
      }
      
      // optional int32 Param3 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Param3:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &param3_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Param4;
        break;
      }
      
      // optional int32 Param4 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Param4:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &param4_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeGateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeGateNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->type(), output);
  }
  
  // optional string Name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->name(), output);
  }
  
  // optional int32 Param1 = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->param1(), output);
  }
  
  // optional int32 Param2 = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->param2(), output);
  }
  
  // optional int32 Param3 = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(5, this->param3(), output);
  }
  
  // optional int32 Param4 = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(6, this->param4(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeGateNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Type = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional string Name = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->name(), target);
  }
  
  // optional int32 Param1 = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->param1(), target);
  }
  
  // optional int32 Param2 = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->param2(), target);
  }
  
  // optional int32 Param3 = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(5, this->param3(), target);
  }
  
  // optional int32 Param4 = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(6, this->param4(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeGateNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
    // optional string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional int32 Param1 = 3;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->param1());
    }
    
    // optional int32 Param2 = 4;
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->param2());
    }
    
    // optional int32 Param3 = 5;
    if (has_param3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->param3());
    }
    
    // optional int32 Param4 = 6;
    if (has_param4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->param4());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeGateNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeGateNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeGateNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeGateNotify::MergeFrom(const CMessageChangeGateNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type(from.type());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      set_param1(from.param1());
    }
    if (from._has_bit(3)) {
      set_param2(from.param2());
    }
    if (from._has_bit(4)) {
      set_param3(from.param3());
    }
    if (from._has_bit(5)) {
      set_param4(from.param4());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeGateNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeGateNotify::CopyFrom(const CMessageChangeGateNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeGateNotify::Swap(CMessageChangeGateNotify* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(param1_, other->param1_);
    std::swap(param2_, other->param2_);
    std::swap(param3_, other->param3_);
    std::swap(param4_, other->param4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeGateNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeGateNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeGateNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeGateNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageResetRolePasswordRequest::kSessionIdFieldNumber;
const int CMessageResetRolePasswordRequest::kFdFieldNumber;
const int CMessageResetRolePasswordRequest::kRoleIdFieldNumber;
#endif  // !_MSC_VER

CMessageResetRolePasswordRequest::CMessageResetRolePasswordRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageResetRolePasswordRequest::InitAsDefaultInstance() {}

CMessageResetRolePasswordRequest::CMessageResetRolePasswordRequest(const CMessageResetRolePasswordRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageResetRolePasswordRequest::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageResetRolePasswordRequest::~CMessageResetRolePasswordRequest() {
  SharedDtor();
}

void CMessageResetRolePasswordRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageResetRolePasswordRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageResetRolePasswordRequest_descriptor_;
}

const CMessageResetRolePasswordRequest& CMessageResetRolePasswordRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageResetRolePasswordRequest* CMessageResetRolePasswordRequest::default_instance_ = NULL;

CMessageResetRolePasswordRequest* CMessageResetRolePasswordRequest::New() const {
  return new CMessageResetRolePasswordRequest;
}

void CMessageResetRolePasswordRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    role_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageResetRolePasswordRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }
      
      // optional uint32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &role_id_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageResetRolePasswordRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageResetRolePasswordRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional uint32 role_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->role_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageResetRolePasswordRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional uint32 role_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->role_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageResetRolePasswordRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional uint32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->role_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageResetRolePasswordRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageResetRolePasswordRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageResetRolePasswordRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageResetRolePasswordRequest::MergeFrom(const CMessageResetRolePasswordRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageResetRolePasswordRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageResetRolePasswordRequest::CopyFrom(const CMessageResetRolePasswordRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageResetRolePasswordRequest::Swap(CMessageResetRolePasswordRequest* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageResetRolePasswordRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageResetRolePasswordRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageResetRolePasswordRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageResetRolePasswordRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageResetRolePasswordResponse::kSessionIdFieldNumber;
const int CMessageResetRolePasswordResponse::kFdFieldNumber;
const int CMessageResetRolePasswordResponse::kErrcodeFieldNumber;
#endif  // !_MSC_VER

CMessageResetRolePasswordResponse::CMessageResetRolePasswordResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageResetRolePasswordResponse::InitAsDefaultInstance() {}

CMessageResetRolePasswordResponse::CMessageResetRolePasswordResponse(const CMessageResetRolePasswordResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageResetRolePasswordResponse::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageResetRolePasswordResponse::~CMessageResetRolePasswordResponse() {
  SharedDtor();
}

void CMessageResetRolePasswordResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageResetRolePasswordResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageResetRolePasswordResponse_descriptor_;
}

const CMessageResetRolePasswordResponse& CMessageResetRolePasswordResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageResetRolePasswordResponse* CMessageResetRolePasswordResponse::default_instance_ = NULL;

CMessageResetRolePasswordResponse* CMessageResetRolePasswordResponse::New() const {
  return new CMessageResetRolePasswordResponse;
}

void CMessageResetRolePasswordResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageResetRolePasswordResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageResetRolePasswordResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageResetRolePasswordResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional uint32 Errcode = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageResetRolePasswordResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional uint32 Errcode = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageResetRolePasswordResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional uint32 Errcode = 3;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageResetRolePasswordResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageResetRolePasswordResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageResetRolePasswordResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageResetRolePasswordResponse::MergeFrom(const CMessageResetRolePasswordResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageResetRolePasswordResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageResetRolePasswordResponse::CopyFrom(const CMessageResetRolePasswordResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageResetRolePasswordResponse::Swap(CMessageResetRolePasswordResponse* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageResetRolePasswordResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageResetRolePasswordResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageResetRolePasswordResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageResetRolePasswordResponse_reflection_;
}

// ===================================================================

const ::std::string CGMMessageRoleItemOperatedCmd::_default_start_time_;
const ::std::string CGMMessageRoleItemOperatedCmd::_default_end_time_;
#ifndef _MSC_VER
const int CGMMessageRoleItemOperatedCmd::kSessionIdFieldNumber;
const int CGMMessageRoleItemOperatedCmd::kFdFieldNumber;
const int CGMMessageRoleItemOperatedCmd::kRoleIdFieldNumber;
const int CGMMessageRoleItemOperatedCmd::kOpTypeFieldNumber;
const int CGMMessageRoleItemOperatedCmd::kItemIdFieldNumber;
const int CGMMessageRoleItemOperatedCmd::kItemGuidFieldNumber;
const int CGMMessageRoleItemOperatedCmd::kStartTimeFieldNumber;
const int CGMMessageRoleItemOperatedCmd::kEndTimeFieldNumber;
const int CGMMessageRoleItemOperatedCmd::kPageFieldNumber;
#endif  // !_MSC_VER

CGMMessageRoleItemOperatedCmd::CGMMessageRoleItemOperatedCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageRoleItemOperatedCmd::InitAsDefaultInstance() {}

CGMMessageRoleItemOperatedCmd::CGMMessageRoleItemOperatedCmd(const CGMMessageRoleItemOperatedCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageRoleItemOperatedCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  role_id_ = 0u;
  op_type_ = 0;
  item_id_ = 0;
  item_guid_ = GOOGLE_ULONGLONG(0);
  start_time_ = const_cast< ::std::string*>(&_default_start_time_);
  end_time_ = const_cast< ::std::string*>(&_default_end_time_);
  page_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageRoleItemOperatedCmd::~CGMMessageRoleItemOperatedCmd() {
  SharedDtor();
}

void CGMMessageRoleItemOperatedCmd::SharedDtor() {
  if (start_time_ != &_default_start_time_) {
    delete start_time_;
  }
  if (end_time_ != &_default_end_time_) {
    delete end_time_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageRoleItemOperatedCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRoleItemOperatedCmd_descriptor_;
}

const CGMMessageRoleItemOperatedCmd& CGMMessageRoleItemOperatedCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageRoleItemOperatedCmd* CGMMessageRoleItemOperatedCmd::default_instance_ = NULL;

CGMMessageRoleItemOperatedCmd* CGMMessageRoleItemOperatedCmd::New() const {
  return new CGMMessageRoleItemOperatedCmd;
}

void CGMMessageRoleItemOperatedCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    role_id_ = 0u;
    op_type_ = 0;
    item_id_ = 0;
    item_guid_ = GOOGLE_ULONGLONG(0);
    if (_has_bit(6)) {
      if (start_time_ != &_default_start_time_) {
        start_time_->clear();
      }
    }
    if (_has_bit(7)) {
      if (end_time_ != &_default_end_time_) {
        end_time_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    page_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageRoleItemOperatedCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }
      
      // optional uint32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &role_id_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_op_type;
        break;
      }
      
      // optional int32 op_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_op_type:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &op_type_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_item_id;
        break;
      }
      
      // optional int32 item_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_item_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &item_id_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_item_guid;
        break;
      }
      
      // optional uint64 item_guid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_item_guid:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &item_guid_));
        _set_bit(5);
        if (input->ExpectTag(58)) goto parse_start_time;
        break;
      }
      
      // optional string start_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_start_time:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_start_time()));
        if (input->ExpectTag(66)) goto parse_end_time;
        break;
      }
      
      // optional string end_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_end_time:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_end_time()));
        if (input->ExpectTag(72)) goto parse_page;
        break;
      }
      
      // optional int32 page = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_page:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &page_));
        _set_bit(8);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageRoleItemOperatedCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageRoleItemOperatedCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional uint32 role_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->role_id(), output);
  }
  
  // optional int32 op_type = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->op_type(), output);
  }
  
  // optional int32 item_id = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(5, this->item_id(), output);
  }
  
  // optional uint64 item_guid = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(6, this->item_guid(), output);
  }
  
  // optional string start_time = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteString(7, this->start_time(), output);
  }
  
  // optional string end_time = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteString(8, this->end_time(), output);
  }
  
  // optional int32 page = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(9, this->page(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageRoleItemOperatedCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional uint32 role_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->role_id(), target);
  }
  
  // optional int32 op_type = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->op_type(), target);
  }
  
  // optional int32 item_id = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(5, this->item_id(), target);
  }
  
  // optional uint64 item_guid = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(6, this->item_guid(), target);
  }
  
  // optional string start_time = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(7, this->start_time(), target);
  }
  
  // optional string end_time = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(8, this->end_time(), target);
  }
  
  // optional int32 page = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(9, this->page(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageRoleItemOperatedCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional uint32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->role_id());
    }
    
    // optional int32 op_type = 4;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->op_type());
    }
    
    // optional int32 item_id = 5;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->item_id());
    }
    
    // optional uint64 item_guid = 6;
    if (has_item_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->item_guid());
    }
    
    // optional string start_time = 7;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->start_time());
    }
    
    // optional string end_time = 8;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->end_time());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 page = 9;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->page());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageRoleItemOperatedCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageRoleItemOperatedCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageRoleItemOperatedCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageRoleItemOperatedCmd::MergeFrom(const CGMMessageRoleItemOperatedCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_role_id(from.role_id());
    }
    if (from._has_bit(3)) {
      set_op_type(from.op_type());
    }
    if (from._has_bit(4)) {
      set_item_id(from.item_id());
    }
    if (from._has_bit(5)) {
      set_item_guid(from.item_guid());
    }
    if (from._has_bit(6)) {
      set_start_time(from.start_time());
    }
    if (from._has_bit(7)) {
      set_end_time(from.end_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_page(from.page());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageRoleItemOperatedCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRoleItemOperatedCmd::CopyFrom(const CGMMessageRoleItemOperatedCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRoleItemOperatedCmd::Swap(CGMMessageRoleItemOperatedCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(role_id_, other->role_id_);
    std::swap(op_type_, other->op_type_);
    std::swap(item_id_, other->item_id_);
    std::swap(item_guid_, other->item_guid_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(page_, other->page_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageRoleItemOperatedCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageRoleItemOperatedCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageRoleItemOperatedCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRoleItemOperatedCmd_reflection_;
}

// ===================================================================

const ::std::string CGMMessageRoleMoneyOperateCmd::_default_start_time_;
const ::std::string CGMMessageRoleMoneyOperateCmd::_default_end_time_;
#ifndef _MSC_VER
const int CGMMessageRoleMoneyOperateCmd::kSessionIdFieldNumber;
const int CGMMessageRoleMoneyOperateCmd::kFdFieldNumber;
const int CGMMessageRoleMoneyOperateCmd::kRoleIdFieldNumber;
const int CGMMessageRoleMoneyOperateCmd::kOpTypeFieldNumber;
const int CGMMessageRoleMoneyOperateCmd::kItemTypeFieldNumber;
const int CGMMessageRoleMoneyOperateCmd::kStartTimeFieldNumber;
const int CGMMessageRoleMoneyOperateCmd::kEndTimeFieldNumber;
const int CGMMessageRoleMoneyOperateCmd::kPageFieldNumber;
#endif  // !_MSC_VER

CGMMessageRoleMoneyOperateCmd::CGMMessageRoleMoneyOperateCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageRoleMoneyOperateCmd::InitAsDefaultInstance() {}

CGMMessageRoleMoneyOperateCmd::CGMMessageRoleMoneyOperateCmd(const CGMMessageRoleMoneyOperateCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageRoleMoneyOperateCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  role_id_ = 0u;
  op_type_ = 0;
  item_type_ = 0;
  start_time_ = const_cast< ::std::string*>(&_default_start_time_);
  end_time_ = const_cast< ::std::string*>(&_default_end_time_);
  page_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageRoleMoneyOperateCmd::~CGMMessageRoleMoneyOperateCmd() {
  SharedDtor();
}

void CGMMessageRoleMoneyOperateCmd::SharedDtor() {
  if (start_time_ != &_default_start_time_) {
    delete start_time_;
  }
  if (end_time_ != &_default_end_time_) {
    delete end_time_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageRoleMoneyOperateCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRoleMoneyOperateCmd_descriptor_;
}

const CGMMessageRoleMoneyOperateCmd& CGMMessageRoleMoneyOperateCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageRoleMoneyOperateCmd* CGMMessageRoleMoneyOperateCmd::default_instance_ = NULL;

CGMMessageRoleMoneyOperateCmd* CGMMessageRoleMoneyOperateCmd::New() const {
  return new CGMMessageRoleMoneyOperateCmd;
}

void CGMMessageRoleMoneyOperateCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    role_id_ = 0u;
    op_type_ = 0;
    item_type_ = 0;
    if (_has_bit(5)) {
      if (start_time_ != &_default_start_time_) {
        start_time_->clear();
      }
    }
    if (_has_bit(6)) {
      if (end_time_ != &_default_end_time_) {
        end_time_->clear();
      }
    }
    page_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageRoleMoneyOperateCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }
      
      // optional uint32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &role_id_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_op_type;
        break;
      }
      
      // optional int32 op_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_op_type:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &op_type_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_item_type;
        break;
      }
      
      // optional int32 item_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_item_type:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &item_type_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_start_time;
        break;
      }
      
      // optional string start_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_start_time:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_start_time()));
        if (input->ExpectTag(58)) goto parse_end_time;
        break;
      }
      
      // optional string end_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_end_time:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_end_time()));
        if (input->ExpectTag(64)) goto parse_page;
        break;
      }
      
      // optional int32 page = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_page:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &page_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageRoleMoneyOperateCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageRoleMoneyOperateCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional uint32 role_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->role_id(), output);
  }
  
  // optional int32 op_type = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->op_type(), output);
  }
  
  // optional int32 item_type = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(5, this->item_type(), output);
  }
  
  // optional string start_time = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteString(6, this->start_time(), output);
  }
  
  // optional string end_time = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteString(7, this->end_time(), output);
  }
  
  // optional int32 page = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(8, this->page(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageRoleMoneyOperateCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional uint32 role_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->role_id(), target);
  }
  
  // optional int32 op_type = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->op_type(), target);
  }
  
  // optional int32 item_type = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(5, this->item_type(), target);
  }
  
  // optional string start_time = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(6, this->start_time(), target);
  }
  
  // optional string end_time = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(7, this->end_time(), target);
  }
  
  // optional int32 page = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(8, this->page(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageRoleMoneyOperateCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional uint32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->role_id());
    }
    
    // optional int32 op_type = 4;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->op_type());
    }
    
    // optional int32 item_type = 5;
    if (has_item_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->item_type());
    }
    
    // optional string start_time = 6;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->start_time());
    }
    
    // optional string end_time = 7;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->end_time());
    }
    
    // optional int32 page = 8;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->page());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageRoleMoneyOperateCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageRoleMoneyOperateCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageRoleMoneyOperateCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageRoleMoneyOperateCmd::MergeFrom(const CGMMessageRoleMoneyOperateCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_role_id(from.role_id());
    }
    if (from._has_bit(3)) {
      set_op_type(from.op_type());
    }
    if (from._has_bit(4)) {
      set_item_type(from.item_type());
    }
    if (from._has_bit(5)) {
      set_start_time(from.start_time());
    }
    if (from._has_bit(6)) {
      set_end_time(from.end_time());
    }
    if (from._has_bit(7)) {
      set_page(from.page());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageRoleMoneyOperateCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRoleMoneyOperateCmd::CopyFrom(const CGMMessageRoleMoneyOperateCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRoleMoneyOperateCmd::Swap(CGMMessageRoleMoneyOperateCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(role_id_, other->role_id_);
    std::swap(op_type_, other->op_type_);
    std::swap(item_type_, other->item_type_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(page_, other->page_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageRoleMoneyOperateCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageRoleMoneyOperateCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageRoleMoneyOperateCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRoleMoneyOperateCmd_reflection_;
}

// ===================================================================

const ::std::string CGMMessageRoleExpCmd::_default_start_time_;
const ::std::string CGMMessageRoleExpCmd::_default_end_time_;
#ifndef _MSC_VER
const int CGMMessageRoleExpCmd::kSessionIdFieldNumber;
const int CGMMessageRoleExpCmd::kFdFieldNumber;
const int CGMMessageRoleExpCmd::kRoleIdFieldNumber;
const int CGMMessageRoleExpCmd::kOpTypeFieldNumber;
const int CGMMessageRoleExpCmd::kExpTypeFieldNumber;
const int CGMMessageRoleExpCmd::kStartTimeFieldNumber;
const int CGMMessageRoleExpCmd::kEndTimeFieldNumber;
const int CGMMessageRoleExpCmd::kPageFieldNumber;
#endif  // !_MSC_VER

CGMMessageRoleExpCmd::CGMMessageRoleExpCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageRoleExpCmd::InitAsDefaultInstance() {}

CGMMessageRoleExpCmd::CGMMessageRoleExpCmd(const CGMMessageRoleExpCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageRoleExpCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  role_id_ = 0u;
  op_type_ = 0;
  exp_type_ = 0;
  start_time_ = const_cast< ::std::string*>(&_default_start_time_);
  end_time_ = const_cast< ::std::string*>(&_default_end_time_);
  page_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageRoleExpCmd::~CGMMessageRoleExpCmd() {
  SharedDtor();
}

void CGMMessageRoleExpCmd::SharedDtor() {
  if (start_time_ != &_default_start_time_) {
    delete start_time_;
  }
  if (end_time_ != &_default_end_time_) {
    delete end_time_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageRoleExpCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRoleExpCmd_descriptor_;
}

const CGMMessageRoleExpCmd& CGMMessageRoleExpCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageRoleExpCmd* CGMMessageRoleExpCmd::default_instance_ = NULL;

CGMMessageRoleExpCmd* CGMMessageRoleExpCmd::New() const {
  return new CGMMessageRoleExpCmd;
}

void CGMMessageRoleExpCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    role_id_ = 0u;
    op_type_ = 0;
    exp_type_ = 0;
    if (_has_bit(5)) {
      if (start_time_ != &_default_start_time_) {
        start_time_->clear();
      }
    }
    if (_has_bit(6)) {
      if (end_time_ != &_default_end_time_) {
        end_time_->clear();
      }
    }
    page_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageRoleExpCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }
      
      // optional uint32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &role_id_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_op_type;
        break;
      }
      
      // optional int32 op_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_op_type:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &op_type_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_exp_type;
        break;
      }
      
      // optional int32 exp_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_exp_type:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &exp_type_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_start_time;
        break;
      }
      
      // optional string start_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_start_time:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_start_time()));
        if (input->ExpectTag(58)) goto parse_end_time;
        break;
      }
      
      // optional string end_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_end_time:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_end_time()));
        if (input->ExpectTag(64)) goto parse_page;
        break;
      }
      
      // optional int32 page = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_page:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &page_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageRoleExpCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageRoleExpCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional uint32 role_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->role_id(), output);
  }
  
  // optional int32 op_type = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->op_type(), output);
  }
  
  // optional int32 exp_type = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(5, this->exp_type(), output);
  }
  
  // optional string start_time = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteString(6, this->start_time(), output);
  }
  
  // optional string end_time = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteString(7, this->end_time(), output);
  }
  
  // optional int32 page = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(8, this->page(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageRoleExpCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional uint32 role_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->role_id(), target);
  }
  
  // optional int32 op_type = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->op_type(), target);
  }
  
  // optional int32 exp_type = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(5, this->exp_type(), target);
  }
  
  // optional string start_time = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(6, this->start_time(), target);
  }
  
  // optional string end_time = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(7, this->end_time(), target);
  }
  
  // optional int32 page = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(8, this->page(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageRoleExpCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional uint32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->role_id());
    }
    
    // optional int32 op_type = 4;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->op_type());
    }
    
    // optional int32 exp_type = 5;
    if (has_exp_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->exp_type());
    }
    
    // optional string start_time = 6;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->start_time());
    }
    
    // optional string end_time = 7;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->end_time());
    }
    
    // optional int32 page = 8;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->page());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageRoleExpCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageRoleExpCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageRoleExpCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageRoleExpCmd::MergeFrom(const CGMMessageRoleExpCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_role_id(from.role_id());
    }
    if (from._has_bit(3)) {
      set_op_type(from.op_type());
    }
    if (from._has_bit(4)) {
      set_exp_type(from.exp_type());
    }
    if (from._has_bit(5)) {
      set_start_time(from.start_time());
    }
    if (from._has_bit(6)) {
      set_end_time(from.end_time());
    }
    if (from._has_bit(7)) {
      set_page(from.page());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageRoleExpCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRoleExpCmd::CopyFrom(const CGMMessageRoleExpCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRoleExpCmd::Swap(CGMMessageRoleExpCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(role_id_, other->role_id_);
    std::swap(op_type_, other->op_type_);
    std::swap(exp_type_, other->exp_type_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(page_, other->page_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageRoleExpCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageRoleExpCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageRoleExpCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRoleExpCmd_reflection_;
}

// ===================================================================

const ::std::string CGMMessageRoleItemLevelUpCmd::_default_start_time_;
const ::std::string CGMMessageRoleItemLevelUpCmd::_default_end_time_;
#ifndef _MSC_VER
const int CGMMessageRoleItemLevelUpCmd::kSessionIdFieldNumber;
const int CGMMessageRoleItemLevelUpCmd::kFdFieldNumber;
const int CGMMessageRoleItemLevelUpCmd::kPageFieldNumber;
const int CGMMessageRoleItemLevelUpCmd::kRoleIdFieldNumber;
const int CGMMessageRoleItemLevelUpCmd::kItemIdFieldNumber;
const int CGMMessageRoleItemLevelUpCmd::kStartTimeFieldNumber;
const int CGMMessageRoleItemLevelUpCmd::kEndTimeFieldNumber;
#endif  // !_MSC_VER

CGMMessageRoleItemLevelUpCmd::CGMMessageRoleItemLevelUpCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageRoleItemLevelUpCmd::InitAsDefaultInstance() {}

CGMMessageRoleItemLevelUpCmd::CGMMessageRoleItemLevelUpCmd(const CGMMessageRoleItemLevelUpCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageRoleItemLevelUpCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  page_ = 0;
  role_id_ = 0u;
  item_id_ = 0;
  start_time_ = const_cast< ::std::string*>(&_default_start_time_);
  end_time_ = const_cast< ::std::string*>(&_default_end_time_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageRoleItemLevelUpCmd::~CGMMessageRoleItemLevelUpCmd() {
  SharedDtor();
}

void CGMMessageRoleItemLevelUpCmd::SharedDtor() {
  if (start_time_ != &_default_start_time_) {
    delete start_time_;
  }
  if (end_time_ != &_default_end_time_) {
    delete end_time_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageRoleItemLevelUpCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRoleItemLevelUpCmd_descriptor_;
}

const CGMMessageRoleItemLevelUpCmd& CGMMessageRoleItemLevelUpCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageRoleItemLevelUpCmd* CGMMessageRoleItemLevelUpCmd::default_instance_ = NULL;

CGMMessageRoleItemLevelUpCmd* CGMMessageRoleItemLevelUpCmd::New() const {
  return new CGMMessageRoleItemLevelUpCmd;
}

void CGMMessageRoleItemLevelUpCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    page_ = 0;
    role_id_ = 0u;
    item_id_ = 0;
    if (_has_bit(5)) {
      if (start_time_ != &_default_start_time_) {
        start_time_->clear();
      }
    }
    if (_has_bit(6)) {
      if (end_time_ != &_default_end_time_) {
        end_time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageRoleItemLevelUpCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_page;
        break;
      }
      
      // optional int32 page = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_page:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &page_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_role_id;
        break;
      }
      
      // optional uint32 role_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &role_id_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_item_id;
        break;
      }
      
      // optional int32 item_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_item_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &item_id_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_start_time;
        break;
      }
      
      // optional string start_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_start_time:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_start_time()));
        if (input->ExpectTag(58)) goto parse_end_time;
        break;
      }
      
      // optional string end_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_end_time:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_end_time()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageRoleItemLevelUpCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageRoleItemLevelUpCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional int32 page = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->page(), output);
  }
  
  // optional uint32 role_id = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->role_id(), output);
  }
  
  // optional int32 item_id = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(5, this->item_id(), output);
  }
  
  // optional string start_time = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteString(6, this->start_time(), output);
  }
  
  // optional string end_time = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteString(7, this->end_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageRoleItemLevelUpCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional int32 page = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->page(), target);
  }
  
  // optional uint32 role_id = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->role_id(), target);
  }
  
  // optional int32 item_id = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(5, this->item_id(), target);
  }
  
  // optional string start_time = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(6, this->start_time(), target);
  }
  
  // optional string end_time = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(7, this->end_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageRoleItemLevelUpCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional int32 page = 3;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->page());
    }
    
    // optional uint32 role_id = 4;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->role_id());
    }
    
    // optional int32 item_id = 5;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->item_id());
    }
    
    // optional string start_time = 6;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->start_time());
    }
    
    // optional string end_time = 7;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->end_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageRoleItemLevelUpCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageRoleItemLevelUpCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageRoleItemLevelUpCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageRoleItemLevelUpCmd::MergeFrom(const CGMMessageRoleItemLevelUpCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_page(from.page());
    }
    if (from._has_bit(3)) {
      set_role_id(from.role_id());
    }
    if (from._has_bit(4)) {
      set_item_id(from.item_id());
    }
    if (from._has_bit(5)) {
      set_start_time(from.start_time());
    }
    if (from._has_bit(6)) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageRoleItemLevelUpCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRoleItemLevelUpCmd::CopyFrom(const CGMMessageRoleItemLevelUpCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRoleItemLevelUpCmd::Swap(CGMMessageRoleItemLevelUpCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(page_, other->page_);
    std::swap(role_id_, other->role_id_);
    std::swap(item_id_, other->item_id_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageRoleItemLevelUpCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageRoleItemLevelUpCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageRoleItemLevelUpCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRoleItemLevelUpCmd_reflection_;
}

// ===================================================================

const ::std::string CGMMessageFreezeMacCmd::_default_mac_;
#ifndef _MSC_VER
const int CGMMessageFreezeMacCmd::kSessionIdFieldNumber;
const int CGMMessageFreezeMacCmd::kFdFieldNumber;
const int CGMMessageFreezeMacCmd::kMacFieldNumber;
#endif  // !_MSC_VER

CGMMessageFreezeMacCmd::CGMMessageFreezeMacCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageFreezeMacCmd::InitAsDefaultInstance() {}

CGMMessageFreezeMacCmd::CGMMessageFreezeMacCmd(const CGMMessageFreezeMacCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageFreezeMacCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  mac_ = const_cast< ::std::string*>(&_default_mac_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageFreezeMacCmd::~CGMMessageFreezeMacCmd() {
  SharedDtor();
}

void CGMMessageFreezeMacCmd::SharedDtor() {
  if (mac_ != &_default_mac_) {
    delete mac_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageFreezeMacCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageFreezeMacCmd_descriptor_;
}

const CGMMessageFreezeMacCmd& CGMMessageFreezeMacCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageFreezeMacCmd* CGMMessageFreezeMacCmd::default_instance_ = NULL;

CGMMessageFreezeMacCmd* CGMMessageFreezeMacCmd::New() const {
  return new CGMMessageFreezeMacCmd;
}

void CGMMessageFreezeMacCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    if (_has_bit(2)) {
      if (mac_ != &_default_mac_) {
        mac_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageFreezeMacCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_mac;
        break;
      }
      
      // optional string mac = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_mac:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_mac()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageFreezeMacCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageFreezeMacCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional string mac = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->mac(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageFreezeMacCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional string mac = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->mac(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageFreezeMacCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional string mac = 3;
    if (has_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->mac());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageFreezeMacCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageFreezeMacCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageFreezeMacCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageFreezeMacCmd::MergeFrom(const CGMMessageFreezeMacCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_mac(from.mac());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageFreezeMacCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageFreezeMacCmd::CopyFrom(const CGMMessageFreezeMacCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageFreezeMacCmd::Swap(CGMMessageFreezeMacCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(mac_, other->mac_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageFreezeMacCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageFreezeMacCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageFreezeMacCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageFreezeMacCmd_reflection_;
}

// ===================================================================

const ::std::string CGMMessageUnFreezeMacCmd::_default_mac_;
#ifndef _MSC_VER
const int CGMMessageUnFreezeMacCmd::kSessionIdFieldNumber;
const int CGMMessageUnFreezeMacCmd::kFdFieldNumber;
const int CGMMessageUnFreezeMacCmd::kMacFieldNumber;
#endif  // !_MSC_VER

CGMMessageUnFreezeMacCmd::CGMMessageUnFreezeMacCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageUnFreezeMacCmd::InitAsDefaultInstance() {}

CGMMessageUnFreezeMacCmd::CGMMessageUnFreezeMacCmd(const CGMMessageUnFreezeMacCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageUnFreezeMacCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  mac_ = const_cast< ::std::string*>(&_default_mac_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageUnFreezeMacCmd::~CGMMessageUnFreezeMacCmd() {
  SharedDtor();
}

void CGMMessageUnFreezeMacCmd::SharedDtor() {
  if (mac_ != &_default_mac_) {
    delete mac_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageUnFreezeMacCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageUnFreezeMacCmd_descriptor_;
}

const CGMMessageUnFreezeMacCmd& CGMMessageUnFreezeMacCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageUnFreezeMacCmd* CGMMessageUnFreezeMacCmd::default_instance_ = NULL;

CGMMessageUnFreezeMacCmd* CGMMessageUnFreezeMacCmd::New() const {
  return new CGMMessageUnFreezeMacCmd;
}

void CGMMessageUnFreezeMacCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    if (_has_bit(2)) {
      if (mac_ != &_default_mac_) {
        mac_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageUnFreezeMacCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_mac;
        break;
      }
      
      // optional string mac = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_mac:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_mac()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageUnFreezeMacCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageUnFreezeMacCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional string mac = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->mac(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageUnFreezeMacCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional string mac = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->mac(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageUnFreezeMacCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional string mac = 3;
    if (has_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->mac());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageUnFreezeMacCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageUnFreezeMacCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageUnFreezeMacCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageUnFreezeMacCmd::MergeFrom(const CGMMessageUnFreezeMacCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_mac(from.mac());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageUnFreezeMacCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageUnFreezeMacCmd::CopyFrom(const CGMMessageUnFreezeMacCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageUnFreezeMacCmd::Swap(CGMMessageUnFreezeMacCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(mac_, other->mac_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageUnFreezeMacCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageUnFreezeMacCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageUnFreezeMacCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageUnFreezeMacCmd_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageCorpsTotalCmd::kSessionIdFieldNumber;
const int CGMMessageCorpsTotalCmd::kFdFieldNumber;
const int CGMMessageCorpsTotalCmd::kTypeFieldNumber;
const int CGMMessageCorpsTotalCmd::kPageFieldNumber;
#endif  // !_MSC_VER

CGMMessageCorpsTotalCmd::CGMMessageCorpsTotalCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageCorpsTotalCmd::InitAsDefaultInstance() {}

CGMMessageCorpsTotalCmd::CGMMessageCorpsTotalCmd(const CGMMessageCorpsTotalCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageCorpsTotalCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  type_ = 0;
  page_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageCorpsTotalCmd::~CGMMessageCorpsTotalCmd() {
  SharedDtor();
}

void CGMMessageCorpsTotalCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageCorpsTotalCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageCorpsTotalCmd_descriptor_;
}

const CGMMessageCorpsTotalCmd& CGMMessageCorpsTotalCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageCorpsTotalCmd* CGMMessageCorpsTotalCmd::default_instance_ = NULL;

CGMMessageCorpsTotalCmd* CGMMessageCorpsTotalCmd::New() const {
  return new CGMMessageCorpsTotalCmd;
}

void CGMMessageCorpsTotalCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    type_ = 0;
    page_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageCorpsTotalCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &type_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_page;
        break;
      }
      
      // optional int32 page = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_page:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &page_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageCorpsTotalCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageCorpsTotalCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional int32 type = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->type(), output);
  }
  
  // optional int32 page = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->page(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageCorpsTotalCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional int32 type = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->type(), target);
  }
  
  // optional int32 page = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->page(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageCorpsTotalCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->type());
    }
    
    // optional int32 page = 4;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->page());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageCorpsTotalCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageCorpsTotalCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageCorpsTotalCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageCorpsTotalCmd::MergeFrom(const CGMMessageCorpsTotalCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_type(from.type());
    }
    if (from._has_bit(3)) {
      set_page(from.page());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageCorpsTotalCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageCorpsTotalCmd::CopyFrom(const CGMMessageCorpsTotalCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageCorpsTotalCmd::Swap(CGMMessageCorpsTotalCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(type_, other->type_);
    std::swap(page_, other->page_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageCorpsTotalCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageCorpsTotalCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageCorpsTotalCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageCorpsTotalCmd_reflection_;
}

// ===================================================================

const ::std::string CGMMessageCorpsDetailCmd::_default_corps_name_;
#ifndef _MSC_VER
const int CGMMessageCorpsDetailCmd::kSessionIdFieldNumber;
const int CGMMessageCorpsDetailCmd::kFdFieldNumber;
const int CGMMessageCorpsDetailCmd::kCorpsNameFieldNumber;
const int CGMMessageCorpsDetailCmd::kTypeFieldNumber;
#endif  // !_MSC_VER

CGMMessageCorpsDetailCmd::CGMMessageCorpsDetailCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageCorpsDetailCmd::InitAsDefaultInstance() {}

CGMMessageCorpsDetailCmd::CGMMessageCorpsDetailCmd(const CGMMessageCorpsDetailCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageCorpsDetailCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  corps_name_ = const_cast< ::std::string*>(&_default_corps_name_);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageCorpsDetailCmd::~CGMMessageCorpsDetailCmd() {
  SharedDtor();
}

void CGMMessageCorpsDetailCmd::SharedDtor() {
  if (corps_name_ != &_default_corps_name_) {
    delete corps_name_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageCorpsDetailCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageCorpsDetailCmd_descriptor_;
}

const CGMMessageCorpsDetailCmd& CGMMessageCorpsDetailCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageCorpsDetailCmd* CGMMessageCorpsDetailCmd::default_instance_ = NULL;

CGMMessageCorpsDetailCmd* CGMMessageCorpsDetailCmd::New() const {
  return new CGMMessageCorpsDetailCmd;
}

void CGMMessageCorpsDetailCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    if (_has_bit(2)) {
      if (corps_name_ != &_default_corps_name_) {
        corps_name_->clear();
      }
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageCorpsDetailCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_corps_name;
        break;
      }
      
      // optional string corps_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_corps_name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_corps_name()));
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }
      
      // optional int32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &type_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageCorpsDetailCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageCorpsDetailCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional string corps_name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->corps_name(), output);
  }
  
  // optional int32 type = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageCorpsDetailCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional string corps_name = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->corps_name(), target);
  }
  
  // optional int32 type = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageCorpsDetailCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional string corps_name = 3;
    if (has_corps_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->corps_name());
    }
    
    // optional int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageCorpsDetailCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageCorpsDetailCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageCorpsDetailCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageCorpsDetailCmd::MergeFrom(const CGMMessageCorpsDetailCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_corps_name(from.corps_name());
    }
    if (from._has_bit(3)) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageCorpsDetailCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageCorpsDetailCmd::CopyFrom(const CGMMessageCorpsDetailCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageCorpsDetailCmd::Swap(CGMMessageCorpsDetailCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(corps_name_, other->corps_name_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageCorpsDetailCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageCorpsDetailCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageCorpsDetailCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageCorpsDetailCmd_reflection_;
}

// ===================================================================

const ::std::string CGMMessageCorpsInfoCmd::_default_corps_name_;
const ::std::string CGMMessageCorpsInfoCmd::_default_start_time_;
const ::std::string CGMMessageCorpsInfoCmd::_default_end_time_;
#ifndef _MSC_VER
const int CGMMessageCorpsInfoCmd::kSessionIdFieldNumber;
const int CGMMessageCorpsInfoCmd::kFdFieldNumber;
const int CGMMessageCorpsInfoCmd::kCorpsNameFieldNumber;
const int CGMMessageCorpsInfoCmd::kTypeFieldNumber;
const int CGMMessageCorpsInfoCmd::kStartTimeFieldNumber;
const int CGMMessageCorpsInfoCmd::kEndTimeFieldNumber;
const int CGMMessageCorpsInfoCmd::kPageFieldNumber;
#endif  // !_MSC_VER

CGMMessageCorpsInfoCmd::CGMMessageCorpsInfoCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageCorpsInfoCmd::InitAsDefaultInstance() {}

CGMMessageCorpsInfoCmd::CGMMessageCorpsInfoCmd(const CGMMessageCorpsInfoCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageCorpsInfoCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  corps_name_ = const_cast< ::std::string*>(&_default_corps_name_);
  type_ = 0;
  start_time_ = const_cast< ::std::string*>(&_default_start_time_);
  end_time_ = const_cast< ::std::string*>(&_default_end_time_);
  page_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageCorpsInfoCmd::~CGMMessageCorpsInfoCmd() {
  SharedDtor();
}

void CGMMessageCorpsInfoCmd::SharedDtor() {
  if (corps_name_ != &_default_corps_name_) {
    delete corps_name_;
  }
  if (start_time_ != &_default_start_time_) {
    delete start_time_;
  }
  if (end_time_ != &_default_end_time_) {
    delete end_time_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageCorpsInfoCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageCorpsInfoCmd_descriptor_;
}

const CGMMessageCorpsInfoCmd& CGMMessageCorpsInfoCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageCorpsInfoCmd* CGMMessageCorpsInfoCmd::default_instance_ = NULL;

CGMMessageCorpsInfoCmd* CGMMessageCorpsInfoCmd::New() const {
  return new CGMMessageCorpsInfoCmd;
}

void CGMMessageCorpsInfoCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    if (_has_bit(2)) {
      if (corps_name_ != &_default_corps_name_) {
        corps_name_->clear();
      }
    }
    type_ = 0;
    if (_has_bit(4)) {
      if (start_time_ != &_default_start_time_) {
        start_time_->clear();
      }
    }
    if (_has_bit(5)) {
      if (end_time_ != &_default_end_time_) {
        end_time_->clear();
      }
    }
    page_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageCorpsInfoCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_corps_name;
        break;
      }
      
      // optional string corps_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_corps_name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_corps_name()));
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }
      
      // optional int32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &type_));
        _set_bit(3);
        if (input->ExpectTag(50)) goto parse_start_time;
        break;
      }
      
      // optional string start_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_start_time:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_start_time()));
        if (input->ExpectTag(58)) goto parse_end_time;
        break;
      }
      
      // optional string end_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_end_time:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_end_time()));
        if (input->ExpectTag(64)) goto parse_page;
        break;
      }
      
      // optional int32 page = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_page:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &page_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageCorpsInfoCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageCorpsInfoCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional string corps_name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->corps_name(), output);
  }
  
  // optional int32 type = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->type(), output);
  }
  
  // optional string start_time = 6;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(6, this->start_time(), output);
  }
  
  // optional string end_time = 7;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteString(7, this->end_time(), output);
  }
  
  // optional int32 page = 8;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(8, this->page(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageCorpsInfoCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional string corps_name = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->corps_name(), target);
  }
  
  // optional int32 type = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->type(), target);
  }
  
  // optional string start_time = 6;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(6, this->start_time(), target);
  }
  
  // optional string end_time = 7;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(7, this->end_time(), target);
  }
  
  // optional int32 page = 8;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(8, this->page(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageCorpsInfoCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional string corps_name = 3;
    if (has_corps_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->corps_name());
    }
    
    // optional int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->type());
    }
    
    // optional string start_time = 6;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->start_time());
    }
    
    // optional string end_time = 7;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->end_time());
    }
    
    // optional int32 page = 8;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->page());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageCorpsInfoCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageCorpsInfoCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageCorpsInfoCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageCorpsInfoCmd::MergeFrom(const CGMMessageCorpsInfoCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_corps_name(from.corps_name());
    }
    if (from._has_bit(3)) {
      set_type(from.type());
    }
    if (from._has_bit(4)) {
      set_start_time(from.start_time());
    }
    if (from._has_bit(5)) {
      set_end_time(from.end_time());
    }
    if (from._has_bit(6)) {
      set_page(from.page());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageCorpsInfoCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageCorpsInfoCmd::CopyFrom(const CGMMessageCorpsInfoCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageCorpsInfoCmd::Swap(CGMMessageCorpsInfoCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(corps_name_, other->corps_name_);
    std::swap(type_, other->type_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(page_, other->page_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageCorpsInfoCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageCorpsInfoCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageCorpsInfoCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageCorpsInfoCmd_reflection_;
}

// ===================================================================

const ::std::string CGMMessageRoleInfoCmd::_default_start_time_;
const ::std::string CGMMessageRoleInfoCmd::_default_end_time_;
#ifndef _MSC_VER
const int CGMMessageRoleInfoCmd::kSessionIdFieldNumber;
const int CGMMessageRoleInfoCmd::kFdFieldNumber;
const int CGMMessageRoleInfoCmd::kRoleIdFieldNumber;
const int CGMMessageRoleInfoCmd::kTypeFieldNumber;
const int CGMMessageRoleInfoCmd::kStartTimeFieldNumber;
const int CGMMessageRoleInfoCmd::kEndTimeFieldNumber;
const int CGMMessageRoleInfoCmd::kPageFieldNumber;
#endif  // !_MSC_VER

CGMMessageRoleInfoCmd::CGMMessageRoleInfoCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageRoleInfoCmd::InitAsDefaultInstance() {}

CGMMessageRoleInfoCmd::CGMMessageRoleInfoCmd(const CGMMessageRoleInfoCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageRoleInfoCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  role_id_ = 0u;
  type_ = 0;
  start_time_ = const_cast< ::std::string*>(&_default_start_time_);
  end_time_ = const_cast< ::std::string*>(&_default_end_time_);
  page_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageRoleInfoCmd::~CGMMessageRoleInfoCmd() {
  SharedDtor();
}

void CGMMessageRoleInfoCmd::SharedDtor() {
  if (start_time_ != &_default_start_time_) {
    delete start_time_;
  }
  if (end_time_ != &_default_end_time_) {
    delete end_time_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageRoleInfoCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRoleInfoCmd_descriptor_;
}

const CGMMessageRoleInfoCmd& CGMMessageRoleInfoCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageRoleInfoCmd* CGMMessageRoleInfoCmd::default_instance_ = NULL;

CGMMessageRoleInfoCmd* CGMMessageRoleInfoCmd::New() const {
  return new CGMMessageRoleInfoCmd;
}

void CGMMessageRoleInfoCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    role_id_ = 0u;
    type_ = 0;
    if (_has_bit(4)) {
      if (start_time_ != &_default_start_time_) {
        start_time_->clear();
      }
    }
    if (_has_bit(5)) {
      if (end_time_ != &_default_end_time_) {
        end_time_->clear();
      }
    }
    page_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageRoleInfoCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }
      
      // optional uint32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &role_id_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }
      
      // optional int32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &type_));
        _set_bit(3);
        if (input->ExpectTag(50)) goto parse_start_time;
        break;
      }
      
      // optional string start_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_start_time:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_start_time()));
        if (input->ExpectTag(58)) goto parse_end_time;
        break;
      }
      
      // optional string end_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_end_time:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_end_time()));
        if (input->ExpectTag(64)) goto parse_page;
        break;
      }
      
      // optional int32 page = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_page:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &page_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageRoleInfoCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageRoleInfoCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional uint32 role_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->role_id(), output);
  }
  
  // optional int32 type = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->type(), output);
  }
  
  // optional string start_time = 6;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(6, this->start_time(), output);
  }
  
  // optional string end_time = 7;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteString(7, this->end_time(), output);
  }
  
  // optional int32 page = 8;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(8, this->page(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageRoleInfoCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional uint32 role_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->role_id(), target);
  }
  
  // optional int32 type = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->type(), target);
  }
  
  // optional string start_time = 6;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(6, this->start_time(), target);
  }
  
  // optional string end_time = 7;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(7, this->end_time(), target);
  }
  
  // optional int32 page = 8;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(8, this->page(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageRoleInfoCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional uint32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->role_id());
    }
    
    // optional int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->type());
    }
    
    // optional string start_time = 6;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->start_time());
    }
    
    // optional string end_time = 7;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->end_time());
    }
    
    // optional int32 page = 8;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->page());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageRoleInfoCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageRoleInfoCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageRoleInfoCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageRoleInfoCmd::MergeFrom(const CGMMessageRoleInfoCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_role_id(from.role_id());
    }
    if (from._has_bit(3)) {
      set_type(from.type());
    }
    if (from._has_bit(4)) {
      set_start_time(from.start_time());
    }
    if (from._has_bit(5)) {
      set_end_time(from.end_time());
    }
    if (from._has_bit(6)) {
      set_page(from.page());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageRoleInfoCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRoleInfoCmd::CopyFrom(const CGMMessageRoleInfoCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageRoleInfoCmd::Swap(CGMMessageRoleInfoCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(role_id_, other->role_id_);
    std::swap(type_, other->type_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(page_, other->page_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageRoleInfoCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageRoleInfoCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageRoleInfoCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageRoleInfoCmd_reflection_;
}

// ===================================================================

const ::std::string CGMMsgRoleItemRecoveryCmd::_default_start_time_;
const ::std::string CGMMsgRoleItemRecoveryCmd::_default_end_time_;
#ifndef _MSC_VER
const int CGMMsgRoleItemRecoveryCmd::kSessionIdFieldNumber;
const int CGMMsgRoleItemRecoveryCmd::kFdFieldNumber;
const int CGMMsgRoleItemRecoveryCmd::kRoleIdFieldNumber;
const int CGMMsgRoleItemRecoveryCmd::kTypeFieldNumber;
const int CGMMsgRoleItemRecoveryCmd::kItemIdFieldNumber;
const int CGMMsgRoleItemRecoveryCmd::kStartTimeFieldNumber;
const int CGMMsgRoleItemRecoveryCmd::kEndTimeFieldNumber;
const int CGMMsgRoleItemRecoveryCmd::kPageFieldNumber;
#endif  // !_MSC_VER

CGMMsgRoleItemRecoveryCmd::CGMMsgRoleItemRecoveryCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMsgRoleItemRecoveryCmd::InitAsDefaultInstance() {}

CGMMsgRoleItemRecoveryCmd::CGMMsgRoleItemRecoveryCmd(const CGMMsgRoleItemRecoveryCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMsgRoleItemRecoveryCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  role_id_ = 0u;
  type_ = 0;
  item_id_ = GOOGLE_ULONGLONG(0);
  start_time_ = const_cast< ::std::string*>(&_default_start_time_);
  end_time_ = const_cast< ::std::string*>(&_default_end_time_);
  page_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMsgRoleItemRecoveryCmd::~CGMMsgRoleItemRecoveryCmd() {
  SharedDtor();
}

void CGMMsgRoleItemRecoveryCmd::SharedDtor() {
  if (start_time_ != &_default_start_time_) {
    delete start_time_;
  }
  if (end_time_ != &_default_end_time_) {
    delete end_time_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMsgRoleItemRecoveryCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMsgRoleItemRecoveryCmd_descriptor_;
}

const CGMMsgRoleItemRecoveryCmd& CGMMsgRoleItemRecoveryCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMsgRoleItemRecoveryCmd* CGMMsgRoleItemRecoveryCmd::default_instance_ = NULL;

CGMMsgRoleItemRecoveryCmd* CGMMsgRoleItemRecoveryCmd::New() const {
  return new CGMMsgRoleItemRecoveryCmd;
}

void CGMMsgRoleItemRecoveryCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    role_id_ = 0u;
    type_ = 0;
    item_id_ = GOOGLE_ULONGLONG(0);
    if (_has_bit(5)) {
      if (start_time_ != &_default_start_time_) {
        start_time_->clear();
      }
    }
    if (_has_bit(6)) {
      if (end_time_ != &_default_end_time_) {
        end_time_->clear();
      }
    }
    page_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMsgRoleItemRecoveryCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }
      
      // optional uint32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &role_id_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }
      
      // optional int32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &type_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_item_id;
        break;
      }
      
      // optional uint64 item_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_item_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &item_id_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_start_time;
        break;
      }
      
      // optional string start_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_start_time:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_start_time()));
        if (input->ExpectTag(58)) goto parse_end_time;
        break;
      }
      
      // optional string end_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_end_time:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_end_time()));
        if (input->ExpectTag(64)) goto parse_page;
        break;
      }
      
      // optional uint32 page = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_page:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &page_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMsgRoleItemRecoveryCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMsgRoleItemRecoveryCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional uint32 role_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->role_id(), output);
  }
  
  // optional int32 type = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->type(), output);
  }
  
  // optional uint64 item_id = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(5, this->item_id(), output);
  }
  
  // optional string start_time = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteString(6, this->start_time(), output);
  }
  
  // optional string end_time = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteString(7, this->end_time(), output);
  }
  
  // optional uint32 page = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->page(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMsgRoleItemRecoveryCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional uint32 role_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->role_id(), target);
  }
  
  // optional int32 type = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->type(), target);
  }
  
  // optional uint64 item_id = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(5, this->item_id(), target);
  }
  
  // optional string start_time = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(6, this->start_time(), target);
  }
  
  // optional string end_time = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(7, this->end_time(), target);
  }
  
  // optional uint32 page = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->page(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMsgRoleItemRecoveryCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional uint32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->role_id());
    }
    
    // optional int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->type());
    }
    
    // optional uint64 item_id = 5;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->item_id());
    }
    
    // optional string start_time = 6;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->start_time());
    }
    
    // optional string end_time = 7;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->end_time());
    }
    
    // optional uint32 page = 8;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->page());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMsgRoleItemRecoveryCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMsgRoleItemRecoveryCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMsgRoleItemRecoveryCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMsgRoleItemRecoveryCmd::MergeFrom(const CGMMsgRoleItemRecoveryCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_role_id(from.role_id());
    }
    if (from._has_bit(3)) {
      set_type(from.type());
    }
    if (from._has_bit(4)) {
      set_item_id(from.item_id());
    }
    if (from._has_bit(5)) {
      set_start_time(from.start_time());
    }
    if (from._has_bit(6)) {
      set_end_time(from.end_time());
    }
    if (from._has_bit(7)) {
      set_page(from.page());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMsgRoleItemRecoveryCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMsgRoleItemRecoveryCmd::CopyFrom(const CGMMsgRoleItemRecoveryCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMsgRoleItemRecoveryCmd::Swap(CGMMsgRoleItemRecoveryCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(role_id_, other->role_id_);
    std::swap(type_, other->type_);
    std::swap(item_id_, other->item_id_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(page_, other->page_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMsgRoleItemRecoveryCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMsgRoleItemRecoveryCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMsgRoleItemRecoveryCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMsgRoleItemRecoveryCmd_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageOfflineSysMailNotify::kRoleIdFieldNumber;
const int CMessageOfflineSysMailNotify::kMailTypeFieldNumber;
const int CMessageOfflineSysMailNotify::kAttachMoneyFieldNumber;
const int CMessageOfflineSysMailNotify::kAttachItemFieldNumber;
const int CMessageOfflineSysMailNotify::kSessionIdFieldNumber;
const int CMessageOfflineSysMailNotify::kFdFieldNumber;
#endif  // !_MSC_VER

CMessageOfflineSysMailNotify::CMessageOfflineSysMailNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageOfflineSysMailNotify::InitAsDefaultInstance() {}

CMessageOfflineSysMailNotify::CMessageOfflineSysMailNotify(const CMessageOfflineSysMailNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageOfflineSysMailNotify::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  mailtype_ = 0u;
  attachmoney_ = 0u;
  session_id_ = 0u;
  fd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageOfflineSysMailNotify::~CMessageOfflineSysMailNotify() {
  SharedDtor();
}

void CMessageOfflineSysMailNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageOfflineSysMailNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageOfflineSysMailNotify_descriptor_;
}

const CMessageOfflineSysMailNotify& CMessageOfflineSysMailNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageOfflineSysMailNotify* CMessageOfflineSysMailNotify::default_instance_ = NULL;

CMessageOfflineSysMailNotify* CMessageOfflineSysMailNotify::New() const {
  return new CMessageOfflineSysMailNotify;
}

void CMessageOfflineSysMailNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    mailtype_ = 0u;
    attachmoney_ = 0u;
    session_id_ = 0u;
    fd_ = 0u;
  }
  attachitem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageOfflineSysMailNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_MailType;
        break;
      }
      
      // optional uint32 MailType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MailType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mailtype_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_AttachMoney;
        break;
      }
      
      // optional uint32 AttachMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AttachMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &attachmoney_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_AttachItem;
        break;
      }
      
      // repeated .PBItemObject AttachItem = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_AttachItem:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_attachitem()));
        if (input->ExpectTag(34)) goto parse_AttachItem;
        if (input->ExpectTag(40)) goto parse_session_id;
        break;
      }
      
      // optional uint32 session_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_session_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageOfflineSysMailNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageOfflineSysMailNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional uint32 MailType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->mailtype(), output);
  }
  
  // optional uint32 AttachMoney = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->attachmoney(), output);
  }
  
  // repeated .PBItemObject AttachItem = 4;
  for (int i = 0; i < this->attachitem_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->attachitem(i), output);
  }
  
  // optional uint32 session_id = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->session_id(), output);
  }
  
  // optional uint32 fd = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->fd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageOfflineSysMailNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional uint32 MailType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->mailtype(), target);
  }
  
  // optional uint32 AttachMoney = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->attachmoney(), target);
  }
  
  // repeated .PBItemObject AttachItem = 4;
  for (int i = 0; i < this->attachitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(4, this->attachitem(i), target);
  }
  
  // optional uint32 session_id = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->session_id(), target);
  }
  
  // optional uint32 fd = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->fd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageOfflineSysMailNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 MailType = 2;
    if (has_mailtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mailtype());
    }
    
    // optional uint32 AttachMoney = 3;
    if (has_attachmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->attachmoney());
    }
    
    // optional uint32 session_id = 5;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 6;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
  }
  // repeated .PBItemObject AttachItem = 4;
  total_size += 1 * this->attachitem_size();
  for (int i = 0; i < this->attachitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->attachitem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageOfflineSysMailNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageOfflineSysMailNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageOfflineSysMailNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageOfflineSysMailNotify::MergeFrom(const CMessageOfflineSysMailNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  attachitem_.MergeFrom(from.attachitem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_mailtype(from.mailtype());
    }
    if (from._has_bit(2)) {
      set_attachmoney(from.attachmoney());
    }
    if (from._has_bit(4)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(5)) {
      set_fd(from.fd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageOfflineSysMailNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageOfflineSysMailNotify::CopyFrom(const CMessageOfflineSysMailNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageOfflineSysMailNotify::Swap(CMessageOfflineSysMailNotify* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(mailtype_, other->mailtype_);
    std::swap(attachmoney_, other->attachmoney_);
    attachitem_.Swap(&other->attachitem_);
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageOfflineSysMailNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageOfflineSysMailNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageOfflineSysMailNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageOfflineSysMailNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageSqlQueryResult::kSessionIdFieldNumber;
const int CGMMessageSqlQueryResult::kFdFieldNumber;
const int CGMMessageSqlQueryResult::kTypeFieldNumber;
const int CGMMessageSqlQueryResult::kSqlResultFieldNumber;
const int CGMMessageSqlQueryResult::kPageFieldNumber;
#endif  // !_MSC_VER

CGMMessageSqlQueryResult::CGMMessageSqlQueryResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageSqlQueryResult::InitAsDefaultInstance() {  sqlresult_ = const_cast< ::CMessageExecuteSqlResponse3*>(&::CMessageExecuteSqlResponse3::default_instance());
}

CGMMessageSqlQueryResult::CGMMessageSqlQueryResult(const CGMMessageSqlQueryResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageSqlQueryResult::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  type_ = 0u;
  sqlresult_ = NULL;
  page_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageSqlQueryResult::~CGMMessageSqlQueryResult() {
  SharedDtor();
}

void CGMMessageSqlQueryResult::SharedDtor() {
  if (this != default_instance_) {
    delete sqlresult_;
  }
}

const ::google::protobuf::Descriptor* CGMMessageSqlQueryResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageSqlQueryResult_descriptor_;
}

const CGMMessageSqlQueryResult& CGMMessageSqlQueryResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageSqlQueryResult* CGMMessageSqlQueryResult::default_instance_ = NULL;

CGMMessageSqlQueryResult* CGMMessageSqlQueryResult::New() const {
  return new CGMMessageSqlQueryResult;
}

void CGMMessageSqlQueryResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    type_ = 0u;
    if (_has_bit(3)) {
      if (sqlresult_ != NULL) sqlresult_->::CMessageExecuteSqlResponse3::Clear();
    }
    page_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageSqlQueryResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // optional uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_SqlResult;
        break;
      }
      
      // optional .CMessageExecuteSqlResponse3 SqlResult = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SqlResult:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_sqlresult()));
        if (input->ExpectTag(40)) goto parse_page;
        break;
      }
      
      // optional uint32 page = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_page:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &page_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageSqlQueryResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageSqlQueryResult::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional uint32 type = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->type(), output);
  }
  
  // optional .CMessageExecuteSqlResponse3 SqlResult = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->sqlresult(), output);
  }
  
  // optional uint32 page = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->page(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageSqlQueryResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional uint32 type = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->type(), target);
  }
  
  // optional .CMessageExecuteSqlResponse3 SqlResult = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(4, this->sqlresult(), target);
  }
  
  // optional uint32 page = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->page(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageSqlQueryResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
    // optional .CMessageExecuteSqlResponse3 SqlResult = 4;
    if (has_sqlresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->sqlresult());
    }
    
    // optional uint32 page = 5;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->page());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageSqlQueryResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageSqlQueryResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageSqlQueryResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageSqlQueryResult::MergeFrom(const CGMMessageSqlQueryResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_type(from.type());
    }
    if (from._has_bit(3)) {
      mutable_sqlresult()->::CMessageExecuteSqlResponse3::MergeFrom(from.sqlresult());
    }
    if (from._has_bit(4)) {
      set_page(from.page());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageSqlQueryResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageSqlQueryResult::CopyFrom(const CGMMessageSqlQueryResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageSqlQueryResult::Swap(CGMMessageSqlQueryResult* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(type_, other->type_);
    std::swap(sqlresult_, other->sqlresult_);
    std::swap(page_, other->page_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageSqlQueryResult::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageSqlQueryResult::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageSqlQueryResult::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageSqlQueryResult_reflection_;
}

// ===================================================================

const ::std::string CGMMessageUserInfoByIPCmd::_default_ip_;
const ::std::string CGMMessageUserInfoByIPCmd::_default_start_time_;
const ::std::string CGMMessageUserInfoByIPCmd::_default_end_time_;
#ifndef _MSC_VER
const int CGMMessageUserInfoByIPCmd::kSessionIdFieldNumber;
const int CGMMessageUserInfoByIPCmd::kFdFieldNumber;
const int CGMMessageUserInfoByIPCmd::kIpFieldNumber;
const int CGMMessageUserInfoByIPCmd::kStartTimeFieldNumber;
const int CGMMessageUserInfoByIPCmd::kEndTimeFieldNumber;
const int CGMMessageUserInfoByIPCmd::kTypeFieldNumber;
const int CGMMessageUserInfoByIPCmd::kPageFieldNumber;
#endif  // !_MSC_VER

CGMMessageUserInfoByIPCmd::CGMMessageUserInfoByIPCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageUserInfoByIPCmd::InitAsDefaultInstance() {}

CGMMessageUserInfoByIPCmd::CGMMessageUserInfoByIPCmd(const CGMMessageUserInfoByIPCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageUserInfoByIPCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  ip_ = const_cast< ::std::string*>(&_default_ip_);
  start_time_ = const_cast< ::std::string*>(&_default_start_time_);
  end_time_ = const_cast< ::std::string*>(&_default_end_time_);
  type_ = 0;
  page_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageUserInfoByIPCmd::~CGMMessageUserInfoByIPCmd() {
  SharedDtor();
}

void CGMMessageUserInfoByIPCmd::SharedDtor() {
  if (ip_ != &_default_ip_) {
    delete ip_;
  }
  if (start_time_ != &_default_start_time_) {
    delete start_time_;
  }
  if (end_time_ != &_default_end_time_) {
    delete end_time_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageUserInfoByIPCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageUserInfoByIPCmd_descriptor_;
}

const CGMMessageUserInfoByIPCmd& CGMMessageUserInfoByIPCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageUserInfoByIPCmd* CGMMessageUserInfoByIPCmd::default_instance_ = NULL;

CGMMessageUserInfoByIPCmd* CGMMessageUserInfoByIPCmd::New() const {
  return new CGMMessageUserInfoByIPCmd;
}

void CGMMessageUserInfoByIPCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    if (_has_bit(2)) {
      if (ip_ != &_default_ip_) {
        ip_->clear();
      }
    }
    if (_has_bit(3)) {
      if (start_time_ != &_default_start_time_) {
        start_time_->clear();
      }
    }
    if (_has_bit(4)) {
      if (end_time_ != &_default_end_time_) {
        end_time_->clear();
      }
    }
    type_ = 0;
    page_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageUserInfoByIPCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }
      
      // optional string ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ip:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_ip()));
        if (input->ExpectTag(34)) goto parse_start_time;
        break;
      }
      
      // optional string start_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_start_time:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_start_time()));
        if (input->ExpectTag(42)) goto parse_end_time;
        break;
      }
      
      // optional string end_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_end_time:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_end_time()));
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }
      
      // optional int32 type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &type_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_page;
        break;
      }
      
      // optional int32 page = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_page:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &page_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageUserInfoByIPCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageUserInfoByIPCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional string ip = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->ip(), output);
  }
  
  // optional string start_time = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->start_time(), output);
  }
  
  // optional string end_time = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->end_time(), output);
  }
  
  // optional int32 type = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(6, this->type(), output);
  }
  
  // optional int32 page = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(7, this->page(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageUserInfoByIPCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional string ip = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->ip(), target);
  }
  
  // optional string start_time = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->start_time(), target);
  }
  
  // optional string end_time = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->end_time(), target);
  }
  
  // optional int32 type = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(6, this->type(), target);
  }
  
  // optional int32 page = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(7, this->page(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageUserInfoByIPCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->ip());
    }
    
    // optional string start_time = 4;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->start_time());
    }
    
    // optional string end_time = 5;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->end_time());
    }
    
    // optional int32 type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->type());
    }
    
    // optional int32 page = 7;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->page());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageUserInfoByIPCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageUserInfoByIPCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageUserInfoByIPCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageUserInfoByIPCmd::MergeFrom(const CGMMessageUserInfoByIPCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_ip(from.ip());
    }
    if (from._has_bit(3)) {
      set_start_time(from.start_time());
    }
    if (from._has_bit(4)) {
      set_end_time(from.end_time());
    }
    if (from._has_bit(5)) {
      set_type(from.type());
    }
    if (from._has_bit(6)) {
      set_page(from.page());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageUserInfoByIPCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageUserInfoByIPCmd::CopyFrom(const CGMMessageUserInfoByIPCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageUserInfoByIPCmd::Swap(CGMMessageUserInfoByIPCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(ip_, other->ip_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(type_, other->type_);
    std::swap(page_, other->page_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageUserInfoByIPCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageUserInfoByIPCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageUserInfoByIPCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageUserInfoByIPCmd_reflection_;
}

// ===================================================================

const ::std::string PlayerInfo::_default_account_name_;
const ::std::string PlayerInfo::_default_role_name_;
const ::std::string PlayerInfo::_default_mac_;
#ifndef _MSC_VER
const int PlayerInfo::kAccountIdFieldNumber;
const int PlayerInfo::kAccountNameFieldNumber;
const int PlayerInfo::kRoleIdFieldNumber;
const int PlayerInfo::kRoleNameFieldNumber;
const int PlayerInfo::kLoginTimeFieldNumber;
const int PlayerInfo::kRoleLevelFieldNumber;
const int PlayerInfo::kMetierIdFieldNumber;
const int PlayerInfo::kCpuIdFieldNumber;
const int PlayerInfo::kDiskIdFieldNumber;
const int PlayerInfo::kMacFieldNumber;
const int PlayerInfo::kLineIdFieldNumber;
const int PlayerInfo::kMapIdFieldNumber;
const int PlayerInfo::kGameIdFieldNumber;
#endif  // !_MSC_VER

PlayerInfo::PlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerInfo::InitAsDefaultInstance() {}

PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  account_name_ = const_cast< ::std::string*>(&_default_account_name_);
  role_id_ = 0u;
  role_name_ = const_cast< ::std::string*>(&_default_role_name_);
  login_time_ = 0;
  role_level_ = 0;
  metier_id_ = 0;
  cpu_id_ = 0;
  disk_id_ = 0;
  mac_ = const_cast< ::std::string*>(&_default_mac_);
  line_id_ = 0;
  map_id_ = 0;
  game_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerInfo::~PlayerInfo() {
  SharedDtor();
}

void PlayerInfo::SharedDtor() {
  if (account_name_ != &_default_account_name_) {
    delete account_name_;
  }
  if (role_name_ != &_default_role_name_) {
    delete role_name_;
  }
  if (mac_ != &_default_mac_) {
    delete mac_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerInfo_descriptor_;
}

const PlayerInfo& PlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

PlayerInfo* PlayerInfo::default_instance_ = NULL;

PlayerInfo* PlayerInfo::New() const {
  return new PlayerInfo;
}

void PlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    if (_has_bit(1)) {
      if (account_name_ != &_default_account_name_) {
        account_name_->clear();
      }
    }
    role_id_ = 0u;
    if (_has_bit(3)) {
      if (role_name_ != &_default_role_name_) {
        role_name_->clear();
      }
    }
    login_time_ = 0;
    role_level_ = 0;
    metier_id_ = 0;
    cpu_id_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    disk_id_ = 0;
    if (_has_bit(9)) {
      if (mac_ != &_default_mac_) {
        mac_->clear();
      }
    }
    line_id_ = 0;
    map_id_ = 0;
    game_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &account_id_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_account_name;
        break;
      }
      
      // optional string account_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_account_name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_account_name()));
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }
      
      // optional uint32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &role_id_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_role_name;
        break;
      }
      
      // optional string role_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_role_name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_role_name()));
        if (input->ExpectTag(40)) goto parse_login_time;
        break;
      }
      
      // optional int32 login_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_login_time:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &login_time_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_role_level;
        break;
      }
      
      // optional int32 role_level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_level:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &role_level_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_metier_id;
        break;
      }
      
      // optional int32 metier_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_metier_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &metier_id_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_cpu_id;
        break;
      }
      
      // optional int32 cpu_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_cpu_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &cpu_id_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_disk_id;
        break;
      }
      
      // optional int32 disk_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_disk_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &disk_id_));
        _set_bit(8);
        if (input->ExpectTag(82)) goto parse_mac;
        break;
      }
      
      // optional string mac = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_mac:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_mac()));
        if (input->ExpectTag(88)) goto parse_line_id;
        break;
      }
      
      // optional int32 line_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_line_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &line_id_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_map_id;
        break;
      }
      
      // optional int32 map_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_map_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &map_id_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_game_id;
        break;
      }
      
      // optional int32 game_id = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_game_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &game_id_));
        _set_bit(12);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PlayerInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->account_id(), output);
  }
  
  // optional string account_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->account_name(), output);
  }
  
  // optional uint32 role_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->role_id(), output);
  }
  
  // optional string role_name = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->role_name(), output);
  }
  
  // optional int32 login_time = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(5, this->login_time(), output);
  }
  
  // optional int32 role_level = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(6, this->role_level(), output);
  }
  
  // optional int32 metier_id = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(7, this->metier_id(), output);
  }
  
  // optional int32 cpu_id = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(8, this->cpu_id(), output);
  }
  
  // optional int32 disk_id = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(9, this->disk_id(), output);
  }
  
  // optional string mac = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteString(10, this->mac(), output);
  }
  
  // optional int32 line_id = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(11, this->line_id(), output);
  }
  
  // optional int32 map_id = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(12, this->map_id(), output);
  }
  
  // optional int32 game_id = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(13, this->game_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->account_id(), target);
  }
  
  // optional string account_name = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->account_name(), target);
  }
  
  // optional uint32 role_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->role_id(), target);
  }
  
  // optional string role_name = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->role_name(), target);
  }
  
  // optional int32 login_time = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(5, this->login_time(), target);
  }
  
  // optional int32 role_level = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(6, this->role_level(), target);
  }
  
  // optional int32 metier_id = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(7, this->metier_id(), target);
  }
  
  // optional int32 cpu_id = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(8, this->cpu_id(), target);
  }
  
  // optional int32 disk_id = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(9, this->disk_id(), target);
  }
  
  // optional string mac = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(10, this->mac(), target);
  }
  
  // optional int32 line_id = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(11, this->line_id(), target);
  }
  
  // optional int32 map_id = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(12, this->map_id(), target);
  }
  
  // optional int32 game_id = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(13, this->game_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->account_id());
    }
    
    // optional string account_name = 2;
    if (has_account_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->account_name());
    }
    
    // optional uint32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->role_id());
    }
    
    // optional string role_name = 4;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->role_name());
    }
    
    // optional int32 login_time = 5;
    if (has_login_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->login_time());
    }
    
    // optional int32 role_level = 6;
    if (has_role_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->role_level());
    }
    
    // optional int32 metier_id = 7;
    if (has_metier_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->metier_id());
    }
    
    // optional int32 cpu_id = 8;
    if (has_cpu_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->cpu_id());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 disk_id = 9;
    if (has_disk_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->disk_id());
    }
    
    // optional string mac = 10;
    if (has_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->mac());
    }
    
    // optional int32 line_id = 11;
    if (has_line_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->line_id());
    }
    
    // optional int32 map_id = 12;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->map_id());
    }
    
    // optional int32 game_id = 13;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->game_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerInfo::MergeFrom(const PlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_account_id(from.account_id());
    }
    if (from._has_bit(1)) {
      set_account_name(from.account_name());
    }
    if (from._has_bit(2)) {
      set_role_id(from.role_id());
    }
    if (from._has_bit(3)) {
      set_role_name(from.role_name());
    }
    if (from._has_bit(4)) {
      set_login_time(from.login_time());
    }
    if (from._has_bit(5)) {
      set_role_level(from.role_level());
    }
    if (from._has_bit(6)) {
      set_metier_id(from.metier_id());
    }
    if (from._has_bit(7)) {
      set_cpu_id(from.cpu_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_disk_id(from.disk_id());
    }
    if (from._has_bit(9)) {
      set_mac(from.mac());
    }
    if (from._has_bit(10)) {
      set_line_id(from.line_id());
    }
    if (from._has_bit(11)) {
      set_map_id(from.map_id());
    }
    if (from._has_bit(12)) {
      set_game_id(from.game_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfo::Swap(PlayerInfo* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(account_name_, other->account_name_);
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(login_time_, other->login_time_);
    std::swap(role_level_, other->role_level_);
    std::swap(metier_id_, other->metier_id_);
    std::swap(cpu_id_, other->cpu_id_);
    std::swap(disk_id_, other->disk_id_);
    std::swap(mac_, other->mac_);
    std::swap(line_id_, other->line_id_);
    std::swap(map_id_, other->map_id_);
    std::swap(game_id_, other->game_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PlayerInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PlayerInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PlayerInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PlayerInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int IPInfo::kIpFieldNumber;
const int IPInfo::kRoleNumFieldNumber;
const int IPInfo::kPlayerInfoFieldNumber;
#endif  // !_MSC_VER

IPInfo::IPInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IPInfo::InitAsDefaultInstance() {}

IPInfo::IPInfo(const IPInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IPInfo::SharedCtor() {
  _cached_size_ = 0;
  ip_ = 0u;
  role_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IPInfo::~IPInfo() {
  SharedDtor();
}

void IPInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* IPInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IPInfo_descriptor_;
}

const IPInfo& IPInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

IPInfo* IPInfo::default_instance_ = NULL;

IPInfo* IPInfo::New() const {
  return new IPInfo;
}

void IPInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ip_ = 0u;
    role_num_ = 0u;
  }
  player_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IPInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ip_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_role_num;
        break;
      }
      
      // optional uint32 role_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_num:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &role_num_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_player_info;
        break;
      }
      
      // repeated .PlayerInfo player_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_player_info:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_player_info()));
        if (input->ExpectTag(26)) goto parse_player_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IPInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    IPInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ip = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->ip(), output);
  }
  
  // optional uint32 role_num = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->role_num(), output);
  }
  
  // repeated .PlayerInfo player_info = 3;
  for (int i = 0; i < this->player_info_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->player_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IPInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ip = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->ip(), target);
  }
  
  // optional uint32 role_num = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->role_num(), target);
  }
  
  // repeated .PlayerInfo player_info = 3;
  for (int i = 0; i < this->player_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->player_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IPInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ip());
    }
    
    // optional uint32 role_num = 2;
    if (has_role_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->role_num());
    }
    
  }
  // repeated .PlayerInfo player_info = 3;
  total_size += 1 * this->player_info_size();
  for (int i = 0; i < this->player_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->player_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void IPInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IPInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IPInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IPInfo::MergeFrom(const IPInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_info_.MergeFrom(from.player_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_ip(from.ip());
    }
    if (from._has_bit(1)) {
      set_role_num(from.role_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IPInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPInfo::CopyFrom(const IPInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPInfo::Swap(IPInfo* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(role_num_, other->role_num_);
    player_info_.Swap(&other->player_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool IPInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* IPInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* IPInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return IPInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMsgUserInfoByIPResult::kSessionIdFieldNumber;
const int CGMMsgUserInfoByIPResult::kFdFieldNumber;
const int CGMMsgUserInfoByIPResult::kIpinfoFieldNumber;
const int CGMMsgUserInfoByIPResult::kZeroIPFieldNumber;
#endif  // !_MSC_VER

CGMMsgUserInfoByIPResult::CGMMsgUserInfoByIPResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMsgUserInfoByIPResult::InitAsDefaultInstance() {}

CGMMsgUserInfoByIPResult::CGMMsgUserInfoByIPResult(const CGMMsgUserInfoByIPResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMsgUserInfoByIPResult::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  zeroip_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMsgUserInfoByIPResult::~CGMMsgUserInfoByIPResult() {
  SharedDtor();
}

void CGMMsgUserInfoByIPResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMsgUserInfoByIPResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMsgUserInfoByIPResult_descriptor_;
}

const CGMMsgUserInfoByIPResult& CGMMsgUserInfoByIPResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMsgUserInfoByIPResult* CGMMsgUserInfoByIPResult::default_instance_ = NULL;

CGMMsgUserInfoByIPResult* CGMMsgUserInfoByIPResult::New() const {
  return new CGMMsgUserInfoByIPResult;
}

void CGMMsgUserInfoByIPResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    zeroip_ = 0u;
  }
  ipinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMsgUserInfoByIPResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_ipinfo;
        break;
      }
      
      // repeated .IPInfo ipinfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ipinfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_ipinfo()));
        if (input->ExpectTag(26)) goto parse_ipinfo;
        if (input->ExpectTag(32)) goto parse_ZeroIP;
        break;
      }
      
      // optional uint32 ZeroIP = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ZeroIP:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &zeroip_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMsgUserInfoByIPResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMsgUserInfoByIPResult::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // repeated .IPInfo ipinfo = 3;
  for (int i = 0; i < this->ipinfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->ipinfo(i), output);
  }
  
  // optional uint32 ZeroIP = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->zeroip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMsgUserInfoByIPResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // repeated .IPInfo ipinfo = 3;
  for (int i = 0; i < this->ipinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->ipinfo(i), target);
  }
  
  // optional uint32 ZeroIP = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->zeroip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMsgUserInfoByIPResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional uint32 ZeroIP = 4;
    if (has_zeroip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->zeroip());
    }
    
  }
  // repeated .IPInfo ipinfo = 3;
  total_size += 1 * this->ipinfo_size();
  for (int i = 0; i < this->ipinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->ipinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMsgUserInfoByIPResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMsgUserInfoByIPResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMsgUserInfoByIPResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMsgUserInfoByIPResult::MergeFrom(const CGMMsgUserInfoByIPResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  ipinfo_.MergeFrom(from.ipinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(3)) {
      set_zeroip(from.zeroip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMsgUserInfoByIPResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMsgUserInfoByIPResult::CopyFrom(const CGMMsgUserInfoByIPResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMsgUserInfoByIPResult::Swap(CGMMsgUserInfoByIPResult* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    ipinfo_.Swap(&other->ipinfo_);
    std::swap(zeroip_, other->zeroip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMsgUserInfoByIPResult::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMsgUserInfoByIPResult::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMsgUserInfoByIPResult::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMsgUserInfoByIPResult_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CGMMessageQueryRoleMailCmd::kSessionIdFieldNumber;
const int CGMMessageQueryRoleMailCmd::kFdFieldNumber;
const int CGMMessageQueryRoleMailCmd::kRoleIdFieldNumber;
const int CGMMessageQueryRoleMailCmd::kPageFieldNumber;
#endif  // !_MSC_VER

CGMMessageQueryRoleMailCmd::CGMMessageQueryRoleMailCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMMessageQueryRoleMailCmd::InitAsDefaultInstance() {}

CGMMessageQueryRoleMailCmd::CGMMessageQueryRoleMailCmd(const CGMMessageQueryRoleMailCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMMessageQueryRoleMailCmd::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  fd_ = 0u;
  role_id_ = 0u;
  page_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMMessageQueryRoleMailCmd::~CGMMessageQueryRoleMailCmd() {
  SharedDtor();
}

void CGMMessageQueryRoleMailCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CGMMessageQueryRoleMailCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageQueryRoleMailCmd_descriptor_;
}

const CGMMessageQueryRoleMailCmd& CGMMessageQueryRoleMailCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmmessage_5fpb_2ehxx();  return *default_instance_;
}

CGMMessageQueryRoleMailCmd* CGMMessageQueryRoleMailCmd::default_instance_ = NULL;

CGMMessageQueryRoleMailCmd* CGMMessageQueryRoleMailCmd::New() const {
  return new CGMMessageQueryRoleMailCmd;
}

void CGMMessageQueryRoleMailCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0u;
    fd_ = 0u;
    role_id_ = 0u;
    page_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMMessageQueryRoleMailCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }
      
      // optional uint32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &role_id_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_page;
        break;
      }
      
      // optional int32 page = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_page:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &page_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMMessageQueryRoleMailCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CGMMessageQueryRoleMailCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->session_id(), output);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fd(), output);
  }
  
  // optional uint32 role_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->role_id(), output);
  }
  
  // optional int32 page = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->page(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMMessageQueryRoleMailCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->session_id(), target);
  }
  
  // optional uint32 fd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fd(), target);
  }
  
  // optional uint32 role_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->role_id(), target);
  }
  
  // optional int32 page = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->page(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMMessageQueryRoleMailCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional uint32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->role_id());
    }
    
    // optional int32 page = 4;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->page());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CGMMessageQueryRoleMailCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMMessageQueryRoleMailCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMMessageQueryRoleMailCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMMessageQueryRoleMailCmd::MergeFrom(const CGMMessageQueryRoleMailCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_fd(from.fd());
    }
    if (from._has_bit(2)) {
      set_role_id(from.role_id());
    }
    if (from._has_bit(3)) {
      set_page(from.page());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMMessageQueryRoleMailCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageQueryRoleMailCmd::CopyFrom(const CGMMessageQueryRoleMailCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMMessageQueryRoleMailCmd::Swap(CGMMessageQueryRoleMailCmd* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(fd_, other->fd_);
    std::swap(role_id_, other->role_id_);
    std::swap(page_, other->page_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CGMMessageQueryRoleMailCmd::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CGMMessageQueryRoleMailCmd::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CGMMessageQueryRoleMailCmd::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CGMMessageQueryRoleMailCmd_reflection_;
}
