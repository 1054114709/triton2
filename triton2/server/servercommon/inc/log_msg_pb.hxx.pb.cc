// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "log_msg_pb.hxx.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>
#ifdef LEAK_CHK_DEBUG_NEW
#include "debug_new.h"
#endif

namespace {

const ::google::protobuf::Descriptor* CMessageHandleTimeOut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageHandleTimeOut_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLogRoleLogout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLogRoleLogout_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLogRoleGhost_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLogRoleGhost_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLogRoleUpgrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLogRoleUpgrade_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLogItemUpgrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLogItemUpgrade_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLogRoleOpItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLogRoleOpItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLogRoleOpExp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLogRoleOpExp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLogRoleBuffer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLogRoleBuffer_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLogRoleOpMoney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLogRoleOpMoney_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLogRoleBeKilled_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLogRoleBeKilled_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLogRoleOpTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLogRoleOpTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBDropedItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBDropedItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLogOrgeDropItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLogOrgeDropItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLogUseItemDropItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLogUseItemDropItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLogItemDestroy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLogItemDestroy_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLogFamily_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLogFamily_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLogCorps_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLogCorps_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLogWorld_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLogWorld_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLogMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLogMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBAttribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBAttribute_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCatalog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCatalog_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageServerStatInfoNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageServerStatInfoNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLogValuableEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLogValuableEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLogChat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLogChat_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLogRepetion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLogRepetion_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLogBossOgreDie_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLogBossOgreDie_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLifeSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLifeSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageExchangeLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageExchangeLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLogMatrix_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLogMatrix_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLogRoleDamage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLogRoleDamage_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLogRoleRepeScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLogRoleRepeScore_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LOG_MSG_ID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EPackType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EUpgradeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EExpAction_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EBufferAction_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EItemAction_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EMoneyAction_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETaskAction_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EFamilyAttr_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ECorpsAttr_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EOrganAction_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EWorldAction_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EM_MAILACTION_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EM_STAT_CATALOG_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EM_LIFESKILL_ACTIONKIND_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EMatrixAction_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ERoleDamage_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ERoleRepeScore_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_log_5fmsg_5fpb_2ehxx() {
  protobuf_AddDesc_log_5fmsg_5fpb_2ehxx();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "log_msg_pb.hxx");
  GOOGLE_CHECK(file != NULL);
  CMessageHandleTimeOut_descriptor_ = file->message_type(0);
  static const int CMessageHandleTimeOut_offsets_[1] = {
  };
  CMessageHandleTimeOut_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageHandleTimeOut_descriptor_,
      CMessageHandleTimeOut::default_instance_,
      CMessageHandleTimeOut_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageHandleTimeOut, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageHandleTimeOut, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageHandleTimeOut));
  CMessageLogRoleLogout_descriptor_ = file->message_type(1);
  static const int CMessageLogRoleLogout_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleLogout, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleLogout, optime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleLogout, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleLogout, repetionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleLogout, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleLogout, rolelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleLogout, metierid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleLogout, loginip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleLogout, logintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleLogout, logouttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleLogout, leavereason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleLogout, savereason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleLogout, saveresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleLogout, kickreason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleLogout, kickcode_),
  };
  CMessageLogRoleLogout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLogRoleLogout_descriptor_,
      CMessageLogRoleLogout::default_instance_,
      CMessageLogRoleLogout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleLogout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleLogout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLogRoleLogout));
  CMessageLogRoleGhost_descriptor_ = file->message_type(2);
  static const int CMessageLogRoleGhost_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleGhost, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleGhost, optime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleGhost, packtype_),
  };
  CMessageLogRoleGhost_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLogRoleGhost_descriptor_,
      CMessageLogRoleGhost::default_instance_,
      CMessageLogRoleGhost_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleGhost, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleGhost, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLogRoleGhost));
  CMessageLogRoleUpgrade_descriptor_ = file->message_type(3);
  static const int CMessageLogRoleUpgrade_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleUpgrade, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleUpgrade, upgradetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleUpgrade, metierid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleUpgrade, rolelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleUpgrade, upgradetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleUpgrade, subtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleUpgrade, currentlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleUpgrade, deltalevel_),
  };
  CMessageLogRoleUpgrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLogRoleUpgrade_descriptor_,
      CMessageLogRoleUpgrade::default_instance_,
      CMessageLogRoleUpgrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleUpgrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleUpgrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLogRoleUpgrade));
  CMessageLogItemUpgrade_descriptor_ = file->message_type(4);
  static const int CMessageLogItemUpgrade_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogItemUpgrade, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogItemUpgrade, itemguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogItemUpgrade, uptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogItemUpgrade, uptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogItemUpgrade, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogItemUpgrade, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogItemUpgrade, prevlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogItemUpgrade, currlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogItemUpgrade, item1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogItemUpgrade, item2_),
  };
  CMessageLogItemUpgrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLogItemUpgrade_descriptor_,
      CMessageLogItemUpgrade::default_instance_,
      CMessageLogItemUpgrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogItemUpgrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogItemUpgrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLogItemUpgrade));
  CMessageLogRoleOpItem_descriptor_ = file->message_type(5);
  static const int CMessageLogRoleOpItem_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpItem, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpItem, optime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpItem, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpItem, repetionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpItem, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpItem, metierid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpItem, rolelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpItem, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpItem, itemguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpItem, itemtotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpItem, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpItem, opparam1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpItem, opparam2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpItem, opparam3_),
  };
  CMessageLogRoleOpItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLogRoleOpItem_descriptor_,
      CMessageLogRoleOpItem::default_instance_,
      CMessageLogRoleOpItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLogRoleOpItem));
  CMessageLogRoleOpExp_descriptor_ = file->message_type(6);
  static const int CMessageLogRoleOpExp_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpExp, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpExp, optime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpExp, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpExp, repetionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpExp, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpExp, metierid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpExp, rolelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpExp, exptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpExp, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpExp, curexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpExp, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpExp, deltaexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpExp, opparam1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpExp, opparam2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpExp, opparam3_),
  };
  CMessageLogRoleOpExp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLogRoleOpExp_descriptor_,
      CMessageLogRoleOpExp::default_instance_,
      CMessageLogRoleOpExp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpExp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpExp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLogRoleOpExp));
  CMessageLogRoleBuffer_descriptor_ = file->message_type(7);
  static const int CMessageLogRoleBuffer_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleBuffer, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleBuffer, optime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleBuffer, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleBuffer, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleBuffer, persisttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleBuffer, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleBuffer, buffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleBuffer, opparam1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleBuffer, opparam2_),
  };
  CMessageLogRoleBuffer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLogRoleBuffer_descriptor_,
      CMessageLogRoleBuffer::default_instance_,
      CMessageLogRoleBuffer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleBuffer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleBuffer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLogRoleBuffer));
  CMessageLogRoleOpMoney_descriptor_ = file->message_type(8);
  static const int CMessageLogRoleOpMoney_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpMoney, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpMoney, optime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpMoney, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpMoney, repetionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpMoney, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpMoney, metierid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpMoney, rolelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpMoney, moneytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpMoney, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpMoney, curmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpMoney, deltamoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpMoney, opparam1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpMoney, opparam2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpMoney, opparam3_),
  };
  CMessageLogRoleOpMoney_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLogRoleOpMoney_descriptor_,
      CMessageLogRoleOpMoney::default_instance_,
      CMessageLogRoleOpMoney_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpMoney, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpMoney, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLogRoleOpMoney));
  CMessageLogRoleBeKilled_descriptor_ = file->message_type(9);
  static const int CMessageLogRoleBeKilled_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleBeKilled, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleBeKilled, optime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleBeKilled, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleBeKilled, repetionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleBeKilled, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleBeKilled, metierid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleBeKilled, rolelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleBeKilled, killertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleBeKilled, killerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleBeKilled, killermetier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleBeKilled, killerlevel_),
  };
  CMessageLogRoleBeKilled_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLogRoleBeKilled_descriptor_,
      CMessageLogRoleBeKilled::default_instance_,
      CMessageLogRoleBeKilled_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleBeKilled, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleBeKilled, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLogRoleBeKilled));
  CMessageLogRoleOpTask_descriptor_ = file->message_type(10);
  static const int CMessageLogRoleOpTask_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpTask, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpTask, optime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpTask, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpTask, repetionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpTask, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpTask, metierid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpTask, rolelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpTask, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpTask, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpTask, opparam1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpTask, opparam2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpTask, opparam3_),
  };
  CMessageLogRoleOpTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLogRoleOpTask_descriptor_,
      CMessageLogRoleOpTask::default_instance_,
      CMessageLogRoleOpTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleOpTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLogRoleOpTask));
  PBDropedItem_descriptor_ = file->message_type(11);
  static const int PBDropedItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDropedItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDropedItem, itemtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDropedItem, itemlevel_),
  };
  PBDropedItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBDropedItem_descriptor_,
      PBDropedItem::default_instance_,
      PBDropedItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDropedItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDropedItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBDropedItem));
  CMessageLogOrgeDropItem_descriptor_ = file->message_type(12);
  static const int CMessageLogOrgeDropItem_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogOrgeDropItem, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogOrgeDropItem, npcindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogOrgeDropItem, npclevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogOrgeDropItem, optime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogOrgeDropItem, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogOrgeDropItem, repetionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogOrgeDropItem, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogOrgeDropItem, dropitem_),
  };
  CMessageLogOrgeDropItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLogOrgeDropItem_descriptor_,
      CMessageLogOrgeDropItem::default_instance_,
      CMessageLogOrgeDropItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogOrgeDropItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogOrgeDropItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLogOrgeDropItem));
  CMessageLogUseItemDropItem_descriptor_ = file->message_type(13);
  static const int CMessageLogUseItemDropItem_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogUseItemDropItem, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogUseItemDropItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogUseItemDropItem, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogUseItemDropItem, param2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogUseItemDropItem, optime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogUseItemDropItem, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogUseItemDropItem, repetionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogUseItemDropItem, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogUseItemDropItem, dropitem_),
  };
  CMessageLogUseItemDropItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLogUseItemDropItem_descriptor_,
      CMessageLogUseItemDropItem::default_instance_,
      CMessageLogUseItemDropItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogUseItemDropItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogUseItemDropItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLogUseItemDropItem));
  CMessageLogItemDestroy_descriptor_ = file->message_type(14);
  static const int CMessageLogItemDestroy_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogItemDestroy, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogItemDestroy, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogItemDestroy, optime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogItemDestroy, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogItemDestroy, repetionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogItemDestroy, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogItemDestroy, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogItemDestroy, posy_),
  };
  CMessageLogItemDestroy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLogItemDestroy_descriptor_,
      CMessageLogItemDestroy::default_instance_,
      CMessageLogItemDestroy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogItemDestroy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogItemDestroy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLogItemDestroy));
  CMessageLogFamily_descriptor_ = file->message_type(15);
  static const int CMessageLogFamily_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogFamily, familyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogFamily, oproleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogFamily, optime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogFamily, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogFamily, attrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogFamily, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogFamily, param2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogFamily, param3_),
  };
  CMessageLogFamily_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLogFamily_descriptor_,
      CMessageLogFamily::default_instance_,
      CMessageLogFamily_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogFamily, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogFamily, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLogFamily));
  CMessageLogCorps_descriptor_ = file->message_type(16);
  static const int CMessageLogCorps_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogCorps, corpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogCorps, oproleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogCorps, optime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogCorps, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogCorps, attrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogCorps, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogCorps, param2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogCorps, param3_),
  };
  CMessageLogCorps_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLogCorps_descriptor_,
      CMessageLogCorps::default_instance_,
      CMessageLogCorps_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogCorps, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogCorps, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLogCorps));
  CMessageLogWorld_descriptor_ = file->message_type(17);
  static const int CMessageLogWorld_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogWorld, worldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogWorld, optime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogWorld, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogWorld, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogWorld, param2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogWorld, param3_),
  };
  CMessageLogWorld_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLogWorld_descriptor_,
      CMessageLogWorld::default_instance_,
      CMessageLogWorld_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogWorld, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogWorld, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLogWorld));
  CMessageLogMail_descriptor_ = file->message_type(18);
  static const int CMessageLogMail_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogMail, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogMail, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogMail, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogMail, optime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogMail, mailtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogMail, mailtitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogMail, totalnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogMail, itemid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogMail, itemnum1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogMail, itemid2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogMail, itemnum2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogMail, itemid3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogMail, itemnum3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogMail, itemid4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogMail, itemnum4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogMail, itemid5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogMail, itemnum5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogMail, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogMail, moneyneedcallback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogMail, desroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogMail, srcname_),
  };
  CMessageLogMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLogMail_descriptor_,
      CMessageLogMail::default_instance_,
      CMessageLogMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLogMail));
  PBAttribute_descriptor_ = file->message_type(19);
  static const int PBAttribute_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAttribute, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAttribute, value_),
  };
  PBAttribute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBAttribute_descriptor_,
      PBAttribute::default_instance_,
      PBAttribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAttribute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAttribute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBAttribute));
  PBCatalog_descriptor_ = file->message_type(20);
  static const int PBCatalog_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCatalog, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCatalog, attr_),
  };
  PBCatalog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCatalog_descriptor_,
      PBCatalog::default_instance_,
      PBCatalog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCatalog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCatalog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCatalog));
  CMessageServerStatInfoNotify_descriptor_ = file->message_type(21);
  static const int CMessageServerStatInfoNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageServerStatInfoNotify, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageServerStatInfoNotify, statinfo_),
  };
  CMessageServerStatInfoNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageServerStatInfoNotify_descriptor_,
      CMessageServerStatInfoNotify::default_instance_,
      CMessageServerStatInfoNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageServerStatInfoNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageServerStatInfoNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageServerStatInfoNotify));
  CMessageLogValuableEquip_descriptor_ = file->message_type(22);
  static const int CMessageLogValuableEquip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogValuableEquip, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogValuableEquip, itemobj_),
  };
  CMessageLogValuableEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLogValuableEquip_descriptor_,
      CMessageLogValuableEquip::default_instance_,
      CMessageLogValuableEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogValuableEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogValuableEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLogValuableEquip));
  CMessageLogChat_descriptor_ = file->message_type(23);
  static const int CMessageLogChat_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogChat, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogChat, chatmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogChat, gatewayid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogChat, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogChat, optime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogChat, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogChat, rolename_),
  };
  CMessageLogChat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLogChat_descriptor_,
      CMessageLogChat::default_instance_,
      CMessageLogChat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogChat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogChat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLogChat));
  CMessageLogRepetion_descriptor_ = file->message_type(24);
  static const int CMessageLogRepetion_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRepetion, repetionkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRepetion, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRepetion, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRepetion, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRepetion, parame1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRepetion, parame2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRepetion, optime_),
  };
  CMessageLogRepetion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLogRepetion_descriptor_,
      CMessageLogRepetion::default_instance_,
      CMessageLogRepetion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRepetion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRepetion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLogRepetion));
  CMessageLogBossOgreDie_descriptor_ = file->message_type(25);
  static const int CMessageLogBossOgreDie_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogBossOgreDie, deathtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogBossOgreDie, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogBossOgreDie, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogBossOgreDie, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogBossOgreDie, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogBossOgreDie, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogBossOgreDie, killerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogBossOgreDie, damageinfo_),
  };
  CMessageLogBossOgreDie_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLogBossOgreDie_descriptor_,
      CMessageLogBossOgreDie::default_instance_,
      CMessageLogBossOgreDie_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogBossOgreDie, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogBossOgreDie, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLogBossOgreDie));
  CMessageLifeSkill_descriptor_ = file->message_type(26);
  static const int CMessageLifeSkill_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLifeSkill, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLifeSkill, optime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLifeSkill, lifeskilltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLifeSkill, lifeskillkind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLifeSkill, lifeskilllevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLifeSkill, specializeddegree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLifeSkill, actionkind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLifeSkill, composeid_),
  };
  CMessageLifeSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLifeSkill_descriptor_,
      CMessageLifeSkill::default_instance_,
      CMessageLifeSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLifeSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLifeSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLifeSkill));
  CMessageExchangeLog_descriptor_ = file->message_type(27);
  static const int CMessageExchangeLog_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExchangeLog, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExchangeLog, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExchangeLog, optime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExchangeLog, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExchangeLog, yb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExchangeLog, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExchangeLog, detail_id_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExchangeLog, detail_id_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExchangeLog, parame1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExchangeLog, parame2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExchangeLog, parame3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExchangeLog, parame4_),
  };
  CMessageExchangeLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageExchangeLog_descriptor_,
      CMessageExchangeLog::default_instance_,
      CMessageExchangeLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExchangeLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExchangeLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageExchangeLog));
  CMessageLogMatrix_descriptor_ = file->message_type(28);
  static const int CMessageLogMatrix_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogMatrix, slave_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogMatrix, master_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogMatrix, optime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogMatrix, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogMatrix, parame1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogMatrix, parame2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogMatrix, parame3_),
  };
  CMessageLogMatrix_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLogMatrix_descriptor_,
      CMessageLogMatrix::default_instance_,
      CMessageLogMatrix_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogMatrix, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogMatrix, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLogMatrix));
  CMessageLogRoleDamage_descriptor_ = file->message_type(29);
  static const int CMessageLogRoleDamage_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleDamage, srccharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleDamage, descharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleDamage, optime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleDamage, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleDamage, calcdamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleDamage, realdamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleDamage, srcpatt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleDamage, srcmatt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleDamage, despdef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleDamage, desmdef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleDamage, despimu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleDamage, desmimu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleDamage, srcdhit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleDamage, desddef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleDamage, srctitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleDamage, destitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleDamage, srcres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleDamage, desres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleDamage, srcbuff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleDamage, desbuff_),
  };
  CMessageLogRoleDamage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLogRoleDamage_descriptor_,
      CMessageLogRoleDamage::default_instance_,
      CMessageLogRoleDamage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleDamage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleDamage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLogRoleDamage));
  CMessageLogRoleRepeScore_descriptor_ = file->message_type(30);
  static const int CMessageLogRoleRepeScore_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleRepeScore, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleRepeScore, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleRepeScore, optime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleRepeScore, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleRepeScore, repeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleRepeScore, currentscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleRepeScore, deltascore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleRepeScore, scoretype_),
  };
  CMessageLogRoleRepeScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLogRoleRepeScore_descriptor_,
      CMessageLogRoleRepeScore::default_instance_,
      CMessageLogRoleRepeScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleRepeScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLogRoleRepeScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLogRoleRepeScore));
  LOG_MSG_ID_descriptor_ = file->enum_type(0);
  EPackType_descriptor_ = file->enum_type(1);
  EUpgradeType_descriptor_ = file->enum_type(2);
  EExpAction_descriptor_ = file->enum_type(3);
  EBufferAction_descriptor_ = file->enum_type(4);
  EItemAction_descriptor_ = file->enum_type(5);
  EMoneyAction_descriptor_ = file->enum_type(6);
  ETaskAction_descriptor_ = file->enum_type(7);
  EFamilyAttr_descriptor_ = file->enum_type(8);
  ECorpsAttr_descriptor_ = file->enum_type(9);
  EOrganAction_descriptor_ = file->enum_type(10);
  EWorldAction_descriptor_ = file->enum_type(11);
  EM_MAILACTION_descriptor_ = file->enum_type(12);
  EM_STAT_CATALOG_descriptor_ = file->enum_type(13);
  EM_LIFESKILL_ACTIONKIND_descriptor_ = file->enum_type(14);
  EMatrixAction_descriptor_ = file->enum_type(15);
  ERoleDamage_descriptor_ = file->enum_type(16);
  ERoleRepeScore_descriptor_ = file->enum_type(17);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_log_5fmsg_5fpb_2ehxx);
}

void protobuf_RegisterTypes() {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageHandleTimeOut_descriptor_, &CMessageHandleTimeOut::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLogRoleLogout_descriptor_, &CMessageLogRoleLogout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLogRoleGhost_descriptor_, &CMessageLogRoleGhost::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLogRoleUpgrade_descriptor_, &CMessageLogRoleUpgrade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLogItemUpgrade_descriptor_, &CMessageLogItemUpgrade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLogRoleOpItem_descriptor_, &CMessageLogRoleOpItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLogRoleOpExp_descriptor_, &CMessageLogRoleOpExp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLogRoleBuffer_descriptor_, &CMessageLogRoleBuffer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLogRoleOpMoney_descriptor_, &CMessageLogRoleOpMoney::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLogRoleBeKilled_descriptor_, &CMessageLogRoleBeKilled::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLogRoleOpTask_descriptor_, &CMessageLogRoleOpTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBDropedItem_descriptor_, &PBDropedItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLogOrgeDropItem_descriptor_, &CMessageLogOrgeDropItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLogUseItemDropItem_descriptor_, &CMessageLogUseItemDropItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLogItemDestroy_descriptor_, &CMessageLogItemDestroy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLogFamily_descriptor_, &CMessageLogFamily::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLogCorps_descriptor_, &CMessageLogCorps::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLogWorld_descriptor_, &CMessageLogWorld::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLogMail_descriptor_, &CMessageLogMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBAttribute_descriptor_, &PBAttribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCatalog_descriptor_, &PBCatalog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageServerStatInfoNotify_descriptor_, &CMessageServerStatInfoNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLogValuableEquip_descriptor_, &CMessageLogValuableEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLogChat_descriptor_, &CMessageLogChat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLogRepetion_descriptor_, &CMessageLogRepetion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLogBossOgreDie_descriptor_, &CMessageLogBossOgreDie::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLifeSkill_descriptor_, &CMessageLifeSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageExchangeLog_descriptor_, &CMessageExchangeLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLogMatrix_descriptor_, &CMessageLogMatrix::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLogRoleDamage_descriptor_, &CMessageLogRoleDamage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLogRoleRepeScore_descriptor_, &CMessageLogRoleRepeScore::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_log_5fmsg_5fpb_2ehxx() {
  delete CMessageHandleTimeOut::default_instance_;
  delete CMessageHandleTimeOut_reflection_;
  delete CMessageLogRoleLogout::default_instance_;
  delete CMessageLogRoleLogout_reflection_;
  delete CMessageLogRoleGhost::default_instance_;
  delete CMessageLogRoleGhost_reflection_;
  delete CMessageLogRoleUpgrade::default_instance_;
  delete CMessageLogRoleUpgrade_reflection_;
  delete CMessageLogItemUpgrade::default_instance_;
  delete CMessageLogItemUpgrade_reflection_;
  delete CMessageLogRoleOpItem::default_instance_;
  delete CMessageLogRoleOpItem_reflection_;
  delete CMessageLogRoleOpExp::default_instance_;
  delete CMessageLogRoleOpExp_reflection_;
  delete CMessageLogRoleBuffer::default_instance_;
  delete CMessageLogRoleBuffer_reflection_;
  delete CMessageLogRoleOpMoney::default_instance_;
  delete CMessageLogRoleOpMoney_reflection_;
  delete CMessageLogRoleBeKilled::default_instance_;
  delete CMessageLogRoleBeKilled_reflection_;
  delete CMessageLogRoleOpTask::default_instance_;
  delete CMessageLogRoleOpTask_reflection_;
  delete PBDropedItem::default_instance_;
  delete PBDropedItem_reflection_;
  delete CMessageLogOrgeDropItem::default_instance_;
  delete CMessageLogOrgeDropItem_reflection_;
  delete CMessageLogUseItemDropItem::default_instance_;
  delete CMessageLogUseItemDropItem_reflection_;
  delete CMessageLogItemDestroy::default_instance_;
  delete CMessageLogItemDestroy_reflection_;
  delete CMessageLogFamily::default_instance_;
  delete CMessageLogFamily_reflection_;
  delete CMessageLogCorps::default_instance_;
  delete CMessageLogCorps_reflection_;
  delete CMessageLogWorld::default_instance_;
  delete CMessageLogWorld_reflection_;
  delete CMessageLogMail::default_instance_;
  delete CMessageLogMail_reflection_;
  delete PBAttribute::default_instance_;
  delete PBAttribute_reflection_;
  delete PBCatalog::default_instance_;
  delete PBCatalog_reflection_;
  delete CMessageServerStatInfoNotify::default_instance_;
  delete CMessageServerStatInfoNotify_reflection_;
  delete CMessageLogValuableEquip::default_instance_;
  delete CMessageLogValuableEquip_reflection_;
  delete CMessageLogChat::default_instance_;
  delete CMessageLogChat_reflection_;
  delete CMessageLogRepetion::default_instance_;
  delete CMessageLogRepetion_reflection_;
  delete CMessageLogBossOgreDie::default_instance_;
  delete CMessageLogBossOgreDie_reflection_;
  delete CMessageLifeSkill::default_instance_;
  delete CMessageLifeSkill_reflection_;
  delete CMessageExchangeLog::default_instance_;
  delete CMessageExchangeLog_reflection_;
  delete CMessageLogMatrix::default_instance_;
  delete CMessageLogMatrix_reflection_;
  delete CMessageLogRoleDamage::default_instance_;
  delete CMessageLogRoleDamage_reflection_;
  delete CMessageLogRoleRepeScore::default_instance_;
  delete CMessageLogRoleRepeScore_reflection_;
}

void protobuf_AddDesc_log_5fmsg_5fpb_2ehxx() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_servermessage_5fpb_2ehxx();
  ::protobuf_AddDesc_property_5fpb_2ehxx();
  #ifndef _NO_PROTOBUF_STR_
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016log_msg_pb.hxx\032\024servermessage_pb.hxx\032\017"
    "property_pb.hxx\"\027\n\025CMessageHandleTimeOut"
    "\"\311\002\n\025CMessageLogRoleLogout\022\016\n\006RoleID\030\001 \001"
    "(\r\022\016\n\006OpTime\030\002 \001(\r\022\016\n\006LineID\030\003 \001(\005\022\022\n\nRe"
    "petionID\030\004 \001(\004\022\r\n\005MapID\030\005 \001(\005\022\021\n\tRoleLev"
    "el\030\006 \001(\005\022\020\n\010MetierID\030\007 \001(\005\022\017\n\007LoginIP\030\010 "
    "\001(\r\022\021\n\tLoginTime\030\t \001(\r\022\022\n\nLogoutTime\030\n \001"
    "(\r\022#\n\013LeaveReason\030\013 \001(\0162\016.EMLeaveReason\022"
    "\022\n\nSaveReason\030\014 \001(\005\022!\n\nSaveResult\030\r \001(\0162"
    "\r.EMSaveResult\022\022\n\nKickReason\030\016 \001(\005\022\020\n\010Ki"
    "ckCode\030\017 \001(\005\"T\n\024CMessageLogRoleGhost\022\016\n\006"
    "RoleID\030\001 \001(\r\022\016\n\006OpTime\030\002 \001(\r\022\034\n\010PackType"
    "\030\003 \001(\0162\n.EPackType\"\301\001\n\026CMessageLogRoleUp"
    "grade\022\016\n\006RoleID\030\001 \001(\r\022\023\n\013UpgradeTime\030\002 \001"
    "(\r\022\020\n\010MetierID\030\003 \001(\r\022\021\n\tRoleLevel\030\004 \001(\r\022"
    "\"\n\013UpgradeType\030\005 \001(\0162\r.EUpgradeType\022\017\n\007S"
    "ubType\030\006 \001(\r\022\024\n\014CurrentLevel\030\007 \001(\r\022\022\n\nDe"
    "ltaLevel\030\010 \001(\r\"\276\001\n\026CMessageLogItemUpgrad"
    "e\022\016\n\006ItemID\030\001 \001(\r\022\020\n\010ItemGUID\030\002 \001(\004\022\016\n\006U"
    "pTime\030\003 \001(\r\022\016\n\006UpType\030\004 \001(\r\022\016\n\006Result\030\005 "
    "\001(\r\022\016\n\006RoleID\030\006 \001(\r\022\021\n\tPrevLevel\030\007 \001(\r\022\021"
    "\n\tCurrLevel\030\010 \001(\r\022\r\n\005Item1\030\t \001(\r\022\r\n\005Item"
    "2\030\n \001(\r\"\233\002\n\025CMessageLogRoleOpItem\022\016\n\006Rol"
    "eID\030\001 \001(\r\022\016\n\006OpTime\030\002 \001(\r\022\016\n\006LineID\030\003 \001("
    "\r\022\022\n\nRepetionID\030\004 \001(\004\022\r\n\005MapID\030\005 \001(\r\022\020\n\010"
    "MetierID\030\006 \001(\r\022\021\n\tRoleLevel\030\007 \001(\r\022\016\n\006Ite"
    "mID\030\010 \001(\r\022\017\n\007ItemNum\030\t \001(\r\022\020\n\010ItemGUID\030\n"
    " \001(\004\022\021\n\tItemTotal\030\013 \001(\r\022\016\n\006OpType\030\014 \001(\r\022"
    "\020\n\010OpParam1\030\r \001(\005\022\020\n\010OpParam2\030\016 \001(\005\022\020\n\010O"
    "pParam3\030\017 \001(\004\"\244\002\n\024CMessageLogRoleOpExp\022\016"
    "\n\006RoleID\030\001 \001(\r\022\016\n\006OpTime\030\002 \001(\r\022\016\n\006LineID"
    "\030\003 \001(\r\022\022\n\nRepetionID\030\004 \001(\004\022\r\n\005MapID\030\005 \001("
    "\r\022\020\n\010MetierID\030\006 \001(\r\022\021\n\tRoleLevel\030\007 \001(\r\022\036"
    "\n\007ExpType\030\010 \001(\0162\r.EUpgradeType\022\016\n\006OpType"
    "\030\t \001(\r\022\016\n\006CurExp\030\n \001(\004\022\014\n\004Team\030\013 \001(\r\022\020\n\010"
    "DeltaExp\030\014 \001(\r\022\020\n\010OpParam1\030\r \001(\005\022\020\n\010OpPa"
    "ram2\030\016 \001(\005\022\020\n\010OpParam3\030\017 \001(\004\"\257\001\n\025CMessag"
    "eLogRoleBuffer\022\016\n\006RoleID\030\001 \001(\r\022\016\n\006OpTime"
    "\030\002 \001(\r\022\016\n\006LineID\030\003 \001(\r\022\r\n\005MapID\030\004 \001(\r\022\023\n"
    "\013PersistTime\030\005 \001(\r\022\016\n\006OpType\030\006 \001(\r\022\016\n\006Bu"
    "ffID\030\007 \001(\r\022\020\n\010OpParam1\030\010 \001(\005\022\020\n\010OpParam2"
    "\030\t \001(\005\"\217\002\n\026CMessageLogRoleOpMoney\022\016\n\006Rol"
    "eID\030\001 \001(\r\022\016\n\006OpTime\030\002 \001(\r\022\016\n\006LineID\030\003 \001("
    "\r\022\022\n\nRepetionID\030\004 \001(\004\022\r\n\005MapID\030\005 \001(\r\022\020\n\010"
    "MetierID\030\006 \001(\r\022\021\n\tRoleLevel\030\007 \001(\r\022\021\n\tMon"
    "eyType\030\010 \001(\r\022\016\n\006OpType\030\t \001(\r\022\020\n\010CurMoney"
    "\030\n \001(\005\022\022\n\nDeltaMoney\030\013 \001(\005\022\020\n\010OpParam1\030\014"
    " \001(\005\022\020\n\010OpParam2\030\r \001(\005\022\020\n\010OpParam3\030\016 \001(\004"
    "\"\342\001\n\027CMessageLogRoleBeKilled\022\016\n\006RoleID\030\001"
    " \001(\r\022\016\n\006OpTime\030\002 \001(\r\022\016\n\006LineID\030\003 \001(\r\022\022\n\n"
    "RepetionID\030\004 \001(\004\022\r\n\005MapID\030\005 \001(\r\022\020\n\010Metie"
    "rID\030\006 \001(\r\022\021\n\tRoleLevel\030\007 \001(\r\022\022\n\nKillerTy"
    "pe\030\010 \001(\r\022\020\n\010KillerID\030\t \001(\r\022\024\n\014KillerMeti"
    "er\030\n \001(\r\022\023\n\013KillerLevel\030\013 \001(\r\"\363\001\n\025CMessa"
    "geLogRoleOpTask\022\016\n\006RoleID\030\001 \001(\r\022\016\n\006OpTim"
    "e\030\002 \001(\r\022\016\n\006LineID\030\003 \001(\r\022\022\n\nRepetionID\030\004 "
    "\001(\004\022\r\n\005MapID\030\005 \001(\r\022\020\n\010MetierID\030\006 \001(\r\022\021\n\t"
    "RoleLevel\030\007 \001(\r\022\016\n\006TaskID\030\010 \001(\r\022\034\n\006OpTyp"
    "e\030\t \001(\0162\014.ETaskAction\022\020\n\010OpParam1\030\n \001(\005\022"
    "\020\n\010OpParam2\030\013 \001(\005\022\020\n\010OpParam3\030\r \001(\004\"C\n\014P"
    "BDropedItem\022\016\n\006ItemID\030\001 \001(\r\022\020\n\010ItemType\030"
    "\002 \001(\r\022\021\n\tItemLevel\030\003 \001(\r\"\260\001\n\027CMessageLog"
    "OrgeDropItem\022\r\n\005NpcID\030\001 \001(\005\022\020\n\010NpcIndex\030"
    "\002 \001(\005\022\020\n\010NpcLevel\030\003 \001(\005\022\016\n\006OpTime\030\004 \001(\r\022"
    "\016\n\006LineID\030\005 \001(\r\022\022\n\nRepetionID\030\006 \001(\004\022\r\n\005M"
    "apID\030\007 \001(\r\022\037\n\010DropItem\030\010 \003(\0132\r.PBDropedI"
    "tem\"\300\001\n\032CMessageLogUseItemDropItem\022\016\n\006Ch"
    "arID\030\001 \001(\r\022\016\n\006ItemID\030\002 \001(\005\022\016\n\006Param1\030\003 \001"
    "(\005\022\016\n\006Param2\030\004 \001(\005\022\016\n\006OpTime\030\005 \001(\r\022\016\n\006Li"
    "neID\030\006 \001(\r\022\022\n\nRepetionID\030\007 \001(\004\022\r\n\005MapID\030"
    "\010 \001(\r\022\037\n\010DropItem\030\t \003(\0132\r.PBDropedItem\"\226"
    "\001\n\026CMessageLogItemDestroy\022\016\n\006ItemID\030\001 \001("
    "\005\022\r\n\005Level\030\002 \001(\005\022\016\n\006OpTime\030\004 \001(\r\022\016\n\006Line"
    "ID\030\005 \001(\r\022\022\n\nRepetionID\030\006 \001(\004\022\r\n\005MapID\030\007 "
    "\001(\r\022\014\n\004PosX\030\010 \001(\r\022\014\n\004PosY\030\t \001(\r\"\264\001\n\021CMes"
    "sageLogFamily\022\020\n\010FamilyID\030\001 \001(\r\022\020\n\010OpRol"
    "eID\030\002 \001(\r\022\016\n\006OpTime\030\003 \001(\r\022\035\n\006OpType\030\004 \001("
    "\0162\r.EOrganAction\022\034\n\006AttrID\030\005 \001(\0162\014.EFami"
    "lyAttr\022\016\n\006Param1\030\006 \001(\r\022\016\n\006Param2\030\007 \001(\r\022\016"
    "\n\006Param3\030\010 \001(\r\"\261\001\n\020CMessageLogCorps\022\017\n\007C"
    "orpsID\030\001 \001(\r\022\020\n\010OpRoleID\030\002 \001(\r\022\016\n\006OpTime"
    "\030\003 \001(\r\022\035\n\006OpType\030\004 \001(\0162\r.EOrganAction\022\033\n"
    "\006AttrID\030\005 \001(\0162\013.ECorpsAttr\022\016\n\006Param1\030\006 \001"
    "(\r\022\016\n\006Param2\030\007 \001(\r\022\016\n\006Param3\030\010 \001(\r\"s\n\020CM"
    "essageLogWorld\022\017\n\007WorldID\030\001 \001(\r\022\016\n\006OpTim"
    "e\030\002 \001(\r\022\016\n\006OpType\030\003 \001(\r\022\016\n\006Param1\030\004 \001(\r\022"
    "\016\n\006Param2\030\005 \001(\r\022\016\n\006Param3\030\006 \001(\r\"\205\003\n\017CMes"
    "sageLogMail\022\016\n\006RoleID\030\001 \001(\r\022\016\n\006MailID\030\002 "
    "\001(\r\022\016\n\006OpType\030\003 \001(\r\022\016\n\006Optime\030\004 \001(\r\022\020\n\010M"
    "ailType\030\005 \001(\r\022\021\n\tMailTitle\030\006 \001(\t\022\020\n\010Tota"
    "lNum\030\007 \001(\r\022\017\n\007ItemID1\030\010 \001(\r\022\020\n\010ItemNum1\030"
    "\t \001(\r\022\017\n\007ItemID2\030\n \001(\r\022\020\n\010ItemNum2\030\013 \001(\r"
    "\022\017\n\007ItemID3\030\014 \001(\r\022\020\n\010ItemNum3\030\r \001(\r\022\017\n\007I"
    "temID4\030\016 \001(\r\022\020\n\010ItemNum4\030\017 \001(\r\022\017\n\007ItemID"
    "5\030\020 \001(\r\022\020\n\010ItemNum5\030\021 \001(\r\022\r\n\005Money\030\022 \001(\r"
    "\022\031\n\021MoneyNeedCallBack\030\023 \001(\r\022\021\n\tDesRoleID"
    "\030\024 \001(\r\022\017\n\007SrcName\030\025 \001(\t\"(\n\013PBAttribute\022\n"
    "\n\002ID\030\001 \001(\r\022\r\n\005Value\030\002 \001(\003\"3\n\tPBCatalog\022\n"
    "\n\002ID\030\001 \001(\r\022\032\n\004Attr\030\002 \003(\0132\014.PBAttribute\"N"
    "\n\034CMessageServerStatInfoNotify\022\020\n\010Server"
    "ID\030\001 \001(\r\022\034\n\010StatInfo\030\002 \003(\0132\n.PBCatalog\"J"
    "\n\030CMessageLogValuableEquip\022\016\n\006RoleID\030\001 \001"
    "(\r\022\036\n\007ItemObj\030\002 \003(\0132\r.PBItemObject\"\204\001\n\017C"
    "MessageLogChat\022\016\n\006RoleID\030\001 \001(\r\022\017\n\007ChatMs"
    "g\030\002 \001(\t\022\021\n\tGateWayID\030\003 \001(\r\022\017\n\007Channel\030\004 "
    "\001(\r\022\016\n\006OpTime\030\005 \001(\r\022\n\n\002IP\030\006 \001(\r\022\020\n\010RoleN"
    "ame\030\007 \001(\t\"\211\001\n\023CMessageLogRepetion\022\023\n\013Rep"
    "etionKey\030\001 \001(\004\022\014\n\004Type\030\002 \001(\r\022\r\n\005Index\030\003 "
    "\001(\r\022\016\n\006LineID\030\004 \001(\r\022\017\n\007Parame1\030\005 \001(\r\022\017\n\007"
    "Parame2\030\006 \001(\r\022\016\n\006OpTime\030\007 \001(\r\"\234\001\n\026CMessa"
    "geLogBossOgreDie\022\021\n\tDeathTime\030\001 \001(\r\022\016\n\006C"
    "ampID\030\002 \001(\r\022\r\n\005MapID\030\003 \001(\r\022\014\n\004PosX\030\004 \001(\r"
    "\022\014\n\004PosY\030\005 \001(\r\022\016\n\006TempID\030\006 \001(\r\022\020\n\010Killer"
    "ID\030\007 \001(\r\022\022\n\nDamageInfo\030\010 \001(\t\"\273\001\n\021CMessag"
    "eLifeSkill\022\016\n\006RoleID\030\001 \001(\r\022\016\n\006OpTime\030\002 \001"
    "(\r\022\025\n\rLifeSkillType\030\003 \001(\r\022\025\n\rLifeSkillKi"
    "nd\030\004 \001(\r\022\026\n\016LifeSkillLevel\030\005 \001(\r\022\031\n\021Spec"
    "ializedDegree\030\006 \001(\r\022\022\n\nActionKind\030\007 \001(\r\022"
    "\021\n\tComposeID\030\010 \001(\r\"\344\001\n\023CMessageExchangeL"
    "og\022\022\n\naccount_id\030\001 \001(\r\022\017\n\007role_id\030\002 \001(\r\022"
    "\016\n\006optime\030\003 \001(\r\022\r\n\005money\030\004 \001(\r\022\n\n\002yb\030\005 \001"
    "(\r\022\017\n\007operate\030\006 \001(\r\022\023\n\013detail_id_1\030\007 \001(\004"
    "\022\023\n\013detail_id_2\030\010 \001(\004\022\017\n\007parame1\030\t \001(\r\022\017"
    "\n\007parame2\030\n \001(\r\022\017\n\007parame3\030\013 \001(\r\022\017\n\007para"
    "me4\030\014 \001(\r\"\214\001\n\021CMessageLogMatrix\022\020\n\010slave"
    "_id\030\001 \001(\r\022\021\n\tmaster_id\030\002 \001(\r\022\016\n\006optime\030\003"
    " \001(\r\022\017\n\007operate\030\004 \001(\r\022\017\n\007parame1\030\005 \001(\r\022\017"
    "\n\007parame2\030\006 \001(\r\022\017\n\007parame3\030\007 \001(\r\"\364\002\n\025CMe"
    "ssageLogRoleDamage\022\021\n\tsrccharid\030\001 \001(\r\022\021\n"
    "\tdescharid\030\002 \001(\r\022\016\n\006optime\030\003 \001(\r\022\017\n\007skil"
    "lid\030\004 \001(\r\022\022\n\ncalcdamage\030\005 \001(\r\022\022\n\nrealdam"
    "age\030\006 \001(\r\022\017\n\007srcpatt\030\007 \001(\r\022\017\n\007srcmatt\030\010 "
    "\001(\r\022\017\n\007despdef\030\t \001(\r\022\017\n\007desmdef\030\n \001(\r\022\017\n"
    "\007despimu\030\013 \001(\r\022\017\n\007desmimu\030\014 \001(\r\022\017\n\007srcdh"
    "it\030\r \001(\r\022\017\n\007desddef\030\016 \001(\r\022\020\n\010srctitle\030\017 "
    "\001(\r\022\020\n\010destitle\030\020 \001(\r\022\016\n\006srcres\030\021 \001(\t\022\016\n"
    "\006desres\030\022 \001(\t\022\017\n\007srcbuff\030\023 \001(\t\022\017\n\007desbuf"
    "f\030\024 \001(\t\"\246\001\n\030CMessageLogRoleRepeScore\022\016\n\006"
    "charid\030\001 \001(\r\022\016\n\006lineid\030\002 \001(\r\022\016\n\006optime\030\003"
    " \001(\r\022\r\n\005mapid\030\004 \001(\r\022\016\n\006repeid\030\005 \001(\r\022\024\n\014c"
    "urrentscore\030\006 \001(\r\022\022\n\ndeltascore\030\007 \001(\r\022\021\n"
    "\tscoretype\030\010 \001(\r*\272\006\n\nLOG_MSG_ID\022\027\n\021ID_S2"
    "L_LOGMESSAGE\020\200\210\003\022\032\n\024ID_L2L_HANDLETIMEOUT"
    "\020\201\210\003\022\030\n\022ID_S2L_ROLE_OPTASK\020\202\210\003\022\030\n\022ID_S2L"
    "_ROLE_KILLED\020\203\210\003\022\030\n\022ID_S2L_ROLE_LOGOUT\020\204"
    "\210\003\022\027\n\021ID_S2L_ROLE_OPEXP\020\205\210\003\022\031\n\023ID_S2L_RO"
    "LE_OPMONEY\020\206\210\003\022\030\n\022ID_S2L_ROLE_OPITEM\020\207\210\003"
    "\022\027\n\021ID_S2L_ROLE_GHOST\020\210\210\003\022\031\n\023ID_S2L_ROLE"
    "_UPGRADE\020\211\210\003\022\031\n\023ID_S2L_ITEM_UPGRADE\020\212\210\003\022"
    "\030\n\022ID_S2L_ORGE_DROPED\020\213\210\003\022\031\n\023ID_S2L_ITEM"
    "_DISPEAR\020\214\210\003\022\032\n\024ID_S2L_FAMILY_ACTION\020\215\210\003"
    "\022\031\n\023ID_S2L_CORPS_ACTION\020\216\210\003\022\021\n\013ID_S2L_MA"
    "IL\020\217\210\003\022$\n\036ID_S2L_SERVER_STAT_INFO_NOTICE"
    "\020\220\210\003\022\032\n\024ID_G2L_FAMILY_BATTLE\020\221\210\003\022\031\n\023ID_G"
    "2L_CORPS_BATTLE\020\222\210\003\022\026\n\020ID_G2L_ROLE_CHAT\020"
    "\223\210\003\022\025\n\017ID_G2L_REPETION\020\224\210\003\022\033\n\025ID_S2L_VAL"
    "UABLE_EQUIP\020\225\210\003\022\030\n\022ID_S2L_BOSSORGEDIE\020\226\210"
    "\003\022\026\n\020ID_S2L_LIFESKILL\020\227\210\003\022\031\n\023ID_S2L_USEI"
    "TEM_DROP\020\230\210\003\022\034\n\026ID_S2L_EXCHANGELOG_LOG\020\371"
    "\210\003\022\023\n\rID_S2L_MATRIX\020\372\210\003\022\022\n\014ID_S2L_WORLD\020"
    "\373\210\003\022\030\n\022ID_S2L_ROLE_DAMAGE\020\374\210\003\022\030\n\022ID_S2L_"
    "ROLE_BUFFER\020\375\210\003\022\034\n\026ID_S2L_ROLE_REPE_SCOR"
    "E\020\376\210\003*\204\001\n\tEPackType\022\025\n\021EM_ROLE_EQUIPMENT"
    "\020\001\022\023\n\017EM_ROLE_PACKAGE\020\002\022\032\n\026EM_ROLE_PACKA"
    "GE_KITBAG\020\003\022\023\n\017EM_ROLE_STORAGE\020\004\022\032\n\026EM_R"
    "OLE_STORAGE_KITBAG\020\005*\216\001\n\014EUpgradeType\022\027\n"
    "\023EM_UPGRADE_ROLE_EXP\020\000\022\031\n\025EM_UPGRADE_TAL"
    "ENT_EXP\020\001\022\027\n\023EM_UPGRADE_LIFE_EXP\020\002\022\032\n\026EM"
    "_UPGRADE_PRODUCE_EXP\020\003\022\025\n\021EM_UPGRADE_MW_"
    "EXP\020\004*\264\003\n\nEExpAction\022\024\n\020EM_EXP_BY_HORNOR"
    "\020\001\022\022\n\016EM_EXP_BY_CARD\020\002\022\026\n\022EM_EXP_BY_MULT"
    "ICOM\020\003\022\025\n\021EM_EXP_BY_COMMAND\020\004\022\030\n\024EM_EXP_"
    "BY_TEAM_ALLOT\020\005\022\032\n\026EM_EXP_BY_FAMILY_ALLO"
    "T\020\006\022\026\n\022EM_EXP_BY_QUESTION\020\007\022\033\n\027EM_EXP_BY"
    "_INVESTIGATION\020\010\022\025\n\021EM_EXP_BY_ERATING\020\t\022"
    "\022\n\016EM_EXP_BY_TASK\020\n\022\030\n\024EM_EXP_BY_ENTITY_"
    "DIE\020\013\022\022\n\016EM_EXP_BY_BUFF\020\014\022\024\n\020EM_EXP_BY_F"
    "LOWER\020\r\022\025\n\021EM_EXP_BY_EXPITEM\020\016\022\030\n\024EM_EXP"
    "_BY_BLACKPILLS\020\017\022\025\n\021EM_EXP_BY_EXPILLS\020\020\022"
    "\024\n\020EM_EXP_BY_HANDIN\020\021\022\025\n\021EM_EXP_BY_OFFLI"
    "NE\020\022*\256\002\n\rEBufferAction\022\024\n\020EM_BUFF_BY_SKI"
    "LL\020\001\022\022\n\016EM_BUFF_BY_MAP\020\002\022\026\n\022EM_BUFF_BY_Y"
    "QSGROW\020\003\022\027\n\023EM_BUFF_BY_BUFFITEM\020\004\022\025\n\021EM_"
    "BUFF_BY_SYSTEM\020\005\022\026\n\022EM_BUFF_BY_TIMEOUT\020\006"
    "\022\023\n\017EM_BUFF_BY_SELF\020\007\022\024\n\020EM_BUFF_BY_DEAT"
    "H\020\010\022\033\n\027EM_BUFF_BY_CLOSEAUREOLE\020\t\022\030\n\024EM_B"
    "UFF_BY_CHANGEMAP\020\n\022\025\n\021EM_BUFF_BY_LOGOFF\020"
    "\013\022\032\n\026EM_BUFF_BY_STATE_STONE\020\014*\364\014\n\013EItemA"
    "ction\022\025\n\021EM_GET_BY_IBSTORE\020\001\022\027\n\023EM_GET_B"
    "Y_RECV_MAIL\020\002\022\027\n\023EM_GET_BY_STALL_BUY\020\003\022\026"
    "\n\022EM_GET_BY_EXCHANGE\020\004\022\031\n\025EM_GET_BY_ACCE"
    "PT_TASK\020\005\022\026\n\022EM_GET_BY_END_TASK\020\006\022\025\n\021EM_"
    "GET_BY_ERATING\020\007\022\026\n\022EM_GET_BY_PICKITEM\020\010"
    "\022\025\n\021EM_GET_BY_PRODUCE\020\t\022\024\n\020EM_GET_BY_CHA"
    "NGE\020\n\022\026\n\022EM_GET_BY_RUN_TASK\020\013\022\026\n\022EM_GET_"
    "BY_NPC_SHOP\020\014\022\025\n\021EM_GET_BY_DEFAULT\020\r\022\026\n\022"
    "EM_GET_BY_TASKITEM\020\016\022\025\n\021EM_GET_BY_COLLEC"
    "T\020\017\022\025\n\021EM_GET_BY_COMPOSE\020\020\022\026\n\022EM_GET_BY_"
    "REPETION\020\021\022\026\n\022EM_GET_BY_GMINSERT\020\022\022\026\n\022EM"
    "_GET_BY_ROLLBACK\020\023\022\027\n\023EM_GET_BY_DIRECTIN"
    "S\020\024\022\025\n\021EM_GET_BY_UNBOUND\020\025\022\030\n\024EM_GET_BY_"
    "DECOMPOUND\020\026\022\033\n\027EM_GET_BY_INVESTIGATION\020"
    "\027\022\030\n\024EM_GET_BY_GUAJI_SHOP\020\030\022\026\n\022EM_GET_BY"
    "_BUY_BACK\020\031\022\023\n\017EM_GET_BY_AWARD\020\032\022\025\n\021EM_G"
    "ET_BY_GETSTAR\020\033\022\023\n\017EM_GET_BY_HONOR\020\034\022\023\n\017"
    "EM_GET_BY_CARVE\020\035\022\027\n\023EM_GET_BY_QLCOMPOSE"
    "\020\036\022\032\n\026EM_GET_BY_TREASUREBOWL\020 \022\027\n\023EM_GET"
    "_BY_MWQUICKUP\020!\022\035\n\031EM_GET_BY_SPIRIT_DOWN"
    "GRID\020\"\022\030\n\024EM_LOST_BY_SEND_MAIL\0202\022\031\n\025EM_L"
    "OST_BY_STALL_SELL\0203\022\027\n\023EM_LOST_BY_EXCHAN"
    "GE\0204\022\032\n\026EM_LOST_BY_ACCEPT_TASK\0205\022\027\n\023EM_L"
    "OST_BY_END_TASK\0206\022\026\n\022EM_LOST_BY_ERATING\020"
    "7\022\031\n\025EM_LOST_BY_THROW_ITEM\0208\022\026\n\022EM_LOST_"
    "BY_PRODUCE\0209\022\022\n\016EM_LOST_BY_USE\020:\022\030\n\024EM_L"
    "OST_BY_OPEN_SLOT\020;\022\026\n\022EM_LOST_BY_COMPOSE"
    "\020<\022\022\n\016EM_LOST_BY_EAT\020=\022\032\n\026EM_LOST_BY_INS"
    "ERT_SLOT\020>\022\026\n\022EM_LOST_BY_UPGRADE\020?\022\025\n\021EM"
    "_LOST_BY_CHANGE\020@\022\031\n\025EM_LOST_BY_DECOMPOU"
    "ND\020A\022\027\n\023EM_LOST_BY_SELL2NPC\020B\022\024\n\020EM_LOST"
    "_BY_JUDGE\020C\022\024\n\020EM_LOST_BY_BOUND\020D\022\030\n\024EM_"
    "LOST_BY_ABORTTASK\020E\022\026\n\022EM_LOST_BY_DESTRO"
    "Y\020F\022\026\n\022EM_LOST_BY_TIMEOUT\020G\022\032\n\026EM_LOST_B"
    "Y_CHANGEEQUIP\020H\022\027\n\023EM_LOST_BY_REPETION\020I"
    "\022\026\n\022EM_LOST_BY_GETSTAR\020J\022\026\n\022EM_LOST_BY_A"
    "DDSTAR\020K\022\027\n\023EM_LOST_BY_ADDEXTRA\020L\022\026\n\022EM_"
    "LOST_BY_FANGCUN\020M\022\025\n\021EM_LOST_BY_MASTER\020N"
    "\022\024\n\020EM_LOST_BY_CARVE\020O\022\030\n\024EM_LOST_BY_MWQ"
    "UICKUP\020P\022\030\n\024EM_LOST_BY_QLCOMPOSE\020Q\022\032\n\026EM"
    "_START_USE_TIME_ITEM\020R\022\024\n\020EM_LOST_BY_SWO"
    "RN\020S*\226\016\n\014EMoneyAction\022\026\n\022EM_GET_BY_SELL2"
    "NPC\020\001\022\027\n\023EM_GET_BY_PICKMONEY\020\002\022\034\n\030EM_GET"
    "_BY_EXCHANGE_MONEY\020\003\022\034\n\030EM_GET_BY_GMINSE"
    "RT_MONEY\020\004\022\031\n\025EM_GET_BY_STORE_MONEY\020\005\022\025\n"
    "\021EM_GET_BY_RED_BAG\020\006\022\030\n\024EM_GET_BY_RECV_M"
    "ONEY\020\007\022\026\n\022EM_GET_BY_QUESTLIB\020\010\022\033\n\027EM_GET"
    "_BY_ERATING_MONEY\020\t\022\023\n\017EM_GET_BY_CORPS\020\n"
    "\022\024\n\020EM_GET_BY_FAMILY\020\013\022\023\n\017EM_GET_BY_STAL"
    "L\020\014\022\022\n\016EM_GET_BY_TASK\020\r\022\022\n\016EM_GET_BY_GIF"
    "T\020\016\022\021\n\rEM_GET_BY_WAR\020\017\022\024\n\020EM_GET_BY_BOUR"
    "SE\020\020\022\030\n\024EM_GET_BY_BOURSE_ERR\020\021\022\036\n\032EM_GET"
    "_BY_TELFAIL_ROLLBACK\020\022\022\022\n\016EM_GET_BY_FAME"
    "\020\023\022\031\n\025EM_LOST_BY_SEND_MONEY\0202\022\026\n\022EM_LOST"
    "_BY_BUY4NPC\0203\022\025\n\021EM_LOST_BY_REPAIR\0204\022\034\n\030"
    "EM_LOST_BY_PRODUCE_EQUIP\0205\022\033\n\027EM_LOST_BY"
    "_PRODUCE_PHYS\0206\022\034\n\030EM_LOST_BY_UPGRADE_EQ"
    "UIP\0207\022\032\n\026EM_LOST_BY_INSERT_RUNE\0208\022\033\n\027EM_"
    "LOST_BY_INSERT_JEWEL\0209\022\031\n\025EM_LOST_BY_OPE"
    "N_SLOT2\020:\022\033\n\027EM_LOST_BY_STUDY_TALENT\020;\022\035"
    "\n\031EM_LOST_BY_EXCHANGE_MONEY\020<\022\033\n\027EM_LOST"
    "_BY_MONEY_RELIFE\020=\022\033\n\027EM_LOST_BY_NPC_TEL"
    "EPORT\020>\022\027\n\023EM_LOST_BY_BUY_BACK\020?\022\030\n\024EM_L"
    "OST_BY_BIND_ITEM\020@\022\032\n\026EM_LOST_BY_UNBIND_"
    "ITEM\020A\022\032\n\026EM_LOST_BY_STUDY_SKILL\020B\022\032\n\026EM"
    "_LOST_BY_STORE_MONEY\020C\022\032\n\026EM_LOST_BY_RES"
    "UME_BIND\020D\022\033\n\027EM_LOST_BY_REMOVE_JEWEL\020E\022"
    "\032\n\026EM_LOST_BY_JUDGE_EQUIP\020F\022\034\n\030EM_LOST_B"
    "Y_CHANGE_RESIST\020G\022\034\n\030EM_LOST_BY_COMPOSE_"
    "JEWEL\020H\022\034\n\030EM_LOST_BY_MULTI_COMPOSE\020I\022\033\n"
    "\027EM_LOST_BY_UP_LIFESKILL\020K\022\034\n\030EM_LOST_BY"
    "_STUDY_COMPOSE\020L\022\032\n\026EM_LOST_BY_JUDGE_FAB"
    "AO\020M\022\030\n\024EM_LOST_BY_GUAJI_BUY\020N\022\031\n\025EM_LOS"
    "T_BY_POSTAL_FEE\020O\022\032\n\026EM_LOST_BY_BUILD_CO"
    "RPS\020P\022\032\n\026EM_LOST_BY_CONTR_CORPS\020Q\022\033\n\027EM_"
    "LOST_BY_BUILD_FAMILY\020R\022\033\n\027EM_LOST_BY_CON"
    "TR_FAMILY\020S\022\024\n\020EM_LOST_BY_STALL\020T\022\032\n\026EM_"
    "LOST_BY_EQUIPCHANGE\020U\022\030\n\024EM_LOST_BY_ADD_"
    "EXTRA\020V\022\022\n\016EM_LOST_BY_WAR\020W\022\025\n\021EM_LOST_B"
    "Y_BOURSE\020X\022\022\n\016EM_LOST_BY_TAX\020Y\022\027\n\023EM_LOS"
    "T_BY_STALLFEE\020Z\022\032\n\026EM_LOST_BY_MASTERMONE"
    "Y\020[\022\031\n\025EM_LOST_BY_CARVEMONEY\020\\\022\027\n\023EM_LOS"
    "T_BY_DECOMPOS\020]\022\026\n\022EM_LOST_BY_MWPRINT\020^\022"
    "\036\n\032EM_LOST_MONEY_BY_QLCOMPOSE\020_\022\027\n\023EM_LO"
    "ST_BY_BUY4FUNC\020`\022\023\n\017EM_LOST_BY_FAME\020a\022\035\n"
    "\031EM_LOST_BY_SPIRIT_UPGRADE\020b\022\037\n\033EM_LOST_"
    "BY_SPIRIT_DOWNGRADE\020c*\204\001\n\013ETaskAction\022\022\n"
    "\016EM_TASK_ACCEPT\020\001\022\017\n\013EM_TASK_END\020\002\022\022\n\016EM"
    "_TASK_CANCEL\020\003\022\022\n\016EM_TASK_ACTION\020\004\022\023\n\017EM"
    "_TASK_REFRESH\020\005\022\023\n\017EM_TASK_PUBLISH\020\006*\355\001\n"
    "\013EFamilyAttr\022\022\n\016EM_FAMILY_NULL\020\000\022\024\n\020EM_F"
    "AMILY_MEMBER\020\001\022\023\n\017EM_FAMILY_MONEY\020\002\022\027\n\023E"
    "M_FAMILY_CHANLENGE\020\003\022\024\n\020EM_FAMILY_BATTLE"
    "\020\004\022\026\n\022EM_FAMILY_CREATION\020\005\022\032\n\026EM_FAMILY_"
    "CONTRIBUTION\020\006\022\023\n\017EM_FAMILY_LEVEL\020\007\022\022\n\016E"
    "M_FAMILY_RANK\020\010\022\023\n\017EM_FAMILY_GLORY\020\t*\247\002\n"
    "\nECorpsAttr\022\021\n\rEM_CORPS_NULL\020\000\022\023\n\017EM_COR"
    "PS_MEMBER\020\001\022\022\n\016EM_CORPS_MONEY\020\002\022\026\n\022EM_CO"
    "RPS_CHANLENGE\020\003\022\023\n\017EM_CORPS_BATTLE\020\004\022\025\n\021"
    "EM_CORPS_CREATION\020\005\022\031\n\025EM_CORPS_CONTRIBU"
    "TION\020\006\022\022\n\016EM_CORPS_LEVEL\020\007\022\021\n\rEM_CORPS_R"
    "ANK\020\010\022\022\n\016EM_CORPS_GLORY\020\t\022\030\n\024EM_CORPS_RE"
    "FINEVALUE\020\n\022\022\n\016EM_CORPS_SCORE\020\013\022\025\n\021EM_CO"
    "RPS_ACTIVITY\020\014*\335\005\n\014EOrganAction\022\027\n\023EM_OR"
    "GAN_MEMBERJOIN\020\001\022\030\n\024EM_ORGAN_MEMBERLEAVE"
    "\020\002\022\023\n\017EM_ORGAN_CREATE\020\003\022\024\n\020EM_ORGAN_DISB"
    "AND\020\004\022\025\n\021EM_ORGAN_GETMONEY\020\005\022\034\n\030EM_ORGAN"
    "_CONTRIBUTEMONEY\020\006\022\024\n\020EM_ORGAN_BUYITEM\020\007"
    "\022\024\n\020EM_ORGAN_LEVELUP\020\010\022\024\n\020EM_ORGAN_SETPO"
    "ST\020\t\022\026\n\022EM_ORGAN_OPEN_ROOM\020\n\022\027\n\023EM_ORGAN"
    "_CLOSE_ROOM\020\013\022\032\n\026EM_ORGAN_SEND_CHALLEGE\020"
    "\014\022\031\n\025EM_ORGAN_REC_CHALLEGE\020\r\022\021\n\rEM_ORGAN"
    "_BID_\020\016\022\023\n\017EM_ORGAN_SUBMIT\020\017\022\030\n\024EM_ORGAN"
    "_JOIN_BATTLE\020\020\022\032\n\026EM_ORGAN_GETNPCWELFARE"
    "\020\021\022\021\n\rEM_ORGAN_TASK\020\022\022\025\n\021EM_ORGAN_EXCHAN"
    "GE\020\023\022\024\n\020EM_ORGAN_CONFIRM\020\024\022\020\n\014EM_ORGAN_F"
    "IN\020\025\022\022\n\016EM_ORGAN_ABORT\020\026\022\025\n\021EM_ORGAN_REP"
    "ETION\020\027\022\032\n\026EM_ORGAN_BATTLEVICTORY\020\030\022\034\n\030E"
    "M_ORGAN_CHALLENGEACCEPT\020\031\022\025\n\021EM_ORGAN_RE"
    "DSTONE\020\032\022\020\n\014EM_ORGAN_TAX\020\033\022\030\n\024EM_ORGAN_U"
    "SEFUNCITEM\020\034\022\034\n\030EM_ORGAN_SUMMONCORPSBOSS"
    "\020\035\022\032\n\026EM_ORGAN_CORPSREPETION\020\036*\233\001\n\014EWorl"
    "dAction\022\030\n\024EM_WORLD_ACCUSEBEGIN\020\001\022\027\n\023EM_"
    "WORLD_ACCUSEVOTE\020\002\022\026\n\022EM_WORLD_ACCUSEEND"
    "\020\003\022\025\n\021EM_WORLD_POWERADD\020\004\022\025\n\021EM_WORLD_PO"
    "WERDEL\020\005\022\022\n\016EM_WORLD_FORCE\020\006*S\n\rEM_MAILA"
    "CTION\022\024\n\020EM_MAIL_SENDMAIL\020\001\022\027\n\023EM_MAIL_R"
    "ECEIVEMAIL\020\002\022\023\n\017EM_MAIL_DELMAIL\020\003*\215\001\n\017EM"
    "_STAT_CATALOG\022\023\n\017EM_SERVER_MONEY\020\001\022\021\n\rEM"
    "_SERVER_EXP\020\002\022\022\n\016EM_SERVER_ITEM\020\003\022\023\n\017EM_"
    "SERVER_EVENT\020\004\022\024\n\020EM_SERVER_FAMILY\020\005\022\023\n\017"
    "EM_SERVER_CORPS\020\006*\364\001\n\027EM_LIFESKILL_ACTIO"
    "NKIND\022\036\n\032EM_LIFESKILLACTION_INITIAL\020\001\022#\n"
    "\037EM_LIFESKILLACTION_STUDYCOMPOSE\020\002\022\036\n\032EM"
    "_LIFESKILLACTION_LEVELUP\020\003\022&\n\"EM_LIFESKI"
    "LLACTION_FORGETLIFESKILL\020\004\022#\n\037EM_LIFESKI"
    "LLACTION_CREATCOMPOSE\020\005\022\'\n#EM_LIFESKILLA"
    "CTION_USECOMPOSESCROLL\020\006*\246\001\n\rEMatrixActi"
    "on\022\026\n\022EM_MATRIX_ADDSLAVE\020\001\022\027\n\023EM_MATRIX_"
    "ADDMASTER\020\002\022\026\n\022EM_MATRIX_ADDPOINT\020\003\022\026\n\022E"
    "M_MATRIX_DELSLAVE\020\004\022\027\n\023EM_MATRIX_DELMAST"
    "ER\020\005\022\033\n\027EM_MATRIX_MASTERPERCENT\020\006*\212\001\n\013ER"
    "oleDamage\022\031\n\024EM_DAMAGE_NORMAL_MAX\020\300>\022\031\n\023"
    "EM_DAMAGE_DEATH_MAX\020\240\234\001\022\031\n\024EM_DAMAGE_NOR"
    "MAL_MIN\020\350\007\022\030\n\023EM_DAMAGE_DEATH_MIN\020\270\027\022\020\n\014"
    "EM_MIN_LEVEL\020F*q\n\016ERoleRepeScore\022\030\n\024EM_S"
    "CORE_COMMON_ORGE\020\001\022\026\n\022EM_SCORE_BOSS_ORGE"
    "\020\002\022\023\n\017EM_SCORE_EXTRAL\020\003\022\030\n\024EM_SCORE_KILL"
    "_PLAYER\020\004B\002H\001", 13453);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "log_msg_pb.hxx", &protobuf_RegisterTypes);
  #endif
  CMessageHandleTimeOut::default_instance_ = new CMessageHandleTimeOut();
  CMessageLogRoleLogout::default_instance_ = new CMessageLogRoleLogout();
  CMessageLogRoleGhost::default_instance_ = new CMessageLogRoleGhost();
  CMessageLogRoleUpgrade::default_instance_ = new CMessageLogRoleUpgrade();
  CMessageLogItemUpgrade::default_instance_ = new CMessageLogItemUpgrade();
  CMessageLogRoleOpItem::default_instance_ = new CMessageLogRoleOpItem();
  CMessageLogRoleOpExp::default_instance_ = new CMessageLogRoleOpExp();
  CMessageLogRoleBuffer::default_instance_ = new CMessageLogRoleBuffer();
  CMessageLogRoleOpMoney::default_instance_ = new CMessageLogRoleOpMoney();
  CMessageLogRoleBeKilled::default_instance_ = new CMessageLogRoleBeKilled();
  CMessageLogRoleOpTask::default_instance_ = new CMessageLogRoleOpTask();
  PBDropedItem::default_instance_ = new PBDropedItem();
  CMessageLogOrgeDropItem::default_instance_ = new CMessageLogOrgeDropItem();
  CMessageLogUseItemDropItem::default_instance_ = new CMessageLogUseItemDropItem();
  CMessageLogItemDestroy::default_instance_ = new CMessageLogItemDestroy();
  CMessageLogFamily::default_instance_ = new CMessageLogFamily();
  CMessageLogCorps::default_instance_ = new CMessageLogCorps();
  CMessageLogWorld::default_instance_ = new CMessageLogWorld();
  CMessageLogMail::default_instance_ = new CMessageLogMail();
  PBAttribute::default_instance_ = new PBAttribute();
  PBCatalog::default_instance_ = new PBCatalog();
  CMessageServerStatInfoNotify::default_instance_ = new CMessageServerStatInfoNotify();
  CMessageLogValuableEquip::default_instance_ = new CMessageLogValuableEquip();
  CMessageLogChat::default_instance_ = new CMessageLogChat();
  CMessageLogRepetion::default_instance_ = new CMessageLogRepetion();
  CMessageLogBossOgreDie::default_instance_ = new CMessageLogBossOgreDie();
  CMessageLifeSkill::default_instance_ = new CMessageLifeSkill();
  CMessageExchangeLog::default_instance_ = new CMessageExchangeLog();
  CMessageLogMatrix::default_instance_ = new CMessageLogMatrix();
  CMessageLogRoleDamage::default_instance_ = new CMessageLogRoleDamage();
  CMessageLogRoleRepeScore::default_instance_ = new CMessageLogRoleRepeScore();
  CMessageHandleTimeOut::default_instance_->InitAsDefaultInstance();
  CMessageLogRoleLogout::default_instance_->InitAsDefaultInstance();
  CMessageLogRoleGhost::default_instance_->InitAsDefaultInstance();
  CMessageLogRoleUpgrade::default_instance_->InitAsDefaultInstance();
  CMessageLogItemUpgrade::default_instance_->InitAsDefaultInstance();
  CMessageLogRoleOpItem::default_instance_->InitAsDefaultInstance();
  CMessageLogRoleOpExp::default_instance_->InitAsDefaultInstance();
  CMessageLogRoleBuffer::default_instance_->InitAsDefaultInstance();
  CMessageLogRoleOpMoney::default_instance_->InitAsDefaultInstance();
  CMessageLogRoleBeKilled::default_instance_->InitAsDefaultInstance();
  CMessageLogRoleOpTask::default_instance_->InitAsDefaultInstance();
  PBDropedItem::default_instance_->InitAsDefaultInstance();
  CMessageLogOrgeDropItem::default_instance_->InitAsDefaultInstance();
  CMessageLogUseItemDropItem::default_instance_->InitAsDefaultInstance();
  CMessageLogItemDestroy::default_instance_->InitAsDefaultInstance();
  CMessageLogFamily::default_instance_->InitAsDefaultInstance();
  CMessageLogCorps::default_instance_->InitAsDefaultInstance();
  CMessageLogWorld::default_instance_->InitAsDefaultInstance();
  CMessageLogMail::default_instance_->InitAsDefaultInstance();
  PBAttribute::default_instance_->InitAsDefaultInstance();
  PBCatalog::default_instance_->InitAsDefaultInstance();
  CMessageServerStatInfoNotify::default_instance_->InitAsDefaultInstance();
  CMessageLogValuableEquip::default_instance_->InitAsDefaultInstance();
  CMessageLogChat::default_instance_->InitAsDefaultInstance();
  CMessageLogRepetion::default_instance_->InitAsDefaultInstance();
  CMessageLogBossOgreDie::default_instance_->InitAsDefaultInstance();
  CMessageLifeSkill::default_instance_->InitAsDefaultInstance();
  CMessageExchangeLog::default_instance_->InitAsDefaultInstance();
  CMessageLogMatrix::default_instance_->InitAsDefaultInstance();
  CMessageLogRoleDamage::default_instance_->InitAsDefaultInstance();
  CMessageLogRoleRepeScore::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_log_5fmsg_5fpb_2ehxx);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_log_5fmsg_5fpb_2ehxx {
  StaticDescriptorInitializer_log_5fmsg_5fpb_2ehxx() {
    protobuf_AddDesc_log_5fmsg_5fpb_2ehxx();
  }
} static_descriptor_initializer_log_5fmsg_5fpb_2ehxx_;

const ::google::protobuf::EnumDescriptor* LOG_MSG_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOG_MSG_ID_descriptor_;
}
bool LOG_MSG_ID_IsValid(int value) {
  switch(value) {
    case 50176:
    case 50177:
    case 50178:
    case 50179:
    case 50180:
    case 50181:
    case 50182:
    case 50183:
    case 50184:
    case 50185:
    case 50186:
    case 50187:
    case 50188:
    case 50189:
    case 50190:
    case 50191:
    case 50192:
    case 50193:
    case 50194:
    case 50195:
    case 50196:
    case 50197:
    case 50198:
    case 50199:
    case 50200:
    case 50297:
    case 50298:
    case 50299:
    case 50300:
    case 50301:
    case 50302:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EPackType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EPackType_descriptor_;
}
bool EPackType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EUpgradeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EUpgradeType_descriptor_;
}
bool EUpgradeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EExpAction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EExpAction_descriptor_;
}
bool EExpAction_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EBufferAction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EBufferAction_descriptor_;
}
bool EBufferAction_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EItemAction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EItemAction_descriptor_;
}
bool EItemAction_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 32:
    case 33:
    case 34:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMoneyAction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMoneyAction_descriptor_;
}
bool EMoneyAction_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETaskAction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETaskAction_descriptor_;
}
bool ETaskAction_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EFamilyAttr_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EFamilyAttr_descriptor_;
}
bool EFamilyAttr_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ECorpsAttr_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ECorpsAttr_descriptor_;
}
bool ECorpsAttr_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EOrganAction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EOrganAction_descriptor_;
}
bool EOrganAction_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EWorldAction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EWorldAction_descriptor_;
}
bool EWorldAction_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EM_MAILACTION_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EM_MAILACTION_descriptor_;
}
bool EM_MAILACTION_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EM_STAT_CATALOG_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EM_STAT_CATALOG_descriptor_;
}
bool EM_STAT_CATALOG_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EM_LIFESKILL_ACTIONKIND_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EM_LIFESKILL_ACTIONKIND_descriptor_;
}
bool EM_LIFESKILL_ACTIONKIND_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMatrixAction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMatrixAction_descriptor_;
}
bool EMatrixAction_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ERoleDamage_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ERoleDamage_descriptor_;
}
bool ERoleDamage_IsValid(int value) {
  switch(value) {
    case 70:
    case 1000:
    case 3000:
    case 8000:
    case 20000:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ERoleRepeScore_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ERoleRepeScore_descriptor_;
}
bool ERoleRepeScore_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMessageHandleTimeOut::CMessageHandleTimeOut()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageHandleTimeOut::InitAsDefaultInstance() {}

CMessageHandleTimeOut::CMessageHandleTimeOut(const CMessageHandleTimeOut& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageHandleTimeOut::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageHandleTimeOut::~CMessageHandleTimeOut() {
  SharedDtor();
}

void CMessageHandleTimeOut::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageHandleTimeOut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageHandleTimeOut_descriptor_;
}

const CMessageHandleTimeOut& CMessageHandleTimeOut::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageHandleTimeOut* CMessageHandleTimeOut::default_instance_ = NULL;

CMessageHandleTimeOut* CMessageHandleTimeOut::New() const {
  return new CMessageHandleTimeOut;
}

void CMessageHandleTimeOut::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageHandleTimeOut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMessageHandleTimeOut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageHandleTimeOut::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageHandleTimeOut::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageHandleTimeOut::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageHandleTimeOut::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageHandleTimeOut* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageHandleTimeOut*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageHandleTimeOut::MergeFrom(const CMessageHandleTimeOut& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageHandleTimeOut::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageHandleTimeOut::CopyFrom(const CMessageHandleTimeOut& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageHandleTimeOut::Swap(CMessageHandleTimeOut* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageHandleTimeOut::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageHandleTimeOut::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageHandleTimeOut::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageHandleTimeOut_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLogRoleLogout::kRoleIDFieldNumber;
const int CMessageLogRoleLogout::kOpTimeFieldNumber;
const int CMessageLogRoleLogout::kLineIDFieldNumber;
const int CMessageLogRoleLogout::kRepetionIDFieldNumber;
const int CMessageLogRoleLogout::kMapIDFieldNumber;
const int CMessageLogRoleLogout::kRoleLevelFieldNumber;
const int CMessageLogRoleLogout::kMetierIDFieldNumber;
const int CMessageLogRoleLogout::kLoginIPFieldNumber;
const int CMessageLogRoleLogout::kLoginTimeFieldNumber;
const int CMessageLogRoleLogout::kLogoutTimeFieldNumber;
const int CMessageLogRoleLogout::kLeaveReasonFieldNumber;
const int CMessageLogRoleLogout::kSaveReasonFieldNumber;
const int CMessageLogRoleLogout::kSaveResultFieldNumber;
const int CMessageLogRoleLogout::kKickReasonFieldNumber;
const int CMessageLogRoleLogout::kKickCodeFieldNumber;
#endif  // !_MSC_VER

CMessageLogRoleLogout::CMessageLogRoleLogout()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLogRoleLogout::InitAsDefaultInstance() {}

CMessageLogRoleLogout::CMessageLogRoleLogout(const CMessageLogRoleLogout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLogRoleLogout::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  optime_ = 0u;
  lineid_ = 0;
  repetionid_ = GOOGLE_ULONGLONG(0);
  mapid_ = 0;
  rolelevel_ = 0;
  metierid_ = 0;
  loginip_ = 0u;
  logintime_ = 0u;
  logouttime_ = 0u;
  leavereason_ = 1;
  savereason_ = 0;
  saveresult_ = 0;
  kickreason_ = 0;
  kickcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLogRoleLogout::~CMessageLogRoleLogout() {
  SharedDtor();
}

void CMessageLogRoleLogout::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLogRoleLogout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLogRoleLogout_descriptor_;
}

const CMessageLogRoleLogout& CMessageLogRoleLogout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageLogRoleLogout* CMessageLogRoleLogout::default_instance_ = NULL;

CMessageLogRoleLogout* CMessageLogRoleLogout::New() const {
  return new CMessageLogRoleLogout;
}

void CMessageLogRoleLogout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    optime_ = 0u;
    lineid_ = 0;
    repetionid_ = GOOGLE_ULONGLONG(0);
    mapid_ = 0;
    rolelevel_ = 0;
    metierid_ = 0;
    loginip_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    logintime_ = 0u;
    logouttime_ = 0u;
    leavereason_ = 1;
    savereason_ = 0;
    saveresult_ = 0;
    kickreason_ = 0;
    kickcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLogRoleLogout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_OpTime;
        break;
      }
      
      // optional uint32 OpTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &optime_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_LineID;
        break;
      }
      
      // optional int32 LineID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &lineid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_RepetionID;
        break;
      }
      
      // optional uint64 RepetionID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RepetionID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &repetionid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_MapID;
        break;
      }
      
      // optional int32 MapID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &mapid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_RoleLevel;
        break;
      }
      
      // optional int32 RoleLevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &rolelevel_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_MetierID;
        break;
      }
      
      // optional int32 MetierID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MetierID:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &metierid_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_LoginIP;
        break;
      }
      
      // optional uint32 LoginIP = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LoginIP:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &loginip_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_LoginTime;
        break;
      }
      
      // optional uint32 LoginTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LoginTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &logintime_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_LogoutTime;
        break;
      }
      
      // optional uint32 LogoutTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LogoutTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &logouttime_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_LeaveReason;
        break;
      }
      
      // optional .EMLeaveReason LeaveReason = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LeaveReason:
        int value;
        DO_(::google::protobuf::internal::WireFormat::ReadEnum(input, &value));
        if (EMLeaveReason_IsValid(value)) {
          set_leavereason(static_cast< EMLeaveReason >(value));
        } else {
          mutable_unknown_fields()->AddVarint(11, value);
        }
        if (input->ExpectTag(96)) goto parse_SaveReason;
        break;
      }
      
      // optional int32 SaveReason = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SaveReason:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &savereason_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_SaveResult;
        break;
      }
      
      // optional .EMSaveResult SaveResult = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SaveResult:
        int value;
        DO_(::google::protobuf::internal::WireFormat::ReadEnum(input, &value));
        if (EMSaveResult_IsValid(value)) {
          set_saveresult(static_cast< EMSaveResult >(value));
        } else {
          mutable_unknown_fields()->AddVarint(13, value);
        }
        if (input->ExpectTag(112)) goto parse_KickReason;
        break;
      }
      
      // optional int32 KickReason = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_KickReason:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &kickreason_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_KickCode;
        break;
      }
      
      // optional int32 KickCode = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_KickCode:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &kickcode_));
        _set_bit(14);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLogRoleLogout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLogRoleLogout::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional uint32 OpTime = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->optime(), output);
  }
  
  // optional int32 LineID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->lineid(), output);
  }
  
  // optional uint64 RepetionID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(4, this->repetionid(), output);
  }
  
  // optional int32 MapID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(5, this->mapid(), output);
  }
  
  // optional int32 RoleLevel = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(6, this->rolelevel(), output);
  }
  
  // optional int32 MetierID = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(7, this->metierid(), output);
  }
  
  // optional uint32 LoginIP = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->loginip(), output);
  }
  
  // optional uint32 LoginTime = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->logintime(), output);
  }
  
  // optional uint32 LogoutTime = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->logouttime(), output);
  }
  
  // optional .EMLeaveReason LeaveReason = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteEnum(11, this->leavereason(), output);
  }
  
  // optional int32 SaveReason = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(12, this->savereason(), output);
  }
  
  // optional .EMSaveResult SaveResult = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteEnum(13, this->saveresult(), output);
  }
  
  // optional int32 KickReason = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(14, this->kickreason(), output);
  }
  
  // optional int32 KickCode = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(15, this->kickcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLogRoleLogout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional uint32 OpTime = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->optime(), target);
  }
  
  // optional int32 LineID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->lineid(), target);
  }
  
  // optional uint64 RepetionID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(4, this->repetionid(), target);
  }
  
  // optional int32 MapID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(5, this->mapid(), target);
  }
  
  // optional int32 RoleLevel = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(6, this->rolelevel(), target);
  }
  
  // optional int32 MetierID = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(7, this->metierid(), target);
  }
  
  // optional uint32 LoginIP = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->loginip(), target);
  }
  
  // optional uint32 LoginTime = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->logintime(), target);
  }
  
  // optional uint32 LogoutTime = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->logouttime(), target);
  }
  
  // optional .EMLeaveReason LeaveReason = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteEnumToArray(11, this->leavereason(), target);
  }
  
  // optional int32 SaveReason = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(12, this->savereason(), target);
  }
  
  // optional .EMSaveResult SaveResult = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteEnumToArray(13, this->saveresult(), target);
  }
  
  // optional int32 KickReason = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(14, this->kickreason(), target);
  }
  
  // optional int32 KickCode = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(15, this->kickcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLogRoleLogout::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 OpTime = 2;
    if (has_optime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->optime());
    }
    
    // optional int32 LineID = 3;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->lineid());
    }
    
    // optional uint64 RepetionID = 4;
    if (has_repetionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->repetionid());
    }
    
    // optional int32 MapID = 5;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->mapid());
    }
    
    // optional int32 RoleLevel = 6;
    if (has_rolelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->rolelevel());
    }
    
    // optional int32 MetierID = 7;
    if (has_metierid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->metierid());
    }
    
    // optional uint32 LoginIP = 8;
    if (has_loginip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->loginip());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 LoginTime = 9;
    if (has_logintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->logintime());
    }
    
    // optional uint32 LogoutTime = 10;
    if (has_logouttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->logouttime());
    }
    
    // optional .EMLeaveReason LeaveReason = 11;
    if (has_leavereason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::EnumSize(this->leavereason());
    }
    
    // optional int32 SaveReason = 12;
    if (has_savereason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->savereason());
    }
    
    // optional .EMSaveResult SaveResult = 13;
    if (has_saveresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::EnumSize(this->saveresult());
    }
    
    // optional int32 KickReason = 14;
    if (has_kickreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->kickreason());
    }
    
    // optional int32 KickCode = 15;
    if (has_kickcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->kickcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLogRoleLogout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLogRoleLogout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLogRoleLogout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLogRoleLogout::MergeFrom(const CMessageLogRoleLogout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_optime(from.optime());
    }
    if (from._has_bit(2)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(3)) {
      set_repetionid(from.repetionid());
    }
    if (from._has_bit(4)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(5)) {
      set_rolelevel(from.rolelevel());
    }
    if (from._has_bit(6)) {
      set_metierid(from.metierid());
    }
    if (from._has_bit(7)) {
      set_loginip(from.loginip());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_logintime(from.logintime());
    }
    if (from._has_bit(9)) {
      set_logouttime(from.logouttime());
    }
    if (from._has_bit(10)) {
      set_leavereason(from.leavereason());
    }
    if (from._has_bit(11)) {
      set_savereason(from.savereason());
    }
    if (from._has_bit(12)) {
      set_saveresult(from.saveresult());
    }
    if (from._has_bit(13)) {
      set_kickreason(from.kickreason());
    }
    if (from._has_bit(14)) {
      set_kickcode(from.kickcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLogRoleLogout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLogRoleLogout::CopyFrom(const CMessageLogRoleLogout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLogRoleLogout::Swap(CMessageLogRoleLogout* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(optime_, other->optime_);
    std::swap(lineid_, other->lineid_);
    std::swap(repetionid_, other->repetionid_);
    std::swap(mapid_, other->mapid_);
    std::swap(rolelevel_, other->rolelevel_);
    std::swap(metierid_, other->metierid_);
    std::swap(loginip_, other->loginip_);
    std::swap(logintime_, other->logintime_);
    std::swap(logouttime_, other->logouttime_);
    std::swap(leavereason_, other->leavereason_);
    std::swap(savereason_, other->savereason_);
    std::swap(saveresult_, other->saveresult_);
    std::swap(kickreason_, other->kickreason_);
    std::swap(kickcode_, other->kickcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLogRoleLogout::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLogRoleLogout::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLogRoleLogout::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLogRoleLogout_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLogRoleGhost::kRoleIDFieldNumber;
const int CMessageLogRoleGhost::kOpTimeFieldNumber;
const int CMessageLogRoleGhost::kPackTypeFieldNumber;
#endif  // !_MSC_VER

CMessageLogRoleGhost::CMessageLogRoleGhost()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLogRoleGhost::InitAsDefaultInstance() {}

CMessageLogRoleGhost::CMessageLogRoleGhost(const CMessageLogRoleGhost& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLogRoleGhost::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  optime_ = 0u;
  packtype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLogRoleGhost::~CMessageLogRoleGhost() {
  SharedDtor();
}

void CMessageLogRoleGhost::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLogRoleGhost::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLogRoleGhost_descriptor_;
}

const CMessageLogRoleGhost& CMessageLogRoleGhost::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageLogRoleGhost* CMessageLogRoleGhost::default_instance_ = NULL;

CMessageLogRoleGhost* CMessageLogRoleGhost::New() const {
  return new CMessageLogRoleGhost;
}

void CMessageLogRoleGhost::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    optime_ = 0u;
    packtype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLogRoleGhost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_OpTime;
        break;
      }
      
      // optional uint32 OpTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &optime_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_PackType;
        break;
      }
      
      // optional .EPackType PackType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PackType:
        int value;
        DO_(::google::protobuf::internal::WireFormat::ReadEnum(input, &value));
        if (EPackType_IsValid(value)) {
          set_packtype(static_cast< EPackType >(value));
        } else {
          mutable_unknown_fields()->AddVarint(3, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLogRoleGhost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLogRoleGhost::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional uint32 OpTime = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->optime(), output);
  }
  
  // optional .EPackType PackType = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteEnum(3, this->packtype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLogRoleGhost::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional uint32 OpTime = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->optime(), target);
  }
  
  // optional .EPackType PackType = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteEnumToArray(3, this->packtype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLogRoleGhost::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 OpTime = 2;
    if (has_optime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->optime());
    }
    
    // optional .EPackType PackType = 3;
    if (has_packtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::EnumSize(this->packtype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLogRoleGhost::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLogRoleGhost* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLogRoleGhost*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLogRoleGhost::MergeFrom(const CMessageLogRoleGhost& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_optime(from.optime());
    }
    if (from._has_bit(2)) {
      set_packtype(from.packtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLogRoleGhost::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLogRoleGhost::CopyFrom(const CMessageLogRoleGhost& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLogRoleGhost::Swap(CMessageLogRoleGhost* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(optime_, other->optime_);
    std::swap(packtype_, other->packtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLogRoleGhost::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLogRoleGhost::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLogRoleGhost::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLogRoleGhost_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLogRoleUpgrade::kRoleIDFieldNumber;
const int CMessageLogRoleUpgrade::kUpgradeTimeFieldNumber;
const int CMessageLogRoleUpgrade::kMetierIDFieldNumber;
const int CMessageLogRoleUpgrade::kRoleLevelFieldNumber;
const int CMessageLogRoleUpgrade::kUpgradeTypeFieldNumber;
const int CMessageLogRoleUpgrade::kSubTypeFieldNumber;
const int CMessageLogRoleUpgrade::kCurrentLevelFieldNumber;
const int CMessageLogRoleUpgrade::kDeltaLevelFieldNumber;
#endif  // !_MSC_VER

CMessageLogRoleUpgrade::CMessageLogRoleUpgrade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLogRoleUpgrade::InitAsDefaultInstance() {}

CMessageLogRoleUpgrade::CMessageLogRoleUpgrade(const CMessageLogRoleUpgrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLogRoleUpgrade::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  upgradetime_ = 0u;
  metierid_ = 0u;
  rolelevel_ = 0u;
  upgradetype_ = 0;
  subtype_ = 0u;
  currentlevel_ = 0u;
  deltalevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLogRoleUpgrade::~CMessageLogRoleUpgrade() {
  SharedDtor();
}

void CMessageLogRoleUpgrade::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLogRoleUpgrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLogRoleUpgrade_descriptor_;
}

const CMessageLogRoleUpgrade& CMessageLogRoleUpgrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageLogRoleUpgrade* CMessageLogRoleUpgrade::default_instance_ = NULL;

CMessageLogRoleUpgrade* CMessageLogRoleUpgrade::New() const {
  return new CMessageLogRoleUpgrade;
}

void CMessageLogRoleUpgrade::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    upgradetime_ = 0u;
    metierid_ = 0u;
    rolelevel_ = 0u;
    upgradetype_ = 0;
    subtype_ = 0u;
    currentlevel_ = 0u;
    deltalevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLogRoleUpgrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_UpgradeTime;
        break;
      }
      
      // optional uint32 UpgradeTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UpgradeTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &upgradetime_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_MetierID;
        break;
      }
      
      // optional uint32 MetierID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MetierID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &metierid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_RoleLevel;
        break;
      }
      
      // optional uint32 RoleLevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rolelevel_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_UpgradeType;
        break;
      }
      
      // optional .EUpgradeType UpgradeType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UpgradeType:
        int value;
        DO_(::google::protobuf::internal::WireFormat::ReadEnum(input, &value));
        if (EUpgradeType_IsValid(value)) {
          set_upgradetype(static_cast< EUpgradeType >(value));
        } else {
          mutable_unknown_fields()->AddVarint(5, value);
        }
        if (input->ExpectTag(48)) goto parse_SubType;
        break;
      }
      
      // optional uint32 SubType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SubType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &subtype_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_CurrentLevel;
        break;
      }
      
      // optional uint32 CurrentLevel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CurrentLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &currentlevel_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_DeltaLevel;
        break;
      }
      
      // optional uint32 DeltaLevel = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeltaLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deltalevel_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLogRoleUpgrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLogRoleUpgrade::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional uint32 UpgradeTime = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->upgradetime(), output);
  }
  
  // optional uint32 MetierID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->metierid(), output);
  }
  
  // optional uint32 RoleLevel = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->rolelevel(), output);
  }
  
  // optional .EUpgradeType UpgradeType = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteEnum(5, this->upgradetype(), output);
  }
  
  // optional uint32 SubType = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->subtype(), output);
  }
  
  // optional uint32 CurrentLevel = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->currentlevel(), output);
  }
  
  // optional uint32 DeltaLevel = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->deltalevel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLogRoleUpgrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional uint32 UpgradeTime = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->upgradetime(), target);
  }
  
  // optional uint32 MetierID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->metierid(), target);
  }
  
  // optional uint32 RoleLevel = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->rolelevel(), target);
  }
  
  // optional .EUpgradeType UpgradeType = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteEnumToArray(5, this->upgradetype(), target);
  }
  
  // optional uint32 SubType = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->subtype(), target);
  }
  
  // optional uint32 CurrentLevel = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->currentlevel(), target);
  }
  
  // optional uint32 DeltaLevel = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->deltalevel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLogRoleUpgrade::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 UpgradeTime = 2;
    if (has_upgradetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->upgradetime());
    }
    
    // optional uint32 MetierID = 3;
    if (has_metierid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->metierid());
    }
    
    // optional uint32 RoleLevel = 4;
    if (has_rolelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rolelevel());
    }
    
    // optional .EUpgradeType UpgradeType = 5;
    if (has_upgradetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::EnumSize(this->upgradetype());
    }
    
    // optional uint32 SubType = 6;
    if (has_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->subtype());
    }
    
    // optional uint32 CurrentLevel = 7;
    if (has_currentlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->currentlevel());
    }
    
    // optional uint32 DeltaLevel = 8;
    if (has_deltalevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deltalevel());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLogRoleUpgrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLogRoleUpgrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLogRoleUpgrade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLogRoleUpgrade::MergeFrom(const CMessageLogRoleUpgrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_upgradetime(from.upgradetime());
    }
    if (from._has_bit(2)) {
      set_metierid(from.metierid());
    }
    if (from._has_bit(3)) {
      set_rolelevel(from.rolelevel());
    }
    if (from._has_bit(4)) {
      set_upgradetype(from.upgradetype());
    }
    if (from._has_bit(5)) {
      set_subtype(from.subtype());
    }
    if (from._has_bit(6)) {
      set_currentlevel(from.currentlevel());
    }
    if (from._has_bit(7)) {
      set_deltalevel(from.deltalevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLogRoleUpgrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLogRoleUpgrade::CopyFrom(const CMessageLogRoleUpgrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLogRoleUpgrade::Swap(CMessageLogRoleUpgrade* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(upgradetime_, other->upgradetime_);
    std::swap(metierid_, other->metierid_);
    std::swap(rolelevel_, other->rolelevel_);
    std::swap(upgradetype_, other->upgradetype_);
    std::swap(subtype_, other->subtype_);
    std::swap(currentlevel_, other->currentlevel_);
    std::swap(deltalevel_, other->deltalevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLogRoleUpgrade::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLogRoleUpgrade::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLogRoleUpgrade::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLogRoleUpgrade_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLogItemUpgrade::kItemIDFieldNumber;
const int CMessageLogItemUpgrade::kItemGUIDFieldNumber;
const int CMessageLogItemUpgrade::kUpTimeFieldNumber;
const int CMessageLogItemUpgrade::kUpTypeFieldNumber;
const int CMessageLogItemUpgrade::kResultFieldNumber;
const int CMessageLogItemUpgrade::kRoleIDFieldNumber;
const int CMessageLogItemUpgrade::kPrevLevelFieldNumber;
const int CMessageLogItemUpgrade::kCurrLevelFieldNumber;
const int CMessageLogItemUpgrade::kItem1FieldNumber;
const int CMessageLogItemUpgrade::kItem2FieldNumber;
#endif  // !_MSC_VER

CMessageLogItemUpgrade::CMessageLogItemUpgrade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLogItemUpgrade::InitAsDefaultInstance() {}

CMessageLogItemUpgrade::CMessageLogItemUpgrade(const CMessageLogItemUpgrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLogItemUpgrade::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  itemguid_ = GOOGLE_ULONGLONG(0);
  uptime_ = 0u;
  uptype_ = 0u;
  result_ = 0u;
  roleid_ = 0u;
  prevlevel_ = 0u;
  currlevel_ = 0u;
  item1_ = 0u;
  item2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLogItemUpgrade::~CMessageLogItemUpgrade() {
  SharedDtor();
}

void CMessageLogItemUpgrade::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLogItemUpgrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLogItemUpgrade_descriptor_;
}

const CMessageLogItemUpgrade& CMessageLogItemUpgrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageLogItemUpgrade* CMessageLogItemUpgrade::default_instance_ = NULL;

CMessageLogItemUpgrade* CMessageLogItemUpgrade::New() const {
  return new CMessageLogItemUpgrade;
}

void CMessageLogItemUpgrade::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    itemguid_ = GOOGLE_ULONGLONG(0);
    uptime_ = 0u;
    uptype_ = 0u;
    result_ = 0u;
    roleid_ = 0u;
    prevlevel_ = 0u;
    currlevel_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    item1_ = 0u;
    item2_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLogItemUpgrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ItemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ItemGUID;
        break;
      }
      
      // optional uint64 ItemGUID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemGUID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &itemguid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_UpTime;
        break;
      }
      
      // optional uint32 UpTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UpTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &uptime_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_UpType;
        break;
      }
      
      // optional uint32 UpType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UpType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &uptype_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_PrevLevel;
        break;
      }
      
      // optional uint32 PrevLevel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PrevLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &prevlevel_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_CurrLevel;
        break;
      }
      
      // optional uint32 CurrLevel = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CurrLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &currlevel_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_Item1;
        break;
      }
      
      // optional uint32 Item1 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Item1:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &item1_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_Item2;
        break;
      }
      
      // optional uint32 Item2 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Item2:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &item2_));
        _set_bit(9);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLogItemUpgrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLogItemUpgrade::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ItemID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->itemid(), output);
  }
  
  // optional uint64 ItemGUID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(2, this->itemguid(), output);
  }
  
  // optional uint32 UpTime = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->uptime(), output);
  }
  
  // optional uint32 UpType = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->uptype(), output);
  }
  
  // optional uint32 Result = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->result(), output);
  }
  
  // optional uint32 RoleID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->roleid(), output);
  }
  
  // optional uint32 PrevLevel = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->prevlevel(), output);
  }
  
  // optional uint32 CurrLevel = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->currlevel(), output);
  }
  
  // optional uint32 Item1 = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->item1(), output);
  }
  
  // optional uint32 Item2 = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->item2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLogItemUpgrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ItemID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->itemid(), target);
  }
  
  // optional uint64 ItemGUID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(2, this->itemguid(), target);
  }
  
  // optional uint32 UpTime = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->uptime(), target);
  }
  
  // optional uint32 UpType = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->uptype(), target);
  }
  
  // optional uint32 Result = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->result(), target);
  }
  
  // optional uint32 RoleID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->roleid(), target);
  }
  
  // optional uint32 PrevLevel = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->prevlevel(), target);
  }
  
  // optional uint32 CurrLevel = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->currlevel(), target);
  }
  
  // optional uint32 Item1 = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->item1(), target);
  }
  
  // optional uint32 Item2 = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->item2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLogItemUpgrade::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ItemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemid());
    }
    
    // optional uint64 ItemGUID = 2;
    if (has_itemguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->itemguid());
    }
    
    // optional uint32 UpTime = 3;
    if (has_uptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->uptime());
    }
    
    // optional uint32 UpType = 4;
    if (has_uptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->uptype());
    }
    
    // optional uint32 Result = 5;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 RoleID = 6;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 PrevLevel = 7;
    if (has_prevlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->prevlevel());
    }
    
    // optional uint32 CurrLevel = 8;
    if (has_currlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->currlevel());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 Item1 = 9;
    if (has_item1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->item1());
    }
    
    // optional uint32 Item2 = 10;
    if (has_item2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->item2());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLogItemUpgrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLogItemUpgrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLogItemUpgrade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLogItemUpgrade::MergeFrom(const CMessageLogItemUpgrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_itemid(from.itemid());
    }
    if (from._has_bit(1)) {
      set_itemguid(from.itemguid());
    }
    if (from._has_bit(2)) {
      set_uptime(from.uptime());
    }
    if (from._has_bit(3)) {
      set_uptype(from.uptype());
    }
    if (from._has_bit(4)) {
      set_result(from.result());
    }
    if (from._has_bit(5)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(6)) {
      set_prevlevel(from.prevlevel());
    }
    if (from._has_bit(7)) {
      set_currlevel(from.currlevel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_item1(from.item1());
    }
    if (from._has_bit(9)) {
      set_item2(from.item2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLogItemUpgrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLogItemUpgrade::CopyFrom(const CMessageLogItemUpgrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLogItemUpgrade::Swap(CMessageLogItemUpgrade* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(itemguid_, other->itemguid_);
    std::swap(uptime_, other->uptime_);
    std::swap(uptype_, other->uptype_);
    std::swap(result_, other->result_);
    std::swap(roleid_, other->roleid_);
    std::swap(prevlevel_, other->prevlevel_);
    std::swap(currlevel_, other->currlevel_);
    std::swap(item1_, other->item1_);
    std::swap(item2_, other->item2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLogItemUpgrade::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLogItemUpgrade::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLogItemUpgrade::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLogItemUpgrade_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLogRoleOpItem::kRoleIDFieldNumber;
const int CMessageLogRoleOpItem::kOpTimeFieldNumber;
const int CMessageLogRoleOpItem::kLineIDFieldNumber;
const int CMessageLogRoleOpItem::kRepetionIDFieldNumber;
const int CMessageLogRoleOpItem::kMapIDFieldNumber;
const int CMessageLogRoleOpItem::kMetierIDFieldNumber;
const int CMessageLogRoleOpItem::kRoleLevelFieldNumber;
const int CMessageLogRoleOpItem::kItemIDFieldNumber;
const int CMessageLogRoleOpItem::kItemNumFieldNumber;
const int CMessageLogRoleOpItem::kItemGUIDFieldNumber;
const int CMessageLogRoleOpItem::kItemTotalFieldNumber;
const int CMessageLogRoleOpItem::kOpTypeFieldNumber;
const int CMessageLogRoleOpItem::kOpParam1FieldNumber;
const int CMessageLogRoleOpItem::kOpParam2FieldNumber;
const int CMessageLogRoleOpItem::kOpParam3FieldNumber;
#endif  // !_MSC_VER

CMessageLogRoleOpItem::CMessageLogRoleOpItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLogRoleOpItem::InitAsDefaultInstance() {}

CMessageLogRoleOpItem::CMessageLogRoleOpItem(const CMessageLogRoleOpItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLogRoleOpItem::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  optime_ = 0u;
  lineid_ = 0u;
  repetionid_ = GOOGLE_ULONGLONG(0);
  mapid_ = 0u;
  metierid_ = 0u;
  rolelevel_ = 0u;
  itemid_ = 0u;
  itemnum_ = 0u;
  itemguid_ = GOOGLE_ULONGLONG(0);
  itemtotal_ = 0u;
  optype_ = 0u;
  opparam1_ = 0;
  opparam2_ = 0;
  opparam3_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLogRoleOpItem::~CMessageLogRoleOpItem() {
  SharedDtor();
}

void CMessageLogRoleOpItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLogRoleOpItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLogRoleOpItem_descriptor_;
}

const CMessageLogRoleOpItem& CMessageLogRoleOpItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageLogRoleOpItem* CMessageLogRoleOpItem::default_instance_ = NULL;

CMessageLogRoleOpItem* CMessageLogRoleOpItem::New() const {
  return new CMessageLogRoleOpItem;
}

void CMessageLogRoleOpItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    optime_ = 0u;
    lineid_ = 0u;
    repetionid_ = GOOGLE_ULONGLONG(0);
    mapid_ = 0u;
    metierid_ = 0u;
    rolelevel_ = 0u;
    itemid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    itemnum_ = 0u;
    itemguid_ = GOOGLE_ULONGLONG(0);
    itemtotal_ = 0u;
    optype_ = 0u;
    opparam1_ = 0;
    opparam2_ = 0;
    opparam3_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLogRoleOpItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_OpTime;
        break;
      }
      
      // optional uint32 OpTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &optime_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_LineID;
        break;
      }
      
      // optional uint32 LineID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lineid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_RepetionID;
        break;
      }
      
      // optional uint64 RepetionID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RepetionID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &repetionid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_MetierID;
        break;
      }
      
      // optional uint32 MetierID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MetierID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &metierid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_RoleLevel;
        break;
      }
      
      // optional uint32 RoleLevel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rolelevel_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_ItemID;
        break;
      }
      
      // optional uint32 ItemID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemid_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_ItemNum;
        break;
      }
      
      // optional uint32 ItemNum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemnum_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_ItemGUID;
        break;
      }
      
      // optional uint64 ItemGUID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemGUID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &itemguid_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_ItemTotal;
        break;
      }
      
      // optional uint32 ItemTotal = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemTotal:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemtotal_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_OpType;
        break;
      }
      
      // optional uint32 OpType = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &optype_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_OpParam1;
        break;
      }
      
      // optional int32 OpParam1 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpParam1:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &opparam1_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_OpParam2;
        break;
      }
      
      // optional int32 OpParam2 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpParam2:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &opparam2_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_OpParam3;
        break;
      }
      
      // optional uint64 OpParam3 = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpParam3:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &opparam3_));
        _set_bit(14);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLogRoleOpItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLogRoleOpItem::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional uint32 OpTime = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->optime(), output);
  }
  
  // optional uint32 LineID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->lineid(), output);
  }
  
  // optional uint64 RepetionID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(4, this->repetionid(), output);
  }
  
  // optional uint32 MapID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->mapid(), output);
  }
  
  // optional uint32 MetierID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->metierid(), output);
  }
  
  // optional uint32 RoleLevel = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->rolelevel(), output);
  }
  
  // optional uint32 ItemID = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->itemid(), output);
  }
  
  // optional uint32 ItemNum = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->itemnum(), output);
  }
  
  // optional uint64 ItemGUID = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(10, this->itemguid(), output);
  }
  
  // optional uint32 ItemTotal = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->itemtotal(), output);
  }
  
  // optional uint32 OpType = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->optype(), output);
  }
  
  // optional int32 OpParam1 = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(13, this->opparam1(), output);
  }
  
  // optional int32 OpParam2 = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(14, this->opparam2(), output);
  }
  
  // optional uint64 OpParam3 = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(15, this->opparam3(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLogRoleOpItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional uint32 OpTime = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->optime(), target);
  }
  
  // optional uint32 LineID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->lineid(), target);
  }
  
  // optional uint64 RepetionID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(4, this->repetionid(), target);
  }
  
  // optional uint32 MapID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->mapid(), target);
  }
  
  // optional uint32 MetierID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->metierid(), target);
  }
  
  // optional uint32 RoleLevel = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->rolelevel(), target);
  }
  
  // optional uint32 ItemID = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->itemid(), target);
  }
  
  // optional uint32 ItemNum = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->itemnum(), target);
  }
  
  // optional uint64 ItemGUID = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(10, this->itemguid(), target);
  }
  
  // optional uint32 ItemTotal = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->itemtotal(), target);
  }
  
  // optional uint32 OpType = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->optype(), target);
  }
  
  // optional int32 OpParam1 = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(13, this->opparam1(), target);
  }
  
  // optional int32 OpParam2 = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(14, this->opparam2(), target);
  }
  
  // optional uint64 OpParam3 = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(15, this->opparam3(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLogRoleOpItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 OpTime = 2;
    if (has_optime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->optime());
    }
    
    // optional uint32 LineID = 3;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lineid());
    }
    
    // optional uint64 RepetionID = 4;
    if (has_repetionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->repetionid());
    }
    
    // optional uint32 MapID = 5;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 MetierID = 6;
    if (has_metierid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->metierid());
    }
    
    // optional uint32 RoleLevel = 7;
    if (has_rolelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rolelevel());
    }
    
    // optional uint32 ItemID = 8;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 ItemNum = 9;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemnum());
    }
    
    // optional uint64 ItemGUID = 10;
    if (has_itemguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->itemguid());
    }
    
    // optional uint32 ItemTotal = 11;
    if (has_itemtotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemtotal());
    }
    
    // optional uint32 OpType = 12;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->optype());
    }
    
    // optional int32 OpParam1 = 13;
    if (has_opparam1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->opparam1());
    }
    
    // optional int32 OpParam2 = 14;
    if (has_opparam2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->opparam2());
    }
    
    // optional uint64 OpParam3 = 15;
    if (has_opparam3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->opparam3());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLogRoleOpItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLogRoleOpItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLogRoleOpItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLogRoleOpItem::MergeFrom(const CMessageLogRoleOpItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_optime(from.optime());
    }
    if (from._has_bit(2)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(3)) {
      set_repetionid(from.repetionid());
    }
    if (from._has_bit(4)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(5)) {
      set_metierid(from.metierid());
    }
    if (from._has_bit(6)) {
      set_rolelevel(from.rolelevel());
    }
    if (from._has_bit(7)) {
      set_itemid(from.itemid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_itemnum(from.itemnum());
    }
    if (from._has_bit(9)) {
      set_itemguid(from.itemguid());
    }
    if (from._has_bit(10)) {
      set_itemtotal(from.itemtotal());
    }
    if (from._has_bit(11)) {
      set_optype(from.optype());
    }
    if (from._has_bit(12)) {
      set_opparam1(from.opparam1());
    }
    if (from._has_bit(13)) {
      set_opparam2(from.opparam2());
    }
    if (from._has_bit(14)) {
      set_opparam3(from.opparam3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLogRoleOpItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLogRoleOpItem::CopyFrom(const CMessageLogRoleOpItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLogRoleOpItem::Swap(CMessageLogRoleOpItem* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(optime_, other->optime_);
    std::swap(lineid_, other->lineid_);
    std::swap(repetionid_, other->repetionid_);
    std::swap(mapid_, other->mapid_);
    std::swap(metierid_, other->metierid_);
    std::swap(rolelevel_, other->rolelevel_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(itemguid_, other->itemguid_);
    std::swap(itemtotal_, other->itemtotal_);
    std::swap(optype_, other->optype_);
    std::swap(opparam1_, other->opparam1_);
    std::swap(opparam2_, other->opparam2_);
    std::swap(opparam3_, other->opparam3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLogRoleOpItem::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLogRoleOpItem::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLogRoleOpItem::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLogRoleOpItem_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLogRoleOpExp::kRoleIDFieldNumber;
const int CMessageLogRoleOpExp::kOpTimeFieldNumber;
const int CMessageLogRoleOpExp::kLineIDFieldNumber;
const int CMessageLogRoleOpExp::kRepetionIDFieldNumber;
const int CMessageLogRoleOpExp::kMapIDFieldNumber;
const int CMessageLogRoleOpExp::kMetierIDFieldNumber;
const int CMessageLogRoleOpExp::kRoleLevelFieldNumber;
const int CMessageLogRoleOpExp::kExpTypeFieldNumber;
const int CMessageLogRoleOpExp::kOpTypeFieldNumber;
const int CMessageLogRoleOpExp::kCurExpFieldNumber;
const int CMessageLogRoleOpExp::kTeamFieldNumber;
const int CMessageLogRoleOpExp::kDeltaExpFieldNumber;
const int CMessageLogRoleOpExp::kOpParam1FieldNumber;
const int CMessageLogRoleOpExp::kOpParam2FieldNumber;
const int CMessageLogRoleOpExp::kOpParam3FieldNumber;
#endif  // !_MSC_VER

CMessageLogRoleOpExp::CMessageLogRoleOpExp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLogRoleOpExp::InitAsDefaultInstance() {}

CMessageLogRoleOpExp::CMessageLogRoleOpExp(const CMessageLogRoleOpExp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLogRoleOpExp::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  optime_ = 0u;
  lineid_ = 0u;
  repetionid_ = GOOGLE_ULONGLONG(0);
  mapid_ = 0u;
  metierid_ = 0u;
  rolelevel_ = 0u;
  exptype_ = 0;
  optype_ = 0u;
  curexp_ = GOOGLE_ULONGLONG(0);
  team_ = 0u;
  deltaexp_ = 0u;
  opparam1_ = 0;
  opparam2_ = 0;
  opparam3_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLogRoleOpExp::~CMessageLogRoleOpExp() {
  SharedDtor();
}

void CMessageLogRoleOpExp::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLogRoleOpExp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLogRoleOpExp_descriptor_;
}

const CMessageLogRoleOpExp& CMessageLogRoleOpExp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageLogRoleOpExp* CMessageLogRoleOpExp::default_instance_ = NULL;

CMessageLogRoleOpExp* CMessageLogRoleOpExp::New() const {
  return new CMessageLogRoleOpExp;
}

void CMessageLogRoleOpExp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    optime_ = 0u;
    lineid_ = 0u;
    repetionid_ = GOOGLE_ULONGLONG(0);
    mapid_ = 0u;
    metierid_ = 0u;
    rolelevel_ = 0u;
    exptype_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    optype_ = 0u;
    curexp_ = GOOGLE_ULONGLONG(0);
    team_ = 0u;
    deltaexp_ = 0u;
    opparam1_ = 0;
    opparam2_ = 0;
    opparam3_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLogRoleOpExp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_OpTime;
        break;
      }
      
      // optional uint32 OpTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &optime_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_LineID;
        break;
      }
      
      // optional uint32 LineID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lineid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_RepetionID;
        break;
      }
      
      // optional uint64 RepetionID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RepetionID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &repetionid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_MetierID;
        break;
      }
      
      // optional uint32 MetierID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MetierID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &metierid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_RoleLevel;
        break;
      }
      
      // optional uint32 RoleLevel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rolelevel_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_ExpType;
        break;
      }
      
      // optional .EUpgradeType ExpType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExpType:
        int value;
        DO_(::google::protobuf::internal::WireFormat::ReadEnum(input, &value));
        if (EUpgradeType_IsValid(value)) {
          set_exptype(static_cast< EUpgradeType >(value));
        } else {
          mutable_unknown_fields()->AddVarint(8, value);
        }
        if (input->ExpectTag(72)) goto parse_OpType;
        break;
      }
      
      // optional uint32 OpType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &optype_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_CurExp;
        break;
      }
      
      // optional uint64 CurExp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CurExp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &curexp_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_Team;
        break;
      }
      
      // optional uint32 Team = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Team:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &team_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_DeltaExp;
        break;
      }
      
      // optional uint32 DeltaExp = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeltaExp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deltaexp_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_OpParam1;
        break;
      }
      
      // optional int32 OpParam1 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpParam1:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &opparam1_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_OpParam2;
        break;
      }
      
      // optional int32 OpParam2 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpParam2:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &opparam2_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_OpParam3;
        break;
      }
      
      // optional uint64 OpParam3 = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpParam3:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &opparam3_));
        _set_bit(14);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLogRoleOpExp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLogRoleOpExp::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional uint32 OpTime = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->optime(), output);
  }
  
  // optional uint32 LineID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->lineid(), output);
  }
  
  // optional uint64 RepetionID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(4, this->repetionid(), output);
  }
  
  // optional uint32 MapID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->mapid(), output);
  }
  
  // optional uint32 MetierID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->metierid(), output);
  }
  
  // optional uint32 RoleLevel = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->rolelevel(), output);
  }
  
  // optional .EUpgradeType ExpType = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteEnum(8, this->exptype(), output);
  }
  
  // optional uint32 OpType = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->optype(), output);
  }
  
  // optional uint64 CurExp = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(10, this->curexp(), output);
  }
  
  // optional uint32 Team = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->team(), output);
  }
  
  // optional uint32 DeltaExp = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->deltaexp(), output);
  }
  
  // optional int32 OpParam1 = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(13, this->opparam1(), output);
  }
  
  // optional int32 OpParam2 = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(14, this->opparam2(), output);
  }
  
  // optional uint64 OpParam3 = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(15, this->opparam3(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLogRoleOpExp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional uint32 OpTime = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->optime(), target);
  }
  
  // optional uint32 LineID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->lineid(), target);
  }
  
  // optional uint64 RepetionID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(4, this->repetionid(), target);
  }
  
  // optional uint32 MapID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->mapid(), target);
  }
  
  // optional uint32 MetierID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->metierid(), target);
  }
  
  // optional uint32 RoleLevel = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->rolelevel(), target);
  }
  
  // optional .EUpgradeType ExpType = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteEnumToArray(8, this->exptype(), target);
  }
  
  // optional uint32 OpType = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->optype(), target);
  }
  
  // optional uint64 CurExp = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(10, this->curexp(), target);
  }
  
  // optional uint32 Team = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->team(), target);
  }
  
  // optional uint32 DeltaExp = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->deltaexp(), target);
  }
  
  // optional int32 OpParam1 = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(13, this->opparam1(), target);
  }
  
  // optional int32 OpParam2 = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(14, this->opparam2(), target);
  }
  
  // optional uint64 OpParam3 = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(15, this->opparam3(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLogRoleOpExp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 OpTime = 2;
    if (has_optime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->optime());
    }
    
    // optional uint32 LineID = 3;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lineid());
    }
    
    // optional uint64 RepetionID = 4;
    if (has_repetionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->repetionid());
    }
    
    // optional uint32 MapID = 5;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 MetierID = 6;
    if (has_metierid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->metierid());
    }
    
    // optional uint32 RoleLevel = 7;
    if (has_rolelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rolelevel());
    }
    
    // optional .EUpgradeType ExpType = 8;
    if (has_exptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::EnumSize(this->exptype());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 OpType = 9;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->optype());
    }
    
    // optional uint64 CurExp = 10;
    if (has_curexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->curexp());
    }
    
    // optional uint32 Team = 11;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->team());
    }
    
    // optional uint32 DeltaExp = 12;
    if (has_deltaexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deltaexp());
    }
    
    // optional int32 OpParam1 = 13;
    if (has_opparam1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->opparam1());
    }
    
    // optional int32 OpParam2 = 14;
    if (has_opparam2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->opparam2());
    }
    
    // optional uint64 OpParam3 = 15;
    if (has_opparam3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->opparam3());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLogRoleOpExp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLogRoleOpExp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLogRoleOpExp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLogRoleOpExp::MergeFrom(const CMessageLogRoleOpExp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_optime(from.optime());
    }
    if (from._has_bit(2)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(3)) {
      set_repetionid(from.repetionid());
    }
    if (from._has_bit(4)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(5)) {
      set_metierid(from.metierid());
    }
    if (from._has_bit(6)) {
      set_rolelevel(from.rolelevel());
    }
    if (from._has_bit(7)) {
      set_exptype(from.exptype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_optype(from.optype());
    }
    if (from._has_bit(9)) {
      set_curexp(from.curexp());
    }
    if (from._has_bit(10)) {
      set_team(from.team());
    }
    if (from._has_bit(11)) {
      set_deltaexp(from.deltaexp());
    }
    if (from._has_bit(12)) {
      set_opparam1(from.opparam1());
    }
    if (from._has_bit(13)) {
      set_opparam2(from.opparam2());
    }
    if (from._has_bit(14)) {
      set_opparam3(from.opparam3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLogRoleOpExp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLogRoleOpExp::CopyFrom(const CMessageLogRoleOpExp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLogRoleOpExp::Swap(CMessageLogRoleOpExp* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(optime_, other->optime_);
    std::swap(lineid_, other->lineid_);
    std::swap(repetionid_, other->repetionid_);
    std::swap(mapid_, other->mapid_);
    std::swap(metierid_, other->metierid_);
    std::swap(rolelevel_, other->rolelevel_);
    std::swap(exptype_, other->exptype_);
    std::swap(optype_, other->optype_);
    std::swap(curexp_, other->curexp_);
    std::swap(team_, other->team_);
    std::swap(deltaexp_, other->deltaexp_);
    std::swap(opparam1_, other->opparam1_);
    std::swap(opparam2_, other->opparam2_);
    std::swap(opparam3_, other->opparam3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLogRoleOpExp::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLogRoleOpExp::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLogRoleOpExp::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLogRoleOpExp_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLogRoleBuffer::kRoleIDFieldNumber;
const int CMessageLogRoleBuffer::kOpTimeFieldNumber;
const int CMessageLogRoleBuffer::kLineIDFieldNumber;
const int CMessageLogRoleBuffer::kMapIDFieldNumber;
const int CMessageLogRoleBuffer::kPersistTimeFieldNumber;
const int CMessageLogRoleBuffer::kOpTypeFieldNumber;
const int CMessageLogRoleBuffer::kBuffIDFieldNumber;
const int CMessageLogRoleBuffer::kOpParam1FieldNumber;
const int CMessageLogRoleBuffer::kOpParam2FieldNumber;
#endif  // !_MSC_VER

CMessageLogRoleBuffer::CMessageLogRoleBuffer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLogRoleBuffer::InitAsDefaultInstance() {}

CMessageLogRoleBuffer::CMessageLogRoleBuffer(const CMessageLogRoleBuffer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLogRoleBuffer::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  optime_ = 0u;
  lineid_ = 0u;
  mapid_ = 0u;
  persisttime_ = 0u;
  optype_ = 0u;
  buffid_ = 0u;
  opparam1_ = 0;
  opparam2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLogRoleBuffer::~CMessageLogRoleBuffer() {
  SharedDtor();
}

void CMessageLogRoleBuffer::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLogRoleBuffer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLogRoleBuffer_descriptor_;
}

const CMessageLogRoleBuffer& CMessageLogRoleBuffer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageLogRoleBuffer* CMessageLogRoleBuffer::default_instance_ = NULL;

CMessageLogRoleBuffer* CMessageLogRoleBuffer::New() const {
  return new CMessageLogRoleBuffer;
}

void CMessageLogRoleBuffer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    optime_ = 0u;
    lineid_ = 0u;
    mapid_ = 0u;
    persisttime_ = 0u;
    optype_ = 0u;
    buffid_ = 0u;
    opparam1_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    opparam2_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLogRoleBuffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_OpTime;
        break;
      }
      
      // optional uint32 OpTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &optime_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_LineID;
        break;
      }
      
      // optional uint32 LineID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lineid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_PersistTime;
        break;
      }
      
      // optional uint32 PersistTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PersistTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &persisttime_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_OpType;
        break;
      }
      
      // optional uint32 OpType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &optype_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_BuffID;
        break;
      }
      
      // optional uint32 BuffID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BuffID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &buffid_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_OpParam1;
        break;
      }
      
      // optional int32 OpParam1 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpParam1:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &opparam1_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_OpParam2;
        break;
      }
      
      // optional int32 OpParam2 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpParam2:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &opparam2_));
        _set_bit(8);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLogRoleBuffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLogRoleBuffer::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional uint32 OpTime = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->optime(), output);
  }
  
  // optional uint32 LineID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->lineid(), output);
  }
  
  // optional uint32 MapID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->mapid(), output);
  }
  
  // optional uint32 PersistTime = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->persisttime(), output);
  }
  
  // optional uint32 OpType = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->optype(), output);
  }
  
  // optional uint32 BuffID = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->buffid(), output);
  }
  
  // optional int32 OpParam1 = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(8, this->opparam1(), output);
  }
  
  // optional int32 OpParam2 = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(9, this->opparam2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLogRoleBuffer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional uint32 OpTime = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->optime(), target);
  }
  
  // optional uint32 LineID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->lineid(), target);
  }
  
  // optional uint32 MapID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->mapid(), target);
  }
  
  // optional uint32 PersistTime = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->persisttime(), target);
  }
  
  // optional uint32 OpType = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->optype(), target);
  }
  
  // optional uint32 BuffID = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->buffid(), target);
  }
  
  // optional int32 OpParam1 = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(8, this->opparam1(), target);
  }
  
  // optional int32 OpParam2 = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(9, this->opparam2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLogRoleBuffer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 OpTime = 2;
    if (has_optime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->optime());
    }
    
    // optional uint32 LineID = 3;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lineid());
    }
    
    // optional uint32 MapID = 4;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 PersistTime = 5;
    if (has_persisttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->persisttime());
    }
    
    // optional uint32 OpType = 6;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->optype());
    }
    
    // optional uint32 BuffID = 7;
    if (has_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->buffid());
    }
    
    // optional int32 OpParam1 = 8;
    if (has_opparam1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->opparam1());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 OpParam2 = 9;
    if (has_opparam2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->opparam2());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLogRoleBuffer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLogRoleBuffer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLogRoleBuffer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLogRoleBuffer::MergeFrom(const CMessageLogRoleBuffer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_optime(from.optime());
    }
    if (from._has_bit(2)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(3)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(4)) {
      set_persisttime(from.persisttime());
    }
    if (from._has_bit(5)) {
      set_optype(from.optype());
    }
    if (from._has_bit(6)) {
      set_buffid(from.buffid());
    }
    if (from._has_bit(7)) {
      set_opparam1(from.opparam1());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_opparam2(from.opparam2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLogRoleBuffer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLogRoleBuffer::CopyFrom(const CMessageLogRoleBuffer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLogRoleBuffer::Swap(CMessageLogRoleBuffer* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(optime_, other->optime_);
    std::swap(lineid_, other->lineid_);
    std::swap(mapid_, other->mapid_);
    std::swap(persisttime_, other->persisttime_);
    std::swap(optype_, other->optype_);
    std::swap(buffid_, other->buffid_);
    std::swap(opparam1_, other->opparam1_);
    std::swap(opparam2_, other->opparam2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLogRoleBuffer::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLogRoleBuffer::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLogRoleBuffer::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLogRoleBuffer_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLogRoleOpMoney::kRoleIDFieldNumber;
const int CMessageLogRoleOpMoney::kOpTimeFieldNumber;
const int CMessageLogRoleOpMoney::kLineIDFieldNumber;
const int CMessageLogRoleOpMoney::kRepetionIDFieldNumber;
const int CMessageLogRoleOpMoney::kMapIDFieldNumber;
const int CMessageLogRoleOpMoney::kMetierIDFieldNumber;
const int CMessageLogRoleOpMoney::kRoleLevelFieldNumber;
const int CMessageLogRoleOpMoney::kMoneyTypeFieldNumber;
const int CMessageLogRoleOpMoney::kOpTypeFieldNumber;
const int CMessageLogRoleOpMoney::kCurMoneyFieldNumber;
const int CMessageLogRoleOpMoney::kDeltaMoneyFieldNumber;
const int CMessageLogRoleOpMoney::kOpParam1FieldNumber;
const int CMessageLogRoleOpMoney::kOpParam2FieldNumber;
const int CMessageLogRoleOpMoney::kOpParam3FieldNumber;
#endif  // !_MSC_VER

CMessageLogRoleOpMoney::CMessageLogRoleOpMoney()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLogRoleOpMoney::InitAsDefaultInstance() {}

CMessageLogRoleOpMoney::CMessageLogRoleOpMoney(const CMessageLogRoleOpMoney& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLogRoleOpMoney::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  optime_ = 0u;
  lineid_ = 0u;
  repetionid_ = GOOGLE_ULONGLONG(0);
  mapid_ = 0u;
  metierid_ = 0u;
  rolelevel_ = 0u;
  moneytype_ = 0u;
  optype_ = 0u;
  curmoney_ = 0;
  deltamoney_ = 0;
  opparam1_ = 0;
  opparam2_ = 0;
  opparam3_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLogRoleOpMoney::~CMessageLogRoleOpMoney() {
  SharedDtor();
}

void CMessageLogRoleOpMoney::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLogRoleOpMoney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLogRoleOpMoney_descriptor_;
}

const CMessageLogRoleOpMoney& CMessageLogRoleOpMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageLogRoleOpMoney* CMessageLogRoleOpMoney::default_instance_ = NULL;

CMessageLogRoleOpMoney* CMessageLogRoleOpMoney::New() const {
  return new CMessageLogRoleOpMoney;
}

void CMessageLogRoleOpMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    optime_ = 0u;
    lineid_ = 0u;
    repetionid_ = GOOGLE_ULONGLONG(0);
    mapid_ = 0u;
    metierid_ = 0u;
    rolelevel_ = 0u;
    moneytype_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    optype_ = 0u;
    curmoney_ = 0;
    deltamoney_ = 0;
    opparam1_ = 0;
    opparam2_ = 0;
    opparam3_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLogRoleOpMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_OpTime;
        break;
      }
      
      // optional uint32 OpTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &optime_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_LineID;
        break;
      }
      
      // optional uint32 LineID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lineid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_RepetionID;
        break;
      }
      
      // optional uint64 RepetionID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RepetionID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &repetionid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_MetierID;
        break;
      }
      
      // optional uint32 MetierID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MetierID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &metierid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_RoleLevel;
        break;
      }
      
      // optional uint32 RoleLevel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rolelevel_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_MoneyType;
        break;
      }
      
      // optional uint32 MoneyType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MoneyType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &moneytype_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_OpType;
        break;
      }
      
      // optional uint32 OpType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &optype_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_CurMoney;
        break;
      }
      
      // optional int32 CurMoney = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CurMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &curmoney_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_DeltaMoney;
        break;
      }
      
      // optional int32 DeltaMoney = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeltaMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &deltamoney_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_OpParam1;
        break;
      }
      
      // optional int32 OpParam1 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpParam1:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &opparam1_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_OpParam2;
        break;
      }
      
      // optional int32 OpParam2 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpParam2:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &opparam2_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_OpParam3;
        break;
      }
      
      // optional uint64 OpParam3 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpParam3:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &opparam3_));
        _set_bit(13);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLogRoleOpMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLogRoleOpMoney::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional uint32 OpTime = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->optime(), output);
  }
  
  // optional uint32 LineID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->lineid(), output);
  }
  
  // optional uint64 RepetionID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(4, this->repetionid(), output);
  }
  
  // optional uint32 MapID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->mapid(), output);
  }
  
  // optional uint32 MetierID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->metierid(), output);
  }
  
  // optional uint32 RoleLevel = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->rolelevel(), output);
  }
  
  // optional uint32 MoneyType = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->moneytype(), output);
  }
  
  // optional uint32 OpType = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->optype(), output);
  }
  
  // optional int32 CurMoney = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(10, this->curmoney(), output);
  }
  
  // optional int32 DeltaMoney = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(11, this->deltamoney(), output);
  }
  
  // optional int32 OpParam1 = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(12, this->opparam1(), output);
  }
  
  // optional int32 OpParam2 = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(13, this->opparam2(), output);
  }
  
  // optional uint64 OpParam3 = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(14, this->opparam3(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLogRoleOpMoney::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional uint32 OpTime = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->optime(), target);
  }
  
  // optional uint32 LineID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->lineid(), target);
  }
  
  // optional uint64 RepetionID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(4, this->repetionid(), target);
  }
  
  // optional uint32 MapID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->mapid(), target);
  }
  
  // optional uint32 MetierID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->metierid(), target);
  }
  
  // optional uint32 RoleLevel = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->rolelevel(), target);
  }
  
  // optional uint32 MoneyType = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->moneytype(), target);
  }
  
  // optional uint32 OpType = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->optype(), target);
  }
  
  // optional int32 CurMoney = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(10, this->curmoney(), target);
  }
  
  // optional int32 DeltaMoney = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(11, this->deltamoney(), target);
  }
  
  // optional int32 OpParam1 = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(12, this->opparam1(), target);
  }
  
  // optional int32 OpParam2 = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(13, this->opparam2(), target);
  }
  
  // optional uint64 OpParam3 = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(14, this->opparam3(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLogRoleOpMoney::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 OpTime = 2;
    if (has_optime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->optime());
    }
    
    // optional uint32 LineID = 3;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lineid());
    }
    
    // optional uint64 RepetionID = 4;
    if (has_repetionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->repetionid());
    }
    
    // optional uint32 MapID = 5;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 MetierID = 6;
    if (has_metierid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->metierid());
    }
    
    // optional uint32 RoleLevel = 7;
    if (has_rolelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rolelevel());
    }
    
    // optional uint32 MoneyType = 8;
    if (has_moneytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->moneytype());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 OpType = 9;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->optype());
    }
    
    // optional int32 CurMoney = 10;
    if (has_curmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->curmoney());
    }
    
    // optional int32 DeltaMoney = 11;
    if (has_deltamoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->deltamoney());
    }
    
    // optional int32 OpParam1 = 12;
    if (has_opparam1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->opparam1());
    }
    
    // optional int32 OpParam2 = 13;
    if (has_opparam2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->opparam2());
    }
    
    // optional uint64 OpParam3 = 14;
    if (has_opparam3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->opparam3());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLogRoleOpMoney::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLogRoleOpMoney* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLogRoleOpMoney*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLogRoleOpMoney::MergeFrom(const CMessageLogRoleOpMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_optime(from.optime());
    }
    if (from._has_bit(2)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(3)) {
      set_repetionid(from.repetionid());
    }
    if (from._has_bit(4)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(5)) {
      set_metierid(from.metierid());
    }
    if (from._has_bit(6)) {
      set_rolelevel(from.rolelevel());
    }
    if (from._has_bit(7)) {
      set_moneytype(from.moneytype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_optype(from.optype());
    }
    if (from._has_bit(9)) {
      set_curmoney(from.curmoney());
    }
    if (from._has_bit(10)) {
      set_deltamoney(from.deltamoney());
    }
    if (from._has_bit(11)) {
      set_opparam1(from.opparam1());
    }
    if (from._has_bit(12)) {
      set_opparam2(from.opparam2());
    }
    if (from._has_bit(13)) {
      set_opparam3(from.opparam3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLogRoleOpMoney::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLogRoleOpMoney::CopyFrom(const CMessageLogRoleOpMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLogRoleOpMoney::Swap(CMessageLogRoleOpMoney* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(optime_, other->optime_);
    std::swap(lineid_, other->lineid_);
    std::swap(repetionid_, other->repetionid_);
    std::swap(mapid_, other->mapid_);
    std::swap(metierid_, other->metierid_);
    std::swap(rolelevel_, other->rolelevel_);
    std::swap(moneytype_, other->moneytype_);
    std::swap(optype_, other->optype_);
    std::swap(curmoney_, other->curmoney_);
    std::swap(deltamoney_, other->deltamoney_);
    std::swap(opparam1_, other->opparam1_);
    std::swap(opparam2_, other->opparam2_);
    std::swap(opparam3_, other->opparam3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLogRoleOpMoney::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLogRoleOpMoney::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLogRoleOpMoney::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLogRoleOpMoney_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLogRoleBeKilled::kRoleIDFieldNumber;
const int CMessageLogRoleBeKilled::kOpTimeFieldNumber;
const int CMessageLogRoleBeKilled::kLineIDFieldNumber;
const int CMessageLogRoleBeKilled::kRepetionIDFieldNumber;
const int CMessageLogRoleBeKilled::kMapIDFieldNumber;
const int CMessageLogRoleBeKilled::kMetierIDFieldNumber;
const int CMessageLogRoleBeKilled::kRoleLevelFieldNumber;
const int CMessageLogRoleBeKilled::kKillerTypeFieldNumber;
const int CMessageLogRoleBeKilled::kKillerIDFieldNumber;
const int CMessageLogRoleBeKilled::kKillerMetierFieldNumber;
const int CMessageLogRoleBeKilled::kKillerLevelFieldNumber;
#endif  // !_MSC_VER

CMessageLogRoleBeKilled::CMessageLogRoleBeKilled()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLogRoleBeKilled::InitAsDefaultInstance() {}

CMessageLogRoleBeKilled::CMessageLogRoleBeKilled(const CMessageLogRoleBeKilled& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLogRoleBeKilled::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  optime_ = 0u;
  lineid_ = 0u;
  repetionid_ = GOOGLE_ULONGLONG(0);
  mapid_ = 0u;
  metierid_ = 0u;
  rolelevel_ = 0u;
  killertype_ = 0u;
  killerid_ = 0u;
  killermetier_ = 0u;
  killerlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLogRoleBeKilled::~CMessageLogRoleBeKilled() {
  SharedDtor();
}

void CMessageLogRoleBeKilled::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLogRoleBeKilled::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLogRoleBeKilled_descriptor_;
}

const CMessageLogRoleBeKilled& CMessageLogRoleBeKilled::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageLogRoleBeKilled* CMessageLogRoleBeKilled::default_instance_ = NULL;

CMessageLogRoleBeKilled* CMessageLogRoleBeKilled::New() const {
  return new CMessageLogRoleBeKilled;
}

void CMessageLogRoleBeKilled::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    optime_ = 0u;
    lineid_ = 0u;
    repetionid_ = GOOGLE_ULONGLONG(0);
    mapid_ = 0u;
    metierid_ = 0u;
    rolelevel_ = 0u;
    killertype_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    killerid_ = 0u;
    killermetier_ = 0u;
    killerlevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLogRoleBeKilled::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_OpTime;
        break;
      }
      
      // optional uint32 OpTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &optime_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_LineID;
        break;
      }
      
      // optional uint32 LineID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lineid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_RepetionID;
        break;
      }
      
      // optional uint64 RepetionID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RepetionID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &repetionid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_MetierID;
        break;
      }
      
      // optional uint32 MetierID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MetierID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &metierid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_RoleLevel;
        break;
      }
      
      // optional uint32 RoleLevel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rolelevel_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_KillerType;
        break;
      }
      
      // optional uint32 KillerType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_KillerType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &killertype_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_KillerID;
        break;
      }
      
      // optional uint32 KillerID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_KillerID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &killerid_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_KillerMetier;
        break;
      }
      
      // optional uint32 KillerMetier = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_KillerMetier:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &killermetier_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_KillerLevel;
        break;
      }
      
      // optional uint32 KillerLevel = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_KillerLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &killerlevel_));
        _set_bit(10);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLogRoleBeKilled::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLogRoleBeKilled::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional uint32 OpTime = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->optime(), output);
  }
  
  // optional uint32 LineID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->lineid(), output);
  }
  
  // optional uint64 RepetionID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(4, this->repetionid(), output);
  }
  
  // optional uint32 MapID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->mapid(), output);
  }
  
  // optional uint32 MetierID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->metierid(), output);
  }
  
  // optional uint32 RoleLevel = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->rolelevel(), output);
  }
  
  // optional uint32 KillerType = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->killertype(), output);
  }
  
  // optional uint32 KillerID = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->killerid(), output);
  }
  
  // optional uint32 KillerMetier = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->killermetier(), output);
  }
  
  // optional uint32 KillerLevel = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->killerlevel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLogRoleBeKilled::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional uint32 OpTime = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->optime(), target);
  }
  
  // optional uint32 LineID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->lineid(), target);
  }
  
  // optional uint64 RepetionID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(4, this->repetionid(), target);
  }
  
  // optional uint32 MapID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->mapid(), target);
  }
  
  // optional uint32 MetierID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->metierid(), target);
  }
  
  // optional uint32 RoleLevel = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->rolelevel(), target);
  }
  
  // optional uint32 KillerType = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->killertype(), target);
  }
  
  // optional uint32 KillerID = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->killerid(), target);
  }
  
  // optional uint32 KillerMetier = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->killermetier(), target);
  }
  
  // optional uint32 KillerLevel = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->killerlevel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLogRoleBeKilled::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 OpTime = 2;
    if (has_optime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->optime());
    }
    
    // optional uint32 LineID = 3;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lineid());
    }
    
    // optional uint64 RepetionID = 4;
    if (has_repetionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->repetionid());
    }
    
    // optional uint32 MapID = 5;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 MetierID = 6;
    if (has_metierid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->metierid());
    }
    
    // optional uint32 RoleLevel = 7;
    if (has_rolelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rolelevel());
    }
    
    // optional uint32 KillerType = 8;
    if (has_killertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->killertype());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 KillerID = 9;
    if (has_killerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->killerid());
    }
    
    // optional uint32 KillerMetier = 10;
    if (has_killermetier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->killermetier());
    }
    
    // optional uint32 KillerLevel = 11;
    if (has_killerlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->killerlevel());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLogRoleBeKilled::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLogRoleBeKilled* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLogRoleBeKilled*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLogRoleBeKilled::MergeFrom(const CMessageLogRoleBeKilled& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_optime(from.optime());
    }
    if (from._has_bit(2)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(3)) {
      set_repetionid(from.repetionid());
    }
    if (from._has_bit(4)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(5)) {
      set_metierid(from.metierid());
    }
    if (from._has_bit(6)) {
      set_rolelevel(from.rolelevel());
    }
    if (from._has_bit(7)) {
      set_killertype(from.killertype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_killerid(from.killerid());
    }
    if (from._has_bit(9)) {
      set_killermetier(from.killermetier());
    }
    if (from._has_bit(10)) {
      set_killerlevel(from.killerlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLogRoleBeKilled::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLogRoleBeKilled::CopyFrom(const CMessageLogRoleBeKilled& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLogRoleBeKilled::Swap(CMessageLogRoleBeKilled* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(optime_, other->optime_);
    std::swap(lineid_, other->lineid_);
    std::swap(repetionid_, other->repetionid_);
    std::swap(mapid_, other->mapid_);
    std::swap(metierid_, other->metierid_);
    std::swap(rolelevel_, other->rolelevel_);
    std::swap(killertype_, other->killertype_);
    std::swap(killerid_, other->killerid_);
    std::swap(killermetier_, other->killermetier_);
    std::swap(killerlevel_, other->killerlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLogRoleBeKilled::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLogRoleBeKilled::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLogRoleBeKilled::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLogRoleBeKilled_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLogRoleOpTask::kRoleIDFieldNumber;
const int CMessageLogRoleOpTask::kOpTimeFieldNumber;
const int CMessageLogRoleOpTask::kLineIDFieldNumber;
const int CMessageLogRoleOpTask::kRepetionIDFieldNumber;
const int CMessageLogRoleOpTask::kMapIDFieldNumber;
const int CMessageLogRoleOpTask::kMetierIDFieldNumber;
const int CMessageLogRoleOpTask::kRoleLevelFieldNumber;
const int CMessageLogRoleOpTask::kTaskIDFieldNumber;
const int CMessageLogRoleOpTask::kOpTypeFieldNumber;
const int CMessageLogRoleOpTask::kOpParam1FieldNumber;
const int CMessageLogRoleOpTask::kOpParam2FieldNumber;
const int CMessageLogRoleOpTask::kOpParam3FieldNumber;
#endif  // !_MSC_VER

CMessageLogRoleOpTask::CMessageLogRoleOpTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLogRoleOpTask::InitAsDefaultInstance() {}

CMessageLogRoleOpTask::CMessageLogRoleOpTask(const CMessageLogRoleOpTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLogRoleOpTask::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  optime_ = 0u;
  lineid_ = 0u;
  repetionid_ = GOOGLE_ULONGLONG(0);
  mapid_ = 0u;
  metierid_ = 0u;
  rolelevel_ = 0u;
  taskid_ = 0u;
  optype_ = 1;
  opparam1_ = 0;
  opparam2_ = 0;
  opparam3_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLogRoleOpTask::~CMessageLogRoleOpTask() {
  SharedDtor();
}

void CMessageLogRoleOpTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLogRoleOpTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLogRoleOpTask_descriptor_;
}

const CMessageLogRoleOpTask& CMessageLogRoleOpTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageLogRoleOpTask* CMessageLogRoleOpTask::default_instance_ = NULL;

CMessageLogRoleOpTask* CMessageLogRoleOpTask::New() const {
  return new CMessageLogRoleOpTask;
}

void CMessageLogRoleOpTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    optime_ = 0u;
    lineid_ = 0u;
    repetionid_ = GOOGLE_ULONGLONG(0);
    mapid_ = 0u;
    metierid_ = 0u;
    rolelevel_ = 0u;
    taskid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    optype_ = 1;
    opparam1_ = 0;
    opparam2_ = 0;
    opparam3_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLogRoleOpTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_OpTime;
        break;
      }
      
      // optional uint32 OpTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &optime_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_LineID;
        break;
      }
      
      // optional uint32 LineID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lineid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_RepetionID;
        break;
      }
      
      // optional uint64 RepetionID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RepetionID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &repetionid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_MetierID;
        break;
      }
      
      // optional uint32 MetierID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MetierID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &metierid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_RoleLevel;
        break;
      }
      
      // optional uint32 RoleLevel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rolelevel_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_TaskID;
        break;
      }
      
      // optional uint32 TaskID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TaskID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskid_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_OpType;
        break;
      }
      
      // optional .ETaskAction OpType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpType:
        int value;
        DO_(::google::protobuf::internal::WireFormat::ReadEnum(input, &value));
        if (ETaskAction_IsValid(value)) {
          set_optype(static_cast< ETaskAction >(value));
        } else {
          mutable_unknown_fields()->AddVarint(9, value);
        }
        if (input->ExpectTag(80)) goto parse_OpParam1;
        break;
      }
      
      // optional int32 OpParam1 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpParam1:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &opparam1_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_OpParam2;
        break;
      }
      
      // optional int32 OpParam2 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpParam2:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &opparam2_));
        _set_bit(10);
        if (input->ExpectTag(104)) goto parse_OpParam3;
        break;
      }
      
      // optional uint64 OpParam3 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpParam3:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &opparam3_));
        _set_bit(11);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLogRoleOpTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLogRoleOpTask::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional uint32 OpTime = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->optime(), output);
  }
  
  // optional uint32 LineID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->lineid(), output);
  }
  
  // optional uint64 RepetionID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(4, this->repetionid(), output);
  }
  
  // optional uint32 MapID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->mapid(), output);
  }
  
  // optional uint32 MetierID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->metierid(), output);
  }
  
  // optional uint32 RoleLevel = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->rolelevel(), output);
  }
  
  // optional uint32 TaskID = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->taskid(), output);
  }
  
  // optional .ETaskAction OpType = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteEnum(9, this->optype(), output);
  }
  
  // optional int32 OpParam1 = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(10, this->opparam1(), output);
  }
  
  // optional int32 OpParam2 = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(11, this->opparam2(), output);
  }
  
  // optional uint64 OpParam3 = 13;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(13, this->opparam3(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLogRoleOpTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional uint32 OpTime = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->optime(), target);
  }
  
  // optional uint32 LineID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->lineid(), target);
  }
  
  // optional uint64 RepetionID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(4, this->repetionid(), target);
  }
  
  // optional uint32 MapID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->mapid(), target);
  }
  
  // optional uint32 MetierID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->metierid(), target);
  }
  
  // optional uint32 RoleLevel = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->rolelevel(), target);
  }
  
  // optional uint32 TaskID = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->taskid(), target);
  }
  
  // optional .ETaskAction OpType = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteEnumToArray(9, this->optype(), target);
  }
  
  // optional int32 OpParam1 = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(10, this->opparam1(), target);
  }
  
  // optional int32 OpParam2 = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(11, this->opparam2(), target);
  }
  
  // optional uint64 OpParam3 = 13;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(13, this->opparam3(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLogRoleOpTask::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 OpTime = 2;
    if (has_optime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->optime());
    }
    
    // optional uint32 LineID = 3;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lineid());
    }
    
    // optional uint64 RepetionID = 4;
    if (has_repetionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->repetionid());
    }
    
    // optional uint32 MapID = 5;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 MetierID = 6;
    if (has_metierid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->metierid());
    }
    
    // optional uint32 RoleLevel = 7;
    if (has_rolelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rolelevel());
    }
    
    // optional uint32 TaskID = 8;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .ETaskAction OpType = 9;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::EnumSize(this->optype());
    }
    
    // optional int32 OpParam1 = 10;
    if (has_opparam1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->opparam1());
    }
    
    // optional int32 OpParam2 = 11;
    if (has_opparam2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->opparam2());
    }
    
    // optional uint64 OpParam3 = 13;
    if (has_opparam3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->opparam3());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLogRoleOpTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLogRoleOpTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLogRoleOpTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLogRoleOpTask::MergeFrom(const CMessageLogRoleOpTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_optime(from.optime());
    }
    if (from._has_bit(2)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(3)) {
      set_repetionid(from.repetionid());
    }
    if (from._has_bit(4)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(5)) {
      set_metierid(from.metierid());
    }
    if (from._has_bit(6)) {
      set_rolelevel(from.rolelevel());
    }
    if (from._has_bit(7)) {
      set_taskid(from.taskid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_optype(from.optype());
    }
    if (from._has_bit(9)) {
      set_opparam1(from.opparam1());
    }
    if (from._has_bit(10)) {
      set_opparam2(from.opparam2());
    }
    if (from._has_bit(11)) {
      set_opparam3(from.opparam3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLogRoleOpTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLogRoleOpTask::CopyFrom(const CMessageLogRoleOpTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLogRoleOpTask::Swap(CMessageLogRoleOpTask* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(optime_, other->optime_);
    std::swap(lineid_, other->lineid_);
    std::swap(repetionid_, other->repetionid_);
    std::swap(mapid_, other->mapid_);
    std::swap(metierid_, other->metierid_);
    std::swap(rolelevel_, other->rolelevel_);
    std::swap(taskid_, other->taskid_);
    std::swap(optype_, other->optype_);
    std::swap(opparam1_, other->opparam1_);
    std::swap(opparam2_, other->opparam2_);
    std::swap(opparam3_, other->opparam3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLogRoleOpTask::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLogRoleOpTask::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLogRoleOpTask::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLogRoleOpTask_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBDropedItem::kItemIDFieldNumber;
const int PBDropedItem::kItemTypeFieldNumber;
const int PBDropedItem::kItemLevelFieldNumber;
#endif  // !_MSC_VER

PBDropedItem::PBDropedItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBDropedItem::InitAsDefaultInstance() {}

PBDropedItem::PBDropedItem(const PBDropedItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBDropedItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  itemtype_ = 0u;
  itemlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBDropedItem::~PBDropedItem() {
  SharedDtor();
}

void PBDropedItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBDropedItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBDropedItem_descriptor_;
}

const PBDropedItem& PBDropedItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

PBDropedItem* PBDropedItem::default_instance_ = NULL;

PBDropedItem* PBDropedItem::New() const {
  return new PBDropedItem;
}

void PBDropedItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    itemtype_ = 0u;
    itemlevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBDropedItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ItemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ItemType;
        break;
      }
      
      // optional uint32 ItemType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemtype_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_ItemLevel;
        break;
      }
      
      // optional uint32 ItemLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemlevel_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBDropedItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBDropedItem::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ItemID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->itemid(), output);
  }
  
  // optional uint32 ItemType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->itemtype(), output);
  }
  
  // optional uint32 ItemLevel = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->itemlevel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBDropedItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ItemID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->itemid(), target);
  }
  
  // optional uint32 ItemType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->itemtype(), target);
  }
  
  // optional uint32 ItemLevel = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->itemlevel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBDropedItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ItemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemid());
    }
    
    // optional uint32 ItemType = 2;
    if (has_itemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemtype());
    }
    
    // optional uint32 ItemLevel = 3;
    if (has_itemlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemlevel());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBDropedItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBDropedItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBDropedItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBDropedItem::MergeFrom(const PBDropedItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_itemid(from.itemid());
    }
    if (from._has_bit(1)) {
      set_itemtype(from.itemtype());
    }
    if (from._has_bit(2)) {
      set_itemlevel(from.itemlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBDropedItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDropedItem::CopyFrom(const PBDropedItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDropedItem::Swap(PBDropedItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(itemtype_, other->itemtype_);
    std::swap(itemlevel_, other->itemlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBDropedItem::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBDropedItem::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBDropedItem::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBDropedItem_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLogOrgeDropItem::kNpcIDFieldNumber;
const int CMessageLogOrgeDropItem::kNpcIndexFieldNumber;
const int CMessageLogOrgeDropItem::kNpcLevelFieldNumber;
const int CMessageLogOrgeDropItem::kOpTimeFieldNumber;
const int CMessageLogOrgeDropItem::kLineIDFieldNumber;
const int CMessageLogOrgeDropItem::kRepetionIDFieldNumber;
const int CMessageLogOrgeDropItem::kMapIDFieldNumber;
const int CMessageLogOrgeDropItem::kDropItemFieldNumber;
#endif  // !_MSC_VER

CMessageLogOrgeDropItem::CMessageLogOrgeDropItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLogOrgeDropItem::InitAsDefaultInstance() {}

CMessageLogOrgeDropItem::CMessageLogOrgeDropItem(const CMessageLogOrgeDropItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLogOrgeDropItem::SharedCtor() {
  _cached_size_ = 0;
  npcid_ = 0;
  npcindex_ = 0;
  npclevel_ = 0;
  optime_ = 0u;
  lineid_ = 0u;
  repetionid_ = GOOGLE_ULONGLONG(0);
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLogOrgeDropItem::~CMessageLogOrgeDropItem() {
  SharedDtor();
}

void CMessageLogOrgeDropItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLogOrgeDropItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLogOrgeDropItem_descriptor_;
}

const CMessageLogOrgeDropItem& CMessageLogOrgeDropItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageLogOrgeDropItem* CMessageLogOrgeDropItem::default_instance_ = NULL;

CMessageLogOrgeDropItem* CMessageLogOrgeDropItem::New() const {
  return new CMessageLogOrgeDropItem;
}

void CMessageLogOrgeDropItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npcid_ = 0;
    npcindex_ = 0;
    npclevel_ = 0;
    optime_ = 0u;
    lineid_ = 0u;
    repetionid_ = GOOGLE_ULONGLONG(0);
    mapid_ = 0u;
  }
  dropitem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLogOrgeDropItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional int32 NpcID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &npcid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_NpcIndex;
        break;
      }
      
      // optional int32 NpcIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcIndex:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &npcindex_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_NpcLevel;
        break;
      }
      
      // optional int32 NpcLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &npclevel_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_OpTime;
        break;
      }
      
      // optional uint32 OpTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &optime_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_LineID;
        break;
      }
      
      // optional uint32 LineID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lineid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_RepetionID;
        break;
      }
      
      // optional uint64 RepetionID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RepetionID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &repetionid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(6);
        if (input->ExpectTag(66)) goto parse_DropItem;
        break;
      }
      
      // repeated .PBDropedItem DropItem = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_DropItem:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_dropitem()));
        if (input->ExpectTag(66)) goto parse_DropItem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLogOrgeDropItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLogOrgeDropItem::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 NpcID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(1, this->npcid(), output);
  }
  
  // optional int32 NpcIndex = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(2, this->npcindex(), output);
  }
  
  // optional int32 NpcLevel = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->npclevel(), output);
  }
  
  // optional uint32 OpTime = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->optime(), output);
  }
  
  // optional uint32 LineID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->lineid(), output);
  }
  
  // optional uint64 RepetionID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(6, this->repetionid(), output);
  }
  
  // optional uint32 MapID = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->mapid(), output);
  }
  
  // repeated .PBDropedItem DropItem = 8;
  for (int i = 0; i < this->dropitem_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(8, this->dropitem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLogOrgeDropItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 NpcID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(1, this->npcid(), target);
  }
  
  // optional int32 NpcIndex = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(2, this->npcindex(), target);
  }
  
  // optional int32 NpcLevel = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->npclevel(), target);
  }
  
  // optional uint32 OpTime = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->optime(), target);
  }
  
  // optional uint32 LineID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->lineid(), target);
  }
  
  // optional uint64 RepetionID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(6, this->repetionid(), target);
  }
  
  // optional uint32 MapID = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->mapid(), target);
  }
  
  // repeated .PBDropedItem DropItem = 8;
  for (int i = 0; i < this->dropitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(8, this->dropitem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLogOrgeDropItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 NpcID = 1;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->npcid());
    }
    
    // optional int32 NpcIndex = 2;
    if (has_npcindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->npcindex());
    }
    
    // optional int32 NpcLevel = 3;
    if (has_npclevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->npclevel());
    }
    
    // optional uint32 OpTime = 4;
    if (has_optime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->optime());
    }
    
    // optional uint32 LineID = 5;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lineid());
    }
    
    // optional uint64 RepetionID = 6;
    if (has_repetionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->repetionid());
    }
    
    // optional uint32 MapID = 7;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
  }
  // repeated .PBDropedItem DropItem = 8;
  total_size += 1 * this->dropitem_size();
  for (int i = 0; i < this->dropitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->dropitem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLogOrgeDropItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLogOrgeDropItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLogOrgeDropItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLogOrgeDropItem::MergeFrom(const CMessageLogOrgeDropItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  dropitem_.MergeFrom(from.dropitem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_npcid(from.npcid());
    }
    if (from._has_bit(1)) {
      set_npcindex(from.npcindex());
    }
    if (from._has_bit(2)) {
      set_npclevel(from.npclevel());
    }
    if (from._has_bit(3)) {
      set_optime(from.optime());
    }
    if (from._has_bit(4)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(5)) {
      set_repetionid(from.repetionid());
    }
    if (from._has_bit(6)) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLogOrgeDropItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLogOrgeDropItem::CopyFrom(const CMessageLogOrgeDropItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLogOrgeDropItem::Swap(CMessageLogOrgeDropItem* other) {
  if (other != this) {
    std::swap(npcid_, other->npcid_);
    std::swap(npcindex_, other->npcindex_);
    std::swap(npclevel_, other->npclevel_);
    std::swap(optime_, other->optime_);
    std::swap(lineid_, other->lineid_);
    std::swap(repetionid_, other->repetionid_);
    std::swap(mapid_, other->mapid_);
    dropitem_.Swap(&other->dropitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLogOrgeDropItem::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLogOrgeDropItem::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLogOrgeDropItem::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLogOrgeDropItem_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLogUseItemDropItem::kCharIDFieldNumber;
const int CMessageLogUseItemDropItem::kItemIDFieldNumber;
const int CMessageLogUseItemDropItem::kParam1FieldNumber;
const int CMessageLogUseItemDropItem::kParam2FieldNumber;
const int CMessageLogUseItemDropItem::kOpTimeFieldNumber;
const int CMessageLogUseItemDropItem::kLineIDFieldNumber;
const int CMessageLogUseItemDropItem::kRepetionIDFieldNumber;
const int CMessageLogUseItemDropItem::kMapIDFieldNumber;
const int CMessageLogUseItemDropItem::kDropItemFieldNumber;
#endif  // !_MSC_VER

CMessageLogUseItemDropItem::CMessageLogUseItemDropItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLogUseItemDropItem::InitAsDefaultInstance() {}

CMessageLogUseItemDropItem::CMessageLogUseItemDropItem(const CMessageLogUseItemDropItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLogUseItemDropItem::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  itemid_ = 0;
  param1_ = 0;
  param2_ = 0;
  optime_ = 0u;
  lineid_ = 0u;
  repetionid_ = GOOGLE_ULONGLONG(0);
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLogUseItemDropItem::~CMessageLogUseItemDropItem() {
  SharedDtor();
}

void CMessageLogUseItemDropItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLogUseItemDropItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLogUseItemDropItem_descriptor_;
}

const CMessageLogUseItemDropItem& CMessageLogUseItemDropItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageLogUseItemDropItem* CMessageLogUseItemDropItem::default_instance_ = NULL;

CMessageLogUseItemDropItem* CMessageLogUseItemDropItem::New() const {
  return new CMessageLogUseItemDropItem;
}

void CMessageLogUseItemDropItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    itemid_ = 0;
    param1_ = 0;
    param2_ = 0;
    optime_ = 0u;
    lineid_ = 0u;
    repetionid_ = GOOGLE_ULONGLONG(0);
    mapid_ = 0u;
  }
  dropitem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLogUseItemDropItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ItemID;
        break;
      }
      
      // optional int32 ItemID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemID:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &itemid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Param1;
        break;
      }
      
      // optional int32 Param1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Param1:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &param1_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Param2;
        break;
      }
      
      // optional int32 Param2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Param2:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &param2_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_OpTime;
        break;
      }
      
      // optional uint32 OpTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &optime_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_LineID;
        break;
      }
      
      // optional uint32 LineID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lineid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_RepetionID;
        break;
      }
      
      // optional uint64 RepetionID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RepetionID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &repetionid_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(7);
        if (input->ExpectTag(74)) goto parse_DropItem;
        break;
      }
      
      // repeated .PBDropedItem DropItem = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_DropItem:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_dropitem()));
        if (input->ExpectTag(74)) goto parse_DropItem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLogUseItemDropItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLogUseItemDropItem::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional int32 ItemID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(2, this->itemid(), output);
  }
  
  // optional int32 Param1 = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->param1(), output);
  }
  
  // optional int32 Param2 = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->param2(), output);
  }
  
  // optional uint32 OpTime = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->optime(), output);
  }
  
  // optional uint32 LineID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->lineid(), output);
  }
  
  // optional uint64 RepetionID = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(7, this->repetionid(), output);
  }
  
  // optional uint32 MapID = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->mapid(), output);
  }
  
  // repeated .PBDropedItem DropItem = 9;
  for (int i = 0; i < this->dropitem_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(9, this->dropitem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLogUseItemDropItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional int32 ItemID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(2, this->itemid(), target);
  }
  
  // optional int32 Param1 = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->param1(), target);
  }
  
  // optional int32 Param2 = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->param2(), target);
  }
  
  // optional uint32 OpTime = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->optime(), target);
  }
  
  // optional uint32 LineID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->lineid(), target);
  }
  
  // optional uint64 RepetionID = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(7, this->repetionid(), target);
  }
  
  // optional uint32 MapID = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->mapid(), target);
  }
  
  // repeated .PBDropedItem DropItem = 9;
  for (int i = 0; i < this->dropitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(9, this->dropitem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLogUseItemDropItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional int32 ItemID = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->itemid());
    }
    
    // optional int32 Param1 = 3;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->param1());
    }
    
    // optional int32 Param2 = 4;
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->param2());
    }
    
    // optional uint32 OpTime = 5;
    if (has_optime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->optime());
    }
    
    // optional uint32 LineID = 6;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lineid());
    }
    
    // optional uint64 RepetionID = 7;
    if (has_repetionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->repetionid());
    }
    
    // optional uint32 MapID = 8;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
  }
  // repeated .PBDropedItem DropItem = 9;
  total_size += 1 * this->dropitem_size();
  for (int i = 0; i < this->dropitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->dropitem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLogUseItemDropItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLogUseItemDropItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLogUseItemDropItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLogUseItemDropItem::MergeFrom(const CMessageLogUseItemDropItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  dropitem_.MergeFrom(from.dropitem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_itemid(from.itemid());
    }
    if (from._has_bit(2)) {
      set_param1(from.param1());
    }
    if (from._has_bit(3)) {
      set_param2(from.param2());
    }
    if (from._has_bit(4)) {
      set_optime(from.optime());
    }
    if (from._has_bit(5)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(6)) {
      set_repetionid(from.repetionid());
    }
    if (from._has_bit(7)) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLogUseItemDropItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLogUseItemDropItem::CopyFrom(const CMessageLogUseItemDropItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLogUseItemDropItem::Swap(CMessageLogUseItemDropItem* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(itemid_, other->itemid_);
    std::swap(param1_, other->param1_);
    std::swap(param2_, other->param2_);
    std::swap(optime_, other->optime_);
    std::swap(lineid_, other->lineid_);
    std::swap(repetionid_, other->repetionid_);
    std::swap(mapid_, other->mapid_);
    dropitem_.Swap(&other->dropitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLogUseItemDropItem::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLogUseItemDropItem::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLogUseItemDropItem::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLogUseItemDropItem_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLogItemDestroy::kItemIDFieldNumber;
const int CMessageLogItemDestroy::kLevelFieldNumber;
const int CMessageLogItemDestroy::kOpTimeFieldNumber;
const int CMessageLogItemDestroy::kLineIDFieldNumber;
const int CMessageLogItemDestroy::kRepetionIDFieldNumber;
const int CMessageLogItemDestroy::kMapIDFieldNumber;
const int CMessageLogItemDestroy::kPosXFieldNumber;
const int CMessageLogItemDestroy::kPosYFieldNumber;
#endif  // !_MSC_VER

CMessageLogItemDestroy::CMessageLogItemDestroy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLogItemDestroy::InitAsDefaultInstance() {}

CMessageLogItemDestroy::CMessageLogItemDestroy(const CMessageLogItemDestroy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLogItemDestroy::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  level_ = 0;
  optime_ = 0u;
  lineid_ = 0u;
  repetionid_ = GOOGLE_ULONGLONG(0);
  mapid_ = 0u;
  posx_ = 0u;
  posy_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLogItemDestroy::~CMessageLogItemDestroy() {
  SharedDtor();
}

void CMessageLogItemDestroy::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLogItemDestroy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLogItemDestroy_descriptor_;
}

const CMessageLogItemDestroy& CMessageLogItemDestroy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageLogItemDestroy* CMessageLogItemDestroy::default_instance_ = NULL;

CMessageLogItemDestroy* CMessageLogItemDestroy::New() const {
  return new CMessageLogItemDestroy;
}

void CMessageLogItemDestroy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0;
    level_ = 0;
    optime_ = 0u;
    lineid_ = 0u;
    repetionid_ = GOOGLE_ULONGLONG(0);
    mapid_ = 0u;
    posx_ = 0u;
    posy_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLogItemDestroy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional int32 ItemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &itemid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Level;
        break;
      }
      
      // optional int32 Level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &level_));
        _set_bit(1);
        if (input->ExpectTag(32)) goto parse_OpTime;
        break;
      }
      
      // optional uint32 OpTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &optime_));
        _set_bit(2);
        if (input->ExpectTag(40)) goto parse_LineID;
        break;
      }
      
      // optional uint32 LineID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lineid_));
        _set_bit(3);
        if (input->ExpectTag(48)) goto parse_RepetionID;
        break;
      }
      
      // optional uint64 RepetionID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RepetionID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &repetionid_));
        _set_bit(4);
        if (input->ExpectTag(56)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(5);
        if (input->ExpectTag(64)) goto parse_PosX;
        break;
      }
      
      // optional uint32 PosX = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosX:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posx_));
        _set_bit(6);
        if (input->ExpectTag(72)) goto parse_PosY;
        break;
      }
      
      // optional uint32 PosY = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posy_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLogItemDestroy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLogItemDestroy::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 ItemID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(1, this->itemid(), output);
  }
  
  // optional int32 Level = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(2, this->level(), output);
  }
  
  // optional uint32 OpTime = 4;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->optime(), output);
  }
  
  // optional uint32 LineID = 5;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->lineid(), output);
  }
  
  // optional uint64 RepetionID = 6;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(6, this->repetionid(), output);
  }
  
  // optional uint32 MapID = 7;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->mapid(), output);
  }
  
  // optional uint32 PosX = 8;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->posx(), output);
  }
  
  // optional uint32 PosY = 9;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->posy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLogItemDestroy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ItemID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(1, this->itemid(), target);
  }
  
  // optional int32 Level = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(2, this->level(), target);
  }
  
  // optional uint32 OpTime = 4;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->optime(), target);
  }
  
  // optional uint32 LineID = 5;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->lineid(), target);
  }
  
  // optional uint64 RepetionID = 6;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(6, this->repetionid(), target);
  }
  
  // optional uint32 MapID = 7;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->mapid(), target);
  }
  
  // optional uint32 PosX = 8;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->posx(), target);
  }
  
  // optional uint32 PosY = 9;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->posy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLogItemDestroy::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ItemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->itemid());
    }
    
    // optional int32 Level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->level());
    }
    
    // optional uint32 OpTime = 4;
    if (has_optime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->optime());
    }
    
    // optional uint32 LineID = 5;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lineid());
    }
    
    // optional uint64 RepetionID = 6;
    if (has_repetionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->repetionid());
    }
    
    // optional uint32 MapID = 7;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 PosX = 8;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posx());
    }
    
    // optional uint32 PosY = 9;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posy());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLogItemDestroy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLogItemDestroy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLogItemDestroy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLogItemDestroy::MergeFrom(const CMessageLogItemDestroy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_itemid(from.itemid());
    }
    if (from._has_bit(1)) {
      set_level(from.level());
    }
    if (from._has_bit(2)) {
      set_optime(from.optime());
    }
    if (from._has_bit(3)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(4)) {
      set_repetionid(from.repetionid());
    }
    if (from._has_bit(5)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(6)) {
      set_posx(from.posx());
    }
    if (from._has_bit(7)) {
      set_posy(from.posy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLogItemDestroy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLogItemDestroy::CopyFrom(const CMessageLogItemDestroy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLogItemDestroy::Swap(CMessageLogItemDestroy* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(level_, other->level_);
    std::swap(optime_, other->optime_);
    std::swap(lineid_, other->lineid_);
    std::swap(repetionid_, other->repetionid_);
    std::swap(mapid_, other->mapid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLogItemDestroy::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLogItemDestroy::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLogItemDestroy::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLogItemDestroy_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLogFamily::kFamilyIDFieldNumber;
const int CMessageLogFamily::kOpRoleIDFieldNumber;
const int CMessageLogFamily::kOpTimeFieldNumber;
const int CMessageLogFamily::kOpTypeFieldNumber;
const int CMessageLogFamily::kAttrIDFieldNumber;
const int CMessageLogFamily::kParam1FieldNumber;
const int CMessageLogFamily::kParam2FieldNumber;
const int CMessageLogFamily::kParam3FieldNumber;
#endif  // !_MSC_VER

CMessageLogFamily::CMessageLogFamily()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLogFamily::InitAsDefaultInstance() {}

CMessageLogFamily::CMessageLogFamily(const CMessageLogFamily& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLogFamily::SharedCtor() {
  _cached_size_ = 0;
  familyid_ = 0u;
  oproleid_ = 0u;
  optime_ = 0u;
  optype_ = 1;
  attrid_ = 0;
  param1_ = 0u;
  param2_ = 0u;
  param3_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLogFamily::~CMessageLogFamily() {
  SharedDtor();
}

void CMessageLogFamily::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLogFamily::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLogFamily_descriptor_;
}

const CMessageLogFamily& CMessageLogFamily::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageLogFamily* CMessageLogFamily::default_instance_ = NULL;

CMessageLogFamily* CMessageLogFamily::New() const {
  return new CMessageLogFamily;
}

void CMessageLogFamily::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    familyid_ = 0u;
    oproleid_ = 0u;
    optime_ = 0u;
    optype_ = 1;
    attrid_ = 0;
    param1_ = 0u;
    param2_ = 0u;
    param3_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLogFamily::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 FamilyID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_OpRoleID;
        break;
      }
      
      // optional uint32 OpRoleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpRoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &oproleid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_OpTime;
        break;
      }
      
      // optional uint32 OpTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &optime_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_OpType;
        break;
      }
      
      // optional .EOrganAction OpType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpType:
        int value;
        DO_(::google::protobuf::internal::WireFormat::ReadEnum(input, &value));
        if (EOrganAction_IsValid(value)) {
          set_optype(static_cast< EOrganAction >(value));
        } else {
          mutable_unknown_fields()->AddVarint(4, value);
        }
        if (input->ExpectTag(40)) goto parse_AttrID;
        break;
      }
      
      // optional .EFamilyAttr AttrID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AttrID:
        int value;
        DO_(::google::protobuf::internal::WireFormat::ReadEnum(input, &value));
        if (EFamilyAttr_IsValid(value)) {
          set_attrid(static_cast< EFamilyAttr >(value));
        } else {
          mutable_unknown_fields()->AddVarint(5, value);
        }
        if (input->ExpectTag(48)) goto parse_Param1;
        break;
      }
      
      // optional uint32 Param1 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Param1:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &param1_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_Param2;
        break;
      }
      
      // optional uint32 Param2 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Param2:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &param2_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_Param3;
        break;
      }
      
      // optional uint32 Param3 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Param3:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &param3_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLogFamily::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLogFamily::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 FamilyID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->familyid(), output);
  }
  
  // optional uint32 OpRoleID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->oproleid(), output);
  }
  
  // optional uint32 OpTime = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->optime(), output);
  }
  
  // optional .EOrganAction OpType = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteEnum(4, this->optype(), output);
  }
  
  // optional .EFamilyAttr AttrID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteEnum(5, this->attrid(), output);
  }
  
  // optional uint32 Param1 = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->param1(), output);
  }
  
  // optional uint32 Param2 = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->param2(), output);
  }
  
  // optional uint32 Param3 = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->param3(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLogFamily::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 FamilyID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->familyid(), target);
  }
  
  // optional uint32 OpRoleID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->oproleid(), target);
  }
  
  // optional uint32 OpTime = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->optime(), target);
  }
  
  // optional .EOrganAction OpType = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteEnumToArray(4, this->optype(), target);
  }
  
  // optional .EFamilyAttr AttrID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteEnumToArray(5, this->attrid(), target);
  }
  
  // optional uint32 Param1 = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->param1(), target);
  }
  
  // optional uint32 Param2 = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->param2(), target);
  }
  
  // optional uint32 Param3 = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->param3(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLogFamily::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 FamilyID = 1;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
    // optional uint32 OpRoleID = 2;
    if (has_oproleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->oproleid());
    }
    
    // optional uint32 OpTime = 3;
    if (has_optime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->optime());
    }
    
    // optional .EOrganAction OpType = 4;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::EnumSize(this->optype());
    }
    
    // optional .EFamilyAttr AttrID = 5;
    if (has_attrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::EnumSize(this->attrid());
    }
    
    // optional uint32 Param1 = 6;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->param1());
    }
    
    // optional uint32 Param2 = 7;
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->param2());
    }
    
    // optional uint32 Param3 = 8;
    if (has_param3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->param3());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLogFamily::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLogFamily* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLogFamily*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLogFamily::MergeFrom(const CMessageLogFamily& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_familyid(from.familyid());
    }
    if (from._has_bit(1)) {
      set_oproleid(from.oproleid());
    }
    if (from._has_bit(2)) {
      set_optime(from.optime());
    }
    if (from._has_bit(3)) {
      set_optype(from.optype());
    }
    if (from._has_bit(4)) {
      set_attrid(from.attrid());
    }
    if (from._has_bit(5)) {
      set_param1(from.param1());
    }
    if (from._has_bit(6)) {
      set_param2(from.param2());
    }
    if (from._has_bit(7)) {
      set_param3(from.param3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLogFamily::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLogFamily::CopyFrom(const CMessageLogFamily& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLogFamily::Swap(CMessageLogFamily* other) {
  if (other != this) {
    std::swap(familyid_, other->familyid_);
    std::swap(oproleid_, other->oproleid_);
    std::swap(optime_, other->optime_);
    std::swap(optype_, other->optype_);
    std::swap(attrid_, other->attrid_);
    std::swap(param1_, other->param1_);
    std::swap(param2_, other->param2_);
    std::swap(param3_, other->param3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLogFamily::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLogFamily::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLogFamily::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLogFamily_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLogCorps::kCorpsIDFieldNumber;
const int CMessageLogCorps::kOpRoleIDFieldNumber;
const int CMessageLogCorps::kOpTimeFieldNumber;
const int CMessageLogCorps::kOpTypeFieldNumber;
const int CMessageLogCorps::kAttrIDFieldNumber;
const int CMessageLogCorps::kParam1FieldNumber;
const int CMessageLogCorps::kParam2FieldNumber;
const int CMessageLogCorps::kParam3FieldNumber;
#endif  // !_MSC_VER

CMessageLogCorps::CMessageLogCorps()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLogCorps::InitAsDefaultInstance() {}

CMessageLogCorps::CMessageLogCorps(const CMessageLogCorps& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLogCorps::SharedCtor() {
  _cached_size_ = 0;
  corpsid_ = 0u;
  oproleid_ = 0u;
  optime_ = 0u;
  optype_ = 1;
  attrid_ = 0;
  param1_ = 0u;
  param2_ = 0u;
  param3_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLogCorps::~CMessageLogCorps() {
  SharedDtor();
}

void CMessageLogCorps::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLogCorps::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLogCorps_descriptor_;
}

const CMessageLogCorps& CMessageLogCorps::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageLogCorps* CMessageLogCorps::default_instance_ = NULL;

CMessageLogCorps* CMessageLogCorps::New() const {
  return new CMessageLogCorps;
}

void CMessageLogCorps::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    corpsid_ = 0u;
    oproleid_ = 0u;
    optime_ = 0u;
    optype_ = 1;
    attrid_ = 0;
    param1_ = 0u;
    param2_ = 0u;
    param3_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLogCorps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CorpsID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_OpRoleID;
        break;
      }
      
      // optional uint32 OpRoleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpRoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &oproleid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_OpTime;
        break;
      }
      
      // optional uint32 OpTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &optime_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_OpType;
        break;
      }
      
      // optional .EOrganAction OpType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpType:
        int value;
        DO_(::google::protobuf::internal::WireFormat::ReadEnum(input, &value));
        if (EOrganAction_IsValid(value)) {
          set_optype(static_cast< EOrganAction >(value));
        } else {
          mutable_unknown_fields()->AddVarint(4, value);
        }
        if (input->ExpectTag(40)) goto parse_AttrID;
        break;
      }
      
      // optional .ECorpsAttr AttrID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AttrID:
        int value;
        DO_(::google::protobuf::internal::WireFormat::ReadEnum(input, &value));
        if (ECorpsAttr_IsValid(value)) {
          set_attrid(static_cast< ECorpsAttr >(value));
        } else {
          mutable_unknown_fields()->AddVarint(5, value);
        }
        if (input->ExpectTag(48)) goto parse_Param1;
        break;
      }
      
      // optional uint32 Param1 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Param1:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &param1_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_Param2;
        break;
      }
      
      // optional uint32 Param2 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Param2:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &param2_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_Param3;
        break;
      }
      
      // optional uint32 Param3 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Param3:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &param3_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLogCorps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLogCorps::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CorpsID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->corpsid(), output);
  }
  
  // optional uint32 OpRoleID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->oproleid(), output);
  }
  
  // optional uint32 OpTime = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->optime(), output);
  }
  
  // optional .EOrganAction OpType = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteEnum(4, this->optype(), output);
  }
  
  // optional .ECorpsAttr AttrID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteEnum(5, this->attrid(), output);
  }
  
  // optional uint32 Param1 = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->param1(), output);
  }
  
  // optional uint32 Param2 = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->param2(), output);
  }
  
  // optional uint32 Param3 = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->param3(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLogCorps::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CorpsID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->corpsid(), target);
  }
  
  // optional uint32 OpRoleID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->oproleid(), target);
  }
  
  // optional uint32 OpTime = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->optime(), target);
  }
  
  // optional .EOrganAction OpType = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteEnumToArray(4, this->optype(), target);
  }
  
  // optional .ECorpsAttr AttrID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteEnumToArray(5, this->attrid(), target);
  }
  
  // optional uint32 Param1 = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->param1(), target);
  }
  
  // optional uint32 Param2 = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->param2(), target);
  }
  
  // optional uint32 Param3 = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->param3(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLogCorps::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CorpsID = 1;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
    // optional uint32 OpRoleID = 2;
    if (has_oproleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->oproleid());
    }
    
    // optional uint32 OpTime = 3;
    if (has_optime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->optime());
    }
    
    // optional .EOrganAction OpType = 4;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::EnumSize(this->optype());
    }
    
    // optional .ECorpsAttr AttrID = 5;
    if (has_attrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::EnumSize(this->attrid());
    }
    
    // optional uint32 Param1 = 6;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->param1());
    }
    
    // optional uint32 Param2 = 7;
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->param2());
    }
    
    // optional uint32 Param3 = 8;
    if (has_param3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->param3());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLogCorps::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLogCorps* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLogCorps*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLogCorps::MergeFrom(const CMessageLogCorps& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_corpsid(from.corpsid());
    }
    if (from._has_bit(1)) {
      set_oproleid(from.oproleid());
    }
    if (from._has_bit(2)) {
      set_optime(from.optime());
    }
    if (from._has_bit(3)) {
      set_optype(from.optype());
    }
    if (from._has_bit(4)) {
      set_attrid(from.attrid());
    }
    if (from._has_bit(5)) {
      set_param1(from.param1());
    }
    if (from._has_bit(6)) {
      set_param2(from.param2());
    }
    if (from._has_bit(7)) {
      set_param3(from.param3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLogCorps::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLogCorps::CopyFrom(const CMessageLogCorps& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLogCorps::Swap(CMessageLogCorps* other) {
  if (other != this) {
    std::swap(corpsid_, other->corpsid_);
    std::swap(oproleid_, other->oproleid_);
    std::swap(optime_, other->optime_);
    std::swap(optype_, other->optype_);
    std::swap(attrid_, other->attrid_);
    std::swap(param1_, other->param1_);
    std::swap(param2_, other->param2_);
    std::swap(param3_, other->param3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLogCorps::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLogCorps::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLogCorps::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLogCorps_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLogWorld::kWorldIDFieldNumber;
const int CMessageLogWorld::kOpTimeFieldNumber;
const int CMessageLogWorld::kOpTypeFieldNumber;
const int CMessageLogWorld::kParam1FieldNumber;
const int CMessageLogWorld::kParam2FieldNumber;
const int CMessageLogWorld::kParam3FieldNumber;
#endif  // !_MSC_VER

CMessageLogWorld::CMessageLogWorld()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLogWorld::InitAsDefaultInstance() {}

CMessageLogWorld::CMessageLogWorld(const CMessageLogWorld& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLogWorld::SharedCtor() {
  _cached_size_ = 0;
  worldid_ = 0u;
  optime_ = 0u;
  optype_ = 0u;
  param1_ = 0u;
  param2_ = 0u;
  param3_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLogWorld::~CMessageLogWorld() {
  SharedDtor();
}

void CMessageLogWorld::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLogWorld::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLogWorld_descriptor_;
}

const CMessageLogWorld& CMessageLogWorld::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageLogWorld* CMessageLogWorld::default_instance_ = NULL;

CMessageLogWorld* CMessageLogWorld::New() const {
  return new CMessageLogWorld;
}

void CMessageLogWorld::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    worldid_ = 0u;
    optime_ = 0u;
    optype_ = 0u;
    param1_ = 0u;
    param2_ = 0u;
    param3_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLogWorld::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 WorldID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &worldid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_OpTime;
        break;
      }
      
      // optional uint32 OpTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &optime_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_OpType;
        break;
      }
      
      // optional uint32 OpType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &optype_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Param1;
        break;
      }
      
      // optional uint32 Param1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Param1:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &param1_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Param2;
        break;
      }
      
      // optional uint32 Param2 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Param2:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &param2_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Param3;
        break;
      }
      
      // optional uint32 Param3 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Param3:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &param3_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLogWorld::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLogWorld::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 WorldID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->worldid(), output);
  }
  
  // optional uint32 OpTime = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->optime(), output);
  }
  
  // optional uint32 OpType = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->optype(), output);
  }
  
  // optional uint32 Param1 = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->param1(), output);
  }
  
  // optional uint32 Param2 = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->param2(), output);
  }
  
  // optional uint32 Param3 = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->param3(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLogWorld::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 WorldID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->worldid(), target);
  }
  
  // optional uint32 OpTime = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->optime(), target);
  }
  
  // optional uint32 OpType = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->optype(), target);
  }
  
  // optional uint32 Param1 = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->param1(), target);
  }
  
  // optional uint32 Param2 = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->param2(), target);
  }
  
  // optional uint32 Param3 = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->param3(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLogWorld::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 WorldID = 1;
    if (has_worldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->worldid());
    }
    
    // optional uint32 OpTime = 2;
    if (has_optime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->optime());
    }
    
    // optional uint32 OpType = 3;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->optype());
    }
    
    // optional uint32 Param1 = 4;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->param1());
    }
    
    // optional uint32 Param2 = 5;
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->param2());
    }
    
    // optional uint32 Param3 = 6;
    if (has_param3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->param3());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLogWorld::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLogWorld* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLogWorld*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLogWorld::MergeFrom(const CMessageLogWorld& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_worldid(from.worldid());
    }
    if (from._has_bit(1)) {
      set_optime(from.optime());
    }
    if (from._has_bit(2)) {
      set_optype(from.optype());
    }
    if (from._has_bit(3)) {
      set_param1(from.param1());
    }
    if (from._has_bit(4)) {
      set_param2(from.param2());
    }
    if (from._has_bit(5)) {
      set_param3(from.param3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLogWorld::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLogWorld::CopyFrom(const CMessageLogWorld& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLogWorld::Swap(CMessageLogWorld* other) {
  if (other != this) {
    std::swap(worldid_, other->worldid_);
    std::swap(optime_, other->optime_);
    std::swap(optype_, other->optype_);
    std::swap(param1_, other->param1_);
    std::swap(param2_, other->param2_);
    std::swap(param3_, other->param3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLogWorld::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLogWorld::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLogWorld::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLogWorld_reflection_;
}

// ===================================================================

const ::std::string CMessageLogMail::_default_mailtitle_;
const ::std::string CMessageLogMail::_default_srcname_;
#ifndef _MSC_VER
const int CMessageLogMail::kRoleIDFieldNumber;
const int CMessageLogMail::kMailIDFieldNumber;
const int CMessageLogMail::kOpTypeFieldNumber;
const int CMessageLogMail::kOptimeFieldNumber;
const int CMessageLogMail::kMailTypeFieldNumber;
const int CMessageLogMail::kMailTitleFieldNumber;
const int CMessageLogMail::kTotalNumFieldNumber;
const int CMessageLogMail::kItemID1FieldNumber;
const int CMessageLogMail::kItemNum1FieldNumber;
const int CMessageLogMail::kItemID2FieldNumber;
const int CMessageLogMail::kItemNum2FieldNumber;
const int CMessageLogMail::kItemID3FieldNumber;
const int CMessageLogMail::kItemNum3FieldNumber;
const int CMessageLogMail::kItemID4FieldNumber;
const int CMessageLogMail::kItemNum4FieldNumber;
const int CMessageLogMail::kItemID5FieldNumber;
const int CMessageLogMail::kItemNum5FieldNumber;
const int CMessageLogMail::kMoneyFieldNumber;
const int CMessageLogMail::kMoneyNeedCallBackFieldNumber;
const int CMessageLogMail::kDesRoleIDFieldNumber;
const int CMessageLogMail::kSrcNameFieldNumber;
#endif  // !_MSC_VER

CMessageLogMail::CMessageLogMail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLogMail::InitAsDefaultInstance() {}

CMessageLogMail::CMessageLogMail(const CMessageLogMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLogMail::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  mailid_ = 0u;
  optype_ = 0u;
  optime_ = 0u;
  mailtype_ = 0u;
  mailtitle_ = const_cast< ::std::string*>(&_default_mailtitle_);
  totalnum_ = 0u;
  itemid1_ = 0u;
  itemnum1_ = 0u;
  itemid2_ = 0u;
  itemnum2_ = 0u;
  itemid3_ = 0u;
  itemnum3_ = 0u;
  itemid4_ = 0u;
  itemnum4_ = 0u;
  itemid5_ = 0u;
  itemnum5_ = 0u;
  money_ = 0u;
  moneyneedcallback_ = 0u;
  desroleid_ = 0u;
  srcname_ = const_cast< ::std::string*>(&_default_srcname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLogMail::~CMessageLogMail() {
  SharedDtor();
}

void CMessageLogMail::SharedDtor() {
  if (mailtitle_ != &_default_mailtitle_) {
    delete mailtitle_;
  }
  if (srcname_ != &_default_srcname_) {
    delete srcname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLogMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLogMail_descriptor_;
}

const CMessageLogMail& CMessageLogMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageLogMail* CMessageLogMail::default_instance_ = NULL;

CMessageLogMail* CMessageLogMail::New() const {
  return new CMessageLogMail;
}

void CMessageLogMail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    mailid_ = 0u;
    optype_ = 0u;
    optime_ = 0u;
    mailtype_ = 0u;
    if (_has_bit(5)) {
      if (mailtitle_ != &_default_mailtitle_) {
        mailtitle_->clear();
      }
    }
    totalnum_ = 0u;
    itemid1_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    itemnum1_ = 0u;
    itemid2_ = 0u;
    itemnum2_ = 0u;
    itemid3_ = 0u;
    itemnum3_ = 0u;
    itemid4_ = 0u;
    itemnum4_ = 0u;
    itemid5_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    itemnum5_ = 0u;
    money_ = 0u;
    moneyneedcallback_ = 0u;
    desroleid_ = 0u;
    if (_has_bit(20)) {
      if (srcname_ != &_default_srcname_) {
        srcname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLogMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_MailID;
        break;
      }
      
      // optional uint32 MailID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MailID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mailid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_OpType;
        break;
      }
      
      // optional uint32 OpType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &optype_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Optime;
        break;
      }
      
      // optional uint32 Optime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Optime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &optime_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_MailType;
        break;
      }
      
      // optional uint32 MailType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MailType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mailtype_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_MailTitle;
        break;
      }
      
      // optional string MailTitle = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MailTitle:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_mailtitle()));
        if (input->ExpectTag(56)) goto parse_TotalNum;
        break;
      }
      
      // optional uint32 TotalNum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TotalNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &totalnum_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_ItemID1;
        break;
      }
      
      // optional uint32 ItemID1 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemID1:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemid1_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_ItemNum1;
        break;
      }
      
      // optional uint32 ItemNum1 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemNum1:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemnum1_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_ItemID2;
        break;
      }
      
      // optional uint32 ItemID2 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemID2:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemid2_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_ItemNum2;
        break;
      }
      
      // optional uint32 ItemNum2 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemNum2:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemnum2_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_ItemID3;
        break;
      }
      
      // optional uint32 ItemID3 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemID3:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemid3_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_ItemNum3;
        break;
      }
      
      // optional uint32 ItemNum3 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemNum3:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemnum3_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_ItemID4;
        break;
      }
      
      // optional uint32 ItemID4 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemID4:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemid4_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_ItemNum4;
        break;
      }
      
      // optional uint32 ItemNum4 = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemNum4:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemnum4_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_ItemID5;
        break;
      }
      
      // optional uint32 ItemID5 = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemID5:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemid5_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_ItemNum5;
        break;
      }
      
      // optional uint32 ItemNum5 = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemNum5:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemnum5_));
        _set_bit(16);
        if (input->ExpectTag(144)) goto parse_Money;
        break;
      }
      
      // optional uint32 Money = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(17);
        if (input->ExpectTag(152)) goto parse_MoneyNeedCallBack;
        break;
      }
      
      // optional uint32 MoneyNeedCallBack = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MoneyNeedCallBack:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &moneyneedcallback_));
        _set_bit(18);
        if (input->ExpectTag(160)) goto parse_DesRoleID;
        break;
      }
      
      // optional uint32 DesRoleID = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DesRoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &desroleid_));
        _set_bit(19);
        if (input->ExpectTag(170)) goto parse_SrcName;
        break;
      }
      
      // optional string SrcName = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SrcName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_srcname()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLogMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLogMail::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional uint32 MailID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->mailid(), output);
  }
  
  // optional uint32 OpType = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->optype(), output);
  }
  
  // optional uint32 Optime = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->optime(), output);
  }
  
  // optional uint32 MailType = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->mailtype(), output);
  }
  
  // optional string MailTitle = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteString(6, this->mailtitle(), output);
  }
  
  // optional uint32 TotalNum = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->totalnum(), output);
  }
  
  // optional uint32 ItemID1 = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->itemid1(), output);
  }
  
  // optional uint32 ItemNum1 = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->itemnum1(), output);
  }
  
  // optional uint32 ItemID2 = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->itemid2(), output);
  }
  
  // optional uint32 ItemNum2 = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->itemnum2(), output);
  }
  
  // optional uint32 ItemID3 = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->itemid3(), output);
  }
  
  // optional uint32 ItemNum3 = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->itemnum3(), output);
  }
  
  // optional uint32 ItemID4 = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->itemid4(), output);
  }
  
  // optional uint32 ItemNum4 = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(15, this->itemnum4(), output);
  }
  
  // optional uint32 ItemID5 = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(16, this->itemid5(), output);
  }
  
  // optional uint32 ItemNum5 = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(17, this->itemnum5(), output);
  }
  
  // optional uint32 Money = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(18, this->money(), output);
  }
  
  // optional uint32 MoneyNeedCallBack = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(19, this->moneyneedcallback(), output);
  }
  
  // optional uint32 DesRoleID = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(20, this->desroleid(), output);
  }
  
  // optional string SrcName = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormat::WriteString(21, this->srcname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLogMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional uint32 MailID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->mailid(), target);
  }
  
  // optional uint32 OpType = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->optype(), target);
  }
  
  // optional uint32 Optime = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->optime(), target);
  }
  
  // optional uint32 MailType = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->mailtype(), target);
  }
  
  // optional string MailTitle = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(6, this->mailtitle(), target);
  }
  
  // optional uint32 TotalNum = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->totalnum(), target);
  }
  
  // optional uint32 ItemID1 = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->itemid1(), target);
  }
  
  // optional uint32 ItemNum1 = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->itemnum1(), target);
  }
  
  // optional uint32 ItemID2 = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->itemid2(), target);
  }
  
  // optional uint32 ItemNum2 = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->itemnum2(), target);
  }
  
  // optional uint32 ItemID3 = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->itemid3(), target);
  }
  
  // optional uint32 ItemNum3 = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->itemnum3(), target);
  }
  
  // optional uint32 ItemID4 = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->itemid4(), target);
  }
  
  // optional uint32 ItemNum4 = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(15, this->itemnum4(), target);
  }
  
  // optional uint32 ItemID5 = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(16, this->itemid5(), target);
  }
  
  // optional uint32 ItemNum5 = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(17, this->itemnum5(), target);
  }
  
  // optional uint32 Money = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(18, this->money(), target);
  }
  
  // optional uint32 MoneyNeedCallBack = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(19, this->moneyneedcallback(), target);
  }
  
  // optional uint32 DesRoleID = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(20, this->desroleid(), target);
  }
  
  // optional string SrcName = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(21, this->srcname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLogMail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 MailID = 2;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mailid());
    }
    
    // optional uint32 OpType = 3;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->optype());
    }
    
    // optional uint32 Optime = 4;
    if (has_optime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->optime());
    }
    
    // optional uint32 MailType = 5;
    if (has_mailtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mailtype());
    }
    
    // optional string MailTitle = 6;
    if (has_mailtitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->mailtitle());
    }
    
    // optional uint32 TotalNum = 7;
    if (has_totalnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->totalnum());
    }
    
    // optional uint32 ItemID1 = 8;
    if (has_itemid1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemid1());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 ItemNum1 = 9;
    if (has_itemnum1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemnum1());
    }
    
    // optional uint32 ItemID2 = 10;
    if (has_itemid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemid2());
    }
    
    // optional uint32 ItemNum2 = 11;
    if (has_itemnum2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemnum2());
    }
    
    // optional uint32 ItemID3 = 12;
    if (has_itemid3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemid3());
    }
    
    // optional uint32 ItemNum3 = 13;
    if (has_itemnum3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemnum3());
    }
    
    // optional uint32 ItemID4 = 14;
    if (has_itemid4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemid4());
    }
    
    // optional uint32 ItemNum4 = 15;
    if (has_itemnum4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemnum4());
    }
    
    // optional uint32 ItemID5 = 16;
    if (has_itemid5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemid5());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 ItemNum5 = 17;
    if (has_itemnum5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemnum5());
    }
    
    // optional uint32 Money = 18;
    if (has_money()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
    // optional uint32 MoneyNeedCallBack = 19;
    if (has_moneyneedcallback()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->moneyneedcallback());
    }
    
    // optional uint32 DesRoleID = 20;
    if (has_desroleid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->desroleid());
    }
    
    // optional string SrcName = 21;
    if (has_srcname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::StringSize(this->srcname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLogMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLogMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLogMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLogMail::MergeFrom(const CMessageLogMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_mailid(from.mailid());
    }
    if (from._has_bit(2)) {
      set_optype(from.optype());
    }
    if (from._has_bit(3)) {
      set_optime(from.optime());
    }
    if (from._has_bit(4)) {
      set_mailtype(from.mailtype());
    }
    if (from._has_bit(5)) {
      set_mailtitle(from.mailtitle());
    }
    if (from._has_bit(6)) {
      set_totalnum(from.totalnum());
    }
    if (from._has_bit(7)) {
      set_itemid1(from.itemid1());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_itemnum1(from.itemnum1());
    }
    if (from._has_bit(9)) {
      set_itemid2(from.itemid2());
    }
    if (from._has_bit(10)) {
      set_itemnum2(from.itemnum2());
    }
    if (from._has_bit(11)) {
      set_itemid3(from.itemid3());
    }
    if (from._has_bit(12)) {
      set_itemnum3(from.itemnum3());
    }
    if (from._has_bit(13)) {
      set_itemid4(from.itemid4());
    }
    if (from._has_bit(14)) {
      set_itemnum4(from.itemnum4());
    }
    if (from._has_bit(15)) {
      set_itemid5(from.itemid5());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_itemnum5(from.itemnum5());
    }
    if (from._has_bit(17)) {
      set_money(from.money());
    }
    if (from._has_bit(18)) {
      set_moneyneedcallback(from.moneyneedcallback());
    }
    if (from._has_bit(19)) {
      set_desroleid(from.desroleid());
    }
    if (from._has_bit(20)) {
      set_srcname(from.srcname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLogMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLogMail::CopyFrom(const CMessageLogMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLogMail::Swap(CMessageLogMail* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(mailid_, other->mailid_);
    std::swap(optype_, other->optype_);
    std::swap(optime_, other->optime_);
    std::swap(mailtype_, other->mailtype_);
    std::swap(mailtitle_, other->mailtitle_);
    std::swap(totalnum_, other->totalnum_);
    std::swap(itemid1_, other->itemid1_);
    std::swap(itemnum1_, other->itemnum1_);
    std::swap(itemid2_, other->itemid2_);
    std::swap(itemnum2_, other->itemnum2_);
    std::swap(itemid3_, other->itemid3_);
    std::swap(itemnum3_, other->itemnum3_);
    std::swap(itemid4_, other->itemid4_);
    std::swap(itemnum4_, other->itemnum4_);
    std::swap(itemid5_, other->itemid5_);
    std::swap(itemnum5_, other->itemnum5_);
    std::swap(money_, other->money_);
    std::swap(moneyneedcallback_, other->moneyneedcallback_);
    std::swap(desroleid_, other->desroleid_);
    std::swap(srcname_, other->srcname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLogMail::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLogMail::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLogMail::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLogMail_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBAttribute::kIDFieldNumber;
const int PBAttribute::kValueFieldNumber;
#endif  // !_MSC_VER

PBAttribute::PBAttribute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBAttribute::InitAsDefaultInstance() {}

PBAttribute::PBAttribute(const PBAttribute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBAttribute::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBAttribute::~PBAttribute() {
  SharedDtor();
}

void PBAttribute::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBAttribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBAttribute_descriptor_;
}

const PBAttribute& PBAttribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

PBAttribute* PBAttribute::default_instance_ = NULL;

PBAttribute* PBAttribute::New() const {
  return new PBAttribute;
}

void PBAttribute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    value_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBAttribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Value;
        break;
      }
      
      // optional int64 Value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Value:
        DO_(::google::protobuf::internal::WireFormat::ReadInt64(
              input, &value_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBAttribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBAttribute::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->id(), output);
  }
  
  // optional int64 Value = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteInt64(2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBAttribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional int64 Value = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt64ToArray(2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBAttribute::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->id());
    }
    
    // optional int64 Value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int64Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBAttribute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBAttribute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBAttribute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBAttribute::MergeFrom(const PBAttribute& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBAttribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAttribute::CopyFrom(const PBAttribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAttribute::Swap(PBAttribute* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBAttribute::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBAttribute::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBAttribute::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBAttribute_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBCatalog::kIDFieldNumber;
const int PBCatalog::kAttrFieldNumber;
#endif  // !_MSC_VER

PBCatalog::PBCatalog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCatalog::InitAsDefaultInstance() {}

PBCatalog::PBCatalog(const PBCatalog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCatalog::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCatalog::~PBCatalog() {
  SharedDtor();
}

void PBCatalog::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBCatalog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCatalog_descriptor_;
}

const PBCatalog& PBCatalog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

PBCatalog* PBCatalog::default_instance_ = NULL;

PBCatalog* PBCatalog::New() const {
  return new PBCatalog;
}

void PBCatalog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  attr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCatalog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Attr;
        break;
      }
      
      // repeated .PBAttribute Attr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Attr:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_attr()));
        if (input->ExpectTag(18)) goto parse_Attr;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCatalog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBCatalog::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->id(), output);
  }
  
  // repeated .PBAttribute Attr = 2;
  for (int i = 0; i < this->attr_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->attr(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCatalog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // repeated .PBAttribute Attr = 2;
  for (int i = 0; i < this->attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->attr(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCatalog::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->id());
    }
    
  }
  // repeated .PBAttribute Attr = 2;
  total_size += 1 * this->attr_size();
  for (int i = 0; i < this->attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->attr(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBCatalog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCatalog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCatalog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCatalog::MergeFrom(const PBCatalog& from) {
  GOOGLE_CHECK_NE(&from, this);
  attr_.MergeFrom(from.attr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCatalog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCatalog::CopyFrom(const PBCatalog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCatalog::Swap(PBCatalog* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    attr_.Swap(&other->attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBCatalog::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBCatalog::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBCatalog::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBCatalog_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageServerStatInfoNotify::kServerIDFieldNumber;
const int CMessageServerStatInfoNotify::kStatInfoFieldNumber;
#endif  // !_MSC_VER

CMessageServerStatInfoNotify::CMessageServerStatInfoNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageServerStatInfoNotify::InitAsDefaultInstance() {}

CMessageServerStatInfoNotify::CMessageServerStatInfoNotify(const CMessageServerStatInfoNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageServerStatInfoNotify::SharedCtor() {
  _cached_size_ = 0;
  serverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageServerStatInfoNotify::~CMessageServerStatInfoNotify() {
  SharedDtor();
}

void CMessageServerStatInfoNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageServerStatInfoNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageServerStatInfoNotify_descriptor_;
}

const CMessageServerStatInfoNotify& CMessageServerStatInfoNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageServerStatInfoNotify* CMessageServerStatInfoNotify::default_instance_ = NULL;

CMessageServerStatInfoNotify* CMessageServerStatInfoNotify::New() const {
  return new CMessageServerStatInfoNotify;
}

void CMessageServerStatInfoNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serverid_ = 0u;
  }
  statinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageServerStatInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ServerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &serverid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_StatInfo;
        break;
      }
      
      // repeated .PBCatalog StatInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_StatInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_statinfo()));
        if (input->ExpectTag(18)) goto parse_StatInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageServerStatInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageServerStatInfoNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ServerID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->serverid(), output);
  }
  
  // repeated .PBCatalog StatInfo = 2;
  for (int i = 0; i < this->statinfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->statinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageServerStatInfoNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ServerID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->serverid(), target);
  }
  
  // repeated .PBCatalog StatInfo = 2;
  for (int i = 0; i < this->statinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->statinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageServerStatInfoNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ServerID = 1;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->serverid());
    }
    
  }
  // repeated .PBCatalog StatInfo = 2;
  total_size += 1 * this->statinfo_size();
  for (int i = 0; i < this->statinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->statinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageServerStatInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageServerStatInfoNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageServerStatInfoNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageServerStatInfoNotify::MergeFrom(const CMessageServerStatInfoNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  statinfo_.MergeFrom(from.statinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageServerStatInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageServerStatInfoNotify::CopyFrom(const CMessageServerStatInfoNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageServerStatInfoNotify::Swap(CMessageServerStatInfoNotify* other) {
  if (other != this) {
    std::swap(serverid_, other->serverid_);
    statinfo_.Swap(&other->statinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageServerStatInfoNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageServerStatInfoNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageServerStatInfoNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageServerStatInfoNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLogValuableEquip::kRoleIDFieldNumber;
const int CMessageLogValuableEquip::kItemObjFieldNumber;
#endif  // !_MSC_VER

CMessageLogValuableEquip::CMessageLogValuableEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLogValuableEquip::InitAsDefaultInstance() {}

CMessageLogValuableEquip::CMessageLogValuableEquip(const CMessageLogValuableEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLogValuableEquip::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLogValuableEquip::~CMessageLogValuableEquip() {
  SharedDtor();
}

void CMessageLogValuableEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLogValuableEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLogValuableEquip_descriptor_;
}

const CMessageLogValuableEquip& CMessageLogValuableEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageLogValuableEquip* CMessageLogValuableEquip::default_instance_ = NULL;

CMessageLogValuableEquip* CMessageLogValuableEquip::New() const {
  return new CMessageLogValuableEquip;
}

void CMessageLogValuableEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
  }
  itemobj_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLogValuableEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_ItemObj;
        break;
      }
      
      // repeated .PBItemObject ItemObj = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ItemObj:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_itemobj()));
        if (input->ExpectTag(18)) goto parse_ItemObj;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLogValuableEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLogValuableEquip::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  // repeated .PBItemObject ItemObj = 2;
  for (int i = 0; i < this->itemobj_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->itemobj(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLogValuableEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // repeated .PBItemObject ItemObj = 2;
  for (int i = 0; i < this->itemobj_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->itemobj(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLogValuableEquip::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
  }
  // repeated .PBItemObject ItemObj = 2;
  total_size += 1 * this->itemobj_size();
  for (int i = 0; i < this->itemobj_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->itemobj(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLogValuableEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLogValuableEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLogValuableEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLogValuableEquip::MergeFrom(const CMessageLogValuableEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemobj_.MergeFrom(from.itemobj_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLogValuableEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLogValuableEquip::CopyFrom(const CMessageLogValuableEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLogValuableEquip::Swap(CMessageLogValuableEquip* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    itemobj_.Swap(&other->itemobj_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLogValuableEquip::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLogValuableEquip::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLogValuableEquip::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLogValuableEquip_reflection_;
}

// ===================================================================

const ::std::string CMessageLogChat::_default_chatmsg_;
const ::std::string CMessageLogChat::_default_rolename_;
#ifndef _MSC_VER
const int CMessageLogChat::kRoleIDFieldNumber;
const int CMessageLogChat::kChatMsgFieldNumber;
const int CMessageLogChat::kGateWayIDFieldNumber;
const int CMessageLogChat::kChannelFieldNumber;
const int CMessageLogChat::kOpTimeFieldNumber;
const int CMessageLogChat::kIPFieldNumber;
const int CMessageLogChat::kRoleNameFieldNumber;
#endif  // !_MSC_VER

CMessageLogChat::CMessageLogChat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLogChat::InitAsDefaultInstance() {}

CMessageLogChat::CMessageLogChat(const CMessageLogChat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLogChat::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  chatmsg_ = const_cast< ::std::string*>(&_default_chatmsg_);
  gatewayid_ = 0u;
  channel_ = 0u;
  optime_ = 0u;
  ip_ = 0u;
  rolename_ = const_cast< ::std::string*>(&_default_rolename_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLogChat::~CMessageLogChat() {
  SharedDtor();
}

void CMessageLogChat::SharedDtor() {
  if (chatmsg_ != &_default_chatmsg_) {
    delete chatmsg_;
  }
  if (rolename_ != &_default_rolename_) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLogChat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLogChat_descriptor_;
}

const CMessageLogChat& CMessageLogChat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageLogChat* CMessageLogChat::default_instance_ = NULL;

CMessageLogChat* CMessageLogChat::New() const {
  return new CMessageLogChat;
}

void CMessageLogChat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    if (_has_bit(1)) {
      if (chatmsg_ != &_default_chatmsg_) {
        chatmsg_->clear();
      }
    }
    gatewayid_ = 0u;
    channel_ = 0u;
    optime_ = 0u;
    ip_ = 0u;
    if (_has_bit(6)) {
      if (rolename_ != &_default_rolename_) {
        rolename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLogChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_ChatMsg;
        break;
      }
      
      // optional string ChatMsg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ChatMsg:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_chatmsg()));
        if (input->ExpectTag(24)) goto parse_GateWayID;
        break;
      }
      
      // optional uint32 GateWayID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GateWayID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &gatewayid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Channel;
        break;
      }
      
      // optional uint32 Channel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Channel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &channel_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_OpTime;
        break;
      }
      
      // optional uint32 OpTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &optime_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_IP;
        break;
      }
      
      // optional uint32 IP = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IP:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ip_));
        _set_bit(5);
        if (input->ExpectTag(58)) goto parse_RoleName;
        break;
      }
      
      // optional string RoleName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RoleName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_rolename()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLogChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLogChat::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional string ChatMsg = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->chatmsg(), output);
  }
  
  // optional uint32 GateWayID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->gatewayid(), output);
  }
  
  // optional uint32 Channel = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->channel(), output);
  }
  
  // optional uint32 OpTime = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->optime(), output);
  }
  
  // optional uint32 IP = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->ip(), output);
  }
  
  // optional string RoleName = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteString(7, this->rolename(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLogChat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional string ChatMsg = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->chatmsg(), target);
  }
  
  // optional uint32 GateWayID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->gatewayid(), target);
  }
  
  // optional uint32 Channel = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->channel(), target);
  }
  
  // optional uint32 OpTime = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->optime(), target);
  }
  
  // optional uint32 IP = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->ip(), target);
  }
  
  // optional string RoleName = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(7, this->rolename(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLogChat::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional string ChatMsg = 2;
    if (has_chatmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->chatmsg());
    }
    
    // optional uint32 GateWayID = 3;
    if (has_gatewayid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->gatewayid());
    }
    
    // optional uint32 Channel = 4;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->channel());
    }
    
    // optional uint32 OpTime = 5;
    if (has_optime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->optime());
    }
    
    // optional uint32 IP = 6;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ip());
    }
    
    // optional string RoleName = 7;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->rolename());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLogChat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLogChat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLogChat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLogChat::MergeFrom(const CMessageLogChat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_chatmsg(from.chatmsg());
    }
    if (from._has_bit(2)) {
      set_gatewayid(from.gatewayid());
    }
    if (from._has_bit(3)) {
      set_channel(from.channel());
    }
    if (from._has_bit(4)) {
      set_optime(from.optime());
    }
    if (from._has_bit(5)) {
      set_ip(from.ip());
    }
    if (from._has_bit(6)) {
      set_rolename(from.rolename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLogChat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLogChat::CopyFrom(const CMessageLogChat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLogChat::Swap(CMessageLogChat* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(chatmsg_, other->chatmsg_);
    std::swap(gatewayid_, other->gatewayid_);
    std::swap(channel_, other->channel_);
    std::swap(optime_, other->optime_);
    std::swap(ip_, other->ip_);
    std::swap(rolename_, other->rolename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLogChat::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLogChat::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLogChat::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLogChat_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLogRepetion::kRepetionKeyFieldNumber;
const int CMessageLogRepetion::kTypeFieldNumber;
const int CMessageLogRepetion::kIndexFieldNumber;
const int CMessageLogRepetion::kLineIDFieldNumber;
const int CMessageLogRepetion::kParame1FieldNumber;
const int CMessageLogRepetion::kParame2FieldNumber;
const int CMessageLogRepetion::kOpTimeFieldNumber;
#endif  // !_MSC_VER

CMessageLogRepetion::CMessageLogRepetion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLogRepetion::InitAsDefaultInstance() {}

CMessageLogRepetion::CMessageLogRepetion(const CMessageLogRepetion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLogRepetion::SharedCtor() {
  _cached_size_ = 0;
  repetionkey_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  index_ = 0u;
  lineid_ = 0u;
  parame1_ = 0u;
  parame2_ = 0u;
  optime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLogRepetion::~CMessageLogRepetion() {
  SharedDtor();
}

void CMessageLogRepetion::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLogRepetion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLogRepetion_descriptor_;
}

const CMessageLogRepetion& CMessageLogRepetion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageLogRepetion* CMessageLogRepetion::default_instance_ = NULL;

CMessageLogRepetion* CMessageLogRepetion::New() const {
  return new CMessageLogRepetion;
}

void CMessageLogRepetion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    repetionkey_ = GOOGLE_ULONGLONG(0);
    type_ = 0u;
    index_ = 0u;
    lineid_ = 0u;
    parame1_ = 0u;
    parame2_ = 0u;
    optime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLogRepetion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint64 RepetionKey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &repetionkey_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }
      
      // optional uint32 Type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Type:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Index;
        break;
      }
      
      // optional uint32 Index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Index:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &index_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_LineID;
        break;
      }
      
      // optional uint32 LineID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lineid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Parame1;
        break;
      }
      
      // optional uint32 Parame1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Parame1:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &parame1_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Parame2;
        break;
      }
      
      // optional uint32 Parame2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Parame2:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &parame2_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_OpTime;
        break;
      }
      
      // optional uint32 OpTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &optime_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLogRepetion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLogRepetion::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint64 RepetionKey = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(1, this->repetionkey(), output);
  }
  
  // optional uint32 Type = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->type(), output);
  }
  
  // optional uint32 Index = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->index(), output);
  }
  
  // optional uint32 LineID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->lineid(), output);
  }
  
  // optional uint32 Parame1 = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->parame1(), output);
  }
  
  // optional uint32 Parame2 = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->parame2(), output);
  }
  
  // optional uint32 OpTime = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->optime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLogRepetion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 RepetionKey = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(1, this->repetionkey(), target);
  }
  
  // optional uint32 Type = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->type(), target);
  }
  
  // optional uint32 Index = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->index(), target);
  }
  
  // optional uint32 LineID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->lineid(), target);
  }
  
  // optional uint32 Parame1 = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->parame1(), target);
  }
  
  // optional uint32 Parame2 = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->parame2(), target);
  }
  
  // optional uint32 OpTime = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->optime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLogRepetion::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RepetionKey = 1;
    if (has_repetionkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->repetionkey());
    }
    
    // optional uint32 Type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
    // optional uint32 Index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->index());
    }
    
    // optional uint32 LineID = 4;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lineid());
    }
    
    // optional uint32 Parame1 = 5;
    if (has_parame1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->parame1());
    }
    
    // optional uint32 Parame2 = 6;
    if (has_parame2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->parame2());
    }
    
    // optional uint32 OpTime = 7;
    if (has_optime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->optime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLogRepetion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLogRepetion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLogRepetion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLogRepetion::MergeFrom(const CMessageLogRepetion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_repetionkey(from.repetionkey());
    }
    if (from._has_bit(1)) {
      set_type(from.type());
    }
    if (from._has_bit(2)) {
      set_index(from.index());
    }
    if (from._has_bit(3)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(4)) {
      set_parame1(from.parame1());
    }
    if (from._has_bit(5)) {
      set_parame2(from.parame2());
    }
    if (from._has_bit(6)) {
      set_optime(from.optime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLogRepetion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLogRepetion::CopyFrom(const CMessageLogRepetion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLogRepetion::Swap(CMessageLogRepetion* other) {
  if (other != this) {
    std::swap(repetionkey_, other->repetionkey_);
    std::swap(type_, other->type_);
    std::swap(index_, other->index_);
    std::swap(lineid_, other->lineid_);
    std::swap(parame1_, other->parame1_);
    std::swap(parame2_, other->parame2_);
    std::swap(optime_, other->optime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLogRepetion::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLogRepetion::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLogRepetion::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLogRepetion_reflection_;
}

// ===================================================================

const ::std::string CMessageLogBossOgreDie::_default_damageinfo_;
#ifndef _MSC_VER
const int CMessageLogBossOgreDie::kDeathTimeFieldNumber;
const int CMessageLogBossOgreDie::kCampIDFieldNumber;
const int CMessageLogBossOgreDie::kMapIDFieldNumber;
const int CMessageLogBossOgreDie::kPosXFieldNumber;
const int CMessageLogBossOgreDie::kPosYFieldNumber;
const int CMessageLogBossOgreDie::kTempIDFieldNumber;
const int CMessageLogBossOgreDie::kKillerIDFieldNumber;
const int CMessageLogBossOgreDie::kDamageInfoFieldNumber;
#endif  // !_MSC_VER

CMessageLogBossOgreDie::CMessageLogBossOgreDie()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLogBossOgreDie::InitAsDefaultInstance() {}

CMessageLogBossOgreDie::CMessageLogBossOgreDie(const CMessageLogBossOgreDie& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLogBossOgreDie::SharedCtor() {
  _cached_size_ = 0;
  deathtime_ = 0u;
  campid_ = 0u;
  mapid_ = 0u;
  posx_ = 0u;
  posy_ = 0u;
  tempid_ = 0u;
  killerid_ = 0u;
  damageinfo_ = const_cast< ::std::string*>(&_default_damageinfo_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLogBossOgreDie::~CMessageLogBossOgreDie() {
  SharedDtor();
}

void CMessageLogBossOgreDie::SharedDtor() {
  if (damageinfo_ != &_default_damageinfo_) {
    delete damageinfo_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLogBossOgreDie::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLogBossOgreDie_descriptor_;
}

const CMessageLogBossOgreDie& CMessageLogBossOgreDie::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageLogBossOgreDie* CMessageLogBossOgreDie::default_instance_ = NULL;

CMessageLogBossOgreDie* CMessageLogBossOgreDie::New() const {
  return new CMessageLogBossOgreDie;
}

void CMessageLogBossOgreDie::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    deathtime_ = 0u;
    campid_ = 0u;
    mapid_ = 0u;
    posx_ = 0u;
    posy_ = 0u;
    tempid_ = 0u;
    killerid_ = 0u;
    if (_has_bit(7)) {
      if (damageinfo_ != &_default_damageinfo_) {
        damageinfo_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLogBossOgreDie::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 DeathTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deathtime_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CampID;
        break;
      }
      
      // optional uint32 CampID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CampID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &campid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_PosX;
        break;
      }
      
      // optional uint32 PosX = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosX:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posx_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_PosY;
        break;
      }
      
      // optional uint32 PosY = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posy_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_TempID;
        break;
      }
      
      // optional uint32 TempID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TempID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_KillerID;
        break;
      }
      
      // optional uint32 KillerID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_KillerID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &killerid_));
        _set_bit(6);
        if (input->ExpectTag(66)) goto parse_DamageInfo;
        break;
      }
      
      // optional string DamageInfo = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_DamageInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_damageinfo()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLogBossOgreDie::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLogBossOgreDie::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 DeathTime = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->deathtime(), output);
  }
  
  // optional uint32 CampID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->campid(), output);
  }
  
  // optional uint32 MapID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->mapid(), output);
  }
  
  // optional uint32 PosX = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->posx(), output);
  }
  
  // optional uint32 PosY = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->posy(), output);
  }
  
  // optional uint32 TempID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->tempid(), output);
  }
  
  // optional uint32 KillerID = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->killerid(), output);
  }
  
  // optional string DamageInfo = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteString(8, this->damageinfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLogBossOgreDie::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 DeathTime = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->deathtime(), target);
  }
  
  // optional uint32 CampID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->campid(), target);
  }
  
  // optional uint32 MapID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->mapid(), target);
  }
  
  // optional uint32 PosX = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->posx(), target);
  }
  
  // optional uint32 PosY = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->posy(), target);
  }
  
  // optional uint32 TempID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->tempid(), target);
  }
  
  // optional uint32 KillerID = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->killerid(), target);
  }
  
  // optional string DamageInfo = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(8, this->damageinfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLogBossOgreDie::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 DeathTime = 1;
    if (has_deathtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deathtime());
    }
    
    // optional uint32 CampID = 2;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->campid());
    }
    
    // optional uint32 MapID = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 PosX = 4;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posx());
    }
    
    // optional uint32 PosY = 5;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posy());
    }
    
    // optional uint32 TempID = 6;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional uint32 KillerID = 7;
    if (has_killerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->killerid());
    }
    
    // optional string DamageInfo = 8;
    if (has_damageinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->damageinfo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLogBossOgreDie::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLogBossOgreDie* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLogBossOgreDie*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLogBossOgreDie::MergeFrom(const CMessageLogBossOgreDie& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_deathtime(from.deathtime());
    }
    if (from._has_bit(1)) {
      set_campid(from.campid());
    }
    if (from._has_bit(2)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(3)) {
      set_posx(from.posx());
    }
    if (from._has_bit(4)) {
      set_posy(from.posy());
    }
    if (from._has_bit(5)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(6)) {
      set_killerid(from.killerid());
    }
    if (from._has_bit(7)) {
      set_damageinfo(from.damageinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLogBossOgreDie::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLogBossOgreDie::CopyFrom(const CMessageLogBossOgreDie& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLogBossOgreDie::Swap(CMessageLogBossOgreDie* other) {
  if (other != this) {
    std::swap(deathtime_, other->deathtime_);
    std::swap(campid_, other->campid_);
    std::swap(mapid_, other->mapid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(tempid_, other->tempid_);
    std::swap(killerid_, other->killerid_);
    std::swap(damageinfo_, other->damageinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLogBossOgreDie::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLogBossOgreDie::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLogBossOgreDie::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLogBossOgreDie_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLifeSkill::kRoleIDFieldNumber;
const int CMessageLifeSkill::kOpTimeFieldNumber;
const int CMessageLifeSkill::kLifeSkillTypeFieldNumber;
const int CMessageLifeSkill::kLifeSkillKindFieldNumber;
const int CMessageLifeSkill::kLifeSkillLevelFieldNumber;
const int CMessageLifeSkill::kSpecializedDegreeFieldNumber;
const int CMessageLifeSkill::kActionKindFieldNumber;
const int CMessageLifeSkill::kComposeIDFieldNumber;
#endif  // !_MSC_VER

CMessageLifeSkill::CMessageLifeSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLifeSkill::InitAsDefaultInstance() {}

CMessageLifeSkill::CMessageLifeSkill(const CMessageLifeSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLifeSkill::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  optime_ = 0u;
  lifeskilltype_ = 0u;
  lifeskillkind_ = 0u;
  lifeskilllevel_ = 0u;
  specializeddegree_ = 0u;
  actionkind_ = 0u;
  composeid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLifeSkill::~CMessageLifeSkill() {
  SharedDtor();
}

void CMessageLifeSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLifeSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLifeSkill_descriptor_;
}

const CMessageLifeSkill& CMessageLifeSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageLifeSkill* CMessageLifeSkill::default_instance_ = NULL;

CMessageLifeSkill* CMessageLifeSkill::New() const {
  return new CMessageLifeSkill;
}

void CMessageLifeSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    optime_ = 0u;
    lifeskilltype_ = 0u;
    lifeskillkind_ = 0u;
    lifeskilllevel_ = 0u;
    specializeddegree_ = 0u;
    actionkind_ = 0u;
    composeid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLifeSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_OpTime;
        break;
      }
      
      // optional uint32 OpTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &optime_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_LifeSkillType;
        break;
      }
      
      // optional uint32 LifeSkillType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LifeSkillType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lifeskilltype_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_LifeSkillKind;
        break;
      }
      
      // optional uint32 LifeSkillKind = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LifeSkillKind:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lifeskillkind_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_LifeSkillLevel;
        break;
      }
      
      // optional uint32 LifeSkillLevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LifeSkillLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lifeskilllevel_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_SpecializedDegree;
        break;
      }
      
      // optional uint32 SpecializedDegree = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SpecializedDegree:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &specializeddegree_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_ActionKind;
        break;
      }
      
      // optional uint32 ActionKind = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ActionKind:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &actionkind_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_ComposeID;
        break;
      }
      
      // optional uint32 ComposeID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ComposeID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &composeid_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLifeSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLifeSkill::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional uint32 OpTime = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->optime(), output);
  }
  
  // optional uint32 LifeSkillType = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->lifeskilltype(), output);
  }
  
  // optional uint32 LifeSkillKind = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->lifeskillkind(), output);
  }
  
  // optional uint32 LifeSkillLevel = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->lifeskilllevel(), output);
  }
  
  // optional uint32 SpecializedDegree = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->specializeddegree(), output);
  }
  
  // optional uint32 ActionKind = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->actionkind(), output);
  }
  
  // optional uint32 ComposeID = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->composeid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLifeSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional uint32 OpTime = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->optime(), target);
  }
  
  // optional uint32 LifeSkillType = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->lifeskilltype(), target);
  }
  
  // optional uint32 LifeSkillKind = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->lifeskillkind(), target);
  }
  
  // optional uint32 LifeSkillLevel = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->lifeskilllevel(), target);
  }
  
  // optional uint32 SpecializedDegree = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->specializeddegree(), target);
  }
  
  // optional uint32 ActionKind = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->actionkind(), target);
  }
  
  // optional uint32 ComposeID = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->composeid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLifeSkill::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 OpTime = 2;
    if (has_optime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->optime());
    }
    
    // optional uint32 LifeSkillType = 3;
    if (has_lifeskilltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lifeskilltype());
    }
    
    // optional uint32 LifeSkillKind = 4;
    if (has_lifeskillkind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lifeskillkind());
    }
    
    // optional uint32 LifeSkillLevel = 5;
    if (has_lifeskilllevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lifeskilllevel());
    }
    
    // optional uint32 SpecializedDegree = 6;
    if (has_specializeddegree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->specializeddegree());
    }
    
    // optional uint32 ActionKind = 7;
    if (has_actionkind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->actionkind());
    }
    
    // optional uint32 ComposeID = 8;
    if (has_composeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->composeid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLifeSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLifeSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLifeSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLifeSkill::MergeFrom(const CMessageLifeSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_optime(from.optime());
    }
    if (from._has_bit(2)) {
      set_lifeskilltype(from.lifeskilltype());
    }
    if (from._has_bit(3)) {
      set_lifeskillkind(from.lifeskillkind());
    }
    if (from._has_bit(4)) {
      set_lifeskilllevel(from.lifeskilllevel());
    }
    if (from._has_bit(5)) {
      set_specializeddegree(from.specializeddegree());
    }
    if (from._has_bit(6)) {
      set_actionkind(from.actionkind());
    }
    if (from._has_bit(7)) {
      set_composeid(from.composeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLifeSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLifeSkill::CopyFrom(const CMessageLifeSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLifeSkill::Swap(CMessageLifeSkill* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(optime_, other->optime_);
    std::swap(lifeskilltype_, other->lifeskilltype_);
    std::swap(lifeskillkind_, other->lifeskillkind_);
    std::swap(lifeskilllevel_, other->lifeskilllevel_);
    std::swap(specializeddegree_, other->specializeddegree_);
    std::swap(actionkind_, other->actionkind_);
    std::swap(composeid_, other->composeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLifeSkill::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLifeSkill::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLifeSkill::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLifeSkill_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageExchangeLog::kAccountIdFieldNumber;
const int CMessageExchangeLog::kRoleIdFieldNumber;
const int CMessageExchangeLog::kOptimeFieldNumber;
const int CMessageExchangeLog::kMoneyFieldNumber;
const int CMessageExchangeLog::kYbFieldNumber;
const int CMessageExchangeLog::kOperateFieldNumber;
const int CMessageExchangeLog::kDetailId1FieldNumber;
const int CMessageExchangeLog::kDetailId2FieldNumber;
const int CMessageExchangeLog::kParame1FieldNumber;
const int CMessageExchangeLog::kParame2FieldNumber;
const int CMessageExchangeLog::kParame3FieldNumber;
const int CMessageExchangeLog::kParame4FieldNumber;
#endif  // !_MSC_VER

CMessageExchangeLog::CMessageExchangeLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageExchangeLog::InitAsDefaultInstance() {}

CMessageExchangeLog::CMessageExchangeLog(const CMessageExchangeLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageExchangeLog::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  role_id_ = 0u;
  optime_ = 0u;
  money_ = 0u;
  yb_ = 0u;
  operate_ = 0u;
  detail_id_1_ = GOOGLE_ULONGLONG(0);
  detail_id_2_ = GOOGLE_ULONGLONG(0);
  parame1_ = 0u;
  parame2_ = 0u;
  parame3_ = 0u;
  parame4_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageExchangeLog::~CMessageExchangeLog() {
  SharedDtor();
}

void CMessageExchangeLog::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageExchangeLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageExchangeLog_descriptor_;
}

const CMessageExchangeLog& CMessageExchangeLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageExchangeLog* CMessageExchangeLog::default_instance_ = NULL;

CMessageExchangeLog* CMessageExchangeLog::New() const {
  return new CMessageExchangeLog;
}

void CMessageExchangeLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    role_id_ = 0u;
    optime_ = 0u;
    money_ = 0u;
    yb_ = 0u;
    operate_ = 0u;
    detail_id_1_ = GOOGLE_ULONGLONG(0);
    detail_id_2_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    parame1_ = 0u;
    parame2_ = 0u;
    parame3_ = 0u;
    parame4_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageExchangeLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &account_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }
      
      // optional uint32 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &role_id_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_optime;
        break;
      }
      
      // optional uint32 optime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_optime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &optime_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_money;
        break;
      }
      
      // optional uint32 money = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_yb;
        break;
      }
      
      // optional uint32 yb = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_yb:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &yb_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_operate;
        break;
      }
      
      // optional uint32 operate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_operate:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &operate_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_detail_id_1;
        break;
      }
      
      // optional uint64 detail_id_1 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_detail_id_1:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &detail_id_1_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_detail_id_2;
        break;
      }
      
      // optional uint64 detail_id_2 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_detail_id_2:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &detail_id_2_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_parame1;
        break;
      }
      
      // optional uint32 parame1 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_parame1:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &parame1_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_parame2;
        break;
      }
      
      // optional uint32 parame2 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_parame2:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &parame2_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_parame3;
        break;
      }
      
      // optional uint32 parame3 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_parame3:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &parame3_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_parame4;
        break;
      }
      
      // optional uint32 parame4 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_parame4:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &parame4_));
        _set_bit(11);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageExchangeLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageExchangeLog::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->account_id(), output);
  }
  
  // optional uint32 role_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->role_id(), output);
  }
  
  // optional uint32 optime = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->optime(), output);
  }
  
  // optional uint32 money = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->money(), output);
  }
  
  // optional uint32 yb = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->yb(), output);
  }
  
  // optional uint32 operate = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->operate(), output);
  }
  
  // optional uint64 detail_id_1 = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(7, this->detail_id_1(), output);
  }
  
  // optional uint64 detail_id_2 = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(8, this->detail_id_2(), output);
  }
  
  // optional uint32 parame1 = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->parame1(), output);
  }
  
  // optional uint32 parame2 = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->parame2(), output);
  }
  
  // optional uint32 parame3 = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->parame3(), output);
  }
  
  // optional uint32 parame4 = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->parame4(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageExchangeLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->account_id(), target);
  }
  
  // optional uint32 role_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->role_id(), target);
  }
  
  // optional uint32 optime = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->optime(), target);
  }
  
  // optional uint32 money = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->money(), target);
  }
  
  // optional uint32 yb = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->yb(), target);
  }
  
  // optional uint32 operate = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->operate(), target);
  }
  
  // optional uint64 detail_id_1 = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(7, this->detail_id_1(), target);
  }
  
  // optional uint64 detail_id_2 = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(8, this->detail_id_2(), target);
  }
  
  // optional uint32 parame1 = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->parame1(), target);
  }
  
  // optional uint32 parame2 = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->parame2(), target);
  }
  
  // optional uint32 parame3 = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->parame3(), target);
  }
  
  // optional uint32 parame4 = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->parame4(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageExchangeLog::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->account_id());
    }
    
    // optional uint32 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->role_id());
    }
    
    // optional uint32 optime = 3;
    if (has_optime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->optime());
    }
    
    // optional uint32 money = 4;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
    // optional uint32 yb = 5;
    if (has_yb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->yb());
    }
    
    // optional uint32 operate = 6;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->operate());
    }
    
    // optional uint64 detail_id_1 = 7;
    if (has_detail_id_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->detail_id_1());
    }
    
    // optional uint64 detail_id_2 = 8;
    if (has_detail_id_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->detail_id_2());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 parame1 = 9;
    if (has_parame1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->parame1());
    }
    
    // optional uint32 parame2 = 10;
    if (has_parame2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->parame2());
    }
    
    // optional uint32 parame3 = 11;
    if (has_parame3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->parame3());
    }
    
    // optional uint32 parame4 = 12;
    if (has_parame4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->parame4());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageExchangeLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageExchangeLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageExchangeLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageExchangeLog::MergeFrom(const CMessageExchangeLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_account_id(from.account_id());
    }
    if (from._has_bit(1)) {
      set_role_id(from.role_id());
    }
    if (from._has_bit(2)) {
      set_optime(from.optime());
    }
    if (from._has_bit(3)) {
      set_money(from.money());
    }
    if (from._has_bit(4)) {
      set_yb(from.yb());
    }
    if (from._has_bit(5)) {
      set_operate(from.operate());
    }
    if (from._has_bit(6)) {
      set_detail_id_1(from.detail_id_1());
    }
    if (from._has_bit(7)) {
      set_detail_id_2(from.detail_id_2());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_parame1(from.parame1());
    }
    if (from._has_bit(9)) {
      set_parame2(from.parame2());
    }
    if (from._has_bit(10)) {
      set_parame3(from.parame3());
    }
    if (from._has_bit(11)) {
      set_parame4(from.parame4());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageExchangeLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageExchangeLog::CopyFrom(const CMessageExchangeLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageExchangeLog::Swap(CMessageExchangeLog* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(optime_, other->optime_);
    std::swap(money_, other->money_);
    std::swap(yb_, other->yb_);
    std::swap(operate_, other->operate_);
    std::swap(detail_id_1_, other->detail_id_1_);
    std::swap(detail_id_2_, other->detail_id_2_);
    std::swap(parame1_, other->parame1_);
    std::swap(parame2_, other->parame2_);
    std::swap(parame3_, other->parame3_);
    std::swap(parame4_, other->parame4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageExchangeLog::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageExchangeLog::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageExchangeLog::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageExchangeLog_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLogMatrix::kSlaveIdFieldNumber;
const int CMessageLogMatrix::kMasterIdFieldNumber;
const int CMessageLogMatrix::kOptimeFieldNumber;
const int CMessageLogMatrix::kOperateFieldNumber;
const int CMessageLogMatrix::kParame1FieldNumber;
const int CMessageLogMatrix::kParame2FieldNumber;
const int CMessageLogMatrix::kParame3FieldNumber;
#endif  // !_MSC_VER

CMessageLogMatrix::CMessageLogMatrix()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLogMatrix::InitAsDefaultInstance() {}

CMessageLogMatrix::CMessageLogMatrix(const CMessageLogMatrix& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLogMatrix::SharedCtor() {
  _cached_size_ = 0;
  slave_id_ = 0u;
  master_id_ = 0u;
  optime_ = 0u;
  operate_ = 0u;
  parame1_ = 0u;
  parame2_ = 0u;
  parame3_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLogMatrix::~CMessageLogMatrix() {
  SharedDtor();
}

void CMessageLogMatrix::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLogMatrix::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLogMatrix_descriptor_;
}

const CMessageLogMatrix& CMessageLogMatrix::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageLogMatrix* CMessageLogMatrix::default_instance_ = NULL;

CMessageLogMatrix* CMessageLogMatrix::New() const {
  return new CMessageLogMatrix;
}

void CMessageLogMatrix::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slave_id_ = 0u;
    master_id_ = 0u;
    optime_ = 0u;
    operate_ = 0u;
    parame1_ = 0u;
    parame2_ = 0u;
    parame3_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLogMatrix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 slave_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &slave_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_master_id;
        break;
      }
      
      // optional uint32 master_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_master_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &master_id_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_optime;
        break;
      }
      
      // optional uint32 optime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_optime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &optime_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_operate;
        break;
      }
      
      // optional uint32 operate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_operate:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &operate_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_parame1;
        break;
      }
      
      // optional uint32 parame1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_parame1:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &parame1_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_parame2;
        break;
      }
      
      // optional uint32 parame2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_parame2:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &parame2_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_parame3;
        break;
      }
      
      // optional uint32 parame3 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_parame3:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &parame3_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLogMatrix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLogMatrix::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 slave_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->slave_id(), output);
  }
  
  // optional uint32 master_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->master_id(), output);
  }
  
  // optional uint32 optime = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->optime(), output);
  }
  
  // optional uint32 operate = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->operate(), output);
  }
  
  // optional uint32 parame1 = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->parame1(), output);
  }
  
  // optional uint32 parame2 = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->parame2(), output);
  }
  
  // optional uint32 parame3 = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->parame3(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLogMatrix::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 slave_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->slave_id(), target);
  }
  
  // optional uint32 master_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->master_id(), target);
  }
  
  // optional uint32 optime = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->optime(), target);
  }
  
  // optional uint32 operate = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->operate(), target);
  }
  
  // optional uint32 parame1 = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->parame1(), target);
  }
  
  // optional uint32 parame2 = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->parame2(), target);
  }
  
  // optional uint32 parame3 = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->parame3(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLogMatrix::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 slave_id = 1;
    if (has_slave_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->slave_id());
    }
    
    // optional uint32 master_id = 2;
    if (has_master_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->master_id());
    }
    
    // optional uint32 optime = 3;
    if (has_optime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->optime());
    }
    
    // optional uint32 operate = 4;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->operate());
    }
    
    // optional uint32 parame1 = 5;
    if (has_parame1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->parame1());
    }
    
    // optional uint32 parame2 = 6;
    if (has_parame2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->parame2());
    }
    
    // optional uint32 parame3 = 7;
    if (has_parame3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->parame3());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLogMatrix::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLogMatrix* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLogMatrix*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLogMatrix::MergeFrom(const CMessageLogMatrix& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_slave_id(from.slave_id());
    }
    if (from._has_bit(1)) {
      set_master_id(from.master_id());
    }
    if (from._has_bit(2)) {
      set_optime(from.optime());
    }
    if (from._has_bit(3)) {
      set_operate(from.operate());
    }
    if (from._has_bit(4)) {
      set_parame1(from.parame1());
    }
    if (from._has_bit(5)) {
      set_parame2(from.parame2());
    }
    if (from._has_bit(6)) {
      set_parame3(from.parame3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLogMatrix::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLogMatrix::CopyFrom(const CMessageLogMatrix& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLogMatrix::Swap(CMessageLogMatrix* other) {
  if (other != this) {
    std::swap(slave_id_, other->slave_id_);
    std::swap(master_id_, other->master_id_);
    std::swap(optime_, other->optime_);
    std::swap(operate_, other->operate_);
    std::swap(parame1_, other->parame1_);
    std::swap(parame2_, other->parame2_);
    std::swap(parame3_, other->parame3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLogMatrix::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLogMatrix::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLogMatrix::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLogMatrix_reflection_;
}

// ===================================================================

const ::std::string CMessageLogRoleDamage::_default_srcres_;
const ::std::string CMessageLogRoleDamage::_default_desres_;
const ::std::string CMessageLogRoleDamage::_default_srcbuff_;
const ::std::string CMessageLogRoleDamage::_default_desbuff_;
#ifndef _MSC_VER
const int CMessageLogRoleDamage::kSrccharidFieldNumber;
const int CMessageLogRoleDamage::kDescharidFieldNumber;
const int CMessageLogRoleDamage::kOptimeFieldNumber;
const int CMessageLogRoleDamage::kSkillidFieldNumber;
const int CMessageLogRoleDamage::kCalcdamageFieldNumber;
const int CMessageLogRoleDamage::kRealdamageFieldNumber;
const int CMessageLogRoleDamage::kSrcpattFieldNumber;
const int CMessageLogRoleDamage::kSrcmattFieldNumber;
const int CMessageLogRoleDamage::kDespdefFieldNumber;
const int CMessageLogRoleDamage::kDesmdefFieldNumber;
const int CMessageLogRoleDamage::kDespimuFieldNumber;
const int CMessageLogRoleDamage::kDesmimuFieldNumber;
const int CMessageLogRoleDamage::kSrcdhitFieldNumber;
const int CMessageLogRoleDamage::kDesddefFieldNumber;
const int CMessageLogRoleDamage::kSrctitleFieldNumber;
const int CMessageLogRoleDamage::kDestitleFieldNumber;
const int CMessageLogRoleDamage::kSrcresFieldNumber;
const int CMessageLogRoleDamage::kDesresFieldNumber;
const int CMessageLogRoleDamage::kSrcbuffFieldNumber;
const int CMessageLogRoleDamage::kDesbuffFieldNumber;
#endif  // !_MSC_VER

CMessageLogRoleDamage::CMessageLogRoleDamage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLogRoleDamage::InitAsDefaultInstance() {}

CMessageLogRoleDamage::CMessageLogRoleDamage(const CMessageLogRoleDamage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLogRoleDamage::SharedCtor() {
  _cached_size_ = 0;
  srccharid_ = 0u;
  descharid_ = 0u;
  optime_ = 0u;
  skillid_ = 0u;
  calcdamage_ = 0u;
  realdamage_ = 0u;
  srcpatt_ = 0u;
  srcmatt_ = 0u;
  despdef_ = 0u;
  desmdef_ = 0u;
  despimu_ = 0u;
  desmimu_ = 0u;
  srcdhit_ = 0u;
  desddef_ = 0u;
  srctitle_ = 0u;
  destitle_ = 0u;
  srcres_ = const_cast< ::std::string*>(&_default_srcres_);
  desres_ = const_cast< ::std::string*>(&_default_desres_);
  srcbuff_ = const_cast< ::std::string*>(&_default_srcbuff_);
  desbuff_ = const_cast< ::std::string*>(&_default_desbuff_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLogRoleDamage::~CMessageLogRoleDamage() {
  SharedDtor();
}

void CMessageLogRoleDamage::SharedDtor() {
  if (srcres_ != &_default_srcres_) {
    delete srcres_;
  }
  if (desres_ != &_default_desres_) {
    delete desres_;
  }
  if (srcbuff_ != &_default_srcbuff_) {
    delete srcbuff_;
  }
  if (desbuff_ != &_default_desbuff_) {
    delete desbuff_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLogRoleDamage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLogRoleDamage_descriptor_;
}

const CMessageLogRoleDamage& CMessageLogRoleDamage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageLogRoleDamage* CMessageLogRoleDamage::default_instance_ = NULL;

CMessageLogRoleDamage* CMessageLogRoleDamage::New() const {
  return new CMessageLogRoleDamage;
}

void CMessageLogRoleDamage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    srccharid_ = 0u;
    descharid_ = 0u;
    optime_ = 0u;
    skillid_ = 0u;
    calcdamage_ = 0u;
    realdamage_ = 0u;
    srcpatt_ = 0u;
    srcmatt_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    despdef_ = 0u;
    desmdef_ = 0u;
    despimu_ = 0u;
    desmimu_ = 0u;
    srcdhit_ = 0u;
    desddef_ = 0u;
    srctitle_ = 0u;
    destitle_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (_has_bit(16)) {
      if (srcres_ != &_default_srcres_) {
        srcres_->clear();
      }
    }
    if (_has_bit(17)) {
      if (desres_ != &_default_desres_) {
        desres_->clear();
      }
    }
    if (_has_bit(18)) {
      if (srcbuff_ != &_default_srcbuff_) {
        srcbuff_->clear();
      }
    }
    if (_has_bit(19)) {
      if (desbuff_ != &_default_desbuff_) {
        desbuff_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLogRoleDamage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 srccharid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srccharid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_descharid;
        break;
      }
      
      // optional uint32 descharid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_descharid:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &descharid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_optime;
        break;
      }
      
      // optional uint32 optime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_optime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &optime_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_skillid;
        break;
      }
      
      // optional uint32 skillid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_skillid:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &skillid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_calcdamage;
        break;
      }
      
      // optional uint32 calcdamage = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_calcdamage:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &calcdamage_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_realdamage;
        break;
      }
      
      // optional uint32 realdamage = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_realdamage:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &realdamage_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_srcpatt;
        break;
      }
      
      // optional uint32 srcpatt = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_srcpatt:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srcpatt_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_srcmatt;
        break;
      }
      
      // optional uint32 srcmatt = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_srcmatt:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srcmatt_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_despdef;
        break;
      }
      
      // optional uint32 despdef = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_despdef:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &despdef_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_desmdef;
        break;
      }
      
      // optional uint32 desmdef = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_desmdef:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &desmdef_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_despimu;
        break;
      }
      
      // optional uint32 despimu = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_despimu:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &despimu_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_desmimu;
        break;
      }
      
      // optional uint32 desmimu = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_desmimu:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &desmimu_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_srcdhit;
        break;
      }
      
      // optional uint32 srcdhit = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_srcdhit:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srcdhit_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_desddef;
        break;
      }
      
      // optional uint32 desddef = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_desddef:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &desddef_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_srctitle;
        break;
      }
      
      // optional uint32 srctitle = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_srctitle:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srctitle_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_destitle;
        break;
      }
      
      // optional uint32 destitle = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_destitle:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &destitle_));
        _set_bit(15);
        if (input->ExpectTag(138)) goto parse_srcres;
        break;
      }
      
      // optional string srcres = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_srcres:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_srcres()));
        if (input->ExpectTag(146)) goto parse_desres;
        break;
      }
      
      // optional string desres = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_desres:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_desres()));
        if (input->ExpectTag(154)) goto parse_srcbuff;
        break;
      }
      
      // optional string srcbuff = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_srcbuff:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_srcbuff()));
        if (input->ExpectTag(162)) goto parse_desbuff;
        break;
      }
      
      // optional string desbuff = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_desbuff:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_desbuff()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLogRoleDamage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLogRoleDamage::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 srccharid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->srccharid(), output);
  }
  
  // optional uint32 descharid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->descharid(), output);
  }
  
  // optional uint32 optime = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->optime(), output);
  }
  
  // optional uint32 skillid = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->skillid(), output);
  }
  
  // optional uint32 calcdamage = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->calcdamage(), output);
  }
  
  // optional uint32 realdamage = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->realdamage(), output);
  }
  
  // optional uint32 srcpatt = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->srcpatt(), output);
  }
  
  // optional uint32 srcmatt = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->srcmatt(), output);
  }
  
  // optional uint32 despdef = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->despdef(), output);
  }
  
  // optional uint32 desmdef = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->desmdef(), output);
  }
  
  // optional uint32 despimu = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->despimu(), output);
  }
  
  // optional uint32 desmimu = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->desmimu(), output);
  }
  
  // optional uint32 srcdhit = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->srcdhit(), output);
  }
  
  // optional uint32 desddef = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->desddef(), output);
  }
  
  // optional uint32 srctitle = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(15, this->srctitle(), output);
  }
  
  // optional uint32 destitle = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(16, this->destitle(), output);
  }
  
  // optional string srcres = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteString(17, this->srcres(), output);
  }
  
  // optional string desres = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::WriteString(18, this->desres(), output);
  }
  
  // optional string srcbuff = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormat::WriteString(19, this->srcbuff(), output);
  }
  
  // optional string desbuff = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormat::WriteString(20, this->desbuff(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLogRoleDamage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 srccharid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->srccharid(), target);
  }
  
  // optional uint32 descharid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->descharid(), target);
  }
  
  // optional uint32 optime = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->optime(), target);
  }
  
  // optional uint32 skillid = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->skillid(), target);
  }
  
  // optional uint32 calcdamage = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->calcdamage(), target);
  }
  
  // optional uint32 realdamage = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->realdamage(), target);
  }
  
  // optional uint32 srcpatt = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->srcpatt(), target);
  }
  
  // optional uint32 srcmatt = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->srcmatt(), target);
  }
  
  // optional uint32 despdef = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->despdef(), target);
  }
  
  // optional uint32 desmdef = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->desmdef(), target);
  }
  
  // optional uint32 despimu = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->despimu(), target);
  }
  
  // optional uint32 desmimu = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->desmimu(), target);
  }
  
  // optional uint32 srcdhit = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->srcdhit(), target);
  }
  
  // optional uint32 desddef = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->desddef(), target);
  }
  
  // optional uint32 srctitle = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(15, this->srctitle(), target);
  }
  
  // optional uint32 destitle = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(16, this->destitle(), target);
  }
  
  // optional string srcres = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(17, this->srcres(), target);
  }
  
  // optional string desres = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(18, this->desres(), target);
  }
  
  // optional string srcbuff = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(19, this->srcbuff(), target);
  }
  
  // optional string desbuff = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(20, this->desbuff(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLogRoleDamage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 srccharid = 1;
    if (has_srccharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srccharid());
    }
    
    // optional uint32 descharid = 2;
    if (has_descharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->descharid());
    }
    
    // optional uint32 optime = 3;
    if (has_optime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->optime());
    }
    
    // optional uint32 skillid = 4;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->skillid());
    }
    
    // optional uint32 calcdamage = 5;
    if (has_calcdamage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->calcdamage());
    }
    
    // optional uint32 realdamage = 6;
    if (has_realdamage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->realdamage());
    }
    
    // optional uint32 srcpatt = 7;
    if (has_srcpatt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srcpatt());
    }
    
    // optional uint32 srcmatt = 8;
    if (has_srcmatt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srcmatt());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 despdef = 9;
    if (has_despdef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->despdef());
    }
    
    // optional uint32 desmdef = 10;
    if (has_desmdef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->desmdef());
    }
    
    // optional uint32 despimu = 11;
    if (has_despimu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->despimu());
    }
    
    // optional uint32 desmimu = 12;
    if (has_desmimu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->desmimu());
    }
    
    // optional uint32 srcdhit = 13;
    if (has_srcdhit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srcdhit());
    }
    
    // optional uint32 desddef = 14;
    if (has_desddef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->desddef());
    }
    
    // optional uint32 srctitle = 15;
    if (has_srctitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srctitle());
    }
    
    // optional uint32 destitle = 16;
    if (has_destitle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->destitle());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string srcres = 17;
    if (has_srcres()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::StringSize(this->srcres());
    }
    
    // optional string desres = 18;
    if (has_desres()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::StringSize(this->desres());
    }
    
    // optional string srcbuff = 19;
    if (has_srcbuff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::StringSize(this->srcbuff());
    }
    
    // optional string desbuff = 20;
    if (has_desbuff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::StringSize(this->desbuff());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLogRoleDamage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLogRoleDamage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLogRoleDamage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLogRoleDamage::MergeFrom(const CMessageLogRoleDamage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_srccharid(from.srccharid());
    }
    if (from._has_bit(1)) {
      set_descharid(from.descharid());
    }
    if (from._has_bit(2)) {
      set_optime(from.optime());
    }
    if (from._has_bit(3)) {
      set_skillid(from.skillid());
    }
    if (from._has_bit(4)) {
      set_calcdamage(from.calcdamage());
    }
    if (from._has_bit(5)) {
      set_realdamage(from.realdamage());
    }
    if (from._has_bit(6)) {
      set_srcpatt(from.srcpatt());
    }
    if (from._has_bit(7)) {
      set_srcmatt(from.srcmatt());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_despdef(from.despdef());
    }
    if (from._has_bit(9)) {
      set_desmdef(from.desmdef());
    }
    if (from._has_bit(10)) {
      set_despimu(from.despimu());
    }
    if (from._has_bit(11)) {
      set_desmimu(from.desmimu());
    }
    if (from._has_bit(12)) {
      set_srcdhit(from.srcdhit());
    }
    if (from._has_bit(13)) {
      set_desddef(from.desddef());
    }
    if (from._has_bit(14)) {
      set_srctitle(from.srctitle());
    }
    if (from._has_bit(15)) {
      set_destitle(from.destitle());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_srcres(from.srcres());
    }
    if (from._has_bit(17)) {
      set_desres(from.desres());
    }
    if (from._has_bit(18)) {
      set_srcbuff(from.srcbuff());
    }
    if (from._has_bit(19)) {
      set_desbuff(from.desbuff());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLogRoleDamage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLogRoleDamage::CopyFrom(const CMessageLogRoleDamage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLogRoleDamage::Swap(CMessageLogRoleDamage* other) {
  if (other != this) {
    std::swap(srccharid_, other->srccharid_);
    std::swap(descharid_, other->descharid_);
    std::swap(optime_, other->optime_);
    std::swap(skillid_, other->skillid_);
    std::swap(calcdamage_, other->calcdamage_);
    std::swap(realdamage_, other->realdamage_);
    std::swap(srcpatt_, other->srcpatt_);
    std::swap(srcmatt_, other->srcmatt_);
    std::swap(despdef_, other->despdef_);
    std::swap(desmdef_, other->desmdef_);
    std::swap(despimu_, other->despimu_);
    std::swap(desmimu_, other->desmimu_);
    std::swap(srcdhit_, other->srcdhit_);
    std::swap(desddef_, other->desddef_);
    std::swap(srctitle_, other->srctitle_);
    std::swap(destitle_, other->destitle_);
    std::swap(srcres_, other->srcres_);
    std::swap(desres_, other->desres_);
    std::swap(srcbuff_, other->srcbuff_);
    std::swap(desbuff_, other->desbuff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLogRoleDamage::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLogRoleDamage::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLogRoleDamage::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLogRoleDamage_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLogRoleRepeScore::kCharidFieldNumber;
const int CMessageLogRoleRepeScore::kLineidFieldNumber;
const int CMessageLogRoleRepeScore::kOptimeFieldNumber;
const int CMessageLogRoleRepeScore::kMapidFieldNumber;
const int CMessageLogRoleRepeScore::kRepeidFieldNumber;
const int CMessageLogRoleRepeScore::kCurrentscoreFieldNumber;
const int CMessageLogRoleRepeScore::kDeltascoreFieldNumber;
const int CMessageLogRoleRepeScore::kScoretypeFieldNumber;
#endif  // !_MSC_VER

CMessageLogRoleRepeScore::CMessageLogRoleRepeScore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLogRoleRepeScore::InitAsDefaultInstance() {}

CMessageLogRoleRepeScore::CMessageLogRoleRepeScore(const CMessageLogRoleRepeScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLogRoleRepeScore::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  lineid_ = 0u;
  optime_ = 0u;
  mapid_ = 0u;
  repeid_ = 0u;
  currentscore_ = 0u;
  deltascore_ = 0u;
  scoretype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLogRoleRepeScore::~CMessageLogRoleRepeScore() {
  SharedDtor();
}

void CMessageLogRoleRepeScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLogRoleRepeScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLogRoleRepeScore_descriptor_;
}

const CMessageLogRoleRepeScore& CMessageLogRoleRepeScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageLogRoleRepeScore* CMessageLogRoleRepeScore::default_instance_ = NULL;

CMessageLogRoleRepeScore* CMessageLogRoleRepeScore::New() const {
  return new CMessageLogRoleRepeScore;
}

void CMessageLogRoleRepeScore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    lineid_ = 0u;
    optime_ = 0u;
    mapid_ = 0u;
    repeid_ = 0u;
    currentscore_ = 0u;
    deltascore_ = 0u;
    scoretype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLogRoleRepeScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_lineid;
        break;
      }
      
      // optional uint32 lineid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_lineid:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lineid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_optime;
        break;
      }
      
      // optional uint32 optime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_optime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &optime_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_mapid;
        break;
      }
      
      // optional uint32 mapid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_mapid:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_repeid;
        break;
      }
      
      // optional uint32 repeid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_repeid:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &repeid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_currentscore;
        break;
      }
      
      // optional uint32 currentscore = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_currentscore:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &currentscore_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_deltascore;
        break;
      }
      
      // optional uint32 deltascore = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_deltascore:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deltascore_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_scoretype;
        break;
      }
      
      // optional uint32 scoretype = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_scoretype:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &scoretype_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLogRoleRepeScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLogRoleRepeScore::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 charid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 lineid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->lineid(), output);
  }
  
  // optional uint32 optime = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->optime(), output);
  }
  
  // optional uint32 mapid = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->mapid(), output);
  }
  
  // optional uint32 repeid = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->repeid(), output);
  }
  
  // optional uint32 currentscore = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->currentscore(), output);
  }
  
  // optional uint32 deltascore = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->deltascore(), output);
  }
  
  // optional uint32 scoretype = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->scoretype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLogRoleRepeScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 lineid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->lineid(), target);
  }
  
  // optional uint32 optime = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->optime(), target);
  }
  
  // optional uint32 mapid = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->mapid(), target);
  }
  
  // optional uint32 repeid = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->repeid(), target);
  }
  
  // optional uint32 currentscore = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->currentscore(), target);
  }
  
  // optional uint32 deltascore = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->deltascore(), target);
  }
  
  // optional uint32 scoretype = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->scoretype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLogRoleRepeScore::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 lineid = 2;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lineid());
    }
    
    // optional uint32 optime = 3;
    if (has_optime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->optime());
    }
    
    // optional uint32 mapid = 4;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 repeid = 5;
    if (has_repeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->repeid());
    }
    
    // optional uint32 currentscore = 6;
    if (has_currentscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->currentscore());
    }
    
    // optional uint32 deltascore = 7;
    if (has_deltascore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deltascore());
    }
    
    // optional uint32 scoretype = 8;
    if (has_scoretype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->scoretype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLogRoleRepeScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLogRoleRepeScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLogRoleRepeScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLogRoleRepeScore::MergeFrom(const CMessageLogRoleRepeScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(2)) {
      set_optime(from.optime());
    }
    if (from._has_bit(3)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(4)) {
      set_repeid(from.repeid());
    }
    if (from._has_bit(5)) {
      set_currentscore(from.currentscore());
    }
    if (from._has_bit(6)) {
      set_deltascore(from.deltascore());
    }
    if (from._has_bit(7)) {
      set_scoretype(from.scoretype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLogRoleRepeScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLogRoleRepeScore::CopyFrom(const CMessageLogRoleRepeScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLogRoleRepeScore::Swap(CMessageLogRoleRepeScore* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(lineid_, other->lineid_);
    std::swap(optime_, other->optime_);
    std::swap(mapid_, other->mapid_);
    std::swap(repeid_, other->repeid_);
    std::swap(currentscore_, other->currentscore_);
    std::swap(deltascore_, other->deltascore_);
    std::swap(scoretype_, other->scoretype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLogRoleRepeScore::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLogRoleRepeScore::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLogRoleRepeScore::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLogRoleRepeScore_reflection_;
}
