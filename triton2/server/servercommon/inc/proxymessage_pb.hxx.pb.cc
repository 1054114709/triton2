// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "proxymessage_pb.hxx.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>
#ifdef LEAK_CHK_DEBUG_NEW
#include "debug_new.h"
#endif

namespace {

const ::google::protobuf::Descriptor* CProxyHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CProxyHead_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EMProxyEntityType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EMProxyCmd_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EMTransType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_proxymessage_5fpb_2ehxx() {
  protobuf_AddDesc_proxymessage_5fpb_2ehxx();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proxymessage_pb.hxx");
  GOOGLE_CHECK(file != NULL);
  CProxyHead_descriptor_ = file->message_type(0);
  static const int CProxyHead_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProxyHead, totallength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProxyHead, srcfe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProxyHead, srcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProxyHead, dstfe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProxyHead, transfertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProxyHead, dstid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProxyHead, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProxyHead, opflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProxyHead, optlength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProxyHead, option_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProxyHead, srcgameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProxyHead, desgameid_),
  };
  CProxyHead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CProxyHead_descriptor_,
      CProxyHead::default_instance_,
      CProxyHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProxyHead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProxyHead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CProxyHead));
  EMProxyEntityType_descriptor_ = file->enum_type(0);
  EMProxyCmd_descriptor_ = file->enum_type(1);
  EMTransType_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proxymessage_5fpb_2ehxx);
}

void protobuf_RegisterTypes() {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CProxyHead_descriptor_, &CProxyHead::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proxymessage_5fpb_2ehxx() {
  delete CProxyHead::default_instance_;
  delete CProxyHead_reflection_;
}

void protobuf_AddDesc_proxymessage_5fpb_2ehxx() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  #ifndef _NO_PROTOBUF_STR_
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023proxymessage_pb.hxx\"\367\001\n\nCProxyHead\022\023\n\013"
    "TotalLength\030\001 \001(\r\022\r\n\005SrcFE\030\002 \001(\r\022\r\n\005SrcI"
    "D\030\003 \001(\r\022\r\n\005DstFE\030\004 \001(\r\022\"\n\014TransferType\030\005"
    " \001(\0162\014.EMTransType\022\r\n\005DstID\030\006 \001(\r\022\013\n\003Uin"
    "\030\007 \001(\r\022\033\n\006OpFlag\030\010 \001(\0162\013.EMProxyCmd\022\024\n\tO"
    "ptLength\030\t \001(\r:\0010\022\016\n\006Option\030\n \001(\014\022\021\n\tSrc"
    "GameID\030\013 \001(\r\022\021\n\tDesGameID\030\014 \001(\r*\211\001\n\021EMPr"
    "oxyEntityType\022\023\n\017CET_PROXYSERVER\020\001\022\022\n\016CE"
    "T_GAMESERVER\020\002\022\020\n\014CET_DBSERVER\020\003\022\023\n\017CET_"
    "OTHERSERVER\020\004\022\023\n\017CET_GLOBALPROXY\020\006\022\017\n\013CE"
    "T_DUNGEON\020\007*_\n\nEMProxyCmd\022\014\n\010CMD_NULL\020\000\022"
    "\016\n\nCMD_REGKEY\020\001\022\r\n\tCMD_START\020\002\022\021\n\rCMD_RE"
    "GSERVER\020\003\022\021\n\rCMD_KEEPALIVE\020\004*Q\n\013EMTransT"
    "ype\022\r\n\tTRANS_P2P\020\000\022\r\n\tTRANS_P2G\020\002\022\023\n\017TRA"
    "NS_BROADCAST\020\003\022\017\n\013TRANS_BYKEY\020\004B\002H\001", 595);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proxymessage_pb.hxx", &protobuf_RegisterTypes);
  #endif
  CProxyHead::default_instance_ = new CProxyHead();
  CProxyHead::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proxymessage_5fpb_2ehxx);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proxymessage_5fpb_2ehxx {
  StaticDescriptorInitializer_proxymessage_5fpb_2ehxx() {
    protobuf_AddDesc_proxymessage_5fpb_2ehxx();
  }
} static_descriptor_initializer_proxymessage_5fpb_2ehxx_;

const ::google::protobuf::EnumDescriptor* EMProxyEntityType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMProxyEntityType_descriptor_;
}
bool EMProxyEntityType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMProxyCmd_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMProxyCmd_descriptor_;
}
bool EMProxyCmd_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMTransType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMTransType_descriptor_;
}
bool EMTransType_IsValid(int value) {
  switch(value) {
    case 0:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::std::string CProxyHead::_default_option_;
#ifndef _MSC_VER
const int CProxyHead::kTotalLengthFieldNumber;
const int CProxyHead::kSrcFEFieldNumber;
const int CProxyHead::kSrcIDFieldNumber;
const int CProxyHead::kDstFEFieldNumber;
const int CProxyHead::kTransferTypeFieldNumber;
const int CProxyHead::kDstIDFieldNumber;
const int CProxyHead::kUinFieldNumber;
const int CProxyHead::kOpFlagFieldNumber;
const int CProxyHead::kOptLengthFieldNumber;
const int CProxyHead::kOptionFieldNumber;
const int CProxyHead::kSrcGameIDFieldNumber;
const int CProxyHead::kDesGameIDFieldNumber;
#endif  // !_MSC_VER

CProxyHead::CProxyHead()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CProxyHead::InitAsDefaultInstance() {}

CProxyHead::CProxyHead(const CProxyHead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CProxyHead::SharedCtor() {
  _cached_size_ = 0;
  totallength_ = 0u;
  srcfe_ = 0u;
  srcid_ = 0u;
  dstfe_ = 0u;
  transfertype_ = 0;
  dstid_ = 0u;
  uin_ = 0u;
  opflag_ = 0;
  optlength_ = 0u;
  option_ = const_cast< ::std::string*>(&_default_option_);
  srcgameid_ = 0u;
  desgameid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CProxyHead::~CProxyHead() {
  SharedDtor();
}

void CProxyHead::SharedDtor() {
  if (option_ != &_default_option_) {
    delete option_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CProxyHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CProxyHead_descriptor_;
}

const CProxyHead& CProxyHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proxymessage_5fpb_2ehxx();  return *default_instance_;
}

CProxyHead* CProxyHead::default_instance_ = NULL;

CProxyHead* CProxyHead::New() const {
  return new CProxyHead;
}

void CProxyHead::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    totallength_ = 0u;
    srcfe_ = 0u;
    srcid_ = 0u;
    dstfe_ = 0u;
    transfertype_ = 0;
    dstid_ = 0u;
    uin_ = 0u;
    opflag_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    optlength_ = 0u;
    if (_has_bit(9)) {
      if (option_ != &_default_option_) {
        option_->clear();
      }
    }
    srcgameid_ = 0u;
    desgameid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CProxyHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TotalLength = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &totallength_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_SrcFE;
        break;
      }
      
      // optional uint32 SrcFE = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SrcFE:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srcfe_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_SrcID;
        break;
      }
      
      // optional uint32 SrcID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SrcID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srcid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_DstFE;
        break;
      }
      
      // optional uint32 DstFE = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DstFE:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &dstfe_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_TransferType;
        break;
      }
      
      // optional .EMTransType TransferType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TransferType:
        int value;
        DO_(::google::protobuf::internal::WireFormat::ReadEnum(input, &value));
        if (EMTransType_IsValid(value)) {
          set_transfertype(static_cast< EMTransType >(value));
        } else {
          mutable_unknown_fields()->AddVarint(5, value);
        }
        if (input->ExpectTag(48)) goto parse_DstID;
        break;
      }
      
      // optional uint32 DstID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DstID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &dstid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_Uin;
        break;
      }
      
      // optional uint32 Uin = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Uin:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &uin_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_OpFlag;
        break;
      }
      
      // optional .EMProxyCmd OpFlag = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpFlag:
        int value;
        DO_(::google::protobuf::internal::WireFormat::ReadEnum(input, &value));
        if (EMProxyCmd_IsValid(value)) {
          set_opflag(static_cast< EMProxyCmd >(value));
        } else {
          mutable_unknown_fields()->AddVarint(8, value);
        }
        if (input->ExpectTag(72)) goto parse_OptLength;
        break;
      }
      
      // optional uint32 OptLength = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OptLength:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &optlength_));
        _set_bit(8);
        if (input->ExpectTag(82)) goto parse_Option;
        break;
      }
      
      // optional bytes Option = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Option:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_option()));
        if (input->ExpectTag(88)) goto parse_SrcGameID;
        break;
      }
      
      // optional uint32 SrcGameID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SrcGameID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srcgameid_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_DesGameID;
        break;
      }
      
      // optional uint32 DesGameID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DesGameID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &desgameid_));
        _set_bit(11);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CProxyHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CProxyHead::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TotalLength = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->totallength(), output);
  }
  
  // optional uint32 SrcFE = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->srcfe(), output);
  }
  
  // optional uint32 SrcID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->srcid(), output);
  }
  
  // optional uint32 DstFE = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->dstfe(), output);
  }
  
  // optional .EMTransType TransferType = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteEnum(5, this->transfertype(), output);
  }
  
  // optional uint32 DstID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->dstid(), output);
  }
  
  // optional uint32 Uin = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->uin(), output);
  }
  
  // optional .EMProxyCmd OpFlag = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteEnum(8, this->opflag(), output);
  }
  
  // optional uint32 OptLength = 9 [default = 0];
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->optlength(), output);
  }
  
  // optional bytes Option = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(10, this->option(), output);
  }
  
  // optional uint32 SrcGameID = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->srcgameid(), output);
  }
  
  // optional uint32 DesGameID = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->desgameid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CProxyHead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TotalLength = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->totallength(), target);
  }
  
  // optional uint32 SrcFE = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->srcfe(), target);
  }
  
  // optional uint32 SrcID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->srcid(), target);
  }
  
  // optional uint32 DstFE = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->dstfe(), target);
  }
  
  // optional .EMTransType TransferType = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteEnumToArray(5, this->transfertype(), target);
  }
  
  // optional uint32 DstID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->dstid(), target);
  }
  
  // optional uint32 Uin = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->uin(), target);
  }
  
  // optional .EMProxyCmd OpFlag = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteEnumToArray(8, this->opflag(), target);
  }
  
  // optional uint32 OptLength = 9 [default = 0];
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->optlength(), target);
  }
  
  // optional bytes Option = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(10, this->option(), target);
  }
  
  // optional uint32 SrcGameID = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->srcgameid(), target);
  }
  
  // optional uint32 DesGameID = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->desgameid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CProxyHead::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TotalLength = 1;
    if (has_totallength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->totallength());
    }
    
    // optional uint32 SrcFE = 2;
    if (has_srcfe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srcfe());
    }
    
    // optional uint32 SrcID = 3;
    if (has_srcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srcid());
    }
    
    // optional uint32 DstFE = 4;
    if (has_dstfe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->dstfe());
    }
    
    // optional .EMTransType TransferType = 5;
    if (has_transfertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::EnumSize(this->transfertype());
    }
    
    // optional uint32 DstID = 6;
    if (has_dstid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->dstid());
    }
    
    // optional uint32 Uin = 7;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->uin());
    }
    
    // optional .EMProxyCmd OpFlag = 8;
    if (has_opflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::EnumSize(this->opflag());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 OptLength = 9 [default = 0];
    if (has_optlength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->optlength());
    }
    
    // optional bytes Option = 10;
    if (has_option()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->option());
    }
    
    // optional uint32 SrcGameID = 11;
    if (has_srcgameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srcgameid());
    }
    
    // optional uint32 DesGameID = 12;
    if (has_desgameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->desgameid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CProxyHead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CProxyHead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CProxyHead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CProxyHead::MergeFrom(const CProxyHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_totallength(from.totallength());
    }
    if (from._has_bit(1)) {
      set_srcfe(from.srcfe());
    }
    if (from._has_bit(2)) {
      set_srcid(from.srcid());
    }
    if (from._has_bit(3)) {
      set_dstfe(from.dstfe());
    }
    if (from._has_bit(4)) {
      set_transfertype(from.transfertype());
    }
    if (from._has_bit(5)) {
      set_dstid(from.dstid());
    }
    if (from._has_bit(6)) {
      set_uin(from.uin());
    }
    if (from._has_bit(7)) {
      set_opflag(from.opflag());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_optlength(from.optlength());
    }
    if (from._has_bit(9)) {
      set_option(from.option());
    }
    if (from._has_bit(10)) {
      set_srcgameid(from.srcgameid());
    }
    if (from._has_bit(11)) {
      set_desgameid(from.desgameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CProxyHead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProxyHead::CopyFrom(const CProxyHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProxyHead::Swap(CProxyHead* other) {
  if (other != this) {
    std::swap(totallength_, other->totallength_);
    std::swap(srcfe_, other->srcfe_);
    std::swap(srcid_, other->srcid_);
    std::swap(dstfe_, other->dstfe_);
    std::swap(transfertype_, other->transfertype_);
    std::swap(dstid_, other->dstid_);
    std::swap(uin_, other->uin_);
    std::swap(opflag_, other->opflag_);
    std::swap(optlength_, other->optlength_);
    std::swap(option_, other->option_);
    std::swap(srcgameid_, other->srcgameid_);
    std::swap(desgameid_, other->desgameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CProxyHead::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CProxyHead::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CProxyHead::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CProxyHead_reflection_;
}
