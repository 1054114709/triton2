// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "privilege_svr_pb.hxx.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>
#ifdef LEAK_CHK_DEBUG_NEW
#include "debug_new.h"
#endif

namespace {

const ::google::protobuf::Descriptor* PBAttrDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBAttrDef_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPrivExec_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPrivExec_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPriv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPriv_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageAllPrivilegeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageAllPrivilegeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageServerStartUpNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageServerStartUpNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EMPrivExecType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EMFindPlayerMethod_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_privilege_5fsvr_5fpb_2ehxx() {
  protobuf_AddDesc_privilege_5fsvr_5fpb_2ehxx();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "privilege_svr_pb.hxx");
  GOOGLE_CHECK(file != NULL);
  PBAttrDef_descriptor_ = file->message_type(0);
  static const int PBAttrDef_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAttrDef, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAttrDef, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAttrDef, valuetype_),
  };
  PBAttrDef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBAttrDef_descriptor_,
      PBAttrDef::default_instance_,
      PBAttrDef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAttrDef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAttrDef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBAttrDef));
  PBPrivExec_descriptor_ = file->message_type(1);
  static const int PBPrivExec_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPrivExec, exectype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPrivExec, procedure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPrivExec, hosttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPrivExec, hostid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPrivExec, findmethod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPrivExec, paramid_),
  };
  PBPrivExec_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPrivExec_descriptor_,
      PBPrivExec::default_instance_,
      PBPrivExec_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPrivExec, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPrivExec, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPrivExec));
  PBPriv_descriptor_ = file->message_type(2);
  static const int PBPriv_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPriv, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPriv, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPriv, input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPriv, output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPriv, property_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPriv, exec_),
  };
  PBPriv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPriv_descriptor_,
      PBPriv::default_instance_,
      PBPriv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPriv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPriv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPriv));
  CMessageAllPrivilegeNotify_descriptor_ = file->message_type(3);
  static const int CMessageAllPrivilegeNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAllPrivilegeNotify, privileges_),
  };
  CMessageAllPrivilegeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageAllPrivilegeNotify_descriptor_,
      CMessageAllPrivilegeNotify::default_instance_,
      CMessageAllPrivilegeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAllPrivilegeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAllPrivilegeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageAllPrivilegeNotify));
  CMessageServerStartUpNotify_descriptor_ = file->message_type(4);
  static const int CMessageServerStartUpNotify_offsets_[1] = {
  };
  CMessageServerStartUpNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageServerStartUpNotify_descriptor_,
      CMessageServerStartUpNotify::default_instance_,
      CMessageServerStartUpNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageServerStartUpNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageServerStartUpNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageServerStartUpNotify));
  EMPrivExecType_descriptor_ = file->enum_type(0);
  EMFindPlayerMethod_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_privilege_5fsvr_5fpb_2ehxx);
}

void protobuf_RegisterTypes() {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBAttrDef_descriptor_, &PBAttrDef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPrivExec_descriptor_, &PBPrivExec::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPriv_descriptor_, &PBPriv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageAllPrivilegeNotify_descriptor_, &CMessageAllPrivilegeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageServerStartUpNotify_descriptor_, &CMessageServerStartUpNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_privilege_5fsvr_5fpb_2ehxx() {
  delete PBAttrDef::default_instance_;
  delete PBAttrDef_reflection_;
  delete PBPrivExec::default_instance_;
  delete PBPrivExec_reflection_;
  delete PBPriv::default_instance_;
  delete PBPriv_reflection_;
  delete CMessageAllPrivilegeNotify::default_instance_;
  delete CMessageAllPrivilegeNotify_reflection_;
  delete CMessageServerStartUpNotify::default_instance_;
  delete CMessageServerStartUpNotify_reflection_;
}

void protobuf_AddDesc_privilege_5fsvr_5fpb_2ehxx() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_privilege_5fpb_2ehxx();
  #ifndef _NO_PROTOBUF_STR_
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024privilege_svr_pb.hxx\032\020privilege_pb.hxx"
    "\"8\n\tPBAttrDef\022\n\n\002ID\030\001 \002(\r\022\014\n\004Code\030\002 \001(\t\022"
    "\021\n\tValueType\030\003 \002(\r\"\236\001\n\nPBPrivExec\022!\n\010Exe"
    "cType\030\001 \002(\0162\017.EMPrivExecType\022\021\n\tProcedur"
    "e\030\002 \001(\t\022\020\n\010HostType\030\003 \001(\r\022\016\n\006HostID\030\004 \001("
    "\r\022\'\n\nFindMethod\030\005 \001(\0162\023.EMFindPlayerMeth"
    "od\022\017\n\007ParamID\030\006 \001(\r\"\204\001\n\006PBPriv\022\n\n\002ID\030\001 \002"
    "(\r\022\014\n\004Code\030\002 \001(\t\022\031\n\005Input\030\003 \003(\0132\n.PBAttr"
    "Def\022\016\n\006Output\030\004 \002(\r\022\032\n\010Property\030\005 \002(\0132\010."
    "PBValue\022\031\n\004Exec\030\006 \001(\0132\013.PBPrivExec\"9\n\032CM"
    "essageAllPrivilegeNotify\022\033\n\nPrivileges\030\001"
    " \003(\0132\007.PBPriv\"\035\n\033CMessageServerStartUpNo"
    "tify*{\n\016EMPrivExecType\022\027\n\023EM_PRIV_CALL_D"
    "BPROC\020\001\022\030\n\024EM_PRIV_CALL_LOGPROC\020\002\022\034\n\030EM_"
    "PRIV_REMOTE_HOST_CALL\020\003\022\030\n\024EM_PRIV_PLALY"
    "ER_CALL\020\004*~\n\022EMFindPlayerMethod\022\031\n\025EM_FI"
    "ND_BY_ACCOUNT_ID\020\001\022\033\n\027EM_FIND_BY_ACCOUNT"
    "_NAME\020\002\022\026\n\022EM_FIND_BY_ROLE_ID\020\003\022\030\n\024EM_FI"
    "ND_BY_ROLE_NAME\020\004", 737);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "privilege_svr_pb.hxx", &protobuf_RegisterTypes);
  #endif
  PBAttrDef::default_instance_ = new PBAttrDef();
  PBPrivExec::default_instance_ = new PBPrivExec();
  PBPriv::default_instance_ = new PBPriv();
  CMessageAllPrivilegeNotify::default_instance_ = new CMessageAllPrivilegeNotify();
  CMessageServerStartUpNotify::default_instance_ = new CMessageServerStartUpNotify();
  PBAttrDef::default_instance_->InitAsDefaultInstance();
  PBPrivExec::default_instance_->InitAsDefaultInstance();
  PBPriv::default_instance_->InitAsDefaultInstance();
  CMessageAllPrivilegeNotify::default_instance_->InitAsDefaultInstance();
  CMessageServerStartUpNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_privilege_5fsvr_5fpb_2ehxx);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_privilege_5fsvr_5fpb_2ehxx {
  StaticDescriptorInitializer_privilege_5fsvr_5fpb_2ehxx() {
    protobuf_AddDesc_privilege_5fsvr_5fpb_2ehxx();
  }
} static_descriptor_initializer_privilege_5fsvr_5fpb_2ehxx_;

const ::google::protobuf::EnumDescriptor* EMPrivExecType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMPrivExecType_descriptor_;
}
bool EMPrivExecType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMFindPlayerMethod_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMFindPlayerMethod_descriptor_;
}
bool EMFindPlayerMethod_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::std::string PBAttrDef::_default_code_;
#ifndef _MSC_VER
const int PBAttrDef::kIDFieldNumber;
const int PBAttrDef::kCodeFieldNumber;
const int PBAttrDef::kValueTypeFieldNumber;
#endif  // !_MSC_VER

PBAttrDef::PBAttrDef()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBAttrDef::InitAsDefaultInstance() {}

PBAttrDef::PBAttrDef(const PBAttrDef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBAttrDef::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  code_ = const_cast< ::std::string*>(&_default_code_);
  valuetype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBAttrDef::~PBAttrDef() {
  SharedDtor();
}

void PBAttrDef::SharedDtor() {
  if (code_ != &_default_code_) {
    delete code_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBAttrDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBAttrDef_descriptor_;
}

const PBAttrDef& PBAttrDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_privilege_5fsvr_5fpb_2ehxx();  return *default_instance_;
}

PBAttrDef* PBAttrDef::default_instance_ = NULL;

PBAttrDef* PBAttrDef::New() const {
  return new PBAttrDef;
}

void PBAttrDef::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (_has_bit(1)) {
      if (code_ != &_default_code_) {
        code_->clear();
      }
    }
    valuetype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBAttrDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Code;
        break;
      }
      
      // optional string Code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Code:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_code()));
        if (input->ExpectTag(24)) goto parse_ValueType;
        break;
      }
      
      // required uint32 ValueType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ValueType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &valuetype_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBAttrDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBAttrDef::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 ID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->id(), output);
  }
  
  // optional string Code = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->code(), output);
  }
  
  // required uint32 ValueType = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->valuetype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBAttrDef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional string Code = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->code(), target);
  }
  
  // required uint32 ValueType = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->valuetype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBAttrDef::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->id());
    }
    
    // optional string Code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->code());
    }
    
    // required uint32 ValueType = 3;
    if (has_valuetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->valuetype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBAttrDef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBAttrDef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBAttrDef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBAttrDef::MergeFrom(const PBAttrDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_code(from.code());
    }
    if (from._has_bit(2)) {
      set_valuetype(from.valuetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBAttrDef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAttrDef::CopyFrom(const PBAttrDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAttrDef::Swap(PBAttrDef* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(code_, other->code_);
    std::swap(valuetype_, other->valuetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBAttrDef::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* PBAttrDef::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBAttrDef::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBAttrDef_reflection_;
}

// ===================================================================

const ::std::string PBPrivExec::_default_procedure_;
#ifndef _MSC_VER
const int PBPrivExec::kExecTypeFieldNumber;
const int PBPrivExec::kProcedureFieldNumber;
const int PBPrivExec::kHostTypeFieldNumber;
const int PBPrivExec::kHostIDFieldNumber;
const int PBPrivExec::kFindMethodFieldNumber;
const int PBPrivExec::kParamIDFieldNumber;
#endif  // !_MSC_VER

PBPrivExec::PBPrivExec()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPrivExec::InitAsDefaultInstance() {}

PBPrivExec::PBPrivExec(const PBPrivExec& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPrivExec::SharedCtor() {
  _cached_size_ = 0;
  exectype_ = 1;
  procedure_ = const_cast< ::std::string*>(&_default_procedure_);
  hosttype_ = 0u;
  hostid_ = 0u;
  findmethod_ = 1;
  paramid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPrivExec::~PBPrivExec() {
  SharedDtor();
}

void PBPrivExec::SharedDtor() {
  if (procedure_ != &_default_procedure_) {
    delete procedure_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBPrivExec::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPrivExec_descriptor_;
}

const PBPrivExec& PBPrivExec::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_privilege_5fsvr_5fpb_2ehxx();  return *default_instance_;
}

PBPrivExec* PBPrivExec::default_instance_ = NULL;

PBPrivExec* PBPrivExec::New() const {
  return new PBPrivExec;
}

void PBPrivExec::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exectype_ = 1;
    if (_has_bit(1)) {
      if (procedure_ != &_default_procedure_) {
        procedure_->clear();
      }
    }
    hosttype_ = 0u;
    hostid_ = 0u;
    findmethod_ = 1;
    paramid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPrivExec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required .EMPrivExecType ExecType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormat::ReadEnum(input, &value));
        if (EMPrivExecType_IsValid(value)) {
          set_exectype(static_cast< EMPrivExecType >(value));
        } else {
          mutable_unknown_fields()->AddVarint(1, value);
        }
        if (input->ExpectTag(18)) goto parse_Procedure;
        break;
      }
      
      // optional string Procedure = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Procedure:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_procedure()));
        if (input->ExpectTag(24)) goto parse_HostType;
        break;
      }
      
      // optional uint32 HostType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HostType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &hosttype_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_HostID;
        break;
      }
      
      // optional uint32 HostID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HostID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &hostid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_FindMethod;
        break;
      }
      
      // optional .EMFindPlayerMethod FindMethod = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FindMethod:
        int value;
        DO_(::google::protobuf::internal::WireFormat::ReadEnum(input, &value));
        if (EMFindPlayerMethod_IsValid(value)) {
          set_findmethod(static_cast< EMFindPlayerMethod >(value));
        } else {
          mutable_unknown_fields()->AddVarint(5, value);
        }
        if (input->ExpectTag(48)) goto parse_ParamID;
        break;
      }
      
      // optional uint32 ParamID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ParamID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &paramid_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPrivExec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBPrivExec::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .EMPrivExecType ExecType = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteEnum(1, this->exectype(), output);
  }
  
  // optional string Procedure = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->procedure(), output);
  }
  
  // optional uint32 HostType = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->hosttype(), output);
  }
  
  // optional uint32 HostID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->hostid(), output);
  }
  
  // optional .EMFindPlayerMethod FindMethod = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteEnum(5, this->findmethod(), output);
  }
  
  // optional uint32 ParamID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->paramid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPrivExec::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .EMPrivExecType ExecType = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteEnumToArray(1, this->exectype(), target);
  }
  
  // optional string Procedure = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->procedure(), target);
  }
  
  // optional uint32 HostType = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->hosttype(), target);
  }
  
  // optional uint32 HostID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->hostid(), target);
  }
  
  // optional .EMFindPlayerMethod FindMethod = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteEnumToArray(5, this->findmethod(), target);
  }
  
  // optional uint32 ParamID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->paramid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPrivExec::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .EMPrivExecType ExecType = 1;
    if (has_exectype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::EnumSize(this->exectype());
    }
    
    // optional string Procedure = 2;
    if (has_procedure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->procedure());
    }
    
    // optional uint32 HostType = 3;
    if (has_hosttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->hosttype());
    }
    
    // optional uint32 HostID = 4;
    if (has_hostid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->hostid());
    }
    
    // optional .EMFindPlayerMethod FindMethod = 5;
    if (has_findmethod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::EnumSize(this->findmethod());
    }
    
    // optional uint32 ParamID = 6;
    if (has_paramid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->paramid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBPrivExec::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPrivExec* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPrivExec*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPrivExec::MergeFrom(const PBPrivExec& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_exectype(from.exectype());
    }
    if (from._has_bit(1)) {
      set_procedure(from.procedure());
    }
    if (from._has_bit(2)) {
      set_hosttype(from.hosttype());
    }
    if (from._has_bit(3)) {
      set_hostid(from.hostid());
    }
    if (from._has_bit(4)) {
      set_findmethod(from.findmethod());
    }
    if (from._has_bit(5)) {
      set_paramid(from.paramid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPrivExec::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPrivExec::CopyFrom(const PBPrivExec& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPrivExec::Swap(PBPrivExec* other) {
  if (other != this) {
    std::swap(exectype_, other->exectype_);
    std::swap(procedure_, other->procedure_);
    std::swap(hosttype_, other->hosttype_);
    std::swap(hostid_, other->hostid_);
    std::swap(findmethod_, other->findmethod_);
    std::swap(paramid_, other->paramid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBPrivExec::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* PBPrivExec::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBPrivExec::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBPrivExec_reflection_;
}

// ===================================================================

const ::std::string PBPriv::_default_code_;
#ifndef _MSC_VER
const int PBPriv::kIDFieldNumber;
const int PBPriv::kCodeFieldNumber;
const int PBPriv::kInputFieldNumber;
const int PBPriv::kOutputFieldNumber;
const int PBPriv::kPropertyFieldNumber;
const int PBPriv::kExecFieldNumber;
#endif  // !_MSC_VER

PBPriv::PBPriv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPriv::InitAsDefaultInstance() {  property_ = const_cast< ::PBValue*>(&::PBValue::default_instance());
  exec_ = const_cast< ::PBPrivExec*>(&::PBPrivExec::default_instance());
}

PBPriv::PBPriv(const PBPriv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPriv::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  code_ = const_cast< ::std::string*>(&_default_code_);
  output_ = 0u;
  property_ = NULL;
  exec_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPriv::~PBPriv() {
  SharedDtor();
}

void PBPriv::SharedDtor() {
  if (code_ != &_default_code_) {
    delete code_;
  }
  if (this != default_instance_) {
    delete property_;
    delete exec_;
  }
}

const ::google::protobuf::Descriptor* PBPriv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPriv_descriptor_;
}

const PBPriv& PBPriv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_privilege_5fsvr_5fpb_2ehxx();  return *default_instance_;
}

PBPriv* PBPriv::default_instance_ = NULL;

PBPriv* PBPriv::New() const {
  return new PBPriv;
}

void PBPriv::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (_has_bit(1)) {
      if (code_ != &_default_code_) {
        code_->clear();
      }
    }
    output_ = 0u;
    if (_has_bit(4)) {
      if (property_ != NULL) property_->::PBValue::Clear();
    }
    if (_has_bit(5)) {
      if (exec_ != NULL) exec_->::PBPrivExec::Clear();
    }
  }
  input_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPriv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Code;
        break;
      }
      
      // optional string Code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Code:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_code()));
        if (input->ExpectTag(26)) goto parse_Input;
        break;
      }
      
      // repeated .PBAttrDef Input = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Input:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_input()));
        if (input->ExpectTag(26)) goto parse_Input;
        if (input->ExpectTag(32)) goto parse_Output;
        break;
      }
      
      // required uint32 Output = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Output:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &output_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_Property;
        break;
      }
      
      // required .PBValue Property = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Property:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_property()));
        if (input->ExpectTag(50)) goto parse_Exec;
        break;
      }
      
      // optional .PBPrivExec Exec = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Exec:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_exec()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPriv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBPriv::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 ID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->id(), output);
  }
  
  // optional string Code = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->code(), output);
  }
  
  // repeated .PBAttrDef Input = 3;
  for (int i = 0; i < this->input_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->input(i), output);
  }
  
  // required uint32 Output = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->output(), output);
  }
  
  // required .PBValue Property = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(5, this->property(), output);
  }
  
  // optional .PBPrivExec Exec = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(6, this->exec(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPriv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional string Code = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->code(), target);
  }
  
  // repeated .PBAttrDef Input = 3;
  for (int i = 0; i < this->input_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->input(i), target);
  }
  
  // required uint32 Output = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->output(), target);
  }
  
  // required .PBValue Property = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(5, this->property(), target);
  }
  
  // optional .PBPrivExec Exec = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(6, this->exec(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPriv::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->id());
    }
    
    // optional string Code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->code());
    }
    
    // required uint32 Output = 4;
    if (has_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->output());
    }
    
    // required .PBValue Property = 5;
    if (has_property()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->property());
    }
    
    // optional .PBPrivExec Exec = 6;
    if (has_exec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->exec());
    }
    
  }
  // repeated .PBAttrDef Input = 3;
  total_size += 1 * this->input_size();
  for (int i = 0; i < this->input_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->input(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBPriv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPriv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPriv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPriv::MergeFrom(const PBPriv& from) {
  GOOGLE_CHECK_NE(&from, this);
  input_.MergeFrom(from.input_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_code(from.code());
    }
    if (from._has_bit(3)) {
      set_output(from.output());
    }
    if (from._has_bit(4)) {
      mutable_property()->::PBValue::MergeFrom(from.property());
    }
    if (from._has_bit(5)) {
      mutable_exec()->::PBPrivExec::MergeFrom(from.exec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPriv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPriv::CopyFrom(const PBPriv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPriv::Swap(PBPriv* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(code_, other->code_);
    input_.Swap(&other->input_);
    std::swap(output_, other->output_);
    std::swap(property_, other->property_);
    std::swap(exec_, other->exec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBPriv::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000019) != 0x00000019) return false;
  
  for (int i = 0; i < input_size(); i++) {
    if (!this->input(i).IsInitialized()) return false;
  }
  if (has_property()) {
    if (!this->property().IsInitialized()) return false;
  }
  if (has_exec()) {
    if (!this->exec().IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* PBPriv::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBPriv::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBPriv_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageAllPrivilegeNotify::kPrivilegesFieldNumber;
#endif  // !_MSC_VER

CMessageAllPrivilegeNotify::CMessageAllPrivilegeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageAllPrivilegeNotify::InitAsDefaultInstance() {}

CMessageAllPrivilegeNotify::CMessageAllPrivilegeNotify(const CMessageAllPrivilegeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageAllPrivilegeNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageAllPrivilegeNotify::~CMessageAllPrivilegeNotify() {
  SharedDtor();
}

void CMessageAllPrivilegeNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageAllPrivilegeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageAllPrivilegeNotify_descriptor_;
}

const CMessageAllPrivilegeNotify& CMessageAllPrivilegeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_privilege_5fsvr_5fpb_2ehxx();  return *default_instance_;
}

CMessageAllPrivilegeNotify* CMessageAllPrivilegeNotify::default_instance_ = NULL;

CMessageAllPrivilegeNotify* CMessageAllPrivilegeNotify::New() const {
  return new CMessageAllPrivilegeNotify;
}

void CMessageAllPrivilegeNotify::Clear() {
  privileges_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageAllPrivilegeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .PBPriv Privileges = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Privileges:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_privileges()));
        if (input->ExpectTag(10)) goto parse_Privileges;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageAllPrivilegeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageAllPrivilegeNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .PBPriv Privileges = 1;
  for (int i = 0; i < this->privileges_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->privileges(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageAllPrivilegeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBPriv Privileges = 1;
  for (int i = 0; i < this->privileges_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->privileges(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageAllPrivilegeNotify::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBPriv Privileges = 1;
  total_size += 1 * this->privileges_size();
  for (int i = 0; i < this->privileges_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->privileges(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageAllPrivilegeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageAllPrivilegeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageAllPrivilegeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageAllPrivilegeNotify::MergeFrom(const CMessageAllPrivilegeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  privileges_.MergeFrom(from.privileges_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageAllPrivilegeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAllPrivilegeNotify::CopyFrom(const CMessageAllPrivilegeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAllPrivilegeNotify::Swap(CMessageAllPrivilegeNotify* other) {
  if (other != this) {
    privileges_.Swap(&other->privileges_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageAllPrivilegeNotify::IsInitialized() const {
  
  for (int i = 0; i < privileges_size(); i++) {
    if (!this->privileges(i).IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* CMessageAllPrivilegeNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageAllPrivilegeNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageAllPrivilegeNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMessageServerStartUpNotify::CMessageServerStartUpNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageServerStartUpNotify::InitAsDefaultInstance() {}

CMessageServerStartUpNotify::CMessageServerStartUpNotify(const CMessageServerStartUpNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageServerStartUpNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageServerStartUpNotify::~CMessageServerStartUpNotify() {
  SharedDtor();
}

void CMessageServerStartUpNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageServerStartUpNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageServerStartUpNotify_descriptor_;
}

const CMessageServerStartUpNotify& CMessageServerStartUpNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_privilege_5fsvr_5fpb_2ehxx();  return *default_instance_;
}

CMessageServerStartUpNotify* CMessageServerStartUpNotify::default_instance_ = NULL;

CMessageServerStartUpNotify* CMessageServerStartUpNotify::New() const {
  return new CMessageServerStartUpNotify;
}

void CMessageServerStartUpNotify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageServerStartUpNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMessageServerStartUpNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageServerStartUpNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageServerStartUpNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageServerStartUpNotify::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageServerStartUpNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageServerStartUpNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageServerStartUpNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageServerStartUpNotify::MergeFrom(const CMessageServerStartUpNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageServerStartUpNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageServerStartUpNotify::CopyFrom(const CMessageServerStartUpNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageServerStartUpNotify::Swap(CMessageServerStartUpNotify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageServerStartUpNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageServerStartUpNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageServerStartUpNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageServerStartUpNotify_reflection_;
}
