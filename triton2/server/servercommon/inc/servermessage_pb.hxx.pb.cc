// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "servermessage_pb.hxx.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>
#ifdef LEAK_CHK_DEBUG_NEW
#include "debug_new.h"
#endif

namespace {

const ::google::protobuf::Descriptor* CMessageYQSActivtyStartNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageYQSActivtyStartNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageS2GGetCampRankForYQSRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageS2GGetCampRankForYQSRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CampRankForYQSForSever_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CampRankForYQSForSever_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageG2SGetCampRankForYQSResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageG2SGetCampRankForYQSResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageS2GUpdateYQSGrowingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageS2GUpdateYQSGrowingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageG2SUpdateYQSGrowingResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageG2SUpdateYQSGrowingResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageG2SSettleNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageG2SSettleNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageInternalTimeOut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageInternalTimeOut_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCountryInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCountryInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRedirectGErrorCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRedirectGErrorCode_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRedirectSErrorCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRedirectSErrorCode_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePlayerRedirectEnterMapResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePlayerRedirectEnterMapResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGateInfoNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGateInfoNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGateInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGateInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePlayerEnterGateNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePlayerEnterGateNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePlayerEnterGateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePlayerEnterGateResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePlayerLeaveGateNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePlayerLeaveGateNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageServerInfoNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageServerInfoNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageServerInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageServerInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePlayerEnterMapNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePlayerEnterMapNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePlayerRedirectMapNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePlayerRedirectMapNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePlayerEnterMapResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePlayerEnterMapResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePlayerLoginCompleteNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePlayerLoginCompleteNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePlayerLeaveMapNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePlayerLeaveMapNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePlayerLeaveMapResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePlayerLeaveMapResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePlayerReturn2GateNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePlayerReturn2GateNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePlayerReturn2GateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePlayerReturn2GateResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCreateMapNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCreateMapNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCreateMapResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCreateMapResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleLevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBDate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBDate_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBDateSpace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBDateSpace_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRegistRepetionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRegistRepetionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageDestroyRepetionMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageDestroyRepetionMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageG2SRepetionEventCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageG2SRepetionEventCode_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePlayerRedirectRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePlayerRedirectRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePlayerRedirectResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePlayerRedirectResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePlayerEnterConfirmNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePlayerEnterConfirmNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageSceneNotOpenNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageSceneNotOpenNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUpdateVersionNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUpdateVersionNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRegistServerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRegistServerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRegistServerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRegistServerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageHeartBeatNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageHeartBeatNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePlayerOnLineFriendRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePlayerOnLineFriendRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSinglePlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSinglePlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePlayerOnLineFriendResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePlayerOnLineFriendResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePlayerChangeStatusNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePlayerChangeStatusNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGameHeartBeatNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGameHeartBeatNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageERatingProtoStream_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageERatingProtoStream_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageERatingStateNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageERatingStateNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCreateGateTeamRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCreateGateTeamRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCreateGateTeamResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCreateGateTeamResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageJoinGateTeamRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageJoinGateTeamRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageJoinGateTeamResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageJoinGateTeamResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRequestJoinReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRequestJoinReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageJoinGateTeamInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageJoinGateTeamInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageJoinTeamInviteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageJoinTeamInviteResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageInviteJoinReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageInviteJoinReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageInvite2Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageInvite2Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageKickoutGateTeamRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageKickoutGateTeamRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeHeaderRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeHeaderRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeDistributeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeDistributeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeDistributeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeDistributeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLeaveGateTeamRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLeaveGateTeamRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageEndGateTeamRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageEndGateTeamRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageNotifySceneToUpdateTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageNotifySceneToUpdateTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageNotifySceneToSendTeamList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageNotifySceneToSendTeamList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageNotifyErrToScene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageNotifyErrToScene_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUpdateTeamPropertyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUpdateTeamPropertyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUpdateTeamPropertyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUpdateTeamPropertyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFollowRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFollowRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFollowResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFollowResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageSendClaimRecruitRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageSendClaimRecruitRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageSendClaimRecruitResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageSendClaimRecruitResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageQueryClaimRecruitRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageQueryClaimRecruitRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageQueryClaimRecruitResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageQueryClaimRecruitResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageDeleteClaimRecruitRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageDeleteClaimRecruitRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageDeleteClaimRecruitResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageDeleteClaimRecruitResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageObtainGateTeamRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageObtainGateTeamRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageClearInvReqRecordRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageClearInvReqRecordRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTeamItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTeamItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTeamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTeamInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGateShutDownNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGateShutDownNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageKickOffPlayerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageKickOffPlayerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageKickOffPlayerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageKickOffPlayerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetPlayerMailiInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetPlayerMailiInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetPlayerMailInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetPlayerMailInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeMailCountNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeMailCountNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUserIbExchangeNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUserIbExchangeNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUserUseIbItemNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUserUseIbItemNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageAddFriendRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageAddFriendRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageAddFriendResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageAddFriendResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetCharIDRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetCharIDRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetCharIDResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetCharIDResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRoleChangeCampNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRoleChangeCampNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLoginSvrStartUpNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLoginSvrStartUpNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGate2LoginHeartBeatNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGate2LoginHeartBeatNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPersonalRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPersonalRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePersonalRankInfoNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePersonalRankInfoNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBRankTopTen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBRankTopTen_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRankRemove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRankRemove_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePersonalRankInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePersonalRankInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageNewRankTopTenNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageNewRankTopTenNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRoleGameInfoReportToGateNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRoleGameInfoReportToGateNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBattleTeamWait_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBattleTeamWait_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBattleWaitLeaveRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBattleWaitLeaveRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBattleJoinNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBattleJoinNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBattlePlayerJoin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBattlePlayerJoin_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBattleWaitNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBattleWaitNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageServerValidateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageServerValidateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBattleWaitLeaveResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBattleWaitLeaveResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageServerValidateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageServerValidateResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CTracedPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CTracedPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageNotifyTracedPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageNotifyTracedPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBattleCreateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBattleCreateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBattleCreateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBattleCreateResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFamilyIDNameNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFamilyIDNameNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCorpsNpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCorpsNpc_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageNpcListNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageNpcListNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBidTimeOutNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBidTimeOutNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBattleStartRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBattleStartRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBattleStartResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBattleStartResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBattleEndNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBattleEndNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBidRestartNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBidRestartNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageObtainTopTenRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageObtainTopTenRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBRankTitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBRankTitle_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageObtainTopTenResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageObtainTopTenResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsBidTimerStopRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsBidTimerStopRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsJoinBattleNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsJoinBattleNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageNotifyBattleResult2Gate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageNotifyBattleResult2Gate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsBattleFlagRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsBattleFlagRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsBattleFlagResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsBattleFlagResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCreateRepetionNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCreateRepetionNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCreateRepetionErr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCreateRepetionErr_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTeamIntoRepetion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTeamIntoRepetion_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageSingleIntoRepetion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageSingleIntoRepetion_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsStartBattleRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsStartBattleRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageIntoRepetionNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageIntoRepetionNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeFamilyContributeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeFamilyContributeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeFamilyGloryNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeFamilyGloryNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeFamilyMoneyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeFamilyMoneyNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageSynIbStoreRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageSynIbStoreRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageSynIbStoreResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageSynIbStoreResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageSynFuncStoreRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageSynFuncStoreRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageSynFuncStoreResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageSynFuncStoreResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeCorpsContributeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeCorpsContributeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeCorpsGloryNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeCorpsGloryNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeCorpsMoneyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeCorpsMoneyNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeCorpsBossTimes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeCorpsBossTimes_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeCorpsBossRefineValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeCorpsBossRefineValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeCorpsCollectActive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeCorpsCollectActive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFamilyApExpChangedNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFamilyApExpChangedNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsApExpChangedNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsApExpChangedNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeJudgeScoreReuqest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeJudgeScoreReuqest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeWizardRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeWizardRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeWizardResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeWizardResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeConstructRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeConstructRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeConstructResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeConstructResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangePowerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangePowerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangePowerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangePowerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUseFunctionNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUseFunctionNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageSetOfficialNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageSetOfficialNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeFriendNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeFriendNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageKillPersonRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageKillPersonRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageKillPersonResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageKillPersonResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageSyncNationNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageSyncNationNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBuyFamilyItemRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBuyFamilyItemRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBuyFamilyItemResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBuyFamilyItemResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBuyCorpsItemRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBuyCorpsItemRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBuyCorpsItemResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBuyCorpsItemResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageClearFamilyRepetionInfoNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageClearFamilyRepetionInfoNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageJudgeModifySuccessNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageJudgeModifySuccessNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessage4EQueryYuanBaoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessage4EQueryYuanBaoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessage4EQueryYuanBaoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessage4EQueryYuanBaoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessage4EDrawYuanBaoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessage4EDrawYuanBaoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessage4EDrawYuanBaoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessage4EDrawYuanBaoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFamilyExchangeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFamilyExchangeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFamilyExchangeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFamilyExchangeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsExchangeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsExchangeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsExchangeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsExchangeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageAddFamilyExchangeItemNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageAddFamilyExchangeItemNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageAddCorpsExchangeItemNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageAddCorpsExchangeItemNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGateEntityGMMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGateEntityGMMove_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageSceneEntityGMMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageSceneEntityGMMove_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleActivityObj_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleActivityObj_reflection_ = NULL;
const ::google::protobuf::Descriptor* DropInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DropInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapDrop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapDrop_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleActivityInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleActivityInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTodayActivitysNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTodayActivitysNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleActivity_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageActivityChangeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageActivityChangeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangePasswordStatusNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangePasswordStatusNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUpdateNationTitleNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUpdateNationTitleNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetNationTitleListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetNationTitleListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetNationTitleListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetNationTitleListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageSGProVipFlagNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageSGProVipFlagNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageResetRolePasswordNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageResetRolePasswordNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessgeSafeShutdownNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessgeSafeShutdownNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessgeSafeShutdownAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessgeSafeShutdownAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRollCorpsMoneyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRollCorpsMoneyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCorpsBattleMapNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCorpsBattleMapNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTrySummonRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTrySummonRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTrySummonResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTrySummonResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRealSummonRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRealSummonRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRealSummonNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRealSummonNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLockGoodsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLockGoodsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLockGoodsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLockGoodsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageS2GRoleMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageS2GRoleMove_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageG2SRoleMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageG2SRoleMove_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageWarChangeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageWarChangeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageReliveChangeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageReliveChangeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* WarHonorData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WarHonorData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageObtainWarHonorNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageObtainWarHonorNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBourseG2SLoadList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBourseG2SLoadList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBourseS2GLoadList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBourseS2GLoadList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageSyncWarStatusNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageSyncWarStatusNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageWarControlNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageWarControlNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBourseTradeNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBourseTradeNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageReSavePlayerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageReSavePlayerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageReSavePlayerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageReSavePlayerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBoursePlayerTradeBuyNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBoursePlayerTradeBuyNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBoursePlayerTradeSellNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBoursePlayerTradeSellNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageWarStoneOverNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageWarStoneOverNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCreateWarStoneNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCreateWarStoneNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageAddTaxNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageAddTaxNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageSendSysMailToPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageSendSysMailToPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCampAddHonerScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCampAddHonerScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBattleTeamFixWait_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBattleTeamFixWait_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageActivityEventNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageActivityEventNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageAddMasterPointRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageAddMasterPointRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageAddMasterPointNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageAddMasterPointNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBattleSingleFixWait_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBattleSingleFixWait_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageSpecialEventNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageSpecialEventNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageAcquireMasterNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageAcquireMasterNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBattleWinnerNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBattleWinnerNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeFamilyStabilityNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeFamilyStabilityNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageS2GJoinOnTimeOpenBattleRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageS2GJoinOnTimeOpenBattleRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageSyncGTAndLWNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageSyncGTAndLWNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageS2GBattleClose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageS2GBattleClose_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageS2GIntoCorpsBossRepetion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageS2GIntoCorpsBossRepetion_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessgeS2GEndCorpsBossRepetion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessgeS2GEndCorpsBossRepetion_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGroupTasks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGroupTasks_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGateCheckGroupPublishRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGateCheckGroupPublishRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGatePublishGroupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGatePublishGroupRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGroupInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGroupInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGateCheckGroupPublishResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGateCheckGroupPublishResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGatePublishGroupResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGatePublishGroupResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EMServerMessageID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EMFriendAddRetCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EMSaveResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EMLeaveReason_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EMGateInfoResponse_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_servermessage_5fpb_2ehxx() {
  protobuf_AddDesc_servermessage_5fpb_2ehxx();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "servermessage_pb.hxx");
  GOOGLE_CHECK(file != NULL);
  CMessageYQSActivtyStartNotice_descriptor_ = file->message_type(0);
  static const int CMessageYQSActivtyStartNotice_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageYQSActivtyStartNotice, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageYQSActivtyStartNotice, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageYQSActivtyStartNotice, camprankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageYQSActivtyStartNotice, growing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageYQSActivtyStartNotice, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageYQSActivtyStartNotice, handindawnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageYQSActivtyStartNotice, settlephase_),
  };
  CMessageYQSActivtyStartNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageYQSActivtyStartNotice_descriptor_,
      CMessageYQSActivtyStartNotice::default_instance_,
      CMessageYQSActivtyStartNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageYQSActivtyStartNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageYQSActivtyStartNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageYQSActivtyStartNotice));
  CMessageS2GGetCampRankForYQSRequest_descriptor_ = file->message_type(1);
  static const int CMessageS2GGetCampRankForYQSRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2GGetCampRankForYQSRequest, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2GGetCampRankForYQSRequest, param1_),
  };
  CMessageS2GGetCampRankForYQSRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageS2GGetCampRankForYQSRequest_descriptor_,
      CMessageS2GGetCampRankForYQSRequest::default_instance_,
      CMessageS2GGetCampRankForYQSRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2GGetCampRankForYQSRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2GGetCampRankForYQSRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageS2GGetCampRankForYQSRequest));
  CampRankForYQSForSever_descriptor_ = file->message_type(2);
  static const int CampRankForYQSForSever_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampRankForYQSForSever, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampRankForYQSForSever, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampRankForYQSForSever, growinggrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampRankForYQSForSever, growingphase_),
  };
  CampRankForYQSForSever_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CampRankForYQSForSever_descriptor_,
      CampRankForYQSForSever::default_instance_,
      CampRankForYQSForSever_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampRankForYQSForSever, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampRankForYQSForSever, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CampRankForYQSForSever));
  CMessageG2SGetCampRankForYQSResponse_descriptor_ = file->message_type(3);
  static const int CMessageG2SGetCampRankForYQSResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageG2SGetCampRankForYQSResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageG2SGetCampRankForYQSResponse, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageG2SGetCampRankForYQSResponse, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageG2SGetCampRankForYQSResponse, camprankinfo_),
  };
  CMessageG2SGetCampRankForYQSResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageG2SGetCampRankForYQSResponse_descriptor_,
      CMessageG2SGetCampRankForYQSResponse::default_instance_,
      CMessageG2SGetCampRankForYQSResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageG2SGetCampRankForYQSResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageG2SGetCampRankForYQSResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageG2SGetCampRankForYQSResponse));
  CMessageS2GUpdateYQSGrowingRequest_descriptor_ = file->message_type(4);
  static const int CMessageS2GUpdateYQSGrowingRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2GUpdateYQSGrowingRequest, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2GUpdateYQSGrowingRequest, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2GUpdateYQSGrowingRequest, growingchangevalue_),
  };
  CMessageS2GUpdateYQSGrowingRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageS2GUpdateYQSGrowingRequest_descriptor_,
      CMessageS2GUpdateYQSGrowingRequest::default_instance_,
      CMessageS2GUpdateYQSGrowingRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2GUpdateYQSGrowingRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2GUpdateYQSGrowingRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageS2GUpdateYQSGrowingRequest));
  CMessageG2SUpdateYQSGrowingResponse_descriptor_ = file->message_type(5);
  static const int CMessageG2SUpdateYQSGrowingResponse_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageG2SUpdateYQSGrowingResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageG2SUpdateYQSGrowingResponse, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageG2SUpdateYQSGrowingResponse, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageG2SUpdateYQSGrowingResponse, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageG2SUpdateYQSGrowingResponse, camprankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageG2SUpdateYQSGrowingResponse, growing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageG2SUpdateYQSGrowingResponse, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageG2SUpdateYQSGrowingResponse, handindawnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageG2SUpdateYQSGrowingResponse, settlephase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageG2SUpdateYQSGrowingResponse, deltagrowing_),
  };
  CMessageG2SUpdateYQSGrowingResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageG2SUpdateYQSGrowingResponse_descriptor_,
      CMessageG2SUpdateYQSGrowingResponse::default_instance_,
      CMessageG2SUpdateYQSGrowingResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageG2SUpdateYQSGrowingResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageG2SUpdateYQSGrowingResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageG2SUpdateYQSGrowingResponse));
  CMessageG2SSettleNotice_descriptor_ = file->message_type(6);
  static const int CMessageG2SSettleNotice_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageG2SSettleNotice, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageG2SSettleNotice, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageG2SSettleNotice, camprankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageG2SSettleNotice, growing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageG2SSettleNotice, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageG2SSettleNotice, handindawnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageG2SSettleNotice, settlephase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageG2SSettleNotice, settlefinish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageG2SSettleNotice, noticeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageG2SSettleNotice, noticeparam1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageG2SSettleNotice, noticeparam2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageG2SSettleNotice, noticeparam3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageG2SSettleNotice, encourage_),
  };
  CMessageG2SSettleNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageG2SSettleNotice_descriptor_,
      CMessageG2SSettleNotice::default_instance_,
      CMessageG2SSettleNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageG2SSettleNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageG2SSettleNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageG2SSettleNotice));
  CMessageInternalTimeOut_descriptor_ = file->message_type(7);
  static const int CMessageInternalTimeOut_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInternalTimeOut, timerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInternalTimeOut, ownerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInternalTimeOut, timermark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInternalTimeOut, millseconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInternalTimeOut, callednum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInternalTimeOut, otherinfo_),
  };
  CMessageInternalTimeOut_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageInternalTimeOut_descriptor_,
      CMessageInternalTimeOut::default_instance_,
      CMessageInternalTimeOut_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInternalTimeOut, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInternalTimeOut, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageInternalTimeOut));
  CMessageCountryInfo_descriptor_ = file->message_type(8);
  static const int CMessageCountryInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCountryInfo, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCountryInfo, countrylist_),
  };
  CMessageCountryInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCountryInfo_descriptor_,
      CMessageCountryInfo::default_instance_,
      CMessageCountryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCountryInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCountryInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCountryInfo));
  CMessageRedirectGErrorCode_descriptor_ = file->message_type(9);
  static const int CMessageRedirectGErrorCode_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectGErrorCode, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectGErrorCode, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectGErrorCode, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectGErrorCode, mapid_),
  };
  CMessageRedirectGErrorCode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRedirectGErrorCode_descriptor_,
      CMessageRedirectGErrorCode::default_instance_,
      CMessageRedirectGErrorCode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectGErrorCode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectGErrorCode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRedirectGErrorCode));
  CMessageRedirectSErrorCode_descriptor_ = file->message_type(10);
  static const int CMessageRedirectSErrorCode_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectSErrorCode, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectSErrorCode, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectSErrorCode, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectSErrorCode, mapid_),
  };
  CMessageRedirectSErrorCode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRedirectSErrorCode_descriptor_,
      CMessageRedirectSErrorCode::default_instance_,
      CMessageRedirectSErrorCode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectSErrorCode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectSErrorCode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRedirectSErrorCode));
  CMessagePlayerRedirectEnterMapResponse_descriptor_ = file->message_type(11);
  static const int CMessagePlayerRedirectEnterMapResponse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectEnterMapResponse, commhandle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectEnterMapResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectEnterMapResponse, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectEnterMapResponse, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectEnterMapResponse, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectEnterMapResponse, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectEnterMapResponse, mapname_),
  };
  CMessagePlayerRedirectEnterMapResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePlayerRedirectEnterMapResponse_descriptor_,
      CMessagePlayerRedirectEnterMapResponse::default_instance_,
      CMessagePlayerRedirectEnterMapResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectEnterMapResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectEnterMapResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePlayerRedirectEnterMapResponse));
  CMessageGateInfoNotice_descriptor_ = file->message_type(12);
  static const int CMessageGateInfoNotice_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGateInfoNotice, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGateInfoNotice, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGateInfoNotice, gateversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGateInfoNotice, worldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGateInfoNotice, gatecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGateInfoNotice, gatepasswd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGateInfoNotice, gatemac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGateInfoNotice, gameid_),
  };
  CMessageGateInfoNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGateInfoNotice_descriptor_,
      CMessageGateInfoNotice::default_instance_,
      CMessageGateInfoNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGateInfoNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGateInfoNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGateInfoNotice));
  CMessageGateInfoResponse_descriptor_ = file->message_type(13);
  static const int CMessageGateInfoResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGateInfoResponse, errorcode_),
  };
  CMessageGateInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGateInfoResponse_descriptor_,
      CMessageGateInfoResponse::default_instance_,
      CMessageGateInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGateInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGateInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGateInfoResponse));
  CMessagePlayerEnterGateNotice_descriptor_ = file->message_type(14);
  static const int CMessagePlayerEnterGateNotice_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterGateNotice, commhandle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterGateNotice, logintoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterGateNotice, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterGateNotice, adultflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterGateNotice, userflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterGateNotice, userclass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterGateNotice, userpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterGateNotice, worldplayerlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterGateNotice, userstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterGateNotice, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterGateNotice, cpuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterGateNotice, diskid_),
  };
  CMessagePlayerEnterGateNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePlayerEnterGateNotice_descriptor_,
      CMessagePlayerEnterGateNotice::default_instance_,
      CMessagePlayerEnterGateNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterGateNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterGateNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePlayerEnterGateNotice));
  CMessagePlayerEnterGateResponse_descriptor_ = file->message_type(15);
  static const int CMessagePlayerEnterGateResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterGateResponse, commhandle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterGateResponse, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterGateResponse, logintoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterGateResponse, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterGateResponse, worldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterGateResponse, otherclient_),
  };
  CMessagePlayerEnterGateResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePlayerEnterGateResponse_descriptor_,
      CMessagePlayerEnterGateResponse::default_instance_,
      CMessagePlayerEnterGateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterGateResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterGateResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePlayerEnterGateResponse));
  CMessagePlayerLeaveGateNotice_descriptor_ = file->message_type(16);
  static const int CMessagePlayerLeaveGateNotice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerLeaveGateNotice, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerLeaveGateNotice, reason_),
  };
  CMessagePlayerLeaveGateNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePlayerLeaveGateNotice_descriptor_,
      CMessagePlayerLeaveGateNotice::default_instance_,
      CMessagePlayerLeaveGateNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerLeaveGateNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerLeaveGateNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePlayerLeaveGateNotice));
  CMessageServerInfoNotice_descriptor_ = file->message_type(17);
  static const int CMessageServerInfoNotice_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageServerInfoNotice, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageServerInfoNotice, servername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageServerInfoNotice, serverversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageServerInfoNotice, templateversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageServerInfoNotice, taskversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageServerInfoNotice, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageServerInfoNotice, launchmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageServerInfoNotice, playercapacity_),
  };
  CMessageServerInfoNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageServerInfoNotice_descriptor_,
      CMessageServerInfoNotice::default_instance_,
      CMessageServerInfoNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageServerInfoNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageServerInfoNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageServerInfoNotice));
  CMessageServerInfoResponse_descriptor_ = file->message_type(18);
  static const int CMessageServerInfoResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageServerInfoResponse, worldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageServerInfoResponse, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageServerInfoResponse, gameid_),
  };
  CMessageServerInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageServerInfoResponse_descriptor_,
      CMessageServerInfoResponse::default_instance_,
      CMessageServerInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageServerInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageServerInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageServerInfoResponse));
  CMessagePlayerEnterMapNotice_descriptor_ = file->message_type(19);
  static const int CMessagePlayerEnterMapNotice_offsets_[38] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterMapNotice, logintoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterMapNotice, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterMapNotice, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterMapNotice, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterMapNotice, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterMapNotice, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterMapNotice, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterMapNotice, adultflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterMapNotice, validseconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterMapNotice, familyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterMapNotice, familyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterMapNotice, isfamilyheader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterMapNotice, ifhasapplies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterMapNotice, corpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterMapNotice, corpsname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterMapNotice, iscorperheader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterMapNotice, ifhascorpsapply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterMapNotice, iftracedplayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterMapNotice, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterMapNotice, familyheaderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterMapNotice, corpsheaderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterMapNotice, familypost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterMapNotice, corpspost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterMapNotice, familycontribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterMapNotice, corpscontribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterMapNotice, familymoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterMapNotice, corpsmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterMapNotice, unionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterMapNotice, unionname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterMapNotice, headcorpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterMapNotice, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterMapNotice, officialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterMapNotice, kingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterMapNotice, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterMapNotice, protecttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterMapNotice, passwordstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterMapNotice, protecttimelength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterMapNotice, roleworldid_),
  };
  CMessagePlayerEnterMapNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePlayerEnterMapNotice_descriptor_,
      CMessagePlayerEnterMapNotice::default_instance_,
      CMessagePlayerEnterMapNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterMapNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterMapNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePlayerEnterMapNotice));
  CMessagePlayerRedirectMapNotice_descriptor_ = file->message_type(20);
  static const int CMessagePlayerRedirectMapNotice_offsets_[57] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, commhandle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, logintoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, metier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, nationality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, facetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, charlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, lastlogin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, datalength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, teamflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, encryptkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, pettempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, petonlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, petmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, teamdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, teammsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, familyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, familyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, isfamilyheader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, ifhasapplies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, corpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, corpsname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, iscorperheader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, ifhascorpsapply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, camp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, iftracedplayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, familyheaderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, corpsheaderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, validseconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, adultflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, familypost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, corpspost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, familycontribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, corpscontribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, familymoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, corpsmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, unionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, unionname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, headcorpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, officialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, kingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, protecttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, passwordstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, protecttimelength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, roleworldid_),
  };
  CMessagePlayerRedirectMapNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePlayerRedirectMapNotice_descriptor_,
      CMessagePlayerRedirectMapNotice::default_instance_,
      CMessagePlayerRedirectMapNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectMapNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePlayerRedirectMapNotice));
  CMessagePlayerEnterMapResponse_descriptor_ = file->message_type(21);
  static const int CMessagePlayerEnterMapResponse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterMapResponse, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterMapResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterMapResponse, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterMapResponse, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterMapResponse, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterMapResponse, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterMapResponse, errorcode_),
  };
  CMessagePlayerEnterMapResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePlayerEnterMapResponse_descriptor_,
      CMessagePlayerEnterMapResponse::default_instance_,
      CMessagePlayerEnterMapResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterMapResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterMapResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePlayerEnterMapResponse));
  CMessagePlayerLoginCompleteNotice_descriptor_ = file->message_type(22);
  static const int CMessagePlayerLoginCompleteNotice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerLoginCompleteNotice, accountid_),
  };
  CMessagePlayerLoginCompleteNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePlayerLoginCompleteNotice_descriptor_,
      CMessagePlayerLoginCompleteNotice::default_instance_,
      CMessagePlayerLoginCompleteNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerLoginCompleteNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerLoginCompleteNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePlayerLoginCompleteNotice));
  CMessagePlayerLeaveMapNotice_descriptor_ = file->message_type(23);
  static const int CMessagePlayerLeaveMapNotice_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerLeaveMapNotice, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerLeaveMapNotice, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerLeaveMapNotice, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerLeaveMapNotice, charlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerLeaveMapNotice, charmetier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerLeaveMapNotice, money1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerLeaveMapNotice, money2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerLeaveMapNotice, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerLeaveMapNotice, logoutflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerLeaveMapNotice, saveflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerLeaveMapNotice, globalsceneworldid_),
  };
  CMessagePlayerLeaveMapNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePlayerLeaveMapNotice_descriptor_,
      CMessagePlayerLeaveMapNotice::default_instance_,
      CMessagePlayerLeaveMapNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerLeaveMapNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerLeaveMapNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePlayerLeaveMapNotice));
  CMessagePlayerLeaveMapResponse_descriptor_ = file->message_type(24);
  static const int CMessagePlayerLeaveMapResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerLeaveMapResponse, charid_),
  };
  CMessagePlayerLeaveMapResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePlayerLeaveMapResponse_descriptor_,
      CMessagePlayerLeaveMapResponse::default_instance_,
      CMessagePlayerLeaveMapResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerLeaveMapResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerLeaveMapResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePlayerLeaveMapResponse));
  CMessagePlayerReturn2GateNotice_descriptor_ = file->message_type(25);
  static const int CMessagePlayerReturn2GateNotice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerReturn2GateNotice, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerReturn2GateNotice, charid_),
  };
  CMessagePlayerReturn2GateNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePlayerReturn2GateNotice_descriptor_,
      CMessagePlayerReturn2GateNotice::default_instance_,
      CMessagePlayerReturn2GateNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerReturn2GateNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerReturn2GateNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePlayerReturn2GateNotice));
  CMessagePlayerReturn2GateResponse_descriptor_ = file->message_type(26);
  static const int CMessagePlayerReturn2GateResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerReturn2GateResponse, charid_),
  };
  CMessagePlayerReturn2GateResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePlayerReturn2GateResponse_descriptor_,
      CMessagePlayerReturn2GateResponse::default_instance_,
      CMessagePlayerReturn2GateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerReturn2GateResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerReturn2GateResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePlayerReturn2GateResponse));
  CMessageCreateMapNotice_descriptor_ = file->message_type(27);
  static const int CMessageCreateMapNotice_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateMapNotice, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateMapNotice, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateMapNotice, tplname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateMapNotice, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateMapNotice, rtncode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateMapNotice, notice_),
  };
  CMessageCreateMapNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCreateMapNotice_descriptor_,
      CMessageCreateMapNotice::default_instance_,
      CMessageCreateMapNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateMapNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateMapNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCreateMapNotice));
  CMessageCreateMapResponse_descriptor_ = file->message_type(28);
  static const int CMessageCreateMapResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateMapResponse, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateMapResponse, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateMapResponse, tplname_),
  };
  CMessageCreateMapResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCreateMapResponse_descriptor_,
      CMessageCreateMapResponse::default_instance_,
      CMessageCreateMapResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateMapResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateMapResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCreateMapResponse));
  BattleLevel_descriptor_ = file->message_type(29);
  static const int BattleLevel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleLevel, levelmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleLevel, levelmax_),
  };
  BattleLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleLevel_descriptor_,
      BattleLevel::default_instance_,
      BattleLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleLevel));
  PBDate_descriptor_ = file->message_type(30);
  static const int PBDate_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDate, year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDate, month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDate, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDate, week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDate, hr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDate, minute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDate, sec_),
  };
  PBDate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBDate_descriptor_,
      PBDate::default_instance_,
      PBDate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBDate));
  PBDateSpace_descriptor_ = file->message_type(31);
  static const int PBDateSpace_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDateSpace, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDateSpace, finish_),
  };
  PBDateSpace_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBDateSpace_descriptor_,
      PBDateSpace::default_instance_,
      PBDateSpace_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDateSpace, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDateSpace, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBDateSpace));
  CMessageRegistRepetionInfo_descriptor_ = file->message_type(32);
  static const int CMessageRegistRepetionInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRegistRepetionInfo, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRegistRepetionInfo, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRegistRepetionInfo, playermax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRegistRepetionInfo, backmapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRegistRepetionInfo, backposx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRegistRepetionInfo, backposy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRegistRepetionInfo, countmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRegistRepetionInfo, repetionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRegistRepetionInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRegistRepetionInfo, space_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRegistRepetionInfo, isontimeopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRegistRepetionInfo, notlimittime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRegistRepetionInfo, relogin_),
  };
  CMessageRegistRepetionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRegistRepetionInfo_descriptor_,
      CMessageRegistRepetionInfo::default_instance_,
      CMessageRegistRepetionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRegistRepetionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRegistRepetionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRegistRepetionInfo));
  CMessageDestroyRepetionMap_descriptor_ = file->message_type(33);
  static const int CMessageDestroyRepetionMap_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDestroyRepetionMap, repetionindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDestroyRepetionMap, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDestroyRepetionMap, parame_),
  };
  CMessageDestroyRepetionMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageDestroyRepetionMap_descriptor_,
      CMessageDestroyRepetionMap::default_instance_,
      CMessageDestroyRepetionMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDestroyRepetionMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDestroyRepetionMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageDestroyRepetionMap));
  CMessageG2SRepetionEventCode_descriptor_ = file->message_type(34);
  static const int CMessageG2SRepetionEventCode_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageG2SRepetionEventCode, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageG2SRepetionEventCode, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageG2SRepetionEventCode, repetionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageG2SRepetionEventCode, parame_),
  };
  CMessageG2SRepetionEventCode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageG2SRepetionEventCode_descriptor_,
      CMessageG2SRepetionEventCode::default_instance_,
      CMessageG2SRepetionEventCode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageG2SRepetionEventCode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageG2SRepetionEventCode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageG2SRepetionEventCode));
  CMessagePlayerRedirectRequest_descriptor_ = file->message_type(35);
  static const int CMessagePlayerRedirectRequest_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectRequest, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectRequest, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectRequest, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectRequest, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectRequest, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectRequest, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectRequest, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectRequest, metier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectRequest, nationality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectRequest, facetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectRequest, charlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectRequest, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectRequest, lastlogin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectRequest, datalength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectRequest, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectRequest, teamflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectRequest, teamlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectRequest, encryptkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectRequest, teaminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectRequest, pettempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectRequest, petonlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectRequest, petmode_),
  };
  CMessagePlayerRedirectRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePlayerRedirectRequest_descriptor_,
      CMessagePlayerRedirectRequest::default_instance_,
      CMessagePlayerRedirectRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePlayerRedirectRequest));
  CMessagePlayerRedirectResponse_descriptor_ = file->message_type(36);
  static const int CMessagePlayerRedirectResponse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectResponse, redirect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectResponse, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectResponse, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectResponse, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectResponse, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectResponse, address_),
  };
  CMessagePlayerRedirectResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePlayerRedirectResponse_descriptor_,
      CMessagePlayerRedirectResponse::default_instance_,
      CMessagePlayerRedirectResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerRedirectResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePlayerRedirectResponse));
  CMessagePlayerEnterConfirmNotice_descriptor_ = file->message_type(37);
  static const int CMessagePlayerEnterConfirmNotice_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterConfirmNotice, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterConfirmNotice, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterConfirmNotice, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterConfirmNotice, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterConfirmNotice, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterConfirmNotice, face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterConfirmNotice, metier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterConfirmNotice, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterConfirmNotice, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterConfirmNotice, nationality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterConfirmNotice, cskey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterConfirmNotice, vipflag_),
  };
  CMessagePlayerEnterConfirmNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePlayerEnterConfirmNotice_descriptor_,
      CMessagePlayerEnterConfirmNotice::default_instance_,
      CMessagePlayerEnterConfirmNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterConfirmNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerEnterConfirmNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePlayerEnterConfirmNotice));
  CMessageSceneNotOpenNotice_descriptor_ = file->message_type(38);
  static const int CMessageSceneNotOpenNotice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSceneNotOpenNotice, charid_),
  };
  CMessageSceneNotOpenNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageSceneNotOpenNotice_descriptor_,
      CMessageSceneNotOpenNotice::default_instance_,
      CMessageSceneNotOpenNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSceneNotOpenNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSceneNotOpenNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageSceneNotOpenNotice));
  CMessageUpdateVersionNotice_descriptor_ = file->message_type(39);
  static const int CMessageUpdateVersionNotice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateVersionNotice, templateversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateVersionNotice, taskversion_),
  };
  CMessageUpdateVersionNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUpdateVersionNotice_descriptor_,
      CMessageUpdateVersionNotice::default_instance_,
      CMessageUpdateVersionNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateVersionNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateVersionNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUpdateVersionNotice));
  CMessageRegistServerRequest_descriptor_ = file->message_type(40);
  static const int CMessageRegistServerRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRegistServerRequest, servertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRegistServerRequest, serverid_),
  };
  CMessageRegistServerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRegistServerRequest_descriptor_,
      CMessageRegistServerRequest::default_instance_,
      CMessageRegistServerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRegistServerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRegistServerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRegistServerRequest));
  CMessageRegistServerResponse_descriptor_ = file->message_type(41);
  static const int CMessageRegistServerResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRegistServerResponse, servertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRegistServerResponse, serverid_),
  };
  CMessageRegistServerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRegistServerResponse_descriptor_,
      CMessageRegistServerResponse::default_instance_,
      CMessageRegistServerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRegistServerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRegistServerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRegistServerResponse));
  CMessageHeartBeatNotice_descriptor_ = file->message_type(42);
  static const int CMessageHeartBeatNotice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageHeartBeatNotice, servertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageHeartBeatNotice, serverid_),
  };
  CMessageHeartBeatNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageHeartBeatNotice_descriptor_,
      CMessageHeartBeatNotice::default_instance_,
      CMessageHeartBeatNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageHeartBeatNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageHeartBeatNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageHeartBeatNotice));
  CMessagePlayerOnLineFriendRequest_descriptor_ = file->message_type(43);
  static const int CMessagePlayerOnLineFriendRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerOnLineFriendRequest, charids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerOnLineFriendRequest, requester_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerOnLineFriendRequest, flag_),
  };
  CMessagePlayerOnLineFriendRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePlayerOnLineFriendRequest_descriptor_,
      CMessagePlayerOnLineFriendRequest::default_instance_,
      CMessagePlayerOnLineFriendRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerOnLineFriendRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerOnLineFriendRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePlayerOnLineFriendRequest));
  PBSinglePlayerInfo_descriptor_ = file->message_type(44);
  static const int PBSinglePlayerInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSinglePlayerInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSinglePlayerInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSinglePlayerInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSinglePlayerInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSinglePlayerInfo, face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSinglePlayerInfo, nation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSinglePlayerInfo, vipflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSinglePlayerInfo, noexist_),
  };
  PBSinglePlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSinglePlayerInfo_descriptor_,
      PBSinglePlayerInfo::default_instance_,
      PBSinglePlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSinglePlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSinglePlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSinglePlayerInfo));
  CMessagePlayerOnLineFriendResponse_descriptor_ = file->message_type(45);
  static const int CMessagePlayerOnLineFriendResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerOnLineFriendResponse, friends_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerOnLineFriendResponse, requester_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerOnLineFriendResponse, flag_),
  };
  CMessagePlayerOnLineFriendResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePlayerOnLineFriendResponse_descriptor_,
      CMessagePlayerOnLineFriendResponse::default_instance_,
      CMessagePlayerOnLineFriendResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerOnLineFriendResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerOnLineFriendResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePlayerOnLineFriendResponse));
  CMessagePlayerChangeStatusNotice_descriptor_ = file->message_type(46);
  static const int CMessagePlayerChangeStatusNotice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerChangeStatusNotice, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerChangeStatusNotice, status_),
  };
  CMessagePlayerChangeStatusNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePlayerChangeStatusNotice_descriptor_,
      CMessagePlayerChangeStatusNotice::default_instance_,
      CMessagePlayerChangeStatusNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerChangeStatusNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerChangeStatusNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePlayerChangeStatusNotice));
  CMessageGameHeartBeatNotice_descriptor_ = file->message_type(47);
  static const int CMessageGameHeartBeatNotice_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGameHeartBeatNotice, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGameHeartBeatNotice, charids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGameHeartBeatNotice, externalcharids_),
  };
  CMessageGameHeartBeatNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGameHeartBeatNotice_descriptor_,
      CMessageGameHeartBeatNotice::default_instance_,
      CMessageGameHeartBeatNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGameHeartBeatNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGameHeartBeatNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGameHeartBeatNotice));
  CMessageERatingProtoStream_descriptor_ = file->message_type(48);
  static const int CMessageERatingProtoStream_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageERatingProtoStream, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageERatingProtoStream, buffer_),
  };
  CMessageERatingProtoStream_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageERatingProtoStream_descriptor_,
      CMessageERatingProtoStream::default_instance_,
      CMessageERatingProtoStream_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageERatingProtoStream, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageERatingProtoStream, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageERatingProtoStream));
  CMessageERatingStateNotice_descriptor_ = file->message_type(49);
  static const int CMessageERatingStateNotice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageERatingStateNotice, gatewayid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageERatingStateNotice, binded_),
  };
  CMessageERatingStateNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageERatingStateNotice_descriptor_,
      CMessageERatingStateNotice::default_instance_,
      CMessageERatingStateNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageERatingStateNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageERatingStateNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageERatingStateNotice));
  CMessageCreateGateTeamRequest_descriptor_ = file->message_type(50);
  static const int CMessageCreateGateTeamRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateGateTeamRequest, charid_),
  };
  CMessageCreateGateTeamRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCreateGateTeamRequest_descriptor_,
      CMessageCreateGateTeamRequest::default_instance_,
      CMessageCreateGateTeamRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateGateTeamRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateGateTeamRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCreateGateTeamRequest));
  CMessageCreateGateTeamResponse_descriptor_ = file->message_type(51);
  static const int CMessageCreateGateTeamResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateGateTeamResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateGateTeamResponse, teamid_),
  };
  CMessageCreateGateTeamResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCreateGateTeamResponse_descriptor_,
      CMessageCreateGateTeamResponse::default_instance_,
      CMessageCreateGateTeamResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateGateTeamResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateGateTeamResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCreateGateTeamResponse));
  CMessageJoinGateTeamRequest_descriptor_ = file->message_type(52);
  static const int CMessageJoinGateTeamRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJoinGateTeamRequest, srccharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJoinGateTeamRequest, descharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJoinGateTeamRequest, srcnation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJoinGateTeamRequest, desnaiton_),
  };
  CMessageJoinGateTeamRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageJoinGateTeamRequest_descriptor_,
      CMessageJoinGateTeamRequest::default_instance_,
      CMessageJoinGateTeamRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJoinGateTeamRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJoinGateTeamRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageJoinGateTeamRequest));
  CMessageJoinGateTeamResponse_descriptor_ = file->message_type(53);
  static const int CMessageJoinGateTeamResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJoinGateTeamResponse, descharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJoinGateTeamResponse, item_),
  };
  CMessageJoinGateTeamResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageJoinGateTeamResponse_descriptor_,
      CMessageJoinGateTeamResponse::default_instance_,
      CMessageJoinGateTeamResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJoinGateTeamResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJoinGateTeamResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageJoinGateTeamResponse));
  CMessageRequestJoinReply_descriptor_ = file->message_type(54);
  static const int CMessageRequestJoinReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRequestJoinReply, srccharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRequestJoinReply, descharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRequestJoinReply, rtncode_),
  };
  CMessageRequestJoinReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRequestJoinReply_descriptor_,
      CMessageRequestJoinReply::default_instance_,
      CMessageRequestJoinReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRequestJoinReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRequestJoinReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRequestJoinReply));
  CMessageJoinGateTeamInvite_descriptor_ = file->message_type(55);
  static const int CMessageJoinGateTeamInvite_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJoinGateTeamInvite, srccharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJoinGateTeamInvite, descharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJoinGateTeamInvite, srcnation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJoinGateTeamInvite, desnaiton_),
  };
  CMessageJoinGateTeamInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageJoinGateTeamInvite_descriptor_,
      CMessageJoinGateTeamInvite::default_instance_,
      CMessageJoinGateTeamInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJoinGateTeamInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJoinGateTeamInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageJoinGateTeamInvite));
  CMessageJoinTeamInviteResponse_descriptor_ = file->message_type(56);
  static const int CMessageJoinTeamInviteResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJoinTeamInviteResponse, descharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJoinTeamInviteResponse, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJoinTeamInviteResponse, srccharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJoinTeamInviteResponse, srcname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJoinTeamInviteResponse, headname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJoinTeamInviteResponse, teaminfo_),
  };
  CMessageJoinTeamInviteResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageJoinTeamInviteResponse_descriptor_,
      CMessageJoinTeamInviteResponse::default_instance_,
      CMessageJoinTeamInviteResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJoinTeamInviteResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJoinTeamInviteResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageJoinTeamInviteResponse));
  CMessageInviteJoinReply_descriptor_ = file->message_type(57);
  static const int CMessageInviteJoinReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteJoinReply, srccharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteJoinReply, descharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteJoinReply, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteJoinReply, rtncode_),
  };
  CMessageInviteJoinReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageInviteJoinReply_descriptor_,
      CMessageInviteJoinReply::default_instance_,
      CMessageInviteJoinReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteJoinReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteJoinReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageInviteJoinReply));
  CMessageInvite2Request_descriptor_ = file->message_type(58);
  static const int CMessageInvite2Request_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInvite2Request, srcitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInvite2Request, descharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInvite2Request, invitername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInvite2Request, invitercharid_),
  };
  CMessageInvite2Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageInvite2Request_descriptor_,
      CMessageInvite2Request::default_instance_,
      CMessageInvite2Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInvite2Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInvite2Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageInvite2Request));
  CMessageKickoutGateTeamRequest_descriptor_ = file->message_type(59);
  static const int CMessageKickoutGateTeamRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickoutGateTeamRequest, headcharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickoutGateTeamRequest, membercharid_),
  };
  CMessageKickoutGateTeamRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageKickoutGateTeamRequest_descriptor_,
      CMessageKickoutGateTeamRequest::default_instance_,
      CMessageKickoutGateTeamRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickoutGateTeamRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickoutGateTeamRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageKickoutGateTeamRequest));
  CMessageChangeHeaderRequest_descriptor_ = file->message_type(60);
  static const int CMessageChangeHeaderRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeHeaderRequest, oldheader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeHeaderRequest, newheader_),
  };
  CMessageChangeHeaderRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeHeaderRequest_descriptor_,
      CMessageChangeHeaderRequest::default_instance_,
      CMessageChangeHeaderRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeHeaderRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeHeaderRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeHeaderRequest));
  CMessageChangeDistributeRequest_descriptor_ = file->message_type(61);
  static const int CMessageChangeDistributeRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeDistributeRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeDistributeRequest, mode_),
  };
  CMessageChangeDistributeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeDistributeRequest_descriptor_,
      CMessageChangeDistributeRequest::default_instance_,
      CMessageChangeDistributeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeDistributeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeDistributeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeDistributeRequest));
  CMessageChangeDistributeResponse_descriptor_ = file->message_type(62);
  static const int CMessageChangeDistributeResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeDistributeResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeDistributeResponse, mode_),
  };
  CMessageChangeDistributeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeDistributeResponse_descriptor_,
      CMessageChangeDistributeResponse::default_instance_,
      CMessageChangeDistributeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeDistributeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeDistributeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeDistributeResponse));
  CMessageLeaveGateTeamRequest_descriptor_ = file->message_type(63);
  static const int CMessageLeaveGateTeamRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLeaveGateTeamRequest, charid_),
  };
  CMessageLeaveGateTeamRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLeaveGateTeamRequest_descriptor_,
      CMessageLeaveGateTeamRequest::default_instance_,
      CMessageLeaveGateTeamRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLeaveGateTeamRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLeaveGateTeamRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLeaveGateTeamRequest));
  CMessageEndGateTeamRequest_descriptor_ = file->message_type(64);
  static const int CMessageEndGateTeamRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEndGateTeamRequest, charid_),
  };
  CMessageEndGateTeamRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageEndGateTeamRequest_descriptor_,
      CMessageEndGateTeamRequest::default_instance_,
      CMessageEndGateTeamRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEndGateTeamRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEndGateTeamRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageEndGateTeamRequest));
  CMessageNotifySceneToUpdateTeam_descriptor_ = file->message_type(65);
  static const int CMessageNotifySceneToUpdateTeam_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifySceneToUpdateTeam, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifySceneToUpdateTeam, descharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifySceneToUpdateTeam, headid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifySceneToUpdateTeam, item_),
  };
  CMessageNotifySceneToUpdateTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageNotifySceneToUpdateTeam_descriptor_,
      CMessageNotifySceneToUpdateTeam::default_instance_,
      CMessageNotifySceneToUpdateTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifySceneToUpdateTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifySceneToUpdateTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageNotifySceneToUpdateTeam));
  CMessageNotifySceneToSendTeamList_descriptor_ = file->message_type(66);
  static const int CMessageNotifySceneToSendTeamList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifySceneToSendTeamList, descharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifySceneToSendTeamList, teaminfo_),
  };
  CMessageNotifySceneToSendTeamList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageNotifySceneToSendTeamList_descriptor_,
      CMessageNotifySceneToSendTeamList::default_instance_,
      CMessageNotifySceneToSendTeamList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifySceneToSendTeamList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifySceneToSendTeamList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageNotifySceneToSendTeamList));
  CMessageNotifyErrToScene_descriptor_ = file->message_type(67);
  static const int CMessageNotifyErrToScene_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifyErrToScene, descharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifyErrToScene, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifyErrToScene, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifyErrToScene, param2_),
  };
  CMessageNotifyErrToScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageNotifyErrToScene_descriptor_,
      CMessageNotifyErrToScene::default_instance_,
      CMessageNotifyErrToScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifyErrToScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifyErrToScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageNotifyErrToScene));
  CMessageUpdateTeamPropertyRequest_descriptor_ = file->message_type(68);
  static const int CMessageUpdateTeamPropertyRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateTeamPropertyRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateTeamPropertyRequest, info_),
  };
  CMessageUpdateTeamPropertyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUpdateTeamPropertyRequest_descriptor_,
      CMessageUpdateTeamPropertyRequest::default_instance_,
      CMessageUpdateTeamPropertyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateTeamPropertyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateTeamPropertyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUpdateTeamPropertyRequest));
  CMessageUpdateTeamPropertyResponse_descriptor_ = file->message_type(69);
  static const int CMessageUpdateTeamPropertyResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateTeamPropertyResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateTeamPropertyResponse, info_),
  };
  CMessageUpdateTeamPropertyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUpdateTeamPropertyResponse_descriptor_,
      CMessageUpdateTeamPropertyResponse::default_instance_,
      CMessageUpdateTeamPropertyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateTeamPropertyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateTeamPropertyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUpdateTeamPropertyResponse));
  CMessageFollowRequest_descriptor_ = file->message_type(70);
  static const int CMessageFollowRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFollowRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFollowRequest, actiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFollowRequest, resultcode_),
  };
  CMessageFollowRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFollowRequest_descriptor_,
      CMessageFollowRequest::default_instance_,
      CMessageFollowRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFollowRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFollowRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFollowRequest));
  CMessageFollowResponse_descriptor_ = file->message_type(71);
  static const int CMessageFollowResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFollowResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFollowResponse, headid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFollowResponse, actiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFollowResponse, resultcode_),
  };
  CMessageFollowResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFollowResponse_descriptor_,
      CMessageFollowResponse::default_instance_,
      CMessageFollowResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFollowResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFollowResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFollowResponse));
  CMessageSendClaimRecruitRequest_descriptor_ = file->message_type(72);
  static const int CMessageSendClaimRecruitRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSendClaimRecruitRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSendClaimRecruitRequest, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSendClaimRecruitRequest, actiontype_),
  };
  CMessageSendClaimRecruitRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageSendClaimRecruitRequest_descriptor_,
      CMessageSendClaimRecruitRequest::default_instance_,
      CMessageSendClaimRecruitRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSendClaimRecruitRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSendClaimRecruitRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageSendClaimRecruitRequest));
  CMessageSendClaimRecruitResponse_descriptor_ = file->message_type(73);
  static const int CMessageSendClaimRecruitResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSendClaimRecruitResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSendClaimRecruitResponse, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSendClaimRecruitResponse, actiontype_),
  };
  CMessageSendClaimRecruitResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageSendClaimRecruitResponse_descriptor_,
      CMessageSendClaimRecruitResponse::default_instance_,
      CMessageSendClaimRecruitResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSendClaimRecruitResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSendClaimRecruitResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageSendClaimRecruitResponse));
  CMessageQueryClaimRecruitRequest_descriptor_ = file->message_type(74);
  static const int CMessageQueryClaimRecruitRequest_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryClaimRecruitRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryClaimRecruitRequest, actiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryClaimRecruitRequest, rootcondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryClaimRecruitRequest, subcondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryClaimRecruitRequest, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryClaimRecruitRequest, metier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryClaimRecruitRequest, minlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryClaimRecruitRequest, maxlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryClaimRecruitRequest, nationality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryClaimRecruitRequest, pageindex_),
  };
  CMessageQueryClaimRecruitRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageQueryClaimRecruitRequest_descriptor_,
      CMessageQueryClaimRecruitRequest::default_instance_,
      CMessageQueryClaimRecruitRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryClaimRecruitRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryClaimRecruitRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageQueryClaimRecruitRequest));
  CMessageQueryClaimRecruitResponse_descriptor_ = file->message_type(75);
  static const int CMessageQueryClaimRecruitResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryClaimRecruitResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryClaimRecruitResponse, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryClaimRecruitResponse, pageindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryClaimRecruitResponse, totalindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryClaimRecruitResponse, actiontype_),
  };
  CMessageQueryClaimRecruitResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageQueryClaimRecruitResponse_descriptor_,
      CMessageQueryClaimRecruitResponse::default_instance_,
      CMessageQueryClaimRecruitResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryClaimRecruitResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryClaimRecruitResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageQueryClaimRecruitResponse));
  CMessageDeleteClaimRecruitRequest_descriptor_ = file->message_type(76);
  static const int CMessageDeleteClaimRecruitRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDeleteClaimRecruitRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDeleteClaimRecruitRequest, actiontype_),
  };
  CMessageDeleteClaimRecruitRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageDeleteClaimRecruitRequest_descriptor_,
      CMessageDeleteClaimRecruitRequest::default_instance_,
      CMessageDeleteClaimRecruitRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDeleteClaimRecruitRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDeleteClaimRecruitRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageDeleteClaimRecruitRequest));
  CMessageDeleteClaimRecruitResponse_descriptor_ = file->message_type(77);
  static const int CMessageDeleteClaimRecruitResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDeleteClaimRecruitResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDeleteClaimRecruitResponse, actiontype_),
  };
  CMessageDeleteClaimRecruitResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageDeleteClaimRecruitResponse_descriptor_,
      CMessageDeleteClaimRecruitResponse::default_instance_,
      CMessageDeleteClaimRecruitResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDeleteClaimRecruitResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDeleteClaimRecruitResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageDeleteClaimRecruitResponse));
  CMessageObtainGateTeamRequest_descriptor_ = file->message_type(78);
  static const int CMessageObtainGateTeamRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainGateTeamRequest, charid_),
  };
  CMessageObtainGateTeamRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageObtainGateTeamRequest_descriptor_,
      CMessageObtainGateTeamRequest::default_instance_,
      CMessageObtainGateTeamRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainGateTeamRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainGateTeamRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageObtainGateTeamRequest));
  CMessageClearInvReqRecordRequest_descriptor_ = file->message_type(79);
  static const int CMessageClearInvReqRecordRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageClearInvReqRecordRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageClearInvReqRecordRequest, charid_),
  };
  CMessageClearInvReqRecordRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageClearInvReqRecordRequest_descriptor_,
      CMessageClearInvReqRecordRequest::default_instance_,
      CMessageClearInvReqRecordRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageClearInvReqRecordRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageClearInvReqRecordRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageClearInvReqRecordRequest));
  PBMsg_descriptor_ = file->message_type(80);
  static const int PBMsg_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsg, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsg, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsg, metier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsg, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsg, maxlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsg, minlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsg, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsg, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsg, rootstyle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsg, substyle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsg, nationality_),
  };
  PBMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMsg_descriptor_,
      PBMsg::default_instance_,
      PBMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMsg));
  PBTeamItem_descriptor_ = file->message_type(81);
  static const int PBTeamItem_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamItem, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamItem, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamItem, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamItem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamItem, face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamItem, metier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamItem, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamItem, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamItem, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamItem, mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamItem, ap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamItem, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamItem, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamItem, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamItem, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamItem, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamItem, nationality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamItem, bufflist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamItem, repetionmapindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamItem, order_),
  };
  PBTeamItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTeamItem_descriptor_,
      PBTeamItem::default_instance_,
      PBTeamItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTeamItem));
  PBTeamInfo_descriptor_ = file->message_type(82);
  static const int PBTeamInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamInfo, headercharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamInfo, distributemode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamInfo, headname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamInfo, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamInfo, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamInfo, members_),
  };
  PBTeamInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTeamInfo_descriptor_,
      PBTeamInfo::default_instance_,
      PBTeamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTeamInfo));
  CMessageGateShutDownNotice_descriptor_ = file->message_type(83);
  static const int CMessageGateShutDownNotice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGateShutDownNotice, worldid_),
  };
  CMessageGateShutDownNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGateShutDownNotice_descriptor_,
      CMessageGateShutDownNotice::default_instance_,
      CMessageGateShutDownNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGateShutDownNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGateShutDownNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGateShutDownNotice));
  CMessageKickOffPlayerRequest_descriptor_ = file->message_type(84);
  static const int CMessageKickOffPlayerRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickOffPlayerRequest, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickOffPlayerRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickOffPlayerRequest, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickOffPlayerRequest, anotherip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickOffPlayerRequest, roleworldid_),
  };
  CMessageKickOffPlayerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageKickOffPlayerRequest_descriptor_,
      CMessageKickOffPlayerRequest::default_instance_,
      CMessageKickOffPlayerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickOffPlayerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickOffPlayerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageKickOffPlayerRequest));
  CMessageKickOffPlayerResponse_descriptor_ = file->message_type(85);
  static const int CMessageKickOffPlayerResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickOffPlayerResponse, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickOffPlayerResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickOffPlayerResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickOffPlayerResponse, roleworldid_),
  };
  CMessageKickOffPlayerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageKickOffPlayerResponse_descriptor_,
      CMessageKickOffPlayerResponse::default_instance_,
      CMessageKickOffPlayerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickOffPlayerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickOffPlayerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageKickOffPlayerResponse));
  CMessageGetPlayerMailiInfoRequest_descriptor_ = file->message_type(86);
  static const int CMessageGetPlayerMailiInfoRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetPlayerMailiInfoRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetPlayerMailiInfoRequest, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetPlayerMailiInfoRequest, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetPlayerMailiInfoRequest, queryway_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetPlayerMailiInfoRequest, querytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetPlayerMailiInfoRequest, querydata_),
  };
  CMessageGetPlayerMailiInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetPlayerMailiInfoRequest_descriptor_,
      CMessageGetPlayerMailiInfoRequest::default_instance_,
      CMessageGetPlayerMailiInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetPlayerMailiInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetPlayerMailiInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetPlayerMailiInfoRequest));
  CMessageGetPlayerMailInfoResponse_descriptor_ = file->message_type(87);
  static const int CMessageGetPlayerMailInfoResponse_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetPlayerMailInfoResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetPlayerMailInfoResponse, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetPlayerMailInfoResponse, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetPlayerMailInfoResponse, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetPlayerMailInfoResponse, roleofcountry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetPlayerMailInfoResponse, roleincountry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetPlayerMailInfoResponse, roleonline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetPlayerMailInfoResponse, rolemailcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetPlayerMailInfoResponse, querytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetPlayerMailInfoResponse, querydata_),
  };
  CMessageGetPlayerMailInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetPlayerMailInfoResponse_descriptor_,
      CMessageGetPlayerMailInfoResponse::default_instance_,
      CMessageGetPlayerMailInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetPlayerMailInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetPlayerMailInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetPlayerMailInfoResponse));
  CMessageChangeMailCountNotify_descriptor_ = file->message_type(88);
  static const int CMessageChangeMailCountNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeMailCountNotify, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeMailCountNotify, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeMailCountNotify, queryway_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeMailCountNotify, numchanged_),
  };
  CMessageChangeMailCountNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeMailCountNotify_descriptor_,
      CMessageChangeMailCountNotify::default_instance_,
      CMessageChangeMailCountNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeMailCountNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeMailCountNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeMailCountNotify));
  CMessageUserIbExchangeNotice_descriptor_ = file->message_type(89);
  static const int CMessageUserIbExchangeNotice_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserIbExchangeNotice, purchaseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserIbExchangeNotice, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserIbExchangeNotice, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserIbExchangeNotice, genderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserIbExchangeNotice, metierid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserIbExchangeNotice, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserIbExchangeNotice, ratingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserIbExchangeNotice, ibcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserIbExchangeNotice, packageflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserIbExchangeNotice, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserIbExchangeNotice, paytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserIbExchangeNotice, userip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserIbExchangeNotice, subjectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserIbExchangeNotice, auditflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserIbExchangeNotice, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserIbExchangeNotice, discountprice_),
  };
  CMessageUserIbExchangeNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUserIbExchangeNotice_descriptor_,
      CMessageUserIbExchangeNotice::default_instance_,
      CMessageUserIbExchangeNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserIbExchangeNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserIbExchangeNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUserIbExchangeNotice));
  CMessageUserUseIbItemNotice_descriptor_ = file->message_type(90);
  static const int CMessageUserUseIbItemNotice_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserUseIbItemNotice, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserUseIbItemNotice, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserUseIbItemNotice, purchaseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserUseIbItemNotice, genderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserUseIbItemNotice, metierid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserUseIbItemNotice, level_),
  };
  CMessageUserUseIbItemNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUserUseIbItemNotice_descriptor_,
      CMessageUserUseIbItemNotice::default_instance_,
      CMessageUserUseIbItemNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserUseIbItemNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserUseIbItemNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUserUseIbItemNotice));
  CMessageAddFriendRequest_descriptor_ = file->message_type(91);
  static const int CMessageAddFriendRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAddFriendRequest, srcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAddFriendRequest, desid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAddFriendRequest, srclevel_),
  };
  CMessageAddFriendRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageAddFriendRequest_descriptor_,
      CMessageAddFriendRequest::default_instance_,
      CMessageAddFriendRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAddFriendRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAddFriendRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageAddFriendRequest));
  CMessageAddFriendResponse_descriptor_ = file->message_type(92);
  static const int CMessageAddFriendResponse_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAddFriendResponse, sendback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAddFriendResponse, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAddFriendResponse, srccharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAddFriendResponse, srcmetier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAddFriendResponse, srclevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAddFriendResponse, srcsex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAddFriendResponse, srchead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAddFriendResponse, srcname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAddFriendResponse, descharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAddFriendResponse, desname_),
  };
  CMessageAddFriendResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageAddFriendResponse_descriptor_,
      CMessageAddFriendResponse::default_instance_,
      CMessageAddFriendResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAddFriendResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAddFriendResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageAddFriendResponse));
  CMessageGetCharIDRequest_descriptor_ = file->message_type(93);
  static const int CMessageGetCharIDRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCharIDRequest, typeid__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCharIDRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCharIDRequest, srcentityid_),
  };
  CMessageGetCharIDRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetCharIDRequest_descriptor_,
      CMessageGetCharIDRequest::default_instance_,
      CMessageGetCharIDRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCharIDRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCharIDRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetCharIDRequest));
  CMessageGetCharIDResponse_descriptor_ = file->message_type(94);
  static const int CMessageGetCharIDResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCharIDResponse, typeid__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCharIDResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCharIDResponse, srcentityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCharIDResponse, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCharIDResponse, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCharIDResponse, sex_),
  };
  CMessageGetCharIDResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetCharIDResponse_descriptor_,
      CMessageGetCharIDResponse::default_instance_,
      CMessageGetCharIDResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCharIDResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCharIDResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetCharIDResponse));
  CMessageRoleChangeCampNotice_descriptor_ = file->message_type(95);
  static const int CMessageRoleChangeCampNotice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleChangeCampNotice, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleChangeCampNotice, camp_),
  };
  CMessageRoleChangeCampNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRoleChangeCampNotice_descriptor_,
      CMessageRoleChangeCampNotice::default_instance_,
      CMessageRoleChangeCampNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleChangeCampNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleChangeCampNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRoleChangeCampNotice));
  CMessageLoginSvrStartUpNotice_descriptor_ = file->message_type(96);
  static const int CMessageLoginSvrStartUpNotice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginSvrStartUpNotice, status_),
  };
  CMessageLoginSvrStartUpNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLoginSvrStartUpNotice_descriptor_,
      CMessageLoginSvrStartUpNotice::default_instance_,
      CMessageLoginSvrStartUpNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginSvrStartUpNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginSvrStartUpNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLoginSvrStartUpNotice));
  CMessageGate2LoginHeartBeatNotice_descriptor_ = file->message_type(97);
  static const int CMessageGate2LoginHeartBeatNotice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGate2LoginHeartBeatNotice, playeratgate_),
  };
  CMessageGate2LoginHeartBeatNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGate2LoginHeartBeatNotice_descriptor_,
      CMessageGate2LoginHeartBeatNotice::default_instance_,
      CMessageGate2LoginHeartBeatNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGate2LoginHeartBeatNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGate2LoginHeartBeatNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGate2LoginHeartBeatNotice));
  PBPersonalRankInfo_descriptor_ = file->message_type(98);
  static const int PBPersonalRankInfo_offsets_[46] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonalRankInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonalRankInfo, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonalRankInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonalRankInfo, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonalRankInfo, boundedmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonalRankInfo, killenemynumin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonalRankInfo, killenemynumout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonalRankInfo, honor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonalRankInfo, comprehensive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonalRankInfo, dienum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonalRankInfo, completedtasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonalRankInfo, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonalRankInfo, metier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonalRankInfo, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonalRankInfo, onlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonalRankInfo, pantaomark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonalRankInfo, longgongmark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonalRankInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonalRankInfo, originrelivetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonalRankInfo, killsamenationnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonalRankInfo, killogrenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonalRankInfo, upfailnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonalRankInfo, todaykillenemynumin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonalRankInfo, todaykillenemynumout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonalRankInfo, todayhonor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonalRankInfo, dayanta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonalRankInfo, lianhuadong_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonalRankInfo, huangfengdong_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonalRankInfo, achivepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonalRankInfo, charmvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonalRankInfo, flydungmark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonalRankInfo, zhangong_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonalRankInfo, zhiguo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonalRankInfo, tongshuai_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonalRankInfo, wisall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonalRankInfo, yunxiao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonalRankInfo, weekinccharm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonalRankInfo, shide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonalRankInfo, xianyuanmark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonalRankInfo, chushitu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonalRankInfo, yunxiaolevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonalRankInfo, wudidongmark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonalRankInfo, daluandou_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonalRankInfo, daluandoutotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonalRankInfo, globalwar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonalRankInfo, spiritscore_),
  };
  PBPersonalRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPersonalRankInfo_descriptor_,
      PBPersonalRankInfo::default_instance_,
      PBPersonalRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonalRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPersonalRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPersonalRankInfo));
  CMessagePersonalRankInfoNotify_descriptor_ = file->message_type(99);
  static const int CMessagePersonalRankInfoNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePersonalRankInfoNotify, personalranks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePersonalRankInfoNotify, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePersonalRankInfoNotify, rtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePersonalRankInfoNotify, isover_),
  };
  CMessagePersonalRankInfoNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePersonalRankInfoNotify_descriptor_,
      CMessagePersonalRankInfoNotify::default_instance_,
      CMessagePersonalRankInfoNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePersonalRankInfoNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePersonalRankInfoNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePersonalRankInfoNotify));
  PBRankTopTen_descriptor_ = file->message_type(100);
  static const int PBRankTopTen_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRankTopTen, ranktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRankTopTen, charlist_),
  };
  PBRankTopTen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBRankTopTen_descriptor_,
      PBRankTopTen::default_instance_,
      PBRankTopTen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRankTopTen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRankTopTen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBRankTopTen));
  CMessageRankRemove_descriptor_ = file->message_type(101);
  static const int CMessageRankRemove_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRankRemove, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRankRemove, ranktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRankRemove, refresh_),
  };
  CMessageRankRemove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRankRemove_descriptor_,
      CMessageRankRemove::default_instance_,
      CMessageRankRemove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRankRemove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRankRemove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRankRemove));
  CMessagePersonalRankInfoRequest_descriptor_ = file->message_type(102);
  static const int CMessagePersonalRankInfoRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePersonalRankInfoRequest, toptenlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePersonalRankInfoRequest, rtype_),
  };
  CMessagePersonalRankInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePersonalRankInfoRequest_descriptor_,
      CMessagePersonalRankInfoRequest::default_instance_,
      CMessagePersonalRankInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePersonalRankInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePersonalRankInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePersonalRankInfoRequest));
  CMessageNewRankTopTenNotify_descriptor_ = file->message_type(103);
  static const int CMessageNewRankTopTenNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNewRankTopTenNotify, toptenlist_),
  };
  CMessageNewRankTopTenNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageNewRankTopTenNotify_descriptor_,
      CMessageNewRankTopTenNotify::default_instance_,
      CMessageNewRankTopTenNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNewRankTopTenNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNewRankTopTenNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageNewRankTopTenNotify));
  CMessageRoleGameInfoReportToGateNotify_descriptor_ = file->message_type(104);
  static const int CMessageRoleGameInfoReportToGateNotify_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleGameInfoReportToGateNotify, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleGameInfoReportToGateNotify, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleGameInfoReportToGateNotify, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleGameInfoReportToGateNotify, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleGameInfoReportToGateNotify, metier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleGameInfoReportToGateNotify, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleGameInfoReportToGateNotify, masterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleGameInfoReportToGateNotify, pkvalue_),
  };
  CMessageRoleGameInfoReportToGateNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRoleGameInfoReportToGateNotify_descriptor_,
      CMessageRoleGameInfoReportToGateNotify::default_instance_,
      CMessageRoleGameInfoReportToGateNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleGameInfoReportToGateNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleGameInfoReportToGateNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRoleGameInfoReportToGateNotify));
  CMessageBattleTeamWait_descriptor_ = file->message_type(105);
  static const int CMessageBattleTeamWait_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleTeamWait, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleTeamWait, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleTeamWait, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleTeamWait, mapid_),
  };
  CMessageBattleTeamWait_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBattleTeamWait_descriptor_,
      CMessageBattleTeamWait::default_instance_,
      CMessageBattleTeamWait_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleTeamWait, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleTeamWait, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBattleTeamWait));
  CMessageBattleWaitLeaveRequest_descriptor_ = file->message_type(106);
  static const int CMessageBattleWaitLeaveRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleWaitLeaveRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleWaitLeaveRequest, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleWaitLeaveRequest, mapid_),
  };
  CMessageBattleWaitLeaveRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBattleWaitLeaveRequest_descriptor_,
      CMessageBattleWaitLeaveRequest::default_instance_,
      CMessageBattleWaitLeaveRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleWaitLeaveRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleWaitLeaveRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBattleWaitLeaveRequest));
  CMessageBattleJoinNotice_descriptor_ = file->message_type(107);
  static const int CMessageBattleJoinNotice_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleJoinNotice, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleJoinNotice, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleJoinNotice, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleJoinNotice, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleJoinNotice, battletime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleJoinNotice, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleJoinNotice, intolastrepetion_),
  };
  CMessageBattleJoinNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBattleJoinNotice_descriptor_,
      CMessageBattleJoinNotice::default_instance_,
      CMessageBattleJoinNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleJoinNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleJoinNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBattleJoinNotice));
  CMessageBattlePlayerJoin_descriptor_ = file->message_type(108);
  static const int CMessageBattlePlayerJoin_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattlePlayerJoin, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattlePlayerJoin, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattlePlayerJoin, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattlePlayerJoin, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattlePlayerJoin, mapid_),
  };
  CMessageBattlePlayerJoin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBattlePlayerJoin_descriptor_,
      CMessageBattlePlayerJoin::default_instance_,
      CMessageBattlePlayerJoin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattlePlayerJoin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattlePlayerJoin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBattlePlayerJoin));
  CMessageBattleWaitNotice_descriptor_ = file->message_type(109);
  static const int CMessageBattleWaitNotice_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleWaitNotice, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleWaitNotice, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleWaitNotice, mapid_),
  };
  CMessageBattleWaitNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBattleWaitNotice_descriptor_,
      CMessageBattleWaitNotice::default_instance_,
      CMessageBattleWaitNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleWaitNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleWaitNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBattleWaitNotice));
  CMessageServerValidateRequest_descriptor_ = file->message_type(110);
  static const int CMessageServerValidateRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageServerValidateRequest, macaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageServerValidateRequest, ipaddr_),
  };
  CMessageServerValidateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageServerValidateRequest_descriptor_,
      CMessageServerValidateRequest::default_instance_,
      CMessageServerValidateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageServerValidateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageServerValidateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageServerValidateRequest));
  CMessageBattleWaitLeaveResponse_descriptor_ = file->message_type(111);
  static const int CMessageBattleWaitLeaveResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleWaitLeaveResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleWaitLeaveResponse, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleWaitLeaveResponse, mapid_),
  };
  CMessageBattleWaitLeaveResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBattleWaitLeaveResponse_descriptor_,
      CMessageBattleWaitLeaveResponse::default_instance_,
      CMessageBattleWaitLeaveResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleWaitLeaveResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleWaitLeaveResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBattleWaitLeaveResponse));
  CMessageServerValidateResponse_descriptor_ = file->message_type(112);
  static const int CMessageServerValidateResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageServerValidateResponse, checkresult_),
  };
  CMessageServerValidateResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageServerValidateResponse_descriptor_,
      CMessageServerValidateResponse::default_instance_,
      CMessageServerValidateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageServerValidateResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageServerValidateResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageServerValidateResponse));
  CTracedPlayerInfo_descriptor_ = file->message_type(113);
  static const int CTracedPlayerInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTracedPlayerInfo, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTracedPlayerInfo, roleid_),
  };
  CTracedPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CTracedPlayerInfo_descriptor_,
      CTracedPlayerInfo::default_instance_,
      CTracedPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTracedPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTracedPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CTracedPlayerInfo));
  CMessageNotifyTracedPlayer_descriptor_ = file->message_type(114);
  static const int CMessageNotifyTracedPlayer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifyTracedPlayer, playerlist_),
  };
  CMessageNotifyTracedPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageNotifyTracedPlayer_descriptor_,
      CMessageNotifyTracedPlayer::default_instance_,
      CMessageNotifyTracedPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifyTracedPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifyTracedPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageNotifyTracedPlayer));
  CMessageBattleCreateRequest_descriptor_ = file->message_type(115);
  static const int CMessageBattleCreateRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleCreateRequest, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleCreateRequest, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleCreateRequest, mapid_),
  };
  CMessageBattleCreateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBattleCreateRequest_descriptor_,
      CMessageBattleCreateRequest::default_instance_,
      CMessageBattleCreateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleCreateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleCreateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBattleCreateRequest));
  CMessageBattleCreateResponse_descriptor_ = file->message_type(116);
  static const int CMessageBattleCreateResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleCreateResponse, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleCreateResponse, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleCreateResponse, mapid_),
  };
  CMessageBattleCreateResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBattleCreateResponse_descriptor_,
      CMessageBattleCreateResponse::default_instance_,
      CMessageBattleCreateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleCreateResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleCreateResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBattleCreateResponse));
  CMessageFamilyIDNameNotify_descriptor_ = file->message_type(117);
  static const int CMessageFamilyIDNameNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyIDNameNotify, familyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyIDNameNotify, familyname_),
  };
  CMessageFamilyIDNameNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFamilyIDNameNotify_descriptor_,
      CMessageFamilyIDNameNotify::default_instance_,
      CMessageFamilyIDNameNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyIDNameNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyIDNameNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFamilyIDNameNotify));
  PBCorpsNpc_descriptor_ = file->message_type(118);
  static const int PBCorpsNpc_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsNpc, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsNpc, corpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsNpc, corpsname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsNpc, type_),
  };
  PBCorpsNpc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCorpsNpc_descriptor_,
      PBCorpsNpc::default_instance_,
      PBCorpsNpc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsNpc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsNpc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCorpsNpc));
  CMessageNpcListNotify_descriptor_ = file->message_type(119);
  static const int CMessageNpcListNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNpcListNotify, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNpcListNotify, familyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNpcListNotify, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNpcListNotify, corpsnpc_),
  };
  CMessageNpcListNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageNpcListNotify_descriptor_,
      CMessageNpcListNotify::default_instance_,
      CMessageNpcListNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNpcListNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNpcListNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageNpcListNotify));
  CMessageBidTimeOutNotify_descriptor_ = file->message_type(120);
  static const int CMessageBidTimeOutNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBidTimeOutNotify, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBidTimeOutNotify, first_),
  };
  CMessageBidTimeOutNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBidTimeOutNotify_descriptor_,
      CMessageBidTimeOutNotify::default_instance_,
      CMessageBidTimeOutNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBidTimeOutNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBidTimeOutNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBidTimeOutNotify));
  CMessageBattleStartRequest_descriptor_ = file->message_type(121);
  static const int CMessageBattleStartRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleStartRequest, npcid_),
  };
  CMessageBattleStartRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBattleStartRequest_descriptor_,
      CMessageBattleStartRequest::default_instance_,
      CMessageBattleStartRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleStartRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleStartRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBattleStartRequest));
  CMessageBattleStartResponse_descriptor_ = file->message_type(122);
  static const int CMessageBattleStartResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleStartResponse, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleStartResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleStartResponse, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleStartResponse, money_),
  };
  CMessageBattleStartResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBattleStartResponse_descriptor_,
      CMessageBattleStartResponse::default_instance_,
      CMessageBattleStartResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleStartResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleStartResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBattleStartResponse));
  CMessageBattleEndNotify_descriptor_ = file->message_type(123);
  static const int CMessageBattleEndNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleEndNotify, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleEndNotify, winside_),
  };
  CMessageBattleEndNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBattleEndNotify_descriptor_,
      CMessageBattleEndNotify::default_instance_,
      CMessageBattleEndNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleEndNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleEndNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBattleEndNotify));
  CMessageBidRestartNotify_descriptor_ = file->message_type(124);
  static const int CMessageBidRestartNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBidRestartNotify, npcid_),
  };
  CMessageBidRestartNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBidRestartNotify_descriptor_,
      CMessageBidRestartNotify::default_instance_,
      CMessageBidRestartNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBidRestartNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBidRestartNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBidRestartNotify));
  CMessageObtainTopTenRequest_descriptor_ = file->message_type(125);
  static const int CMessageObtainTopTenRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainTopTenRequest, charid_),
  };
  CMessageObtainTopTenRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageObtainTopTenRequest_descriptor_,
      CMessageObtainTopTenRequest::default_instance_,
      CMessageObtainTopTenRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainTopTenRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainTopTenRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageObtainTopTenRequest));
  PBRankTitle_descriptor_ = file->message_type(126);
  static const int PBRankTitle_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRankTitle, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRankTitle, ranktype_),
  };
  PBRankTitle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBRankTitle_descriptor_,
      PBRankTitle::default_instance_,
      PBRankTitle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRankTitle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRankTitle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBRankTitle));
  CMessageObtainTopTenResponse_descriptor_ = file->message_type(127);
  static const int CMessageObtainTopTenResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainTopTenResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainTopTenResponse, ranktitle_),
  };
  CMessageObtainTopTenResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageObtainTopTenResponse_descriptor_,
      CMessageObtainTopTenResponse::default_instance_,
      CMessageObtainTopTenResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainTopTenResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainTopTenResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageObtainTopTenResponse));
  CMessageCorpsBidTimerStopRequest_descriptor_ = file->message_type(128);
  static const int CMessageCorpsBidTimerStopRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBidTimerStopRequest, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBidTimerStopRequest, battleid_),
  };
  CMessageCorpsBidTimerStopRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsBidTimerStopRequest_descriptor_,
      CMessageCorpsBidTimerStopRequest::default_instance_,
      CMessageCorpsBidTimerStopRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBidTimerStopRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBidTimerStopRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsBidTimerStopRequest));
  CMessageCorpsJoinBattleNotice_descriptor_ = file->message_type(129);
  static const int CMessageCorpsJoinBattleNotice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsJoinBattleNotice, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsJoinBattleNotice, npcid_),
  };
  CMessageCorpsJoinBattleNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsJoinBattleNotice_descriptor_,
      CMessageCorpsJoinBattleNotice::default_instance_,
      CMessageCorpsJoinBattleNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsJoinBattleNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsJoinBattleNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsJoinBattleNotice));
  CMessageNotifyBattleResult2Gate_descriptor_ = file->message_type(130);
  static const int CMessageNotifyBattleResult2Gate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifyBattleResult2Gate, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifyBattleResult2Gate, wincamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifyBattleResult2Gate, battlekey_),
  };
  CMessageNotifyBattleResult2Gate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageNotifyBattleResult2Gate_descriptor_,
      CMessageNotifyBattleResult2Gate::default_instance_,
      CMessageNotifyBattleResult2Gate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifyBattleResult2Gate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNotifyBattleResult2Gate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageNotifyBattleResult2Gate));
  CMessageCorpsBattleFlagRequest_descriptor_ = file->message_type(131);
  static const int CMessageCorpsBattleFlagRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBattleFlagRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBattleFlagRequest, corpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBattleFlagRequest, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBattleFlagRequest, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBattleFlagRequest, isall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBattleFlagRequest, battlekey_),
  };
  CMessageCorpsBattleFlagRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsBattleFlagRequest_descriptor_,
      CMessageCorpsBattleFlagRequest::default_instance_,
      CMessageCorpsBattleFlagRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBattleFlagRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBattleFlagRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsBattleFlagRequest));
  CMessageCorpsBattleFlagResponse_descriptor_ = file->message_type(132);
  static const int CMessageCorpsBattleFlagResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBattleFlagResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBattleFlagResponse, corpsname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBattleFlagResponse, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBattleFlagResponse, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBattleFlagResponse, isall_),
  };
  CMessageCorpsBattleFlagResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsBattleFlagResponse_descriptor_,
      CMessageCorpsBattleFlagResponse::default_instance_,
      CMessageCorpsBattleFlagResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBattleFlagResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBattleFlagResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsBattleFlagResponse));
  CMessageCreateRepetionNotify_descriptor_ = file->message_type(133);
  static const int CMessageCreateRepetionNotify_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateRepetionNotify, repetionindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateRepetionNotify, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateRepetionNotify, parame1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateRepetionNotify, parame2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateRepetionNotify, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateRepetionNotify, creator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateRepetionNotify, removeitem_),
  };
  CMessageCreateRepetionNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCreateRepetionNotify_descriptor_,
      CMessageCreateRepetionNotify::default_instance_,
      CMessageCreateRepetionNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateRepetionNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateRepetionNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCreateRepetionNotify));
  CMessageCreateRepetionErr_descriptor_ = file->message_type(134);
  static const int CMessageCreateRepetionErr_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateRepetionErr, repetionindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateRepetionErr, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateRepetionErr, errcode_),
  };
  CMessageCreateRepetionErr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCreateRepetionErr_descriptor_,
      CMessageCreateRepetionErr::default_instance_,
      CMessageCreateRepetionErr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateRepetionErr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateRepetionErr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCreateRepetionErr));
  CMessageTeamIntoRepetion_descriptor_ = file->message_type(135);
  static const int CMessageTeamIntoRepetion_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamIntoRepetion, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamIntoRepetion, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamIntoRepetion, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamIntoRepetion, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamIntoRepetion, parame1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamIntoRepetion, parame2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamIntoRepetion, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamIntoRepetion, removeitem_),
  };
  CMessageTeamIntoRepetion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTeamIntoRepetion_descriptor_,
      CMessageTeamIntoRepetion::default_instance_,
      CMessageTeamIntoRepetion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamIntoRepetion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeamIntoRepetion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTeamIntoRepetion));
  CMessageSingleIntoRepetion_descriptor_ = file->message_type(136);
  static const int CMessageSingleIntoRepetion_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSingleIntoRepetion, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSingleIntoRepetion, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSingleIntoRepetion, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSingleIntoRepetion, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSingleIntoRepetion, parame1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSingleIntoRepetion, parame2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSingleIntoRepetion, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSingleIntoRepetion, removeitem_),
  };
  CMessageSingleIntoRepetion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageSingleIntoRepetion_descriptor_,
      CMessageSingleIntoRepetion::default_instance_,
      CMessageSingleIntoRepetion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSingleIntoRepetion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSingleIntoRepetion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageSingleIntoRepetion));
  CMessageCorpsStartBattleRequest_descriptor_ = file->message_type(137);
  static const int CMessageCorpsStartBattleRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsStartBattleRequest, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsStartBattleRequest, battleid_),
  };
  CMessageCorpsStartBattleRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsStartBattleRequest_descriptor_,
      CMessageCorpsStartBattleRequest::default_instance_,
      CMessageCorpsStartBattleRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsStartBattleRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsStartBattleRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsStartBattleRequest));
  CMessageIntoRepetionNotify_descriptor_ = file->message_type(138);
  static const int CMessageIntoRepetionNotify_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageIntoRepetionNotify, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageIntoRepetionNotify, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageIntoRepetionNotify, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageIntoRepetionNotify, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageIntoRepetionNotify, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageIntoRepetionNotify, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageIntoRepetionNotify, repetionindex_),
  };
  CMessageIntoRepetionNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageIntoRepetionNotify_descriptor_,
      CMessageIntoRepetionNotify::default_instance_,
      CMessageIntoRepetionNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageIntoRepetionNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageIntoRepetionNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageIntoRepetionNotify));
  CMessageChangeFamilyContributeNotify_descriptor_ = file->message_type(139);
  static const int CMessageChangeFamilyContributeNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyContributeNotify, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyContributeNotify, contribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyContributeNotify, changetype_),
  };
  CMessageChangeFamilyContributeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeFamilyContributeNotify_descriptor_,
      CMessageChangeFamilyContributeNotify::default_instance_,
      CMessageChangeFamilyContributeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyContributeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyContributeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeFamilyContributeNotify));
  CMessageChangeFamilyGloryNotify_descriptor_ = file->message_type(140);
  static const int CMessageChangeFamilyGloryNotify_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyGloryNotify, familyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyGloryNotify, glory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyGloryNotify, ifreduced_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyGloryNotify, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyGloryNotify, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyGloryNotify, rolename_),
  };
  CMessageChangeFamilyGloryNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeFamilyGloryNotify_descriptor_,
      CMessageChangeFamilyGloryNotify::default_instance_,
      CMessageChangeFamilyGloryNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyGloryNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyGloryNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeFamilyGloryNotify));
  CMessageChangeFamilyMoneyNotify_descriptor_ = file->message_type(141);
  static const int CMessageChangeFamilyMoneyNotify_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyMoneyNotify, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyMoneyNotify, ifpayout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyMoneyNotify, familyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyMoneyNotify, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyMoneyNotify, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyMoneyNotify, rolename_),
  };
  CMessageChangeFamilyMoneyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeFamilyMoneyNotify_descriptor_,
      CMessageChangeFamilyMoneyNotify::default_instance_,
      CMessageChangeFamilyMoneyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyMoneyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyMoneyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeFamilyMoneyNotify));
  CMessageSynIbStoreRequest_descriptor_ = file->message_type(142);
  static const int CMessageSynIbStoreRequest_offsets_[1] = {
  };
  CMessageSynIbStoreRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageSynIbStoreRequest_descriptor_,
      CMessageSynIbStoreRequest::default_instance_,
      CMessageSynIbStoreRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSynIbStoreRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSynIbStoreRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageSynIbStoreRequest));
  CMessageSynIbStoreResponse_descriptor_ = file->message_type(143);
  static const int CMessageSynIbStoreResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSynIbStoreResponse, goods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSynIbStoreResponse, ibstore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSynIbStoreResponse, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSynIbStoreResponse, focustab_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSynIbStoreResponse, bulletin_),
  };
  CMessageSynIbStoreResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageSynIbStoreResponse_descriptor_,
      CMessageSynIbStoreResponse::default_instance_,
      CMessageSynIbStoreResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSynIbStoreResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSynIbStoreResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageSynIbStoreResponse));
  CMessageSynFuncStoreRequest_descriptor_ = file->message_type(144);
  static const int CMessageSynFuncStoreRequest_offsets_[1] = {
  };
  CMessageSynFuncStoreRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageSynFuncStoreRequest_descriptor_,
      CMessageSynFuncStoreRequest::default_instance_,
      CMessageSynFuncStoreRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSynFuncStoreRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSynFuncStoreRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageSynFuncStoreRequest));
  CMessageSynFuncStoreResponse_descriptor_ = file->message_type(145);
  static const int CMessageSynFuncStoreResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSynFuncStoreResponse, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSynFuncStoreResponse, funcstore_),
  };
  CMessageSynFuncStoreResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageSynFuncStoreResponse_descriptor_,
      CMessageSynFuncStoreResponse::default_instance_,
      CMessageSynFuncStoreResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSynFuncStoreResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSynFuncStoreResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageSynFuncStoreResponse));
  CMessageChangeCorpsContributeNotify_descriptor_ = file->message_type(146);
  static const int CMessageChangeCorpsContributeNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsContributeNotify, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsContributeNotify, contribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsContributeNotify, changetype_),
  };
  CMessageChangeCorpsContributeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeCorpsContributeNotify_descriptor_,
      CMessageChangeCorpsContributeNotify::default_instance_,
      CMessageChangeCorpsContributeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsContributeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsContributeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeCorpsContributeNotify));
  CMessageChangeCorpsGloryNotify_descriptor_ = file->message_type(147);
  static const int CMessageChangeCorpsGloryNotify_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsGloryNotify, corpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsGloryNotify, glory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsGloryNotify, ifreduced_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsGloryNotify, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsGloryNotify, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsGloryNotify, rolename_),
  };
  CMessageChangeCorpsGloryNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeCorpsGloryNotify_descriptor_,
      CMessageChangeCorpsGloryNotify::default_instance_,
      CMessageChangeCorpsGloryNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsGloryNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsGloryNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeCorpsGloryNotify));
  CMessageChangeCorpsMoneyNotify_descriptor_ = file->message_type(148);
  static const int CMessageChangeCorpsMoneyNotify_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsMoneyNotify, corpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsMoneyNotify, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsMoneyNotify, ifpayout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsMoneyNotify, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsMoneyNotify, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsMoneyNotify, rolename_),
  };
  CMessageChangeCorpsMoneyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeCorpsMoneyNotify_descriptor_,
      CMessageChangeCorpsMoneyNotify::default_instance_,
      CMessageChangeCorpsMoneyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsMoneyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsMoneyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeCorpsMoneyNotify));
  CMessageChangeCorpsBossTimes_descriptor_ = file->message_type(149);
  static const int CMessageChangeCorpsBossTimes_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsBossTimes, corpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsBossTimes, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsBossTimes, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsBossTimes, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsBossTimes, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsBossTimes, reason_),
  };
  CMessageChangeCorpsBossTimes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeCorpsBossTimes_descriptor_,
      CMessageChangeCorpsBossTimes::default_instance_,
      CMessageChangeCorpsBossTimes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsBossTimes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsBossTimes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeCorpsBossTimes));
  CMessageChangeCorpsBossRefineValue_descriptor_ = file->message_type(150);
  static const int CMessageChangeCorpsBossRefineValue_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsBossRefineValue, corpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsBossRefineValue, refinevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsBossRefineValue, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsBossRefineValue, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsBossRefineValue, rolename_),
  };
  CMessageChangeCorpsBossRefineValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeCorpsBossRefineValue_descriptor_,
      CMessageChangeCorpsBossRefineValue::default_instance_,
      CMessageChangeCorpsBossRefineValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsBossRefineValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsBossRefineValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeCorpsBossRefineValue));
  CMessageChangeCorpsCollectActive_descriptor_ = file->message_type(151);
  static const int CMessageChangeCorpsCollectActive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsCollectActive, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsCollectActive, activevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsCollectActive, changetype_),
  };
  CMessageChangeCorpsCollectActive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeCorpsCollectActive_descriptor_,
      CMessageChangeCorpsCollectActive::default_instance_,
      CMessageChangeCorpsCollectActive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsCollectActive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCorpsCollectActive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeCorpsCollectActive));
  CMessageFamilyApExpChangedNotify_descriptor_ = file->message_type(152);
  static const int CMessageFamilyApExpChangedNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyApExpChangedNotify, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyApExpChangedNotify, famiyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyApExpChangedNotify, ap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyApExpChangedNotify, exp_),
  };
  CMessageFamilyApExpChangedNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFamilyApExpChangedNotify_descriptor_,
      CMessageFamilyApExpChangedNotify::default_instance_,
      CMessageFamilyApExpChangedNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyApExpChangedNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyApExpChangedNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFamilyApExpChangedNotify));
  CMessageCorpsApExpChangedNotify_descriptor_ = file->message_type(153);
  static const int CMessageCorpsApExpChangedNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsApExpChangedNotify, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsApExpChangedNotify, corpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsApExpChangedNotify, ap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsApExpChangedNotify, exp_),
  };
  CMessageCorpsApExpChangedNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsApExpChangedNotify_descriptor_,
      CMessageCorpsApExpChangedNotify::default_instance_,
      CMessageCorpsApExpChangedNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsApExpChangedNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsApExpChangedNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsApExpChangedNotify));
  CMessageChangeJudgeScoreReuqest_descriptor_ = file->message_type(154);
  static const int CMessageChangeJudgeScoreReuqest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeJudgeScoreReuqest, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeJudgeScoreReuqest, total_),
  };
  CMessageChangeJudgeScoreReuqest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeJudgeScoreReuqest_descriptor_,
      CMessageChangeJudgeScoreReuqest::default_instance_,
      CMessageChangeJudgeScoreReuqest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeJudgeScoreReuqest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeJudgeScoreReuqest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeJudgeScoreReuqest));
  CMessageChangeWizardRequest_descriptor_ = file->message_type(155);
  static const int CMessageChangeWizardRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeWizardRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeWizardRequest, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeWizardRequest, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeWizardRequest, changetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeWizardRequest, wizardvalue_),
  };
  CMessageChangeWizardRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeWizardRequest_descriptor_,
      CMessageChangeWizardRequest::default_instance_,
      CMessageChangeWizardRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeWizardRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeWizardRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeWizardRequest));
  CMessageChangeWizardResponse_descriptor_ = file->message_type(156);
  static const int CMessageChangeWizardResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeWizardResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeWizardResponse, result_),
  };
  CMessageChangeWizardResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeWizardResponse_descriptor_,
      CMessageChangeWizardResponse::default_instance_,
      CMessageChangeWizardResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeWizardResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeWizardResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeWizardResponse));
  CMessageChangeConstructRequest_descriptor_ = file->message_type(157);
  static const int CMessageChangeConstructRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeConstructRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeConstructRequest, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeConstructRequest, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeConstructRequest, changetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeConstructRequest, constructtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeConstructRequest, constructvalue_),
  };
  CMessageChangeConstructRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeConstructRequest_descriptor_,
      CMessageChangeConstructRequest::default_instance_,
      CMessageChangeConstructRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeConstructRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeConstructRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeConstructRequest));
  CMessageChangeConstructResponse_descriptor_ = file->message_type(158);
  static const int CMessageChangeConstructResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeConstructResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeConstructResponse, result_),
  };
  CMessageChangeConstructResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeConstructResponse_descriptor_,
      CMessageChangeConstructResponse::default_instance_,
      CMessageChangeConstructResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeConstructResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeConstructResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeConstructResponse));
  CMessageChangePowerRequest_descriptor_ = file->message_type(159);
  static const int CMessageChangePowerRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangePowerRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangePowerRequest, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangePowerRequest, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangePowerRequest, changetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangePowerRequest, powervalue_),
  };
  CMessageChangePowerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangePowerRequest_descriptor_,
      CMessageChangePowerRequest::default_instance_,
      CMessageChangePowerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangePowerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangePowerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangePowerRequest));
  CMessageChangePowerResponse_descriptor_ = file->message_type(160);
  static const int CMessageChangePowerResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangePowerResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangePowerResponse, result_),
  };
  CMessageChangePowerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangePowerResponse_descriptor_,
      CMessageChangePowerResponse::default_instance_,
      CMessageChangePowerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangePowerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangePowerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangePowerResponse));
  CMessageUseFunctionNotify_descriptor_ = file->message_type(161);
  static const int CMessageUseFunctionNotify_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseFunctionNotify, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseFunctionNotify, functiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseFunctionNotify, functionorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseFunctionNotify, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseFunctionNotify, worldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseFunctionNotify, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseFunctionNotify, srcname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseFunctionNotify, teleport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseFunctionNotify, corpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseFunctionNotify, familyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseFunctionNotify, tokenid_),
  };
  CMessageUseFunctionNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUseFunctionNotify_descriptor_,
      CMessageUseFunctionNotify::default_instance_,
      CMessageUseFunctionNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseFunctionNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseFunctionNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUseFunctionNotify));
  CMessageSetOfficialNotify_descriptor_ = file->message_type(162);
  static const int CMessageSetOfficialNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetOfficialNotify, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetOfficialNotify, officiallevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetOfficialNotify, officialorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetOfficialNotify, targetid_),
  };
  CMessageSetOfficialNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageSetOfficialNotify_descriptor_,
      CMessageSetOfficialNotify::default_instance_,
      CMessageSetOfficialNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetOfficialNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSetOfficialNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageSetOfficialNotify));
  CMessageChangeFriendNotify_descriptor_ = file->message_type(163);
  static const int CMessageChangeFriendNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFriendNotify, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFriendNotify, changetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFriendNotify, srcworld_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFriendNotify, desworld_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFriendNotify, changevalue_),
  };
  CMessageChangeFriendNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeFriendNotify_descriptor_,
      CMessageChangeFriendNotify::default_instance_,
      CMessageChangeFriendNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFriendNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFriendNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeFriendNotify));
  CMessageKillPersonRequest_descriptor_ = file->message_type(164);
  static const int CMessageKillPersonRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKillPersonRequest, srccharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKillPersonRequest, descharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKillPersonRequest, honor_),
  };
  CMessageKillPersonRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageKillPersonRequest_descriptor_,
      CMessageKillPersonRequest::default_instance_,
      CMessageKillPersonRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKillPersonRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKillPersonRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageKillPersonRequest));
  CMessageKillPersonResponse_descriptor_ = file->message_type(165);
  static const int CMessageKillPersonResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKillPersonResponse, srccharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKillPersonResponse, descharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKillPersonResponse, pkvalue_),
  };
  CMessageKillPersonResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageKillPersonResponse_descriptor_,
      CMessageKillPersonResponse::default_instance_,
      CMessageKillPersonResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKillPersonResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKillPersonResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageKillPersonResponse));
  CMessageSyncNationNotify_descriptor_ = file->message_type(166);
  static const int CMessageSyncNationNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSyncNationNotify, nationstatus_),
  };
  CMessageSyncNationNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageSyncNationNotify_descriptor_,
      CMessageSyncNationNotify::default_instance_,
      CMessageSyncNationNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSyncNationNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSyncNationNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageSyncNationNotify));
  CMessageBuyFamilyItemRequest_descriptor_ = file->message_type(167);
  static const int CMessageBuyFamilyItemRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBuyFamilyItemRequest, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBuyFamilyItemRequest, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBuyFamilyItemRequest, familyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBuyFamilyItemRequest, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBuyFamilyItemRequest, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBuyFamilyItemRequest, totalcost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBuyFamilyItemRequest, npctmpid_),
  };
  CMessageBuyFamilyItemRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBuyFamilyItemRequest_descriptor_,
      CMessageBuyFamilyItemRequest::default_instance_,
      CMessageBuyFamilyItemRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBuyFamilyItemRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBuyFamilyItemRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBuyFamilyItemRequest));
  CMessageBuyFamilyItemResponse_descriptor_ = file->message_type(168);
  static const int CMessageBuyFamilyItemResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBuyFamilyItemResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBuyFamilyItemResponse, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBuyFamilyItemResponse, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBuyFamilyItemResponse, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBuyFamilyItemResponse, itemnum_),
  };
  CMessageBuyFamilyItemResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBuyFamilyItemResponse_descriptor_,
      CMessageBuyFamilyItemResponse::default_instance_,
      CMessageBuyFamilyItemResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBuyFamilyItemResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBuyFamilyItemResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBuyFamilyItemResponse));
  CMessageBuyCorpsItemRequest_descriptor_ = file->message_type(169);
  static const int CMessageBuyCorpsItemRequest_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBuyCorpsItemRequest, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBuyCorpsItemRequest, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBuyCorpsItemRequest, corpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBuyCorpsItemRequest, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBuyCorpsItemRequest, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBuyCorpsItemRequest, totalcost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBuyCorpsItemRequest, npctmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBuyCorpsItemRequest, citymapid_),
  };
  CMessageBuyCorpsItemRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBuyCorpsItemRequest_descriptor_,
      CMessageBuyCorpsItemRequest::default_instance_,
      CMessageBuyCorpsItemRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBuyCorpsItemRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBuyCorpsItemRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBuyCorpsItemRequest));
  CMessageBuyCorpsItemResponse_descriptor_ = file->message_type(170);
  static const int CMessageBuyCorpsItemResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBuyCorpsItemResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBuyCorpsItemResponse, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBuyCorpsItemResponse, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBuyCorpsItemResponse, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBuyCorpsItemResponse, itemnum_),
  };
  CMessageBuyCorpsItemResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBuyCorpsItemResponse_descriptor_,
      CMessageBuyCorpsItemResponse::default_instance_,
      CMessageBuyCorpsItemResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBuyCorpsItemResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBuyCorpsItemResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBuyCorpsItemResponse));
  CMessageClearFamilyRepetionInfoNotify_descriptor_ = file->message_type(171);
  static const int CMessageClearFamilyRepetionInfoNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageClearFamilyRepetionInfoNotify, familyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageClearFamilyRepetionInfoNotify, repetionscore_),
  };
  CMessageClearFamilyRepetionInfoNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageClearFamilyRepetionInfoNotify_descriptor_,
      CMessageClearFamilyRepetionInfoNotify::default_instance_,
      CMessageClearFamilyRepetionInfoNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageClearFamilyRepetionInfoNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageClearFamilyRepetionInfoNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageClearFamilyRepetionInfoNotify));
  CMessageJudgeModifySuccessNotice_descriptor_ = file->message_type(172);
  static const int CMessageJudgeModifySuccessNotice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJudgeModifySuccessNotice, charid_),
  };
  CMessageJudgeModifySuccessNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageJudgeModifySuccessNotice_descriptor_,
      CMessageJudgeModifySuccessNotice::default_instance_,
      CMessageJudgeModifySuccessNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJudgeModifySuccessNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageJudgeModifySuccessNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageJudgeModifySuccessNotice));
  CMessage4EQueryYuanBaoRequest_descriptor_ = file->message_type(173);
  static const int CMessage4EQueryYuanBaoRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessage4EQueryYuanBaoRequest, roleid_),
  };
  CMessage4EQueryYuanBaoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessage4EQueryYuanBaoRequest_descriptor_,
      CMessage4EQueryYuanBaoRequest::default_instance_,
      CMessage4EQueryYuanBaoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessage4EQueryYuanBaoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessage4EQueryYuanBaoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessage4EQueryYuanBaoRequest));
  CMessage4EQueryYuanBaoResponse_descriptor_ = file->message_type(174);
  static const int CMessage4EQueryYuanBaoResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessage4EQueryYuanBaoResponse, resultcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessage4EQueryYuanBaoResponse, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessage4EQueryYuanBaoResponse, remain_),
  };
  CMessage4EQueryYuanBaoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessage4EQueryYuanBaoResponse_descriptor_,
      CMessage4EQueryYuanBaoResponse::default_instance_,
      CMessage4EQueryYuanBaoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessage4EQueryYuanBaoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessage4EQueryYuanBaoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessage4EQueryYuanBaoResponse));
  CMessage4EDrawYuanBaoRequest_descriptor_ = file->message_type(175);
  static const int CMessage4EDrawYuanBaoRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessage4EDrawYuanBaoRequest, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessage4EDrawYuanBaoRequest, draw_),
  };
  CMessage4EDrawYuanBaoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessage4EDrawYuanBaoRequest_descriptor_,
      CMessage4EDrawYuanBaoRequest::default_instance_,
      CMessage4EDrawYuanBaoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessage4EDrawYuanBaoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessage4EDrawYuanBaoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessage4EDrawYuanBaoRequest));
  CMessage4EDrawYuanBaoResponse_descriptor_ = file->message_type(176);
  static const int CMessage4EDrawYuanBaoResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessage4EDrawYuanBaoResponse, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessage4EDrawYuanBaoResponse, resultcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessage4EDrawYuanBaoResponse, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessage4EDrawYuanBaoResponse, leftamount_),
  };
  CMessage4EDrawYuanBaoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessage4EDrawYuanBaoResponse_descriptor_,
      CMessage4EDrawYuanBaoResponse::default_instance_,
      CMessage4EDrawYuanBaoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessage4EDrawYuanBaoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessage4EDrawYuanBaoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessage4EDrawYuanBaoResponse));
  CMessageFamilyExchangeRequest_descriptor_ = file->message_type(177);
  static const int CMessageFamilyExchangeRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyExchangeRequest, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyExchangeRequest, npctmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyExchangeRequest, composeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyExchangeRequest, familyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyExchangeRequest, itemnum_),
  };
  CMessageFamilyExchangeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFamilyExchangeRequest_descriptor_,
      CMessageFamilyExchangeRequest::default_instance_,
      CMessageFamilyExchangeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyExchangeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyExchangeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFamilyExchangeRequest));
  CMessageFamilyExchangeResponse_descriptor_ = file->message_type(178);
  static const int CMessageFamilyExchangeResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyExchangeResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyExchangeResponse, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyExchangeResponse, npctmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyExchangeResponse, composeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyExchangeResponse, itemnum_),
  };
  CMessageFamilyExchangeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFamilyExchangeResponse_descriptor_,
      CMessageFamilyExchangeResponse::default_instance_,
      CMessageFamilyExchangeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyExchangeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFamilyExchangeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFamilyExchangeResponse));
  CMessageCorpsExchangeRequest_descriptor_ = file->message_type(179);
  static const int CMessageCorpsExchangeRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsExchangeRequest, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsExchangeRequest, npctmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsExchangeRequest, composeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsExchangeRequest, corpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsExchangeRequest, itemnum_),
  };
  CMessageCorpsExchangeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsExchangeRequest_descriptor_,
      CMessageCorpsExchangeRequest::default_instance_,
      CMessageCorpsExchangeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsExchangeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsExchangeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsExchangeRequest));
  CMessageCorpsExchangeResponse_descriptor_ = file->message_type(180);
  static const int CMessageCorpsExchangeResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsExchangeResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsExchangeResponse, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsExchangeResponse, npctmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsExchangeResponse, composeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsExchangeResponse, itemnum_),
  };
  CMessageCorpsExchangeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsExchangeResponse_descriptor_,
      CMessageCorpsExchangeResponse::default_instance_,
      CMessageCorpsExchangeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsExchangeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsExchangeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsExchangeResponse));
  CMessageAddFamilyExchangeItemNotify_descriptor_ = file->message_type(181);
  static const int CMessageAddFamilyExchangeItemNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAddFamilyExchangeItemNotify, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAddFamilyExchangeItemNotify, familyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAddFamilyExchangeItemNotify, leaguebagtmpid_),
  };
  CMessageAddFamilyExchangeItemNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageAddFamilyExchangeItemNotify_descriptor_,
      CMessageAddFamilyExchangeItemNotify::default_instance_,
      CMessageAddFamilyExchangeItemNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAddFamilyExchangeItemNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAddFamilyExchangeItemNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageAddFamilyExchangeItemNotify));
  CMessageAddCorpsExchangeItemNotify_descriptor_ = file->message_type(182);
  static const int CMessageAddCorpsExchangeItemNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAddCorpsExchangeItemNotify, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAddCorpsExchangeItemNotify, corpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAddCorpsExchangeItemNotify, leaguebagtmpid_),
  };
  CMessageAddCorpsExchangeItemNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageAddCorpsExchangeItemNotify_descriptor_,
      CMessageAddCorpsExchangeItemNotify::default_instance_,
      CMessageAddCorpsExchangeItemNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAddCorpsExchangeItemNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAddCorpsExchangeItemNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageAddCorpsExchangeItemNotify));
  CMessageGateEntityGMMove_descriptor_ = file->message_type(183);
  static const int CMessageGateEntityGMMove_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGateEntityGMMove, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGateEntityGMMove, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGateEntityGMMove, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGateEntityGMMove, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGateEntityGMMove, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGateEntityGMMove, key_),
  };
  CMessageGateEntityGMMove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGateEntityGMMove_descriptor_,
      CMessageGateEntityGMMove::default_instance_,
      CMessageGateEntityGMMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGateEntityGMMove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGateEntityGMMove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGateEntityGMMove));
  CMessageSceneEntityGMMove_descriptor_ = file->message_type(184);
  static const int CMessageSceneEntityGMMove_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSceneEntityGMMove, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSceneEntityGMMove, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSceneEntityGMMove, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSceneEntityGMMove, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSceneEntityGMMove, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSceneEntityGMMove, key_),
  };
  CMessageSceneEntityGMMove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageSceneEntityGMMove_descriptor_,
      CMessageSceneEntityGMMove::default_instance_,
      CMessageSceneEntityGMMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSceneEntityGMMove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSceneEntityGMMove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageSceneEntityGMMove));
  SingleActivityObj_descriptor_ = file->message_type(185);
  static const int SingleActivityObj_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleActivityObj, activityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleActivityObj, timetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleActivityObj, timeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleActivityObj, lmtlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleActivityObj, maxtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleActivityObj, state_),
  };
  SingleActivityObj_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleActivityObj_descriptor_,
      SingleActivityObj::default_instance_,
      SingleActivityObj_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleActivityObj, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleActivityObj, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleActivityObj));
  DropInfo_descriptor_ = file->message_type(186);
  static const int DropInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropInfo, ogreid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropInfo, dropid_),
  };
  DropInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DropInfo_descriptor_,
      DropInfo::default_instance_,
      DropInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DropInfo));
  MapDrop_descriptor_ = file->message_type(187);
  static const int MapDrop_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapDrop, dropid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapDrop, droptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapDrop, mapids_),
  };
  MapDrop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapDrop_descriptor_,
      MapDrop::default_instance_,
      MapDrop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapDrop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapDrop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapDrop));
  SingleActivityInfo_descriptor_ = file->message_type(188);
  static const int SingleActivityInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleActivityInfo, activityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleActivityInfo, dropinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleActivityInfo, ogreindex_),
  };
  SingleActivityInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleActivityInfo_descriptor_,
      SingleActivityInfo::default_instance_,
      SingleActivityInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleActivityInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleActivityInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleActivityInfo));
  CMessageTodayActivitysNotify_descriptor_ = file->message_type(189);
  static const int CMessageTodayActivitysNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTodayActivitysNotify, activitylist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTodayActivitysNotify, activityinfo_),
  };
  CMessageTodayActivitysNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTodayActivitysNotify_descriptor_,
      CMessageTodayActivitysNotify::default_instance_,
      CMessageTodayActivitysNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTodayActivitysNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTodayActivitysNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTodayActivitysNotify));
  SingleActivity_descriptor_ = file->message_type(190);
  static const int SingleActivity_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleActivity, activityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleActivity, activitystate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleActivity, mapdrops_),
  };
  SingleActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleActivity_descriptor_,
      SingleActivity::default_instance_,
      SingleActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleActivity));
  CMessageActivityChangeNotify_descriptor_ = file->message_type(191);
  static const int CMessageActivityChangeNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageActivityChangeNotify, activitylist_),
  };
  CMessageActivityChangeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageActivityChangeNotify_descriptor_,
      CMessageActivityChangeNotify::default_instance_,
      CMessageActivityChangeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageActivityChangeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageActivityChangeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageActivityChangeNotify));
  CMessageChangePasswordStatusNotify_descriptor_ = file->message_type(192);
  static const int CMessageChangePasswordStatusNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangePasswordStatusNotify, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangePasswordStatusNotify, pwdstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangePasswordStatusNotify, password_),
  };
  CMessageChangePasswordStatusNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangePasswordStatusNotify_descriptor_,
      CMessageChangePasswordStatusNotify::default_instance_,
      CMessageChangePasswordStatusNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangePasswordStatusNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangePasswordStatusNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangePasswordStatusNotify));
  CMessageUpdateNationTitleNotice_descriptor_ = file->message_type(193);
  static const int CMessageUpdateNationTitleNotice_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateNationTitleNotice, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateNationTitleNotice, titleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateNationTitleNotice, isadd_),
  };
  CMessageUpdateNationTitleNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUpdateNationTitleNotice_descriptor_,
      CMessageUpdateNationTitleNotice::default_instance_,
      CMessageUpdateNationTitleNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateNationTitleNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateNationTitleNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUpdateNationTitleNotice));
  CMessageGetNationTitleListRequest_descriptor_ = file->message_type(194);
  static const int CMessageGetNationTitleListRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetNationTitleListRequest, roleid_),
  };
  CMessageGetNationTitleListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetNationTitleListRequest_descriptor_,
      CMessageGetNationTitleListRequest::default_instance_,
      CMessageGetNationTitleListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetNationTitleListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetNationTitleListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetNationTitleListRequest));
  CMessageGetNationTitleListResponse_descriptor_ = file->message_type(195);
  static const int CMessageGetNationTitleListResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetNationTitleListResponse, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetNationTitleListResponse, titlelist_),
  };
  CMessageGetNationTitleListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetNationTitleListResponse_descriptor_,
      CMessageGetNationTitleListResponse::default_instance_,
      CMessageGetNationTitleListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetNationTitleListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetNationTitleListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetNationTitleListResponse));
  CMessageSGProVipFlagNotice_descriptor_ = file->message_type(196);
  static const int CMessageSGProVipFlagNotice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSGProVipFlagNotice, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSGProVipFlagNotice, vipflag_),
  };
  CMessageSGProVipFlagNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageSGProVipFlagNotice_descriptor_,
      CMessageSGProVipFlagNotice::default_instance_,
      CMessageSGProVipFlagNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSGProVipFlagNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSGProVipFlagNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageSGProVipFlagNotice));
  CMessageResetRolePasswordNotify_descriptor_ = file->message_type(197);
  static const int CMessageResetRolePasswordNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageResetRolePasswordNotify, roleid_),
  };
  CMessageResetRolePasswordNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageResetRolePasswordNotify_descriptor_,
      CMessageResetRolePasswordNotify::default_instance_,
      CMessageResetRolePasswordNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageResetRolePasswordNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageResetRolePasswordNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageResetRolePasswordNotify));
  CMessgeSafeShutdownNotify_descriptor_ = file->message_type(198);
  static const int CMessgeSafeShutdownNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessgeSafeShutdownNotify, servertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessgeSafeShutdownNotify, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessgeSafeShutdownNotify, optype_),
  };
  CMessgeSafeShutdownNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessgeSafeShutdownNotify_descriptor_,
      CMessgeSafeShutdownNotify::default_instance_,
      CMessgeSafeShutdownNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessgeSafeShutdownNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessgeSafeShutdownNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessgeSafeShutdownNotify));
  CMessgeSafeShutdownAck_descriptor_ = file->message_type(199);
  static const int CMessgeSafeShutdownAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessgeSafeShutdownAck, servertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessgeSafeShutdownAck, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessgeSafeShutdownAck, optype_),
  };
  CMessgeSafeShutdownAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessgeSafeShutdownAck_descriptor_,
      CMessgeSafeShutdownAck::default_instance_,
      CMessgeSafeShutdownAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessgeSafeShutdownAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessgeSafeShutdownAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessgeSafeShutdownAck));
  CMessageRollCorpsMoneyRequest_descriptor_ = file->message_type(200);
  static const int CMessageRollCorpsMoneyRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRollCorpsMoneyRequest, isall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRollCorpsMoneyRequest, corpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRollCorpsMoneyRequest, npcid_),
  };
  CMessageRollCorpsMoneyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRollCorpsMoneyRequest_descriptor_,
      CMessageRollCorpsMoneyRequest::default_instance_,
      CMessageRollCorpsMoneyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRollCorpsMoneyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRollCorpsMoneyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRollCorpsMoneyRequest));
  CMessageCorpsBattleMapNotice_descriptor_ = file->message_type(201);
  static const int CMessageCorpsBattleMapNotice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBattleMapNotice, battlekey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBattleMapNotice, roleid_),
  };
  CMessageCorpsBattleMapNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCorpsBattleMapNotice_descriptor_,
      CMessageCorpsBattleMapNotice::default_instance_,
      CMessageCorpsBattleMapNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBattleMapNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCorpsBattleMapNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCorpsBattleMapNotice));
  CMessageTrySummonRequest_descriptor_ = file->message_type(202);
  static const int CMessageTrySummonRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTrySummonRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTrySummonRequest, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTrySummonRequest, itemindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTrySummonRequest, summontype_),
  };
  CMessageTrySummonRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTrySummonRequest_descriptor_,
      CMessageTrySummonRequest::default_instance_,
      CMessageTrySummonRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTrySummonRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTrySummonRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTrySummonRequest));
  CMessageTrySummonResponse_descriptor_ = file->message_type(203);
  static const int CMessageTrySummonResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTrySummonResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTrySummonResponse, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTrySummonResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTrySummonResponse, itemindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTrySummonResponse, summontype_),
  };
  CMessageTrySummonResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTrySummonResponse_descriptor_,
      CMessageTrySummonResponse::default_instance_,
      CMessageTrySummonResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTrySummonResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTrySummonResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTrySummonResponse));
  CMessageRealSummonRequest_descriptor_ = file->message_type(204);
  static const int CMessageRealSummonRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRealSummonRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRealSummonRequest, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRealSummonRequest, summontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRealSummonRequest, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRealSummonRequest, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRealSummonRequest, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRealSummonRequest, posy_),
  };
  CMessageRealSummonRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRealSummonRequest_descriptor_,
      CMessageRealSummonRequest::default_instance_,
      CMessageRealSummonRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRealSummonRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRealSummonRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRealSummonRequest));
  CMessageRealSummonNotify_descriptor_ = file->message_type(205);
  static const int CMessageRealSummonNotify_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRealSummonNotify, srccharname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRealSummonNotify, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRealSummonNotify, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRealSummonNotify, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRealSummonNotify, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRealSummonNotify, tokenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRealSummonNotify, descharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRealSummonNotify, familyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRealSummonNotify, corpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRealSummonNotify, srccharid_),
  };
  CMessageRealSummonNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRealSummonNotify_descriptor_,
      CMessageRealSummonNotify::default_instance_,
      CMessageRealSummonNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRealSummonNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRealSummonNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRealSummonNotify));
  CMessageLockGoodsRequest_descriptor_ = file->message_type(206);
  static const int CMessageLockGoodsRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLockGoodsRequest, goodsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLockGoodsRequest, lockcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLockGoodsRequest, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLockGoodsRequest, transobjid_),
  };
  CMessageLockGoodsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLockGoodsRequest_descriptor_,
      CMessageLockGoodsRequest::default_instance_,
      CMessageLockGoodsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLockGoodsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLockGoodsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLockGoodsRequest));
  CMessageLockGoodsResponse_descriptor_ = file->message_type(207);
  static const int CMessageLockGoodsResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLockGoodsResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLockGoodsResponse, goodsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLockGoodsResponse, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLockGoodsResponse, lockcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLockGoodsResponse, remain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLockGoodsResponse, transobjid_),
  };
  CMessageLockGoodsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLockGoodsResponse_descriptor_,
      CMessageLockGoodsResponse::default_instance_,
      CMessageLockGoodsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLockGoodsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLockGoodsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLockGoodsResponse));
  CMessageS2GRoleMove_descriptor_ = file->message_type(208);
  static const int CMessageS2GRoleMove_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2GRoleMove, srcrole_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2GRoleMove, desrole_),
  };
  CMessageS2GRoleMove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageS2GRoleMove_descriptor_,
      CMessageS2GRoleMove::default_instance_,
      CMessageS2GRoleMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2GRoleMove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2GRoleMove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageS2GRoleMove));
  CMessageG2SRoleMove_descriptor_ = file->message_type(209);
  static const int CMessageG2SRoleMove_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageG2SRoleMove, srcrole_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageG2SRoleMove, desrole_),
  };
  CMessageG2SRoleMove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageG2SRoleMove_descriptor_,
      CMessageG2SRoleMove::default_instance_,
      CMessageG2SRoleMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageG2SRoleMove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageG2SRoleMove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageG2SRoleMove));
  CMessageWarChangeNotify_descriptor_ = file->message_type(210);
  static const int CMessageWarChangeNotify_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarChangeNotify, worldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarChangeNotify, seedtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarChangeNotify, seedvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarChangeNotify, sourcetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarChangeNotify, sourcevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarChangeNotify, mapid_),
  };
  CMessageWarChangeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageWarChangeNotify_descriptor_,
      CMessageWarChangeNotify::default_instance_,
      CMessageWarChangeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarChangeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarChangeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageWarChangeNotify));
  CMessageReliveChangeNotify_descriptor_ = file->message_type(211);
  static const int CMessageReliveChangeNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReliveChangeNotify, worldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReliveChangeNotify, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReliveChangeNotify, warstatus_),
  };
  CMessageReliveChangeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageReliveChangeNotify_descriptor_,
      CMessageReliveChangeNotify::default_instance_,
      CMessageReliveChangeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReliveChangeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReliveChangeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageReliveChangeNotify));
  WarHonorData_descriptor_ = file->message_type(212);
  static const int WarHonorData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarHonorData, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarHonorData, warhonor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarHonorData, warkill_),
  };
  WarHonorData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WarHonorData_descriptor_,
      WarHonorData::default_instance_,
      WarHonorData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarHonorData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarHonorData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WarHonorData));
  CMessageObtainWarHonorNotify_descriptor_ = file->message_type(213);
  static const int CMessageObtainWarHonorNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainWarHonorNotify, warhonor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainWarHonorNotify, iskill_),
  };
  CMessageObtainWarHonorNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageObtainWarHonorNotify_descriptor_,
      CMessageObtainWarHonorNotify::default_instance_,
      CMessageObtainWarHonorNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainWarHonorNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainWarHonorNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageObtainWarHonorNotify));
  CMessageBourseG2SLoadList_descriptor_ = file->message_type(214);
  static const int CMessageBourseG2SLoadList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseG2SLoadList, listid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseG2SLoadList, buylist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseG2SLoadList, selllist_),
  };
  CMessageBourseG2SLoadList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBourseG2SLoadList_descriptor_,
      CMessageBourseG2SLoadList::default_instance_,
      CMessageBourseG2SLoadList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseG2SLoadList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseG2SLoadList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBourseG2SLoadList));
  CMessageBourseS2GLoadList_descriptor_ = file->message_type(215);
  static const int CMessageBourseS2GLoadList_offsets_[1] = {
  };
  CMessageBourseS2GLoadList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBourseS2GLoadList_descriptor_,
      CMessageBourseS2GLoadList::default_instance_,
      CMessageBourseS2GLoadList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseS2GLoadList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseS2GLoadList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBourseS2GLoadList));
  CMessageSyncWarStatusNotify_descriptor_ = file->message_type(216);
  static const int CMessageSyncWarStatusNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSyncWarStatusNotify, warstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSyncWarStatusNotify, warserial_),
  };
  CMessageSyncWarStatusNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageSyncWarStatusNotify_descriptor_,
      CMessageSyncWarStatusNotify::default_instance_,
      CMessageSyncWarStatusNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSyncWarStatusNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSyncWarStatusNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageSyncWarStatusNotify));
  CMessageWarControlNotify_descriptor_ = file->message_type(217);
  static const int CMessageWarControlNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarControlNotify, controlstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarControlNotify, gmhour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarControlNotify, gmmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarControlNotify, gmday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarControlNotify, warserial_),
  };
  CMessageWarControlNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageWarControlNotify_descriptor_,
      CMessageWarControlNotify::default_instance_,
      CMessageWarControlNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarControlNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarControlNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageWarControlNotify));
  CMessageBourseTradeNotice_descriptor_ = file->message_type(218);
  static const int CMessageBourseTradeNotice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseTradeNotice, buydetail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseTradeNotice, selldetail_),
  };
  CMessageBourseTradeNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBourseTradeNotice_descriptor_,
      CMessageBourseTradeNotice::default_instance_,
      CMessageBourseTradeNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseTradeNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseTradeNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBourseTradeNotice));
  CMessageReSavePlayerRequest_descriptor_ = file->message_type(219);
  static const int CMessageReSavePlayerRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReSavePlayerRequest, roleid_),
  };
  CMessageReSavePlayerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageReSavePlayerRequest_descriptor_,
      CMessageReSavePlayerRequest::default_instance_,
      CMessageReSavePlayerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReSavePlayerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReSavePlayerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageReSavePlayerRequest));
  CMessageReSavePlayerResponse_descriptor_ = file->message_type(220);
  static const int CMessageReSavePlayerResponse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReSavePlayerResponse, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReSavePlayerResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReSavePlayerResponse, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReSavePlayerResponse, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReSavePlayerResponse, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReSavePlayerResponse, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReSavePlayerResponse, posy_),
  };
  CMessageReSavePlayerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageReSavePlayerResponse_descriptor_,
      CMessageReSavePlayerResponse::default_instance_,
      CMessageReSavePlayerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReSavePlayerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReSavePlayerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageReSavePlayerResponse));
  CMessageBoursePlayerTradeBuyNotice_descriptor_ = file->message_type(221);
  static const int CMessageBoursePlayerTradeBuyNotice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBoursePlayerTradeBuyNotice, detail_),
  };
  CMessageBoursePlayerTradeBuyNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBoursePlayerTradeBuyNotice_descriptor_,
      CMessageBoursePlayerTradeBuyNotice::default_instance_,
      CMessageBoursePlayerTradeBuyNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBoursePlayerTradeBuyNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBoursePlayerTradeBuyNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBoursePlayerTradeBuyNotice));
  CMessageBoursePlayerTradeSellNotice_descriptor_ = file->message_type(222);
  static const int CMessageBoursePlayerTradeSellNotice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBoursePlayerTradeSellNotice, detail_),
  };
  CMessageBoursePlayerTradeSellNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBoursePlayerTradeSellNotice_descriptor_,
      CMessageBoursePlayerTradeSellNotice::default_instance_,
      CMessageBoursePlayerTradeSellNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBoursePlayerTradeSellNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBoursePlayerTradeSellNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBoursePlayerTradeSellNotice));
  CMessageWarStoneOverNotify_descriptor_ = file->message_type(223);
  static const int CMessageWarStoneOverNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarStoneOverNotify, mapid_),
  };
  CMessageWarStoneOverNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageWarStoneOverNotify_descriptor_,
      CMessageWarStoneOverNotify::default_instance_,
      CMessageWarStoneOverNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarStoneOverNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarStoneOverNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageWarStoneOverNotify));
  CMessageCreateWarStoneNotify_descriptor_ = file->message_type(224);
  static const int CMessageCreateWarStoneNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateWarStoneNotify, stonelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateWarStoneNotify, mapid_),
  };
  CMessageCreateWarStoneNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCreateWarStoneNotify_descriptor_,
      CMessageCreateWarStoneNotify::default_instance_,
      CMessageCreateWarStoneNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateWarStoneNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateWarStoneNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCreateWarStoneNotify));
  CMessageAddTaxNotify_descriptor_ = file->message_type(225);
  static const int CMessageAddTaxNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAddTaxNotify, money_),
  };
  CMessageAddTaxNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageAddTaxNotify_descriptor_,
      CMessageAddTaxNotify::default_instance_,
      CMessageAddTaxNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAddTaxNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAddTaxNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageAddTaxNotify));
  CMessageSendSysMailToPlayer_descriptor_ = file->message_type(226);
  static const int CMessageSendSysMailToPlayer_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSendSysMailToPlayer, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSendSysMailToPlayer, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSendSysMailToPlayer, sender_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSendSysMailToPlayer, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSendSysMailToPlayer, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSendSysMailToPlayer, receive_countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSendSysMailToPlayer, gateway_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSendSysMailToPlayer, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSendSysMailToPlayer, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSendSysMailToPlayer, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSendSysMailToPlayer, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSendSysMailToPlayer, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSendSysMailToPlayer, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSendSysMailToPlayer, mailsendtype_),
  };
  CMessageSendSysMailToPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageSendSysMailToPlayer_descriptor_,
      CMessageSendSysMailToPlayer::default_instance_,
      CMessageSendSysMailToPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSendSysMailToPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSendSysMailToPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageSendSysMailToPlayer));
  CMessageCampAddHonerScore_descriptor_ = file->message_type(227);
  static const int CMessageCampAddHonerScore_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCampAddHonerScore, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCampAddHonerScore, honer_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCampAddHonerScore, camp_id_),
  };
  CMessageCampAddHonerScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCampAddHonerScore_descriptor_,
      CMessageCampAddHonerScore::default_instance_,
      CMessageCampAddHonerScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCampAddHonerScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCampAddHonerScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCampAddHonerScore));
  CMessageBattleTeamFixWait_descriptor_ = file->message_type(228);
  static const int CMessageBattleTeamFixWait_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleTeamFixWait, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleTeamFixWait, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleTeamFixWait, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleTeamFixWait, mapid_),
  };
  CMessageBattleTeamFixWait_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBattleTeamFixWait_descriptor_,
      CMessageBattleTeamFixWait::default_instance_,
      CMessageBattleTeamFixWait_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleTeamFixWait, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleTeamFixWait, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBattleTeamFixWait));
  CMessageActivityEventNotify_descriptor_ = file->message_type(229);
  static const int CMessageActivityEventNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageActivityEventNotify, activityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageActivityEventNotify, eventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageActivityEventNotify, intparams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageActivityEventNotify, strparams_),
  };
  CMessageActivityEventNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageActivityEventNotify_descriptor_,
      CMessageActivityEventNotify::default_instance_,
      CMessageActivityEventNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageActivityEventNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageActivityEventNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageActivityEventNotify));
  CMessageAddMasterPointRequest_descriptor_ = file->message_type(230);
  static const int CMessageAddMasterPointRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAddMasterPointRequest, masterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAddMasterPointRequest, point_),
  };
  CMessageAddMasterPointRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageAddMasterPointRequest_descriptor_,
      CMessageAddMasterPointRequest::default_instance_,
      CMessageAddMasterPointRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAddMasterPointRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAddMasterPointRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageAddMasterPointRequest));
  CMessageAddMasterPointNotify_descriptor_ = file->message_type(231);
  static const int CMessageAddMasterPointNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAddMasterPointNotify, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAddMasterPointNotify, point_),
  };
  CMessageAddMasterPointNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageAddMasterPointNotify_descriptor_,
      CMessageAddMasterPointNotify::default_instance_,
      CMessageAddMasterPointNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAddMasterPointNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAddMasterPointNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageAddMasterPointNotify));
  CMessageBattleSingleFixWait_descriptor_ = file->message_type(232);
  static const int CMessageBattleSingleFixWait_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleSingleFixWait, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleSingleFixWait, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleSingleFixWait, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleSingleFixWait, mapid_),
  };
  CMessageBattleSingleFixWait_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBattleSingleFixWait_descriptor_,
      CMessageBattleSingleFixWait::default_instance_,
      CMessageBattleSingleFixWait_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleSingleFixWait, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleSingleFixWait, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBattleSingleFixWait));
  CMessageSpecialEventNotify_descriptor_ = file->message_type(233);
  static const int CMessageSpecialEventNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSpecialEventNotify, srcworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSpecialEventNotify, desworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSpecialEventNotify, eventtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSpecialEventNotify, charid_),
  };
  CMessageSpecialEventNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageSpecialEventNotify_descriptor_,
      CMessageSpecialEventNotify::default_instance_,
      CMessageSpecialEventNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSpecialEventNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSpecialEventNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageSpecialEventNotify));
  CMessageAcquireMasterNotify_descriptor_ = file->message_type(234);
  static const int CMessageAcquireMasterNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAcquireMasterNotify, slaveid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAcquireMasterNotify, masterid_),
  };
  CMessageAcquireMasterNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageAcquireMasterNotify_descriptor_,
      CMessageAcquireMasterNotify::default_instance_,
      CMessageAcquireMasterNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAcquireMasterNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAcquireMasterNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageAcquireMasterNotify));
  CMessageBattleWinnerNotify_descriptor_ = file->message_type(235);
  static const int CMessageBattleWinnerNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleWinnerNotify, haswinner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleWinnerNotify, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleWinnerNotify, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleWinnerNotify, charid_),
  };
  CMessageBattleWinnerNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBattleWinnerNotify_descriptor_,
      CMessageBattleWinnerNotify::default_instance_,
      CMessageBattleWinnerNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleWinnerNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBattleWinnerNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBattleWinnerNotify));
  CMessageChangeFamilyStabilityNotify_descriptor_ = file->message_type(236);
  static const int CMessageChangeFamilyStabilityNotify_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyStabilityNotify, familyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyStabilityNotify, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyStabilityNotify, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyStabilityNotify, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyStabilityNotify, onlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyStabilityNotify, rolelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyStabilityNotify, value_),
  };
  CMessageChangeFamilyStabilityNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeFamilyStabilityNotify_descriptor_,
      CMessageChangeFamilyStabilityNotify::default_instance_,
      CMessageChangeFamilyStabilityNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyStabilityNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFamilyStabilityNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeFamilyStabilityNotify));
  CMessageS2GJoinOnTimeOpenBattleRequest_descriptor_ = file->message_type(237);
  static const int CMessageS2GJoinOnTimeOpenBattleRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2GJoinOnTimeOpenBattleRequest, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2GJoinOnTimeOpenBattleRequest, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2GJoinOnTimeOpenBattleRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2GJoinOnTimeOpenBattleRequest, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2GJoinOnTimeOpenBattleRequest, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2GJoinOnTimeOpenBattleRequest, level_),
  };
  CMessageS2GJoinOnTimeOpenBattleRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageS2GJoinOnTimeOpenBattleRequest_descriptor_,
      CMessageS2GJoinOnTimeOpenBattleRequest::default_instance_,
      CMessageS2GJoinOnTimeOpenBattleRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2GJoinOnTimeOpenBattleRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2GJoinOnTimeOpenBattleRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageS2GJoinOnTimeOpenBattleRequest));
  CMessageSyncGTAndLWNotify_descriptor_ = file->message_type(238);
  static const int CMessageSyncGTAndLWNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSyncGTAndLWNotify, gtinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSyncGTAndLWNotify, lwinfo_),
  };
  CMessageSyncGTAndLWNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageSyncGTAndLWNotify_descriptor_,
      CMessageSyncGTAndLWNotify::default_instance_,
      CMessageSyncGTAndLWNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSyncGTAndLWNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSyncGTAndLWNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageSyncGTAndLWNotify));
  CMessageS2GBattleClose_descriptor_ = file->message_type(239);
  static const int CMessageS2GBattleClose_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2GBattleClose, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2GBattleClose, mapid_),
  };
  CMessageS2GBattleClose_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageS2GBattleClose_descriptor_,
      CMessageS2GBattleClose::default_instance_,
      CMessageS2GBattleClose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2GBattleClose, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2GBattleClose, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageS2GBattleClose));
  CMessageS2GIntoCorpsBossRepetion_descriptor_ = file->message_type(240);
  static const int CMessageS2GIntoCorpsBossRepetion_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2GIntoCorpsBossRepetion, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2GIntoCorpsBossRepetion, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2GIntoCorpsBossRepetion, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2GIntoCorpsBossRepetion, corpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2GIntoCorpsBossRepetion, postx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2GIntoCorpsBossRepetion, posty_),
  };
  CMessageS2GIntoCorpsBossRepetion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageS2GIntoCorpsBossRepetion_descriptor_,
      CMessageS2GIntoCorpsBossRepetion::default_instance_,
      CMessageS2GIntoCorpsBossRepetion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2GIntoCorpsBossRepetion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2GIntoCorpsBossRepetion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageS2GIntoCorpsBossRepetion));
  CMessgeS2GEndCorpsBossRepetion_descriptor_ = file->message_type(241);
  static const int CMessgeS2GEndCorpsBossRepetion_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessgeS2GEndCorpsBossRepetion, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessgeS2GEndCorpsBossRepetion, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessgeS2GEndCorpsBossRepetion, corpsid_),
  };
  CMessgeS2GEndCorpsBossRepetion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessgeS2GEndCorpsBossRepetion_descriptor_,
      CMessgeS2GEndCorpsBossRepetion::default_instance_,
      CMessgeS2GEndCorpsBossRepetion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessgeS2GEndCorpsBossRepetion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessgeS2GEndCorpsBossRepetion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessgeS2GEndCorpsBossRepetion));
  PBGroupTasks_descriptor_ = file->message_type(242);
  static const int PBGroupTasks_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGroupTasks, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGroupTasks, taskstate_),
  };
  PBGroupTasks_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGroupTasks_descriptor_,
      PBGroupTasks::default_instance_,
      PBGroupTasks_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGroupTasks, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGroupTasks, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGroupTasks));
  CMessageGateCheckGroupPublishRequest_descriptor_ = file->message_type(243);
  static const int CMessageGateCheckGroupPublishRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGateCheckGroupPublishRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGateCheckGroupPublishRequest, publishtype_),
  };
  CMessageGateCheckGroupPublishRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGateCheckGroupPublishRequest_descriptor_,
      CMessageGateCheckGroupPublishRequest::default_instance_,
      CMessageGateCheckGroupPublishRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGateCheckGroupPublishRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGateCheckGroupPublishRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGateCheckGroupPublishRequest));
  CMessageGatePublishGroupRequest_descriptor_ = file->message_type(244);
  static const int CMessageGatePublishGroupRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGatePublishGroupRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGatePublishGroupRequest, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGatePublishGroupRequest, publishtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGatePublishGroupRequest, taskstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGatePublishGroupRequest, paygroupmoney_),
  };
  CMessageGatePublishGroupRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGatePublishGroupRequest_descriptor_,
      CMessageGatePublishGroupRequest::default_instance_,
      CMessageGatePublishGroupRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGatePublishGroupRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGatePublishGroupRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGatePublishGroupRequest));
  PBGroupInfo_descriptor_ = file->message_type(245);
  static const int PBGroupInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGroupInfo, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGroupInfo, grouplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGroupInfo, groupmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGroupInfo, playerposition_),
  };
  PBGroupInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGroupInfo_descriptor_,
      PBGroupInfo::default_instance_,
      PBGroupInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGroupInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGroupInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGroupInfo));
  CMessageGateCheckGroupPublishResponse_descriptor_ = file->message_type(246);
  static const int CMessageGateCheckGroupPublishResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGateCheckGroupPublishResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGateCheckGroupPublishResponse, publishtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGateCheckGroupPublishResponse, tasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGateCheckGroupPublishResponse, groupinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGateCheckGroupPublishResponse, result_),
  };
  CMessageGateCheckGroupPublishResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGateCheckGroupPublishResponse_descriptor_,
      CMessageGateCheckGroupPublishResponse::default_instance_,
      CMessageGateCheckGroupPublishResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGateCheckGroupPublishResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGateCheckGroupPublishResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGateCheckGroupPublishResponse));
  CMessageGatePublishGroupResponse_descriptor_ = file->message_type(247);
  static const int CMessageGatePublishGroupResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGatePublishGroupResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGatePublishGroupResponse, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGatePublishGroupResponse, publishtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGatePublishGroupResponse, taskstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGatePublishGroupResponse, taskacion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGatePublishGroupResponse, result_),
  };
  CMessageGatePublishGroupResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGatePublishGroupResponse_descriptor_,
      CMessageGatePublishGroupResponse::default_instance_,
      CMessageGatePublishGroupResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGatePublishGroupResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGatePublishGroupResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGatePublishGroupResponse));
  EMServerMessageID_descriptor_ = file->enum_type(0);
  EMFriendAddRetCode_descriptor_ = file->enum_type(1);
  EMSaveResult_descriptor_ = file->enum_type(2);
  EMLeaveReason_descriptor_ = file->enum_type(3);
  EMGateInfoResponse_descriptor_ = file->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_servermessage_5fpb_2ehxx);
}

void protobuf_RegisterTypes() {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageYQSActivtyStartNotice_descriptor_, &CMessageYQSActivtyStartNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageS2GGetCampRankForYQSRequest_descriptor_, &CMessageS2GGetCampRankForYQSRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CampRankForYQSForSever_descriptor_, &CampRankForYQSForSever::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageG2SGetCampRankForYQSResponse_descriptor_, &CMessageG2SGetCampRankForYQSResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageS2GUpdateYQSGrowingRequest_descriptor_, &CMessageS2GUpdateYQSGrowingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageG2SUpdateYQSGrowingResponse_descriptor_, &CMessageG2SUpdateYQSGrowingResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageG2SSettleNotice_descriptor_, &CMessageG2SSettleNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageInternalTimeOut_descriptor_, &CMessageInternalTimeOut::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCountryInfo_descriptor_, &CMessageCountryInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRedirectGErrorCode_descriptor_, &CMessageRedirectGErrorCode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRedirectSErrorCode_descriptor_, &CMessageRedirectSErrorCode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePlayerRedirectEnterMapResponse_descriptor_, &CMessagePlayerRedirectEnterMapResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGateInfoNotice_descriptor_, &CMessageGateInfoNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGateInfoResponse_descriptor_, &CMessageGateInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePlayerEnterGateNotice_descriptor_, &CMessagePlayerEnterGateNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePlayerEnterGateResponse_descriptor_, &CMessagePlayerEnterGateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePlayerLeaveGateNotice_descriptor_, &CMessagePlayerLeaveGateNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageServerInfoNotice_descriptor_, &CMessageServerInfoNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageServerInfoResponse_descriptor_, &CMessageServerInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePlayerEnterMapNotice_descriptor_, &CMessagePlayerEnterMapNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePlayerRedirectMapNotice_descriptor_, &CMessagePlayerRedirectMapNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePlayerEnterMapResponse_descriptor_, &CMessagePlayerEnterMapResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePlayerLoginCompleteNotice_descriptor_, &CMessagePlayerLoginCompleteNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePlayerLeaveMapNotice_descriptor_, &CMessagePlayerLeaveMapNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePlayerLeaveMapResponse_descriptor_, &CMessagePlayerLeaveMapResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePlayerReturn2GateNotice_descriptor_, &CMessagePlayerReturn2GateNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePlayerReturn2GateResponse_descriptor_, &CMessagePlayerReturn2GateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCreateMapNotice_descriptor_, &CMessageCreateMapNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCreateMapResponse_descriptor_, &CMessageCreateMapResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleLevel_descriptor_, &BattleLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBDate_descriptor_, &PBDate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBDateSpace_descriptor_, &PBDateSpace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRegistRepetionInfo_descriptor_, &CMessageRegistRepetionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageDestroyRepetionMap_descriptor_, &CMessageDestroyRepetionMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageG2SRepetionEventCode_descriptor_, &CMessageG2SRepetionEventCode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePlayerRedirectRequest_descriptor_, &CMessagePlayerRedirectRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePlayerRedirectResponse_descriptor_, &CMessagePlayerRedirectResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePlayerEnterConfirmNotice_descriptor_, &CMessagePlayerEnterConfirmNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageSceneNotOpenNotice_descriptor_, &CMessageSceneNotOpenNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUpdateVersionNotice_descriptor_, &CMessageUpdateVersionNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRegistServerRequest_descriptor_, &CMessageRegistServerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRegistServerResponse_descriptor_, &CMessageRegistServerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageHeartBeatNotice_descriptor_, &CMessageHeartBeatNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePlayerOnLineFriendRequest_descriptor_, &CMessagePlayerOnLineFriendRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSinglePlayerInfo_descriptor_, &PBSinglePlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePlayerOnLineFriendResponse_descriptor_, &CMessagePlayerOnLineFriendResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePlayerChangeStatusNotice_descriptor_, &CMessagePlayerChangeStatusNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGameHeartBeatNotice_descriptor_, &CMessageGameHeartBeatNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageERatingProtoStream_descriptor_, &CMessageERatingProtoStream::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageERatingStateNotice_descriptor_, &CMessageERatingStateNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCreateGateTeamRequest_descriptor_, &CMessageCreateGateTeamRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCreateGateTeamResponse_descriptor_, &CMessageCreateGateTeamResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageJoinGateTeamRequest_descriptor_, &CMessageJoinGateTeamRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageJoinGateTeamResponse_descriptor_, &CMessageJoinGateTeamResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRequestJoinReply_descriptor_, &CMessageRequestJoinReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageJoinGateTeamInvite_descriptor_, &CMessageJoinGateTeamInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageJoinTeamInviteResponse_descriptor_, &CMessageJoinTeamInviteResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageInviteJoinReply_descriptor_, &CMessageInviteJoinReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageInvite2Request_descriptor_, &CMessageInvite2Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageKickoutGateTeamRequest_descriptor_, &CMessageKickoutGateTeamRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeHeaderRequest_descriptor_, &CMessageChangeHeaderRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeDistributeRequest_descriptor_, &CMessageChangeDistributeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeDistributeResponse_descriptor_, &CMessageChangeDistributeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLeaveGateTeamRequest_descriptor_, &CMessageLeaveGateTeamRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageEndGateTeamRequest_descriptor_, &CMessageEndGateTeamRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageNotifySceneToUpdateTeam_descriptor_, &CMessageNotifySceneToUpdateTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageNotifySceneToSendTeamList_descriptor_, &CMessageNotifySceneToSendTeamList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageNotifyErrToScene_descriptor_, &CMessageNotifyErrToScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUpdateTeamPropertyRequest_descriptor_, &CMessageUpdateTeamPropertyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUpdateTeamPropertyResponse_descriptor_, &CMessageUpdateTeamPropertyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFollowRequest_descriptor_, &CMessageFollowRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFollowResponse_descriptor_, &CMessageFollowResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageSendClaimRecruitRequest_descriptor_, &CMessageSendClaimRecruitRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageSendClaimRecruitResponse_descriptor_, &CMessageSendClaimRecruitResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageQueryClaimRecruitRequest_descriptor_, &CMessageQueryClaimRecruitRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageQueryClaimRecruitResponse_descriptor_, &CMessageQueryClaimRecruitResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageDeleteClaimRecruitRequest_descriptor_, &CMessageDeleteClaimRecruitRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageDeleteClaimRecruitResponse_descriptor_, &CMessageDeleteClaimRecruitResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageObtainGateTeamRequest_descriptor_, &CMessageObtainGateTeamRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageClearInvReqRecordRequest_descriptor_, &CMessageClearInvReqRecordRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMsg_descriptor_, &PBMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTeamItem_descriptor_, &PBTeamItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTeamInfo_descriptor_, &PBTeamInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGateShutDownNotice_descriptor_, &CMessageGateShutDownNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageKickOffPlayerRequest_descriptor_, &CMessageKickOffPlayerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageKickOffPlayerResponse_descriptor_, &CMessageKickOffPlayerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetPlayerMailiInfoRequest_descriptor_, &CMessageGetPlayerMailiInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetPlayerMailInfoResponse_descriptor_, &CMessageGetPlayerMailInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeMailCountNotify_descriptor_, &CMessageChangeMailCountNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUserIbExchangeNotice_descriptor_, &CMessageUserIbExchangeNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUserUseIbItemNotice_descriptor_, &CMessageUserUseIbItemNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageAddFriendRequest_descriptor_, &CMessageAddFriendRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageAddFriendResponse_descriptor_, &CMessageAddFriendResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetCharIDRequest_descriptor_, &CMessageGetCharIDRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetCharIDResponse_descriptor_, &CMessageGetCharIDResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRoleChangeCampNotice_descriptor_, &CMessageRoleChangeCampNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLoginSvrStartUpNotice_descriptor_, &CMessageLoginSvrStartUpNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGate2LoginHeartBeatNotice_descriptor_, &CMessageGate2LoginHeartBeatNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPersonalRankInfo_descriptor_, &PBPersonalRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePersonalRankInfoNotify_descriptor_, &CMessagePersonalRankInfoNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBRankTopTen_descriptor_, &PBRankTopTen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRankRemove_descriptor_, &CMessageRankRemove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePersonalRankInfoRequest_descriptor_, &CMessagePersonalRankInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageNewRankTopTenNotify_descriptor_, &CMessageNewRankTopTenNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRoleGameInfoReportToGateNotify_descriptor_, &CMessageRoleGameInfoReportToGateNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBattleTeamWait_descriptor_, &CMessageBattleTeamWait::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBattleWaitLeaveRequest_descriptor_, &CMessageBattleWaitLeaveRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBattleJoinNotice_descriptor_, &CMessageBattleJoinNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBattlePlayerJoin_descriptor_, &CMessageBattlePlayerJoin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBattleWaitNotice_descriptor_, &CMessageBattleWaitNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageServerValidateRequest_descriptor_, &CMessageServerValidateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBattleWaitLeaveResponse_descriptor_, &CMessageBattleWaitLeaveResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageServerValidateResponse_descriptor_, &CMessageServerValidateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CTracedPlayerInfo_descriptor_, &CTracedPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageNotifyTracedPlayer_descriptor_, &CMessageNotifyTracedPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBattleCreateRequest_descriptor_, &CMessageBattleCreateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBattleCreateResponse_descriptor_, &CMessageBattleCreateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFamilyIDNameNotify_descriptor_, &CMessageFamilyIDNameNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCorpsNpc_descriptor_, &PBCorpsNpc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageNpcListNotify_descriptor_, &CMessageNpcListNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBidTimeOutNotify_descriptor_, &CMessageBidTimeOutNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBattleStartRequest_descriptor_, &CMessageBattleStartRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBattleStartResponse_descriptor_, &CMessageBattleStartResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBattleEndNotify_descriptor_, &CMessageBattleEndNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBidRestartNotify_descriptor_, &CMessageBidRestartNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageObtainTopTenRequest_descriptor_, &CMessageObtainTopTenRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBRankTitle_descriptor_, &PBRankTitle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageObtainTopTenResponse_descriptor_, &CMessageObtainTopTenResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsBidTimerStopRequest_descriptor_, &CMessageCorpsBidTimerStopRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsJoinBattleNotice_descriptor_, &CMessageCorpsJoinBattleNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageNotifyBattleResult2Gate_descriptor_, &CMessageNotifyBattleResult2Gate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsBattleFlagRequest_descriptor_, &CMessageCorpsBattleFlagRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsBattleFlagResponse_descriptor_, &CMessageCorpsBattleFlagResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCreateRepetionNotify_descriptor_, &CMessageCreateRepetionNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCreateRepetionErr_descriptor_, &CMessageCreateRepetionErr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTeamIntoRepetion_descriptor_, &CMessageTeamIntoRepetion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageSingleIntoRepetion_descriptor_, &CMessageSingleIntoRepetion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsStartBattleRequest_descriptor_, &CMessageCorpsStartBattleRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageIntoRepetionNotify_descriptor_, &CMessageIntoRepetionNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeFamilyContributeNotify_descriptor_, &CMessageChangeFamilyContributeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeFamilyGloryNotify_descriptor_, &CMessageChangeFamilyGloryNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeFamilyMoneyNotify_descriptor_, &CMessageChangeFamilyMoneyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageSynIbStoreRequest_descriptor_, &CMessageSynIbStoreRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageSynIbStoreResponse_descriptor_, &CMessageSynIbStoreResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageSynFuncStoreRequest_descriptor_, &CMessageSynFuncStoreRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageSynFuncStoreResponse_descriptor_, &CMessageSynFuncStoreResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeCorpsContributeNotify_descriptor_, &CMessageChangeCorpsContributeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeCorpsGloryNotify_descriptor_, &CMessageChangeCorpsGloryNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeCorpsMoneyNotify_descriptor_, &CMessageChangeCorpsMoneyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeCorpsBossTimes_descriptor_, &CMessageChangeCorpsBossTimes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeCorpsBossRefineValue_descriptor_, &CMessageChangeCorpsBossRefineValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeCorpsCollectActive_descriptor_, &CMessageChangeCorpsCollectActive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFamilyApExpChangedNotify_descriptor_, &CMessageFamilyApExpChangedNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsApExpChangedNotify_descriptor_, &CMessageCorpsApExpChangedNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeJudgeScoreReuqest_descriptor_, &CMessageChangeJudgeScoreReuqest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeWizardRequest_descriptor_, &CMessageChangeWizardRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeWizardResponse_descriptor_, &CMessageChangeWizardResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeConstructRequest_descriptor_, &CMessageChangeConstructRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeConstructResponse_descriptor_, &CMessageChangeConstructResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangePowerRequest_descriptor_, &CMessageChangePowerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangePowerResponse_descriptor_, &CMessageChangePowerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUseFunctionNotify_descriptor_, &CMessageUseFunctionNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageSetOfficialNotify_descriptor_, &CMessageSetOfficialNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeFriendNotify_descriptor_, &CMessageChangeFriendNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageKillPersonRequest_descriptor_, &CMessageKillPersonRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageKillPersonResponse_descriptor_, &CMessageKillPersonResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageSyncNationNotify_descriptor_, &CMessageSyncNationNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBuyFamilyItemRequest_descriptor_, &CMessageBuyFamilyItemRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBuyFamilyItemResponse_descriptor_, &CMessageBuyFamilyItemResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBuyCorpsItemRequest_descriptor_, &CMessageBuyCorpsItemRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBuyCorpsItemResponse_descriptor_, &CMessageBuyCorpsItemResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageClearFamilyRepetionInfoNotify_descriptor_, &CMessageClearFamilyRepetionInfoNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageJudgeModifySuccessNotice_descriptor_, &CMessageJudgeModifySuccessNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessage4EQueryYuanBaoRequest_descriptor_, &CMessage4EQueryYuanBaoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessage4EQueryYuanBaoResponse_descriptor_, &CMessage4EQueryYuanBaoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessage4EDrawYuanBaoRequest_descriptor_, &CMessage4EDrawYuanBaoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessage4EDrawYuanBaoResponse_descriptor_, &CMessage4EDrawYuanBaoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFamilyExchangeRequest_descriptor_, &CMessageFamilyExchangeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFamilyExchangeResponse_descriptor_, &CMessageFamilyExchangeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsExchangeRequest_descriptor_, &CMessageCorpsExchangeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsExchangeResponse_descriptor_, &CMessageCorpsExchangeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageAddFamilyExchangeItemNotify_descriptor_, &CMessageAddFamilyExchangeItemNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageAddCorpsExchangeItemNotify_descriptor_, &CMessageAddCorpsExchangeItemNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGateEntityGMMove_descriptor_, &CMessageGateEntityGMMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageSceneEntityGMMove_descriptor_, &CMessageSceneEntityGMMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleActivityObj_descriptor_, &SingleActivityObj::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DropInfo_descriptor_, &DropInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapDrop_descriptor_, &MapDrop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleActivityInfo_descriptor_, &SingleActivityInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTodayActivitysNotify_descriptor_, &CMessageTodayActivitysNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleActivity_descriptor_, &SingleActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageActivityChangeNotify_descriptor_, &CMessageActivityChangeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangePasswordStatusNotify_descriptor_, &CMessageChangePasswordStatusNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUpdateNationTitleNotice_descriptor_, &CMessageUpdateNationTitleNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetNationTitleListRequest_descriptor_, &CMessageGetNationTitleListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetNationTitleListResponse_descriptor_, &CMessageGetNationTitleListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageSGProVipFlagNotice_descriptor_, &CMessageSGProVipFlagNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageResetRolePasswordNotify_descriptor_, &CMessageResetRolePasswordNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessgeSafeShutdownNotify_descriptor_, &CMessgeSafeShutdownNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessgeSafeShutdownAck_descriptor_, &CMessgeSafeShutdownAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRollCorpsMoneyRequest_descriptor_, &CMessageRollCorpsMoneyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCorpsBattleMapNotice_descriptor_, &CMessageCorpsBattleMapNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTrySummonRequest_descriptor_, &CMessageTrySummonRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTrySummonResponse_descriptor_, &CMessageTrySummonResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRealSummonRequest_descriptor_, &CMessageRealSummonRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRealSummonNotify_descriptor_, &CMessageRealSummonNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLockGoodsRequest_descriptor_, &CMessageLockGoodsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLockGoodsResponse_descriptor_, &CMessageLockGoodsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageS2GRoleMove_descriptor_, &CMessageS2GRoleMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageG2SRoleMove_descriptor_, &CMessageG2SRoleMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageWarChangeNotify_descriptor_, &CMessageWarChangeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageReliveChangeNotify_descriptor_, &CMessageReliveChangeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WarHonorData_descriptor_, &WarHonorData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageObtainWarHonorNotify_descriptor_, &CMessageObtainWarHonorNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBourseG2SLoadList_descriptor_, &CMessageBourseG2SLoadList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBourseS2GLoadList_descriptor_, &CMessageBourseS2GLoadList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageSyncWarStatusNotify_descriptor_, &CMessageSyncWarStatusNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageWarControlNotify_descriptor_, &CMessageWarControlNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBourseTradeNotice_descriptor_, &CMessageBourseTradeNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageReSavePlayerRequest_descriptor_, &CMessageReSavePlayerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageReSavePlayerResponse_descriptor_, &CMessageReSavePlayerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBoursePlayerTradeBuyNotice_descriptor_, &CMessageBoursePlayerTradeBuyNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBoursePlayerTradeSellNotice_descriptor_, &CMessageBoursePlayerTradeSellNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageWarStoneOverNotify_descriptor_, &CMessageWarStoneOverNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCreateWarStoneNotify_descriptor_, &CMessageCreateWarStoneNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageAddTaxNotify_descriptor_, &CMessageAddTaxNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageSendSysMailToPlayer_descriptor_, &CMessageSendSysMailToPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCampAddHonerScore_descriptor_, &CMessageCampAddHonerScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBattleTeamFixWait_descriptor_, &CMessageBattleTeamFixWait::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageActivityEventNotify_descriptor_, &CMessageActivityEventNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageAddMasterPointRequest_descriptor_, &CMessageAddMasterPointRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageAddMasterPointNotify_descriptor_, &CMessageAddMasterPointNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBattleSingleFixWait_descriptor_, &CMessageBattleSingleFixWait::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageSpecialEventNotify_descriptor_, &CMessageSpecialEventNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageAcquireMasterNotify_descriptor_, &CMessageAcquireMasterNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBattleWinnerNotify_descriptor_, &CMessageBattleWinnerNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeFamilyStabilityNotify_descriptor_, &CMessageChangeFamilyStabilityNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageS2GJoinOnTimeOpenBattleRequest_descriptor_, &CMessageS2GJoinOnTimeOpenBattleRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageSyncGTAndLWNotify_descriptor_, &CMessageSyncGTAndLWNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageS2GBattleClose_descriptor_, &CMessageS2GBattleClose::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageS2GIntoCorpsBossRepetion_descriptor_, &CMessageS2GIntoCorpsBossRepetion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessgeS2GEndCorpsBossRepetion_descriptor_, &CMessgeS2GEndCorpsBossRepetion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGroupTasks_descriptor_, &PBGroupTasks::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGateCheckGroupPublishRequest_descriptor_, &CMessageGateCheckGroupPublishRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGatePublishGroupRequest_descriptor_, &CMessageGatePublishGroupRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGroupInfo_descriptor_, &PBGroupInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGateCheckGroupPublishResponse_descriptor_, &CMessageGateCheckGroupPublishResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGatePublishGroupResponse_descriptor_, &CMessageGatePublishGroupResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_servermessage_5fpb_2ehxx() {
  delete CMessageYQSActivtyStartNotice::default_instance_;
  delete CMessageYQSActivtyStartNotice_reflection_;
  delete CMessageS2GGetCampRankForYQSRequest::default_instance_;
  delete CMessageS2GGetCampRankForYQSRequest_reflection_;
  delete CampRankForYQSForSever::default_instance_;
  delete CampRankForYQSForSever_reflection_;
  delete CMessageG2SGetCampRankForYQSResponse::default_instance_;
  delete CMessageG2SGetCampRankForYQSResponse_reflection_;
  delete CMessageS2GUpdateYQSGrowingRequest::default_instance_;
  delete CMessageS2GUpdateYQSGrowingRequest_reflection_;
  delete CMessageG2SUpdateYQSGrowingResponse::default_instance_;
  delete CMessageG2SUpdateYQSGrowingResponse_reflection_;
  delete CMessageG2SSettleNotice::default_instance_;
  delete CMessageG2SSettleNotice_reflection_;
  delete CMessageInternalTimeOut::default_instance_;
  delete CMessageInternalTimeOut_reflection_;
  delete CMessageCountryInfo::default_instance_;
  delete CMessageCountryInfo_reflection_;
  delete CMessageRedirectGErrorCode::default_instance_;
  delete CMessageRedirectGErrorCode_reflection_;
  delete CMessageRedirectSErrorCode::default_instance_;
  delete CMessageRedirectSErrorCode_reflection_;
  delete CMessagePlayerRedirectEnterMapResponse::default_instance_;
  delete CMessagePlayerRedirectEnterMapResponse_reflection_;
  delete CMessageGateInfoNotice::default_instance_;
  delete CMessageGateInfoNotice_reflection_;
  delete CMessageGateInfoResponse::default_instance_;
  delete CMessageGateInfoResponse_reflection_;
  delete CMessagePlayerEnterGateNotice::default_instance_;
  delete CMessagePlayerEnterGateNotice_reflection_;
  delete CMessagePlayerEnterGateResponse::default_instance_;
  delete CMessagePlayerEnterGateResponse_reflection_;
  delete CMessagePlayerLeaveGateNotice::default_instance_;
  delete CMessagePlayerLeaveGateNotice_reflection_;
  delete CMessageServerInfoNotice::default_instance_;
  delete CMessageServerInfoNotice_reflection_;
  delete CMessageServerInfoResponse::default_instance_;
  delete CMessageServerInfoResponse_reflection_;
  delete CMessagePlayerEnterMapNotice::default_instance_;
  delete CMessagePlayerEnterMapNotice_reflection_;
  delete CMessagePlayerRedirectMapNotice::default_instance_;
  delete CMessagePlayerRedirectMapNotice_reflection_;
  delete CMessagePlayerEnterMapResponse::default_instance_;
  delete CMessagePlayerEnterMapResponse_reflection_;
  delete CMessagePlayerLoginCompleteNotice::default_instance_;
  delete CMessagePlayerLoginCompleteNotice_reflection_;
  delete CMessagePlayerLeaveMapNotice::default_instance_;
  delete CMessagePlayerLeaveMapNotice_reflection_;
  delete CMessagePlayerLeaveMapResponse::default_instance_;
  delete CMessagePlayerLeaveMapResponse_reflection_;
  delete CMessagePlayerReturn2GateNotice::default_instance_;
  delete CMessagePlayerReturn2GateNotice_reflection_;
  delete CMessagePlayerReturn2GateResponse::default_instance_;
  delete CMessagePlayerReturn2GateResponse_reflection_;
  delete CMessageCreateMapNotice::default_instance_;
  delete CMessageCreateMapNotice_reflection_;
  delete CMessageCreateMapResponse::default_instance_;
  delete CMessageCreateMapResponse_reflection_;
  delete BattleLevel::default_instance_;
  delete BattleLevel_reflection_;
  delete PBDate::default_instance_;
  delete PBDate_reflection_;
  delete PBDateSpace::default_instance_;
  delete PBDateSpace_reflection_;
  delete CMessageRegistRepetionInfo::default_instance_;
  delete CMessageRegistRepetionInfo_reflection_;
  delete CMessageDestroyRepetionMap::default_instance_;
  delete CMessageDestroyRepetionMap_reflection_;
  delete CMessageG2SRepetionEventCode::default_instance_;
  delete CMessageG2SRepetionEventCode_reflection_;
  delete CMessagePlayerRedirectRequest::default_instance_;
  delete CMessagePlayerRedirectRequest_reflection_;
  delete CMessagePlayerRedirectResponse::default_instance_;
  delete CMessagePlayerRedirectResponse_reflection_;
  delete CMessagePlayerEnterConfirmNotice::default_instance_;
  delete CMessagePlayerEnterConfirmNotice_reflection_;
  delete CMessageSceneNotOpenNotice::default_instance_;
  delete CMessageSceneNotOpenNotice_reflection_;
  delete CMessageUpdateVersionNotice::default_instance_;
  delete CMessageUpdateVersionNotice_reflection_;
  delete CMessageRegistServerRequest::default_instance_;
  delete CMessageRegistServerRequest_reflection_;
  delete CMessageRegistServerResponse::default_instance_;
  delete CMessageRegistServerResponse_reflection_;
  delete CMessageHeartBeatNotice::default_instance_;
  delete CMessageHeartBeatNotice_reflection_;
  delete CMessagePlayerOnLineFriendRequest::default_instance_;
  delete CMessagePlayerOnLineFriendRequest_reflection_;
  delete PBSinglePlayerInfo::default_instance_;
  delete PBSinglePlayerInfo_reflection_;
  delete CMessagePlayerOnLineFriendResponse::default_instance_;
  delete CMessagePlayerOnLineFriendResponse_reflection_;
  delete CMessagePlayerChangeStatusNotice::default_instance_;
  delete CMessagePlayerChangeStatusNotice_reflection_;
  delete CMessageGameHeartBeatNotice::default_instance_;
  delete CMessageGameHeartBeatNotice_reflection_;
  delete CMessageERatingProtoStream::default_instance_;
  delete CMessageERatingProtoStream_reflection_;
  delete CMessageERatingStateNotice::default_instance_;
  delete CMessageERatingStateNotice_reflection_;
  delete CMessageCreateGateTeamRequest::default_instance_;
  delete CMessageCreateGateTeamRequest_reflection_;
  delete CMessageCreateGateTeamResponse::default_instance_;
  delete CMessageCreateGateTeamResponse_reflection_;
  delete CMessageJoinGateTeamRequest::default_instance_;
  delete CMessageJoinGateTeamRequest_reflection_;
  delete CMessageJoinGateTeamResponse::default_instance_;
  delete CMessageJoinGateTeamResponse_reflection_;
  delete CMessageRequestJoinReply::default_instance_;
  delete CMessageRequestJoinReply_reflection_;
  delete CMessageJoinGateTeamInvite::default_instance_;
  delete CMessageJoinGateTeamInvite_reflection_;
  delete CMessageJoinTeamInviteResponse::default_instance_;
  delete CMessageJoinTeamInviteResponse_reflection_;
  delete CMessageInviteJoinReply::default_instance_;
  delete CMessageInviteJoinReply_reflection_;
  delete CMessageInvite2Request::default_instance_;
  delete CMessageInvite2Request_reflection_;
  delete CMessageKickoutGateTeamRequest::default_instance_;
  delete CMessageKickoutGateTeamRequest_reflection_;
  delete CMessageChangeHeaderRequest::default_instance_;
  delete CMessageChangeHeaderRequest_reflection_;
  delete CMessageChangeDistributeRequest::default_instance_;
  delete CMessageChangeDistributeRequest_reflection_;
  delete CMessageChangeDistributeResponse::default_instance_;
  delete CMessageChangeDistributeResponse_reflection_;
  delete CMessageLeaveGateTeamRequest::default_instance_;
  delete CMessageLeaveGateTeamRequest_reflection_;
  delete CMessageEndGateTeamRequest::default_instance_;
  delete CMessageEndGateTeamRequest_reflection_;
  delete CMessageNotifySceneToUpdateTeam::default_instance_;
  delete CMessageNotifySceneToUpdateTeam_reflection_;
  delete CMessageNotifySceneToSendTeamList::default_instance_;
  delete CMessageNotifySceneToSendTeamList_reflection_;
  delete CMessageNotifyErrToScene::default_instance_;
  delete CMessageNotifyErrToScene_reflection_;
  delete CMessageUpdateTeamPropertyRequest::default_instance_;
  delete CMessageUpdateTeamPropertyRequest_reflection_;
  delete CMessageUpdateTeamPropertyResponse::default_instance_;
  delete CMessageUpdateTeamPropertyResponse_reflection_;
  delete CMessageFollowRequest::default_instance_;
  delete CMessageFollowRequest_reflection_;
  delete CMessageFollowResponse::default_instance_;
  delete CMessageFollowResponse_reflection_;
  delete CMessageSendClaimRecruitRequest::default_instance_;
  delete CMessageSendClaimRecruitRequest_reflection_;
  delete CMessageSendClaimRecruitResponse::default_instance_;
  delete CMessageSendClaimRecruitResponse_reflection_;
  delete CMessageQueryClaimRecruitRequest::default_instance_;
  delete CMessageQueryClaimRecruitRequest_reflection_;
  delete CMessageQueryClaimRecruitResponse::default_instance_;
  delete CMessageQueryClaimRecruitResponse_reflection_;
  delete CMessageDeleteClaimRecruitRequest::default_instance_;
  delete CMessageDeleteClaimRecruitRequest_reflection_;
  delete CMessageDeleteClaimRecruitResponse::default_instance_;
  delete CMessageDeleteClaimRecruitResponse_reflection_;
  delete CMessageObtainGateTeamRequest::default_instance_;
  delete CMessageObtainGateTeamRequest_reflection_;
  delete CMessageClearInvReqRecordRequest::default_instance_;
  delete CMessageClearInvReqRecordRequest_reflection_;
  delete PBMsg::default_instance_;
  delete PBMsg_reflection_;
  delete PBTeamItem::default_instance_;
  delete PBTeamItem_reflection_;
  delete PBTeamInfo::default_instance_;
  delete PBTeamInfo_reflection_;
  delete CMessageGateShutDownNotice::default_instance_;
  delete CMessageGateShutDownNotice_reflection_;
  delete CMessageKickOffPlayerRequest::default_instance_;
  delete CMessageKickOffPlayerRequest_reflection_;
  delete CMessageKickOffPlayerResponse::default_instance_;
  delete CMessageKickOffPlayerResponse_reflection_;
  delete CMessageGetPlayerMailiInfoRequest::default_instance_;
  delete CMessageGetPlayerMailiInfoRequest_reflection_;
  delete CMessageGetPlayerMailInfoResponse::default_instance_;
  delete CMessageGetPlayerMailInfoResponse_reflection_;
  delete CMessageChangeMailCountNotify::default_instance_;
  delete CMessageChangeMailCountNotify_reflection_;
  delete CMessageUserIbExchangeNotice::default_instance_;
  delete CMessageUserIbExchangeNotice_reflection_;
  delete CMessageUserUseIbItemNotice::default_instance_;
  delete CMessageUserUseIbItemNotice_reflection_;
  delete CMessageAddFriendRequest::default_instance_;
  delete CMessageAddFriendRequest_reflection_;
  delete CMessageAddFriendResponse::default_instance_;
  delete CMessageAddFriendResponse_reflection_;
  delete CMessageGetCharIDRequest::default_instance_;
  delete CMessageGetCharIDRequest_reflection_;
  delete CMessageGetCharIDResponse::default_instance_;
  delete CMessageGetCharIDResponse_reflection_;
  delete CMessageRoleChangeCampNotice::default_instance_;
  delete CMessageRoleChangeCampNotice_reflection_;
  delete CMessageLoginSvrStartUpNotice::default_instance_;
  delete CMessageLoginSvrStartUpNotice_reflection_;
  delete CMessageGate2LoginHeartBeatNotice::default_instance_;
  delete CMessageGate2LoginHeartBeatNotice_reflection_;
  delete PBPersonalRankInfo::default_instance_;
  delete PBPersonalRankInfo_reflection_;
  delete CMessagePersonalRankInfoNotify::default_instance_;
  delete CMessagePersonalRankInfoNotify_reflection_;
  delete PBRankTopTen::default_instance_;
  delete PBRankTopTen_reflection_;
  delete CMessageRankRemove::default_instance_;
  delete CMessageRankRemove_reflection_;
  delete CMessagePersonalRankInfoRequest::default_instance_;
  delete CMessagePersonalRankInfoRequest_reflection_;
  delete CMessageNewRankTopTenNotify::default_instance_;
  delete CMessageNewRankTopTenNotify_reflection_;
  delete CMessageRoleGameInfoReportToGateNotify::default_instance_;
  delete CMessageRoleGameInfoReportToGateNotify_reflection_;
  delete CMessageBattleTeamWait::default_instance_;
  delete CMessageBattleTeamWait_reflection_;
  delete CMessageBattleWaitLeaveRequest::default_instance_;
  delete CMessageBattleWaitLeaveRequest_reflection_;
  delete CMessageBattleJoinNotice::default_instance_;
  delete CMessageBattleJoinNotice_reflection_;
  delete CMessageBattlePlayerJoin::default_instance_;
  delete CMessageBattlePlayerJoin_reflection_;
  delete CMessageBattleWaitNotice::default_instance_;
  delete CMessageBattleWaitNotice_reflection_;
  delete CMessageServerValidateRequest::default_instance_;
  delete CMessageServerValidateRequest_reflection_;
  delete CMessageBattleWaitLeaveResponse::default_instance_;
  delete CMessageBattleWaitLeaveResponse_reflection_;
  delete CMessageServerValidateResponse::default_instance_;
  delete CMessageServerValidateResponse_reflection_;
  delete CTracedPlayerInfo::default_instance_;
  delete CTracedPlayerInfo_reflection_;
  delete CMessageNotifyTracedPlayer::default_instance_;
  delete CMessageNotifyTracedPlayer_reflection_;
  delete CMessageBattleCreateRequest::default_instance_;
  delete CMessageBattleCreateRequest_reflection_;
  delete CMessageBattleCreateResponse::default_instance_;
  delete CMessageBattleCreateResponse_reflection_;
  delete CMessageFamilyIDNameNotify::default_instance_;
  delete CMessageFamilyIDNameNotify_reflection_;
  delete PBCorpsNpc::default_instance_;
  delete PBCorpsNpc_reflection_;
  delete CMessageNpcListNotify::default_instance_;
  delete CMessageNpcListNotify_reflection_;
  delete CMessageBidTimeOutNotify::default_instance_;
  delete CMessageBidTimeOutNotify_reflection_;
  delete CMessageBattleStartRequest::default_instance_;
  delete CMessageBattleStartRequest_reflection_;
  delete CMessageBattleStartResponse::default_instance_;
  delete CMessageBattleStartResponse_reflection_;
  delete CMessageBattleEndNotify::default_instance_;
  delete CMessageBattleEndNotify_reflection_;
  delete CMessageBidRestartNotify::default_instance_;
  delete CMessageBidRestartNotify_reflection_;
  delete CMessageObtainTopTenRequest::default_instance_;
  delete CMessageObtainTopTenRequest_reflection_;
  delete PBRankTitle::default_instance_;
  delete PBRankTitle_reflection_;
  delete CMessageObtainTopTenResponse::default_instance_;
  delete CMessageObtainTopTenResponse_reflection_;
  delete CMessageCorpsBidTimerStopRequest::default_instance_;
  delete CMessageCorpsBidTimerStopRequest_reflection_;
  delete CMessageCorpsJoinBattleNotice::default_instance_;
  delete CMessageCorpsJoinBattleNotice_reflection_;
  delete CMessageNotifyBattleResult2Gate::default_instance_;
  delete CMessageNotifyBattleResult2Gate_reflection_;
  delete CMessageCorpsBattleFlagRequest::default_instance_;
  delete CMessageCorpsBattleFlagRequest_reflection_;
  delete CMessageCorpsBattleFlagResponse::default_instance_;
  delete CMessageCorpsBattleFlagResponse_reflection_;
  delete CMessageCreateRepetionNotify::default_instance_;
  delete CMessageCreateRepetionNotify_reflection_;
  delete CMessageCreateRepetionErr::default_instance_;
  delete CMessageCreateRepetionErr_reflection_;
  delete CMessageTeamIntoRepetion::default_instance_;
  delete CMessageTeamIntoRepetion_reflection_;
  delete CMessageSingleIntoRepetion::default_instance_;
  delete CMessageSingleIntoRepetion_reflection_;
  delete CMessageCorpsStartBattleRequest::default_instance_;
  delete CMessageCorpsStartBattleRequest_reflection_;
  delete CMessageIntoRepetionNotify::default_instance_;
  delete CMessageIntoRepetionNotify_reflection_;
  delete CMessageChangeFamilyContributeNotify::default_instance_;
  delete CMessageChangeFamilyContributeNotify_reflection_;
  delete CMessageChangeFamilyGloryNotify::default_instance_;
  delete CMessageChangeFamilyGloryNotify_reflection_;
  delete CMessageChangeFamilyMoneyNotify::default_instance_;
  delete CMessageChangeFamilyMoneyNotify_reflection_;
  delete CMessageSynIbStoreRequest::default_instance_;
  delete CMessageSynIbStoreRequest_reflection_;
  delete CMessageSynIbStoreResponse::default_instance_;
  delete CMessageSynIbStoreResponse_reflection_;
  delete CMessageSynFuncStoreRequest::default_instance_;
  delete CMessageSynFuncStoreRequest_reflection_;
  delete CMessageSynFuncStoreResponse::default_instance_;
  delete CMessageSynFuncStoreResponse_reflection_;
  delete CMessageChangeCorpsContributeNotify::default_instance_;
  delete CMessageChangeCorpsContributeNotify_reflection_;
  delete CMessageChangeCorpsGloryNotify::default_instance_;
  delete CMessageChangeCorpsGloryNotify_reflection_;
  delete CMessageChangeCorpsMoneyNotify::default_instance_;
  delete CMessageChangeCorpsMoneyNotify_reflection_;
  delete CMessageChangeCorpsBossTimes::default_instance_;
  delete CMessageChangeCorpsBossTimes_reflection_;
  delete CMessageChangeCorpsBossRefineValue::default_instance_;
  delete CMessageChangeCorpsBossRefineValue_reflection_;
  delete CMessageChangeCorpsCollectActive::default_instance_;
  delete CMessageChangeCorpsCollectActive_reflection_;
  delete CMessageFamilyApExpChangedNotify::default_instance_;
  delete CMessageFamilyApExpChangedNotify_reflection_;
  delete CMessageCorpsApExpChangedNotify::default_instance_;
  delete CMessageCorpsApExpChangedNotify_reflection_;
  delete CMessageChangeJudgeScoreReuqest::default_instance_;
  delete CMessageChangeJudgeScoreReuqest_reflection_;
  delete CMessageChangeWizardRequest::default_instance_;
  delete CMessageChangeWizardRequest_reflection_;
  delete CMessageChangeWizardResponse::default_instance_;
  delete CMessageChangeWizardResponse_reflection_;
  delete CMessageChangeConstructRequest::default_instance_;
  delete CMessageChangeConstructRequest_reflection_;
  delete CMessageChangeConstructResponse::default_instance_;
  delete CMessageChangeConstructResponse_reflection_;
  delete CMessageChangePowerRequest::default_instance_;
  delete CMessageChangePowerRequest_reflection_;
  delete CMessageChangePowerResponse::default_instance_;
  delete CMessageChangePowerResponse_reflection_;
  delete CMessageUseFunctionNotify::default_instance_;
  delete CMessageUseFunctionNotify_reflection_;
  delete CMessageSetOfficialNotify::default_instance_;
  delete CMessageSetOfficialNotify_reflection_;
  delete CMessageChangeFriendNotify::default_instance_;
  delete CMessageChangeFriendNotify_reflection_;
  delete CMessageKillPersonRequest::default_instance_;
  delete CMessageKillPersonRequest_reflection_;
  delete CMessageKillPersonResponse::default_instance_;
  delete CMessageKillPersonResponse_reflection_;
  delete CMessageSyncNationNotify::default_instance_;
  delete CMessageSyncNationNotify_reflection_;
  delete CMessageBuyFamilyItemRequest::default_instance_;
  delete CMessageBuyFamilyItemRequest_reflection_;
  delete CMessageBuyFamilyItemResponse::default_instance_;
  delete CMessageBuyFamilyItemResponse_reflection_;
  delete CMessageBuyCorpsItemRequest::default_instance_;
  delete CMessageBuyCorpsItemRequest_reflection_;
  delete CMessageBuyCorpsItemResponse::default_instance_;
  delete CMessageBuyCorpsItemResponse_reflection_;
  delete CMessageClearFamilyRepetionInfoNotify::default_instance_;
  delete CMessageClearFamilyRepetionInfoNotify_reflection_;
  delete CMessageJudgeModifySuccessNotice::default_instance_;
  delete CMessageJudgeModifySuccessNotice_reflection_;
  delete CMessage4EQueryYuanBaoRequest::default_instance_;
  delete CMessage4EQueryYuanBaoRequest_reflection_;
  delete CMessage4EQueryYuanBaoResponse::default_instance_;
  delete CMessage4EQueryYuanBaoResponse_reflection_;
  delete CMessage4EDrawYuanBaoRequest::default_instance_;
  delete CMessage4EDrawYuanBaoRequest_reflection_;
  delete CMessage4EDrawYuanBaoResponse::default_instance_;
  delete CMessage4EDrawYuanBaoResponse_reflection_;
  delete CMessageFamilyExchangeRequest::default_instance_;
  delete CMessageFamilyExchangeRequest_reflection_;
  delete CMessageFamilyExchangeResponse::default_instance_;
  delete CMessageFamilyExchangeResponse_reflection_;
  delete CMessageCorpsExchangeRequest::default_instance_;
  delete CMessageCorpsExchangeRequest_reflection_;
  delete CMessageCorpsExchangeResponse::default_instance_;
  delete CMessageCorpsExchangeResponse_reflection_;
  delete CMessageAddFamilyExchangeItemNotify::default_instance_;
  delete CMessageAddFamilyExchangeItemNotify_reflection_;
  delete CMessageAddCorpsExchangeItemNotify::default_instance_;
  delete CMessageAddCorpsExchangeItemNotify_reflection_;
  delete CMessageGateEntityGMMove::default_instance_;
  delete CMessageGateEntityGMMove_reflection_;
  delete CMessageSceneEntityGMMove::default_instance_;
  delete CMessageSceneEntityGMMove_reflection_;
  delete SingleActivityObj::default_instance_;
  delete SingleActivityObj_reflection_;
  delete DropInfo::default_instance_;
  delete DropInfo_reflection_;
  delete MapDrop::default_instance_;
  delete MapDrop_reflection_;
  delete SingleActivityInfo::default_instance_;
  delete SingleActivityInfo_reflection_;
  delete CMessageTodayActivitysNotify::default_instance_;
  delete CMessageTodayActivitysNotify_reflection_;
  delete SingleActivity::default_instance_;
  delete SingleActivity_reflection_;
  delete CMessageActivityChangeNotify::default_instance_;
  delete CMessageActivityChangeNotify_reflection_;
  delete CMessageChangePasswordStatusNotify::default_instance_;
  delete CMessageChangePasswordStatusNotify_reflection_;
  delete CMessageUpdateNationTitleNotice::default_instance_;
  delete CMessageUpdateNationTitleNotice_reflection_;
  delete CMessageGetNationTitleListRequest::default_instance_;
  delete CMessageGetNationTitleListRequest_reflection_;
  delete CMessageGetNationTitleListResponse::default_instance_;
  delete CMessageGetNationTitleListResponse_reflection_;
  delete CMessageSGProVipFlagNotice::default_instance_;
  delete CMessageSGProVipFlagNotice_reflection_;
  delete CMessageResetRolePasswordNotify::default_instance_;
  delete CMessageResetRolePasswordNotify_reflection_;
  delete CMessgeSafeShutdownNotify::default_instance_;
  delete CMessgeSafeShutdownNotify_reflection_;
  delete CMessgeSafeShutdownAck::default_instance_;
  delete CMessgeSafeShutdownAck_reflection_;
  delete CMessageRollCorpsMoneyRequest::default_instance_;
  delete CMessageRollCorpsMoneyRequest_reflection_;
  delete CMessageCorpsBattleMapNotice::default_instance_;
  delete CMessageCorpsBattleMapNotice_reflection_;
  delete CMessageTrySummonRequest::default_instance_;
  delete CMessageTrySummonRequest_reflection_;
  delete CMessageTrySummonResponse::default_instance_;
  delete CMessageTrySummonResponse_reflection_;
  delete CMessageRealSummonRequest::default_instance_;
  delete CMessageRealSummonRequest_reflection_;
  delete CMessageRealSummonNotify::default_instance_;
  delete CMessageRealSummonNotify_reflection_;
  delete CMessageLockGoodsRequest::default_instance_;
  delete CMessageLockGoodsRequest_reflection_;
  delete CMessageLockGoodsResponse::default_instance_;
  delete CMessageLockGoodsResponse_reflection_;
  delete CMessageS2GRoleMove::default_instance_;
  delete CMessageS2GRoleMove_reflection_;
  delete CMessageG2SRoleMove::default_instance_;
  delete CMessageG2SRoleMove_reflection_;
  delete CMessageWarChangeNotify::default_instance_;
  delete CMessageWarChangeNotify_reflection_;
  delete CMessageReliveChangeNotify::default_instance_;
  delete CMessageReliveChangeNotify_reflection_;
  delete WarHonorData::default_instance_;
  delete WarHonorData_reflection_;
  delete CMessageObtainWarHonorNotify::default_instance_;
  delete CMessageObtainWarHonorNotify_reflection_;
  delete CMessageBourseG2SLoadList::default_instance_;
  delete CMessageBourseG2SLoadList_reflection_;
  delete CMessageBourseS2GLoadList::default_instance_;
  delete CMessageBourseS2GLoadList_reflection_;
  delete CMessageSyncWarStatusNotify::default_instance_;
  delete CMessageSyncWarStatusNotify_reflection_;
  delete CMessageWarControlNotify::default_instance_;
  delete CMessageWarControlNotify_reflection_;
  delete CMessageBourseTradeNotice::default_instance_;
  delete CMessageBourseTradeNotice_reflection_;
  delete CMessageReSavePlayerRequest::default_instance_;
  delete CMessageReSavePlayerRequest_reflection_;
  delete CMessageReSavePlayerResponse::default_instance_;
  delete CMessageReSavePlayerResponse_reflection_;
  delete CMessageBoursePlayerTradeBuyNotice::default_instance_;
  delete CMessageBoursePlayerTradeBuyNotice_reflection_;
  delete CMessageBoursePlayerTradeSellNotice::default_instance_;
  delete CMessageBoursePlayerTradeSellNotice_reflection_;
  delete CMessageWarStoneOverNotify::default_instance_;
  delete CMessageWarStoneOverNotify_reflection_;
  delete CMessageCreateWarStoneNotify::default_instance_;
  delete CMessageCreateWarStoneNotify_reflection_;
  delete CMessageAddTaxNotify::default_instance_;
  delete CMessageAddTaxNotify_reflection_;
  delete CMessageSendSysMailToPlayer::default_instance_;
  delete CMessageSendSysMailToPlayer_reflection_;
  delete CMessageCampAddHonerScore::default_instance_;
  delete CMessageCampAddHonerScore_reflection_;
  delete CMessageBattleTeamFixWait::default_instance_;
  delete CMessageBattleTeamFixWait_reflection_;
  delete CMessageActivityEventNotify::default_instance_;
  delete CMessageActivityEventNotify_reflection_;
  delete CMessageAddMasterPointRequest::default_instance_;
  delete CMessageAddMasterPointRequest_reflection_;
  delete CMessageAddMasterPointNotify::default_instance_;
  delete CMessageAddMasterPointNotify_reflection_;
  delete CMessageBattleSingleFixWait::default_instance_;
  delete CMessageBattleSingleFixWait_reflection_;
  delete CMessageSpecialEventNotify::default_instance_;
  delete CMessageSpecialEventNotify_reflection_;
  delete CMessageAcquireMasterNotify::default_instance_;
  delete CMessageAcquireMasterNotify_reflection_;
  delete CMessageBattleWinnerNotify::default_instance_;
  delete CMessageBattleWinnerNotify_reflection_;
  delete CMessageChangeFamilyStabilityNotify::default_instance_;
  delete CMessageChangeFamilyStabilityNotify_reflection_;
  delete CMessageS2GJoinOnTimeOpenBattleRequest::default_instance_;
  delete CMessageS2GJoinOnTimeOpenBattleRequest_reflection_;
  delete CMessageSyncGTAndLWNotify::default_instance_;
  delete CMessageSyncGTAndLWNotify_reflection_;
  delete CMessageS2GBattleClose::default_instance_;
  delete CMessageS2GBattleClose_reflection_;
  delete CMessageS2GIntoCorpsBossRepetion::default_instance_;
  delete CMessageS2GIntoCorpsBossRepetion_reflection_;
  delete CMessgeS2GEndCorpsBossRepetion::default_instance_;
  delete CMessgeS2GEndCorpsBossRepetion_reflection_;
  delete PBGroupTasks::default_instance_;
  delete PBGroupTasks_reflection_;
  delete CMessageGateCheckGroupPublishRequest::default_instance_;
  delete CMessageGateCheckGroupPublishRequest_reflection_;
  delete CMessageGatePublishGroupRequest::default_instance_;
  delete CMessageGatePublishGroupRequest_reflection_;
  delete PBGroupInfo::default_instance_;
  delete PBGroupInfo_reflection_;
  delete CMessageGateCheckGroupPublishResponse::default_instance_;
  delete CMessageGateCheckGroupPublishResponse_reflection_;
  delete CMessageGatePublishGroupResponse::default_instance_;
  delete CMessageGatePublishGroupResponse_reflection_;
}

void protobuf_AddDesc_servermessage_5fpb_2ehxx() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_ibstore_5fpb_2ehxx();
  ::protobuf_AddDesc_property_5fpb_2ehxx();
  ::protobuf_AddDesc_countrymessage_5fpb_2ehxx();
  ::protobuf_AddDesc_boursemessage_5fpb_2ehxx();
  #ifndef _NO_PROTOBUF_STR_
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024servermessage_pb.hxx\032\016ibstore_pb.hxx\032\017"
    "property_pb.hxx\032\025countrymessage_pb.hxx\032\024"
    "boursemessage_pb.hxx\"\232\001\n\035CMessageYQSActi"
    "vtyStartNotice\022\n\n\002id\030\001 \001(\r\022\016\n\006campid\030\002 \001"
    "(\r\022\022\n\ncamprankid\030\003 \001(\r\022\017\n\007growing\030\004 \001(\r\022"
    "\r\n\005level\030\005 \001(\r\022\024\n\014handindawnum\030\006 \001(\r\022\023\n\013"
    "settlephase\030\007 \001(\r\"G\n#CMessageS2GGetCampR"
    "ankForYQSRequest\022\020\n\010playerId\030\001 \001(\r\022\016\n\006pa"
    "ram1\030\002 \001(\r\"b\n\026CampRankForYQSForSever\022\014\n\004"
    "rank\030\001 \001(\r\022\016\n\006campid\030\002 \001(\r\022\024\n\014growinggra"
    "de\030\003 \001(\r\022\024\n\014growingphase\030\004 \001(\r\"\207\001\n$CMess"
    "ageG2SGetCampRankForYQSResponse\022\016\n\006resul"
    "t\030\001 \001(\r\022\020\n\010playerId\030\002 \001(\r\022\016\n\006param1\030\003 \001("
    "\r\022-\n\014camprankinfo\030\004 \003(\0132\027.CampRankForYQS"
    "ForSever\"b\n\"CMessageS2GUpdateYQSGrowingR"
    "equest\022\020\n\010playerid\030\001 \001(\r\022\016\n\006campid\030\002 \001(\r"
    "\022\032\n\022growingchangevalue\030\003 \001(\r\"\330\001\n#CMessag"
    "eG2SUpdateYQSGrowingResponse\022\016\n\006result\030\001"
    " \001(\r\022\020\n\010playerid\030\002 \001(\r\022\n\n\002id\030\003 \001(\r\022\016\n\006ca"
    "mpid\030\004 \001(\r\022\022\n\ncamprankid\030\005 \001(\r\022\017\n\007growin"
    "g\030\006 \001(\r\022\r\n\005level\030\007 \001(\r\022\024\n\014handindawnum\030\010"
    " \001(\r\022\023\n\013settlephase\030\t \001(\r\022\024\n\014deltagrowin"
    "g\030\n \001(\r\"\221\002\n\027CMessageG2SSettleNotice\022\n\n\002i"
    "d\030\001 \001(\r\022\016\n\006campid\030\002 \001(\r\022\022\n\ncamprankid\030\003 "
    "\001(\r\022\017\n\007growing\030\004 \001(\r\022\r\n\005level\030\005 \001(\r\022\024\n\014h"
    "andindawnum\030\006 \001(\r\022\023\n\013settlephase\030\007 \001(\r\022\024"
    "\n\014settlefinish\030\010 \001(\r\022\020\n\010noticeid\030\t \001(\r\022\024"
    "\n\014noticeparam1\030\n \001(\r\022\024\n\014noticeparam2\030\013 \001"
    "(\r\022\024\n\014noticeparam3\030\014 \001(\r\022\021\n\tencourage\030\r "
    "\001(\r\"\211\001\n\027CMessageInternalTimeOut\022\017\n\007Timer"
    "ID\030\001 \001(\r\022\017\n\007OwnerID\030\002 \001(\r\022\021\n\tTimerMark\030\003"
    " \001(\r\022\023\n\013MillSeconds\030\004 \001(\r\022\021\n\tCalledNum\030\005"
    " \001(\r\022\021\n\tOtherInfo\030\006 \003(\r\":\n\023CMessageCount"
    "ryInfo\022\016\n\006Length\030\001 \001(\r\022\023\n\013CountryList\030\002 "
    "\001(\014\"^\n\032CMessageRedirectGErrorCode\022\016\n\006Cha"
    "rID\030\001 \001(\r\022\021\n\tErrorCode\030\002 \001(\005\022\016\n\006LineID\030\003"
    " \001(\r\022\r\n\005MapID\030\004 \001(\r\"^\n\032CMessageRedirectS"
    "ErrorCode\022\016\n\006CharID\030\001 \001(\r\022\021\n\tErrorCode\030\002"
    " \001(\005\022\016\n\006LineID\030\003 \001(\r\022\r\n\005MapID\030\004 \001(\r\"\230\001\n&"
    "CMessagePlayerRedirectEnterMapResponse\022\022"
    "\n\nCommHandle\030\001 \001(\r\022\016\n\006CharID\030\002 \001(\r\022\016\n\006Li"
    "neID\030\003 \001(\r\022\r\n\005MapID\030\004 \001(\r\022\014\n\004PosX\030\005 \001(\r\022"
    "\014\n\004PosY\030\006 \001(\r\022\017\n\007MapName\030\007 \001(\t\"\250\001\n\026CMess"
    "ageGateInfoNotice\022\017\n\007Address\030\001 \001(\t\022\020\n\010Ho"
    "stName\030\002 \001(\t\022\023\n\013GateVersion\030\003 \001(\r\022\017\n\007Wor"
    "ldID\030\004 \001(\r\022\020\n\010GateCode\030\005 \001(\t\022\022\n\nGatePass"
    "wd\030\006 \001(\t\022\017\n\007GateMac\030\007 \001(\t\022\016\n\006GameID\030\010 \001("
    "\r\"-\n\030CMessageGateInfoResponse\022\021\n\tErrorCo"
    "de\030\001 \001(\005\"\202\002\n\035CMessagePlayerEnterGateNoti"
    "ce\022\022\n\nCommHandle\030\001 \001(\r\022\022\n\nLoginToken\030\002 \001"
    "(\r\022\021\n\tAccountID\030\003 \001(\r\022\021\n\tAdultFlag\030\004 \001(\r"
    "\022\020\n\010UserFlag\030\005 \001(\r\022\021\n\tUserClass\030\006 \001(\r\022\021\n"
    "\tUserPoint\030\007 \001(\r\022\030\n\020WorldPlayerLimit\030\010 \001"
    "(\r\022\022\n\nUserStatus\030\t \001(\r\022\016\n\006GameID\030\n \001(\r\022\r"
    "\n\005cpuid\030\013 \001(\005\022\016\n\006diskid\030\014 \001(\005\"\225\001\n\037CMessa"
    "gePlayerEnterGateResponse\022\022\n\nCommHandle\030"
    "\001 \001(\r\022\021\n\tAccountID\030\002 \001(\r\022\022\n\nLoginToken\030\003"
    " \001(\r\022\021\n\tErrorCode\030\004 \001(\005\022\017\n\007WorldID\030\005 \001(\005"
    "\022\023\n\013OtherClient\030\006 \001(\r\"B\n\035CMessagePlayerL"
    "eaveGateNotice\022\021\n\tAccountID\030\001 \001(\r\022\016\n\006Rea"
    "son\030\002 \001(\r\"\302\001\n\030CMessageServerInfoNotice\022\017"
    "\n\007Address\030\001 \001(\t\022\022\n\nServerName\030\002 \001(\t\022\025\n\rS"
    "erverVersion\030\003 \001(\r\022\027\n\017TemplateVersion\030\004 "
    "\001(\r\022\023\n\013TaskVersion\030\005 \001(\r\022\020\n\010ServerID\030\006 \001"
    "(\r\022\022\n\nLaunchMode\030\007 \001(\r\022\026\n\016PlayerCapacity"
    "\030\010 \001(\r\"M\n\032CMessageServerInfoResponse\022\017\n\007"
    "WorldID\030\001 \001(\r\022\016\n\006LineID\030\002 \001(\r\022\016\n\006GameID\030"
    "\003 \001(\r\"\230\006\n\034CMessagePlayerEnterMapNotice\022\022"
    "\n\nLoginToken\030\001 \001(\r\022\016\n\006LineID\030\002 \001(\r\022\r\n\005Ma"
    "pID\030\003 \001(\r\022\014\n\004PosX\030\004 \001(\r\022\014\n\004PosY\030\005 \001(\r\022\016\n"
    "\006CharID\030\006 \001(\r\022\021\n\tAccountID\030\007 \001(\r\022\021\n\tAdul"
    "tFlag\030\010 \001(\r\022\024\n\014ValidSeconds\030\t \001(\005\022\020\n\010Fam"
    "ilyID\030\n \001(\r\022\022\n\nFamilyName\030\013 \001(\t\022\026\n\016IsFam"
    "ilyHeader\030\014 \001(\r\022\024\n\014IfHasApplies\030\r \001(\r\022\017\n"
    "\007CorpsID\030\016 \001(\r\022\021\n\tCorpsName\030\017 \001(\t\022\026\n\016IsC"
    "orperHeader\030\020 \001(\r\022\027\n\017IfHasCorpsApply\030\021 \001"
    "(\r\022\026\n\016IfTracedPlayer\030\022 \001(\r\022\013\n\003Key\030\023 \001(\004\022"
    "\026\n\016FamilyHeaderID\030\024 \001(\r\022\025\n\rCorpsHeaderID"
    "\030\025 \001(\r\022\022\n\nFamilyPost\030\026 \001(\r\022\021\n\tCorpsPost\030"
    "\027 \001(\r\022\030\n\020FamilyContribute\030\030 \001(\r\022\027\n\017Corps"
    "Contribute\030\031 \001(\r\022\023\n\013FamilyMoney\030\032 \001(\r\022\022\n"
    "\nCorpsMoney\030\033 \001(\r\022\017\n\007UnionID\030\034 \001(\r\022\021\n\tUn"
    "ionName\030\035 \001(\t\022\023\n\013HeadCorpsID\030\036 \001(\r\022\021\n\tCo"
    "untryID\030\037 \001(\r\022\022\n\nOfficialID\030  \001(\r\022\016\n\006Kin"
    "gID\030! \001(\r\022\020\n\010Password\030\" \001(\t\022\023\n\013ProtectTi"
    "me\030# \001(\r\022\026\n\016PasswordStatus\030$ \001(\r\022\031\n\021Prot"
    "ectTimeLength\030% \001(\r\022\023\n\013RoleWorldID\030& \001(\r"
    "\"\204\t\n\037CMessagePlayerRedirectMapNotice\022\022\n\n"
    "CommHandle\030\001 \001(\r\022\022\n\nLoginToken\030\002 \001(\r\022\016\n\006"
    "CharID\030\003 \001(\r\022\021\n\tAccountID\030\004 \001(\r\022\016\n\006LineI"
    "D\030\005 \001(\r\022\r\n\005MapID\030\006 \001(\r\022\014\n\004PosX\030\007 \001(\r\022\014\n\004"
    "PosY\030\010 \001(\r\022\020\n\010CharName\030\t \001(\t\022\016\n\006Gender\030\n"
    " \001(\r\022\016\n\006Metier\030\013 \001(\r\022\023\n\013Nationality\030\014 \001("
    "\r\022\020\n\010Facetype\030\r \001(\r\022\021\n\tCharlevel\030\016 \001(\r\022\013"
    "\n\003Exp\030\017 \001(\004\022\021\n\tLastlogin\030\020 \001(\r\022\022\n\nDataLe"
    "ngth\030\021 \001(\r\022\014\n\004Data\030\022 \001(\014\022\020\n\010TeamFlag\030\023 \001"
    "(\r\022\013\n\003Key\030\024 \001(\004\022\022\n\nEncryptKey\030\025 \001(\014\022\021\n\tP"
    "etTempID\030\026 \001(\r\022\025\n\rPetOnlineTime\030\027 \001(\r\022\017\n"
    "\007PetMode\030\030 \001(\r\022\035\n\010TeamData\030\031 \001(\0132\013.PBTea"
    "mInfo\022\027\n\007TeamMsg\030\032 \001(\0132\006.PBMsg\022\020\n\010Family"
    "ID\030\033 \001(\r\022\022\n\nFamilyName\030\034 \001(\t\022\026\n\016IsFamily"
    "Header\030\035 \001(\r\022\024\n\014IfHasApplies\030\036 \001(\r\022\017\n\007Co"
    "rpsID\030\037 \001(\r\022\021\n\tCorpsName\030  \001(\t\022\026\n\016IsCorp"
    "erHeader\030! \001(\r\022\027\n\017IfHasCorpsApply\030\" \001(\r\022"
    "\014\n\004Camp\030# \001(\r\022\026\n\016IfTracedPlayer\030$ \001(\r\022\026\n"
    "\016FamilyHeaderID\030% \001(\r\022\025\n\rCorpsHeaderID\030&"
    " \001(\r\022\024\n\014ValidSeconds\030\' \001(\005\022\021\n\tAdultFlag\030"
    "( \001(\r\022\022\n\nFamilyPost\030) \001(\r\022\021\n\tCorpsPost\030*"
    " \001(\r\022\030\n\020FamilyContribute\030+ \001(\r\022\027\n\017CorpsC"
    "ontribute\030, \001(\r\022\023\n\013FamilyMoney\030- \001(\r\022\022\n\n"
    "CorpsMoney\030. \001(\r\022\017\n\007UnionID\030/ \001(\r\022\021\n\tUni"
    "onName\0300 \001(\t\022\023\n\013HeadCorpsID\0301 \001(\r\022\021\n\tCou"
    "ntryID\0302 \001(\r\022\022\n\nOfficialID\0303 \001(\r\022\016\n\006King"
    "ID\0304 \001(\r\022\020\n\010Password\0305 \001(\t\022\023\n\013ProtectTim"
    "e\0306 \001(\r\022\026\n\016PasswordStatus\0307 \001(\r\022\031\n\021Prote"
    "ctTimeLength\0308 \001(\r\022\023\n\013RoleWorldID\0309 \001(\r\""
    "\221\001\n\036CMessagePlayerEnterMapResponse\022\021\n\tAc"
    "countID\030\001 \001(\r\022\016\n\006CharID\030\002 \001(\r\022\016\n\006LineID\030"
    "\003 \001(\r\022\r\n\005MapID\030\004 \001(\r\022\014\n\004PosX\030\005 \001(\r\022\014\n\004Po"
    "sY\030\006 \001(\r\022\021\n\tErrorCode\030\007 \001(\005\"6\n!CMessageP"
    "layerLoginCompleteNotice\022\021\n\tAccountID\030\001 "
    "\001(\r\"\206\002\n\034CMessagePlayerLeaveMapNotice\022\016\n\006"
    "CharID\030\001 \001(\r\022\021\n\tAccountID\030\002 \001(\r\022\036\n\006Reaso"
    "n\030\003 \001(\0162\016.EMLeaveReason\022\021\n\tCharLevel\030\004 \001"
    "(\r\022\022\n\nCharMetier\030\005 \001(\r\022\016\n\006Money1\030\006 \001(\r\022\016"
    "\n\006Money2\030\007 \001(\r\022\013\n\003Exp\030\010 \001(\004\022\022\n\nLogoutFla"
    "g\030\t \001(\r\022\037\n\010SaveFlag\030\n \001(\0162\r.EMSaveResult"
    "\022\032\n\022GlobalSceneWorldID\030\013 \001(\r\"0\n\036CMessage"
    "PlayerLeaveMapResponse\022\016\n\006CharID\030\001 \001(\r\"D"
    "\n\037CMessagePlayerReturn2GateNotice\022\021\n\tAcc"
    "ountID\030\001 \001(\r\022\016\n\006CharID\030\002 \001(\r\"3\n!CMessage"
    "PlayerReturn2GateResponse\022\016\n\006CharID\030\001 \001("
    "\r\"y\n\027CMessageCreateMapNotice\022\016\n\006LineID\030\001"
    " \003(\r\022\r\n\005MapID\030\002 \003(\r\022\017\n\007TplName\030\003 \003(\t\022\r\n\005"
    "Count\030\004 \001(\r\022\017\n\007RtnCode\030\005 \001(\r\022\016\n\006Notice\030\006"
    " \001(\t\"K\n\031CMessageCreateMapResponse\022\016\n\006Lin"
    "eID\030\001 \003(\r\022\r\n\005MapID\030\002 \003(\r\022\017\n\007TplName\030\003 \003("
    "\t\"1\n\013BattleLevel\022\020\n\010LevelMin\030\001 \001(\r\022\020\n\010Le"
    "velMax\030\002 \001(\r\"i\n\006PBDate\022\014\n\004Year\030\001 \001(\r\022\r\n\005"
    "Month\030\002 \001(\r\022\013\n\003Day\030\003 \001(\r\022\014\n\004Week\030\004 \001(\r\022\n"
    "\n\002Hr\030\005 \001(\r\022\016\n\006Minute\030\006 \001(\r\022\013\n\003Sec\030\007 \001(\r\""
    ">\n\013PBDateSpace\022\026\n\005Start\030\001 \001(\0132\007.PBDate\022\027"
    "\n\006finish\030\002 \001(\0132\007.PBDate\"\242\002\n\032CMessageRegi"
    "stRepetionInfo\022\016\n\006LineID\030\001 \001(\r\022\r\n\005MapID\030"
    "\002 \003(\r\022\021\n\tPlayerMax\030\003 \001(\r\022\021\n\tBackMapID\030\004 "
    "\001(\r\022\020\n\010BackPosX\030\005 \001(\r\022\020\n\010BackPosY\030\006 \001(\r\022"
    "\020\n\010CountMax\030\007 \001(\r\022\022\n\nRepetionID\030\010 \001(\r\022\033\n"
    "\005Level\030\t \003(\0132\014.BattleLevel\022\033\n\005Space\030\n \003("
    "\0132\014.PBDateSpace\022\024\n\014IsOnTimeOpen\030\013 \001(\r\022\024\n"
    "\014NotLimitTime\030\014 \001(\r\022\017\n\007Relogin\030\r \001(\r\"P\n\032"
    "CMessageDestroyRepetionMap\022\025\n\rRepetionIn"
    "dex\030\001 \001(\r\022\013\n\003Key\030\002 \001(\004\022\016\n\006Parame\030\003 \001(\r\"`"
    "\n\034CMessageG2SRepetionEventCode\022\016\n\006RoleID"
    "\030\001 \001(\005\022\014\n\004Code\030\002 \001(\005\022\022\n\nRepetionID\030\003 \001(\005"
    "\022\016\n\006Parame\030\004 \001(\005\"\276\003\n\035CMessagePlayerRedir"
    "ectRequest\022\016\n\006LineID\030\001 \001(\r\022\r\n\005MapID\030\002 \001("
    "\r\022\014\n\004PosX\030\003 \001(\r\022\014\n\004PosY\030\004 \001(\r\022\021\n\tAccount"
    "ID\030\005 \001(\r\022\016\n\006CharID\030\006 \001(\r\022\020\n\010CharName\030\007 \001"
    "(\t\022\016\n\006Gender\030\010 \001(\r\022\016\n\006Metier\030\t \001(\r\022\023\n\013Na"
    "tionality\030\n \001(\r\022\020\n\010Facetype\030\013 \001(\r\022\021\n\tCha"
    "rlevel\030\014 \001(\r\022\013\n\003Exp\030\r \001(\004\022\021\n\tLastlogin\030\016"
    " \001(\r\022\022\n\nDataLength\030\020 \001(\r\022\014\n\004Data\030\021 \001(\014\022\020"
    "\n\010TeamFlag\030\022 \001(\r\022\021\n\tTeamLevel\030\023 \001(\r\022\022\n\nE"
    "ncryptKey\030\024 \001(\014\022\035\n\010TeamInfo\030\025 \001(\0132\013.PBTe"
    "amInfo\022\021\n\tPetTempID\030\026 \001(\r\022\025\n\rPetOnlineTi"
    "me\030\027 \001(\r\022\017\n\007PetMode\030\030 \001(\r\"\216\001\n\036CMessagePl"
    "ayerRedirectResponse\022\016\n\006CharID\030\001 \001(\r\022\020\n\010"
    "Redirect\030\002 \001(\010\022\016\n\006LineID\030\003 \001(\r\022\r\n\005MapID\030"
    "\004 \001(\r\022\014\n\004PosX\030\005 \001(\r\022\014\n\004PosY\030\006 \001(\r\022\017\n\007Add"
    "ress\030\007 \001(\t\"\345\001\n CMessagePlayerEnterConfir"
    "mNotice\022\021\n\tAccountID\030\001 \001(\r\022\016\n\006CharID\030\002 \001"
    "(\r\022\020\n\010CharName\030\003 \001(\t\022\016\n\006LineID\030\004 \001(\r\022\r\n\005"
    "MapID\030\005 \001(\r\022\014\n\004Face\030\006 \001(\r\022\016\n\006Metier\030\007 \001("
    "\r\022\r\n\005Level\030\010 \001(\r\022\013\n\003Sex\030\t \001(\r\022\023\n\013Nationa"
    "lity\030\n \001(\r\022\r\n\005CSKey\030\013 \001(\014\022\017\n\007VipFlag\030\014 \001"
    "(\r\",\n\032CMessageSceneNotOpenNotice\022\016\n\006Char"
    "ID\030\001 \001(\r\"K\n\033CMessageUpdateVersionNotice\022"
    "\027\n\017TemplateVersion\030\001 \001(\r\022\023\n\013TaskVersion\030"
    "\002 \001(\r\"C\n\033CMessageRegistServerRequest\022\022\n\n"
    "ServerType\030\001 \001(\r\022\020\n\010ServerID\030\002 \001(\r\"D\n\034CM"
    "essageRegistServerResponse\022\022\n\nServerType"
    "\030\001 \001(\r\022\020\n\010ServerID\030\002 \001(\r\"?\n\027CMessageHear"
    "tBeatNotice\022\022\n\nServerType\030\001 \001(\r\022\020\n\010Serve"
    "rID\030\002 \001(\r\"U\n!CMessagePlayerOnLineFriendR"
    "equest\022\017\n\007CharIDs\030\001 \003(\r\022\021\n\tRequester\030\002 \001"
    "(\r\022\014\n\004Flag\030\003 \001(\r\"\217\001\n\022PBSinglePlayerInfo\022"
    "\016\n\006CharID\030\001 \001(\r\022\016\n\006Status\030\002 \001(\r\022\014\n\004Name\030"
    "\003 \001(\t\022\013\n\003Sex\030\004 \001(\r\022\014\n\004Face\030\005 \001(\r\022\016\n\006Nati"
    "on\030\006 \001(\r\022\017\n\007VipFlag\030\007 \001(\r\022\017\n\007noExist\030\010 \001"
    "(\r\"k\n\"CMessagePlayerOnLineFriendResponse"
    "\022$\n\007Friends\030\001 \003(\0132\023.PBSinglePlayerInfo\022\021"
    "\n\tRequester\030\002 \001(\r\022\014\n\004Flag\030\003 \001(\r\"B\n CMess"
    "agePlayerChangeStatusNotice\022\016\n\006CharID\030\001 "
    "\001(\r\022\016\n\006Status\030\002 \001(\r\"Y\n\033CMessageGameHeart"
    "BeatNotice\022\020\n\010ServerID\030\001 \001(\r\022\017\n\007CharIDs\030"
    "\002 \003(\r\022\027\n\017ExternalCharIDs\030\003 \003(\r\"<\n\032CMessa"
    "geERatingProtoStream\022\016\n\006Length\030\001 \001(\r\022\016\n\006"
    "buffer\030\002 \001(\014\"?\n\032CMessageERatingStateNoti"
    "ce\022\021\n\tGatewayID\030\001 \001(\r\022\016\n\006binded\030\002 \001(\r\"/\n"
    "\035CMessageCreateGateTeamRequest\022\016\n\006CharID"
    "\030\001 \001(\r\"@\n\036CMessageCreateGateTeamResponse"
    "\022\016\n\006CharID\030\001 \001(\r\022\016\n\006TeamID\030\002 \001(\r\"i\n\033CMes"
    "sageJoinGateTeamRequest\022\021\n\tSrcCharID\030\001 \001"
    "(\r\022\021\n\tDesCharID\030\002 \001(\r\022\021\n\tSrcNation\030\003 \001(\r"
    "\022\021\n\tDesNaiton\030\004 \001(\r\"L\n\034CMessageJoinGateT"
    "eamResponse\022\021\n\tDesCharID\030\001 \001(\r\022\031\n\004Item\030\002"
    " \001(\0132\013.PBTeamItem\"Q\n\030CMessageRequestJoin"
    "Reply\022\021\n\tSrcCharID\030\001 \001(\r\022\021\n\tDesCharID\030\002 "
    "\001(\r\022\017\n\007RtnCode\030\003 \001(\r\"h\n\032CMessageJoinGate"
    "TeamInvite\022\021\n\tSrcCharID\030\001 \001(\r\022\021\n\tDesChar"
    "ID\030\002 \001(\r\022\021\n\tSrcNation\030\003 \001(\r\022\021\n\tDesNaiton"
    "\030\004 \001(\r\"\230\001\n\036CMessageJoinTeamInviteRespons"
    "e\022\021\n\tDesCharID\030\001 \001(\r\022\016\n\006TeamID\030\002 \001(\r\022\021\n\t"
    "SrcCharID\030\003 \001(\r\022\017\n\007SrcName\030\004 \001(\t\022\020\n\010Head"
    "Name\030\005 \001(\t\022\035\n\010TeamInfo\030\006 \001(\0132\013.PBTeamInf"
    "o\"`\n\027CMessageInviteJoinReply\022\021\n\tSrcCharI"
    "D\030\001 \001(\r\022\021\n\tDesCharID\030\002 \001(\r\022\016\n\006TeamID\030\003 \001"
    "(\r\022\017\n\007RtnCode\030\004 \001(\r\"u\n\026CMessageInvite2Re"
    "quest\022\034\n\007SrcItem\030\001 \001(\0132\013.PBTeamItem\022\021\n\tD"
    "esCharID\030\002 \001(\r\022\023\n\013InviterName\030\003 \001(\t\022\025\n\rI"
    "nviterCharID\030\004 \001(\r\"J\n\036CMessageKickoutGat"
    "eTeamRequest\022\022\n\nHeadCharID\030\001 \001(\r\022\024\n\014Memb"
    "erCharID\030\002 \001(\r\"C\n\033CMessageChangeHeaderRe"
    "quest\022\021\n\tOldHeader\030\001 \001(\r\022\021\n\tNewHeader\030\002 "
    "\001(\r\"?\n\037CMessageChangeDistributeRequest\022\016"
    "\n\006CharID\030\001 \001(\r\022\014\n\004Mode\030\002 \001(\r\"@\n CMessage"
    "ChangeDistributeResponse\022\016\n\006CharID\030\001 \001(\r"
    "\022\014\n\004Mode\030\002 \001(\r\".\n\034CMessageLeaveGateTeamR"
    "equest\022\016\n\006CharID\030\001 \001(\r\",\n\032CMessageEndGat"
    "eTeamRequest\022\016\n\006CharID\030\001 \001(\r\"m\n\037CMessage"
    "NotifySceneToUpdateTeam\022\014\n\004Code\030\001 \001(\r\022\021\n"
    "\tDesCharID\030\002 \001(\r\022\016\n\006HeadID\030\003 \001(\r\022\031\n\004Item"
    "\030\004 \001(\0132\013.PBTeamItem\"U\n!CMessageNotifySce"
    "neToSendTeamList\022\021\n\tDesCharID\030\001 \001(\r\022\035\n\010T"
    "eamInfo\030\002 \001(\0132\013.PBTeamInfo\"[\n\030CMessageNo"
    "tifyErrToScene\022\021\n\tDesCharID\030\001 \001(\r\022\014\n\004Cod"
    "e\030\002 \001(\r\022\016\n\006Param1\030\003 \001(\t\022\016\n\006Param2\030\004 \001(\t\""
    "N\n!CMessageUpdateTeamPropertyRequest\022\016\n\006"
    "CharID\030\001 \001(\r\022\031\n\004Info\030\002 \001(\0132\013.PBTeamInfo\""
    "O\n\"CMessageUpdateTeamPropertyResponse\022\016\n"
    "\006CharID\030\001 \001(\r\022\031\n\004Info\030\002 \001(\0132\013.PBTeamInfo"
    "\"O\n\025CMessageFollowRequest\022\016\n\006CharID\030\001 \001("
    "\r\022\022\n\nActionType\030\002 \001(\r\022\022\n\nResultCode\030\003 \001("
    "\r\"`\n\026CMessageFollowResponse\022\016\n\006CharID\030\001 "
    "\001(\r\022\016\n\006HeadID\030\002 \001(\r\022\022\n\nActionType\030\003 \001(\r\022"
    "\022\n\nResultCode\030\004 \001(\r\"Z\n\037CMessageSendClaim"
    "RecruitRequest\022\016\n\006CharID\030\001 \001(\r\022\023\n\003Msg\030\002 "
    "\001(\0132\006.PBMsg\022\022\n\nActionType\030\003 \001(\r\"[\n CMess"
    "ageSendClaimRecruitResponse\022\016\n\006CharID\030\001 "
    "\001(\r\022\023\n\003Msg\030\002 \001(\0132\006.PBMsg\022\022\n\nActionType\030\003"
    " \001(\r\"\336\001\n CMessageQueryClaimRecruitReques"
    "t\022\016\n\006CharID\030\001 \001(\r\022\022\n\nActionType\030\002 \001(\r\022\025\n"
    "\rRootCondition\030\003 \001(\r\022\024\n\014SubCondition\030\004 \001"
    "(\r\022\r\n\005Level\030\005 \001(\r\022\016\n\006Metier\030\006 \001(\r\022\020\n\010Min"
    "Level\030\007 \001(\r\022\020\n\010MaxLevel\030\010 \001(\r\022\023\n\013Nationa"
    "lity\030\t \001(\r\022\021\n\tPageIndex\030\n \001(\r\"\203\001\n!CMessa"
    "geQueryClaimRecruitResponse\022\016\n\006CharID\030\001 "
    "\001(\r\022\023\n\003Msg\030\002 \003(\0132\006.PBMsg\022\021\n\tPageIndex\030\003 "
    "\001(\r\022\022\n\nTotalIndex\030\004 \001(\r\022\022\n\nActionType\030\005 "
    "\001(\r\"G\n!CMessageDeleteClaimRecruitRequest"
    "\022\016\n\006CharID\030\001 \001(\r\022\022\n\nActionType\030\002 \001(\r\"H\n\""
    "CMessageDeleteClaimRecruitResponse\022\016\n\006Ch"
    "arID\030\001 \001(\r\022\022\n\nActionType\030\002 \001(\r\"/\n\035CMessa"
    "geObtainGateTeamRequest\022\016\n\006CharID\030\001 \001(\r\""
    "@\n CMessageClearInvReqRecordRequest\022\014\n\004T"
    "ype\030\001 \001(\r\022\016\n\006CharID\030\002 \001(\r\"\320\001\n\005PBMsg\022\014\n\004T"
    "ype\030\001 \001(\r\022\016\n\006CharID\030\002 \001(\r\022\014\n\004Name\030\003 \001(\t\022"
    "\016\n\006Metier\030\004 \001(\r\022\r\n\005Level\030\005 \001(\r\022\020\n\010MaxLev"
    "el\030\006 \001(\r\022\020\n\010MinLevel\030\007 \001(\r\022\017\n\007Content\030\010 "
    "\001(\t\022\r\n\005Count\030\t \001(\r\022\021\n\tRootStyle\030\n \001(\r\022\020\n"
    "\010SubStyle\030\013 \001(\r\022\023\n\013Nationality\030\014 \001(\r\"\321\002\n"
    "\nPBTeamItem\022\016\n\006CharID\030\001 \001(\r\022\014\n\004Name\030\002 \001("
    "\t\022\021\n\tAccountID\030\003 \001(\r\022\014\n\004Type\030\004 \001(\r\022\014\n\004Fa"
    "ce\030\005 \001(\r\022\016\n\006Metier\030\006 \001(\r\022\r\n\005Level\030\007 \001(\r\022"
    "\013\n\003Sex\030\010 \001(\r\022\n\n\002HP\030\t \001(\r\022\n\n\002MP\030\n \001(\r\022\n\n\002"
    "AP\030\013 \001(\r\022\014\n\004PosX\030\014 \001(\r\022\014\n\004PosY\030\r \001(\r\022\016\n\006"
    "LineID\030\016 \001(\r\022\r\n\005MapID\030\017 \001(\r\022\016\n\006Status\030\020 "
    "\001(\r\022\023\n\013Nationality\030\021 \001(\r\022\035\n\010BuffList\030\022 \001"
    "(\0132\013.PBBuffList\022\030\n\020RepetionMapIndex\030\023 \001("
    "\r\022\r\n\005Order\030\024 \001(\r\"\211\001\n\nPBTeamInfo\022\024\n\014Heade"
    "rCharID\030\001 \001(\r\022\026\n\016DistributeMode\030\002 \001(\r\022\020\n"
    "\010HeadName\030\003 \001(\t\022\r\n\005Count\030\004 \001(\r\022\016\n\006TeamID"
    "\030\005 \001(\r\022\034\n\007Members\030\006 \003(\0132\013.PBTeamItem\"-\n\032"
    "CMessageGateShutDownNotice\022\017\n\007WorldID\030\001 "
    "\001(\r\"y\n\034CMessageKickOffPlayerRequest\022\021\n\tA"
    "ccountID\030\001 \001(\r\022\016\n\006CharID\030\002 \001(\r\022\016\n\006Reason"
    "\030\003 \001(\005\022\021\n\tAnotherIP\030\004 \001(\r\022\023\n\013RoleWorldID"
    "\030\005 \001(\r\"g\n\035CMessageKickOffPlayerResponse\022"
    "\021\n\tAccountID\030\001 \001(\r\022\016\n\006CharID\030\002 \001(\r\022\016\n\006Re"
    "sult\030\003 \001(\005\022\023\n\013RoleWorldID\030\004 \001(\r\"\215\001\n!CMes"
    "sageGetPlayerMailiInfoRequest\022\016\n\006CharID\030"
    "\001 \001(\005\022\020\n\010RoleName\030\002 \001(\t\022\016\n\006RoleID\030\003 \001(\r\022"
    "\020\n\010QueryWay\030\004 \001(\005\022\021\n\tQueryType\030\005 \001(\r\022\021\n\t"
    "QueryData\030\006 \003(\r\"\347\001\n!CMessageGetPlayerMai"
    "lInfoResponse\022\016\n\006CharID\030\001 \001(\005\022\021\n\tErrorCo"
    "de\030\002 \001(\005\022\016\n\006RoleID\030\003 \001(\r\022\020\n\010RoleName\030\004 \001"
    "(\t\022\025\n\rRoleOfCountry\030\005 \001(\005\022\025\n\rRoleInCount"
    "ry\030\006 \001(\005\022\022\n\nRoleOnline\030\007 \001(\005\022\025\n\rRoleMail"
    "Count\030\010 \001(\005\022\021\n\tQueryType\030\t \001(\r\022\021\n\tQueryD"
    "ata\030\n \003(\r\"g\n\035CMessageChangeMailCountNoti"
    "fy\022\016\n\006CharID\030\001 \001(\005\022\020\n\010CharName\030\002 \001(\t\022\020\n\010"
    "QueryWay\030\003 \001(\005\022\022\n\nNumChanged\030\004 \001(\005\"\273\002\n\034C"
    "MessageUserIbExchangeNotice\022\022\n\nPurchaseI"
    "D\030\001 \001(\004\022\021\n\tAccountID\030\002 \001(\r\022\016\n\006RoleID\030\003 \001"
    "(\r\022\020\n\010GenderID\030\004 \001(\r\022\020\n\010MetierID\030\005 \001(\r\022\r"
    "\n\005Level\030\006 \001(\r\022\020\n\010RatingID\030\007 \001(\r\022\016\n\006IBCod"
    "e\030\010 \001(\t\022\023\n\013PackageFlag\030\t \001(\r\022\r\n\005Count\030\n "
    "\001(\r\022\017\n\007PayTime\030\013 \001(\005\022\016\n\006UserIP\030\014 \001(\r\022\021\n\t"
    "SubjectID\030\r \001(\r\022\021\n\tAuditFlag\030\016 \001(\r\022\r\n\005Pr"
    "ice\030\017 \001(\005\022\025\n\rDiscountPrice\030\020 \001(\005\"\207\001\n\033CMe"
    "ssageUserUseIbItemNotice\022\021\n\tAccountID\030\001 "
    "\001(\r\022\016\n\006RoleID\030\002 \001(\r\022\022\n\nPurchaseID\030\003 \001(\004\022"
    "\020\n\010GenderID\030\004 \001(\r\022\020\n\010MetierID\030\005 \001(\r\022\r\n\005L"
    "evel\030\006 \001(\r\"J\n\030CMessageAddFriendRequest\022\r"
    "\n\005SrcID\030\001 \001(\007\022\r\n\005DesID\030\002 \001(\007\022\020\n\010SrcLevel"
    "\030\003 \001(\r\"\314\001\n\031CMessageAddFriendResponse\022\020\n\010"
    "SendBack\030\001 \001(\r\022\017\n\007RetCode\030\002 \001(\r\022\021\n\tSrcCh"
    "arID\030\003 \001(\r\022\021\n\tSrcMetier\030\004 \001(\r\022\020\n\010SrcLeve"
    "l\030\005 \001(\r\022\016\n\006SrcSex\030\006 \001(\r\022\017\n\007SrcHead\030\007 \001(\r"
    "\022\017\n\007SrcName\030\010 \001(\t\022\021\n\tDesCharID\030\t \001(\r\022\017\n\007"
    "DesName\030\n \001(\t\"M\n\030CMessageGetCharIDReques"
    "t\022\016\n\006TypeID\030\001 \001(\r\022\014\n\004Name\030\002 \001(\t\022\023\n\013SrcEn"
    "tityID\030\003 \001(\007\"y\n\031CMessageGetCharIDRespons"
    "e\022\016\n\006TypeID\030\001 \001(\r\022\016\n\006CharID\030\002 \001(\007\022\023\n\013Src"
    "EntityID\030\003 \001(\007\022\014\n\004Name\030\004 \001(\t\022\014\n\004Head\030\005 \001"
    "(\r\022\013\n\003Sex\030\006 \001(\r\"<\n\034CMessageRoleChangeCam"
    "pNotice\022\016\n\006RoleID\030\001 \001(\005\022\014\n\004Camp\030\002 \001(\005\"/\n"
    "\035CMessageLoginSvrStartUpNotice\022\016\n\006Status"
    "\030\001 \001(\005\"9\n!CMessageGate2LoginHeartBeatNot"
    "ice\022\024\n\014PlayerAtGate\030\001 \001(\r\"\256\007\n\022PBPersonal"
    "RankInfo\022\016\n\006CharID\030\001 \001(\r\022\020\n\010CharName\030\002 \001"
    "(\t\022\r\n\005Level\030\003 \001(\r\022\r\n\005Money\030\004 \001(\r\022\024\n\014Boun"
    "dedMoney\030\005 \001(\r\022\026\n\016KillEnemyNumIn\030\006 \001(\r\022\027"
    "\n\017KillEnemyNumOut\030\007 \001(\r\022\r\n\005Honor\030\010 \001(\r\022\025"
    "\n\rComprehensive\030\t \001(\r\022\016\n\006DieNum\030\n \001(\r\022\026\n"
    "\016CompletedTasks\030\013 \001(\r\022\017\n\007Country\030\014 \001(\r\022\016"
    "\n\006Metier\030\r \001(\r\022\r\n\005Title\030\016 \001(\r\022\022\n\nOnLineT"
    "ime\030\017 \001(\r\022\022\n\nPantaoMark\030\020 \001(\r\022\024\n\014Longgon"
    "gMark\030\021 \001(\r\022\013\n\003Exp\030\022 \001(\004\022\031\n\021OriginRelive"
    "Times\030\023 \001(\r\022\031\n\021KillSameNationNum\030\024 \001(\r\022\023"
    "\n\013KillOgreNum\030\025 \001(\r\022\021\n\tUpFailNum\030\026 \001(\r\022\033"
    "\n\023TodayKillEnemyNumIn\030\027 \001(\r\022\034\n\024TodayKill"
    "EnemyNumOut\030\030 \001(\r\022\022\n\nTodayHonor\030\031 \001(\r\022\017\n"
    "\007Dayanta\030\032 \001(\r\022\023\n\013Lianhuadong\030\033 \001(\r\022\025\n\rH"
    "uangfengdong\030\034 \001(\r\022\023\n\013AchivePoint\030\035 \001(\r\022"
    "\022\n\nCharmValue\030\036 \001(\r\022\023\n\013FlyDungMark\030\037 \001(\r"
    "\022\020\n\010Zhangong\030  \001(\r\022\016\n\006Zhiguo\030! \001(\r\022\021\n\tTo"
    "ngshuai\030\" \001(\r\022\016\n\006Wisall\030# \001(\r\022\017\n\007YunXiao"
    "\030$ \001(\r\022\024\n\014WeekIncCharm\030% \001(\r\022\r\n\005Shide\030& "
    "\001(\r\022\024\n\014XianYuanMark\030\' \001(\r\022\020\n\010Chushitu\030( "
    "\001(\r\022\024\n\014YunxiaoLevel\030) \001(\r\022\024\n\014WudidongMar"
    "k\030* \001(\r\022\021\n\tDaLuanDou\030+ \001(\r\022\026\n\016DaLuanDouT"
    "otal\030, \001(\r\022\021\n\tGlobalWar\030- \001(\r\022\023\n\013SpiritS"
    "core\030. \001(\r\"y\n\036CMessagePersonalRankInfoNo"
    "tify\022*\n\rPersonalRanks\030\001 \003(\0132\023.PBPersonal"
    "RankInfo\022\014\n\004Flag\030\002 \001(\r\022\r\n\005RType\030\003 \001(\r\022\016\n"
    "\006IsOver\030\004 \001(\r\"2\n\014PBRankTopTen\022\020\n\010RankTyp"
    "e\030\001 \001(\r\022\020\n\010CharList\030\002 \003(\r\"I\n\022CMessageRan"
    "kRemove\022\020\n\010CharName\030\001 \001(\t\022\020\n\010RankType\030\002 "
    "\001(\r\022\017\n\007Refresh\030\003 \001(\r\"S\n\037CMessagePersonal"
    "RankInfoRequest\022!\n\nTopTenList\030\001 \003(\0132\r.PB"
    "RankTopTen\022\r\n\005RType\030\002 \001(\r\"@\n\033CMessageNew"
    "RankTopTenNotify\022!\n\nTopTenList\030\001 \003(\0132\r.P"
    "BRankTopTen\"\252\001\n&CMessageRoleGameInfoRepo"
    "rtToGateNotify\022\016\n\006CharID\030\001 \001(\r\022\r\n\005Level\030"
    "\002 \001(\r\022\r\n\005MapID\030\003 \001(\r\022\016\n\006LineID\030\004 \001(\r\022\016\n\006"
    "Metier\030\005 \001(\r\022\017\n\007Country\030\006 \001(\r\022\020\n\010MasterI"
    "D\030\007 \003(\r\022\017\n\007PKValue\030\010 \001(\r\"X\n\026CMessageBatt"
    "leTeamWait\022\016\n\006CharID\030\001 \001(\r\022\r\n\005Level\030\002 \001("
    "\r\022\020\n\010BattleID\030\003 \001(\r\022\r\n\005MapID\030\004 \001(\r\"Q\n\036CM"
    "essageBattleWaitLeaveRequest\022\016\n\006CharID\030\001"
    " \001(\r\022\020\n\010BattleID\030\002 \001(\r\022\r\n\005MapID\030\003 \001(\r\"\224\001"
    "\n\030CMessageBattleJoinNotice\022\016\n\006CharID\030\001 \001"
    "(\r\022\020\n\010BattleID\030\002 \001(\r\022\r\n\005MapID\030\003 \001(\r\022\014\n\004T"
    "ype\030\004 \001(\r\022\022\n\nBattleTime\030\005 \001(\r\022\013\n\003Key\030\006 \001"
    "(\r\022\030\n\020IntoLastRepetion\030\007 \001(\r\"h\n\030CMessage"
    "BattlePlayerJoin\022\016\n\006CharID\030\001 \001(\r\022\020\n\010Batt"
    "leID\030\002 \001(\r\022\013\n\003Key\030\003 \001(\004\022\016\n\006CampID\030\004 \001(\r\022"
    "\r\n\005MapID\030\005 \001(\r\"K\n\030CMessageBattleWaitNoti"
    "ce\022\016\n\006CharID\030\001 \001(\r\022\020\n\010BattleID\030\002 \001(\r\022\r\n\005"
    "MapID\030\003 \001(\r\"@\n\035CMessageServerValidateReq"
    "uest\022\017\n\007MacAddr\030\001 \001(\t\022\016\n\006IPAddr\030\002 \001(\t\"R\n"
    "\037CMessageBattleWaitLeaveResponse\022\016\n\006Char"
    "ID\030\001 \001(\r\022\020\n\010BattleID\030\002 \001(\r\022\r\n\005MapID\030\003 \001("
    "\r\"5\n\036CMessageServerValidateResponse\022\023\n\013C"
    "heckResult\030\001 \001(\r\"6\n\021CTracedPlayerInfo\022\021\n"
    "\tAccountID\030\001 \001(\r\022\016\n\006RoleID\030\002 \003(\r\"D\n\032CMes"
    "sageNotifyTracedPlayer\022&\n\nPlayerList\030\001 \003"
    "(\0132\022.CTracedPlayerInfo\"M\n\033CMessageBattle"
    "CreateRequest\022\020\n\010BattleID\030\001 \001(\r\022\r\n\005Level"
    "\030\002 \001(\r\022\r\n\005MapID\030\003 \001(\r\"L\n\034CMessageBattleC"
    "reateResponse\022\020\n\010BattleID\030\001 \001(\r\022\013\n\003Key\030\002"
    " \001(\004\022\r\n\005MapID\030\003 \001(\r\"B\n\032CMessageFamilyIDN"
    "ameNotify\022\020\n\010FamilyID\030\001 \003(\r\022\022\n\nFamilyNam"
    "e\030\002 \003(\t\"M\n\nPBCorpsNpc\022\r\n\005NpcID\030\001 \001(\r\022\017\n\007"
    "CorpsID\030\002 \001(\r\022\021\n\tCorpsName\030\003 \001(\t\022\014\n\004Type"
    "\030\004 \001(\r\"e\n\025CMessageNpcListNotify\022\r\n\005NpcID"
    "\030\001 \003(\r\022\020\n\010FamilyID\030\002 \003(\r\022\014\n\004Type\030\003 \001(\r\022\035"
    "\n\010CorpsNpc\030\004 \003(\0132\013.PBCorpsNpc\"8\n\030CMessag"
    "eBidTimeOutNotify\022\r\n\005NpcID\030\001 \001(\r\022\r\n\005Firs"
    "t\030\002 \001(\r\"+\n\032CMessageBattleStartRequest\022\r\n"
    "\005NpcID\030\001 \001(\r\"]\n\033CMessageBattleStartRespo"
    "nse\022\r\n\005NpcID\030\001 \001(\r\022\016\n\006CharID\030\002 \003(\r\022\020\n\010Ch"
    "arName\030\003 \003(\t\022\r\n\005Money\030\004 \003(\r\"7\n\027CMessageB"
    "attleEndNotify\022\013\n\003Key\030\001 \001(\004\022\017\n\007WinSide\030\002"
    " \001(\r\")\n\030CMessageBidRestartNotify\022\r\n\005NpcI"
    "D\030\001 \001(\r\"-\n\033CMessageObtainTopTenRequest\022\016"
    "\n\006CharID\030\001 \001(\r\".\n\013PBRankTitle\022\r\n\005Index\030\001"
    " \001(\r\022\020\n\010RankType\030\002 \001(\r\"O\n\034CMessageObtain"
    "TopTenResponse\022\016\n\006CharID\030\001 \001(\r\022\037\n\tRankTi"
    "tle\030\002 \003(\0132\014.PBRankTitle\"C\n CMessageCorps"
    "BidTimerStopRequest\022\r\n\005NpcID\030\001 \001(\r\022\020\n\010Ba"
    "ttleId\030\002 \001(\r\">\n\035CMessageCorpsJoinBattleN"
    "otice\022\016\n\006CharID\030\001 \001(\r\022\r\n\005NpcID\030\002 \001(\r\"W\n\037"
    "CMessageNotifyBattleResult2Gate\022\020\n\010Battl"
    "eID\030\001 \001(\r\022\017\n\007WinCamp\030\002 \001(\r\022\021\n\tBattleKey\030"
    "\003 \001(\004\"\205\001\n\036CMessageCorpsBattleFlagRequest"
    "\022\016\n\006CharID\030\001 \001(\r\022\017\n\007CorpsID\030\002 \001(\r\022\016\n\006Cam"
    "pID\030\003 \001(\r\022\020\n\010BattleID\030\004 \001(\r\022\r\n\005IsAll\030\005 \001"
    "(\r\022\021\n\tBattleKey\030\006 \001(\004\"u\n\037CMessageCorpsBa"
    "ttleFlagResponse\022\016\n\006CharID\030\001 \001(\r\022\021\n\tCorp"
    "sName\030\002 \001(\t\022\020\n\010BattleID\030\003 \001(\r\022\016\n\006CampID\030"
    "\004 \001(\r\022\r\n\005IsAll\030\005 \001(\r\"\231\001\n\034CMessageCreateR"
    "epetionNotify\022\025\n\rRepetionIndex\030\001 \001(\r\022\013\n\003"
    "Key\030\002 \001(\004\022\017\n\007Parame1\030\003 \001(\r\022\017\n\007Parame2\030\004 "
    "\001(\r\022\016\n\006LineID\030\005 \001(\r\022\017\n\007Creator\030\006 \001(\r\022\022\n\n"
    "RemoveItem\030\007 \001(\r\"P\n\031CMessageCreateRepeti"
    "onErr\022\025\n\rRepetionIndex\030\001 \001(\r\022\013\n\003Key\030\002 \001("
    "\004\022\017\n\007ErrCode\030\003 \001(\r\"\232\001\n\030CMessageTeamIntoR"
    "epetion\022\r\n\005MapID\030\001 \001(\r\022\016\n\006CharID\030\002 \001(\r\022\014"
    "\n\004PosX\030\003 \001(\r\022\014\n\004PosY\030\004 \001(\r\022\017\n\007Parame1\030\005 "
    "\001(\r\022\017\n\007Parame2\030\006 \001(\r\022\r\n\005Level\030\007 \001(\r\022\022\n\nR"
    "emoveItem\030\010 \001(\r\"\234\001\n\032CMessageSingleIntoRe"
    "petion\022\r\n\005MapID\030\001 \001(\r\022\016\n\006CharID\030\002 \001(\r\022\014\n"
    "\004PosX\030\003 \001(\r\022\014\n\004PosY\030\004 \001(\r\022\017\n\007Parame1\030\005 \001"
    "(\r\022\017\n\007Parame2\030\006 \001(\r\022\r\n\005Level\030\007 \001(\r\022\022\n\nRe"
    "moveItem\030\010 \001(\r\"B\n\037CMessageCorpsStartBatt"
    "leRequest\022\r\n\005NpcID\030\001 \001(\r\022\020\n\010BattleID\030\002 \001"
    "(\r\"\213\001\n\032CMessageIntoRepetionNotify\022\016\n\006Lin"
    "eID\030\001 \001(\r\022\r\n\005MapID\030\002 \001(\r\022\013\n\003Key\030\003 \001(\004\022\014\n"
    "\004PosX\030\004 \001(\r\022\014\n\004PosY\030\005 \001(\r\022\016\n\006CharID\030\006 \001("
    "\r\022\025\n\rRepetionIndex\030\007 \001(\r\"^\n$CMessageChan"
    "geFamilyContributeNotify\022\016\n\006RoleID\030\001 \001(\r"
    "\022\022\n\nContribute\030\002 \001(\r\022\022\n\nChangeType\030\003 \001(\r"
    "\"\207\001\n\037CMessageChangeFamilyGloryNotify\022\020\n\010"
    "FamilyID\030\001 \001(\r\022\r\n\005Glory\030\002 \001(\r\022\021\n\tIfReduc"
    "ed\030\003 \001(\r\022\016\n\006RoleID\030\004 \001(\r\022\016\n\006Reason\030\005 \001(\r"
    "\022\020\n\010RoleName\030\006 \001(\t\"\206\001\n\037CMessageChangeFam"
    "ilyMoneyNotify\022\r\n\005Money\030\001 \001(\r\022\020\n\010IfPayou"
    "t\030\002 \001(\r\022\020\n\010FamilyID\030\003 \001(\r\022\016\n\006RoleID\030\004 \001("
    "\r\022\016\n\006Reason\030\005 \001(\r\022\020\n\010RoleName\030\006 \001(\t\"\033\n\031C"
    "MessageSynIbStoreRequest\"\233\001\n\032CMessageSyn"
    "IbStoreResponse\022\036\n\005Goods\030\001 \003(\0132\017.PBIbIte"
    "mOnSale\022\033\n\007IbStore\030\002 \003(\0132\n.PBIbStore\022\017\n\007"
    "Version\030\003 \001(\005\022\035\n\010FocusTab\030\004 \003(\0132\013.PBIbSu"
    "bTab\022\020\n\010Bulletin\030\005 \001(\t\"\035\n\033CMessageSynFun"
    "cStoreRequest\"P\n\034CMessageSynFuncStoreRes"
    "ponse\022\017\n\007Version\030\001 \001(\005\022\037\n\tFuncStore\030\002 \003("
    "\0132\014.PBFuncStore\"]\n#CMessageChangeCorpsCo"
    "ntributeNotify\022\016\n\006RoleID\030\001 \001(\r\022\022\n\nContri"
    "bute\030\002 \001(\r\022\022\n\nChangeType\030\003 \001(\r\"\205\001\n\036CMess"
    "ageChangeCorpsGloryNotify\022\017\n\007CorpsID\030\001 \001"
    "(\r\022\r\n\005Glory\030\002 \001(\r\022\021\n\tIfReduced\030\003 \001(\r\022\016\n\006"
    "RoleID\030\004 \001(\r\022\016\n\006Reason\030\005 \001(\r\022\020\n\010RoleName"
    "\030\006 \001(\t\"\204\001\n\036CMessageChangeCorpsMoneyNotif"
    "y\022\017\n\007CorpsID\030\001 \001(\r\022\r\n\005Money\030\002 \001(\r\022\020\n\010IfP"
    "ayout\030\003 \001(\r\022\016\n\006RoleID\030\004 \001(\r\022\016\n\006Reason\030\005 "
    "\001(\r\022\020\n\010RoleName\030\006 \001(\t\"\200\001\n\034CMessageChange"
    "CorpsBossTimes\022\017\n\007CorpsID\030\001 \001(\r\022\r\n\005Times"
    "\030\002 \001(\r\022\016\n\006RoleID\030\003 \001(\r\022\016\n\006BossID\030\004 \001(\r\022\020"
    "\n\010RoleName\030\005 \001(\t\022\016\n\006Reason\030\006 \001(\r\"|\n\"CMes"
    "sageChangeCorpsBossRefineValue\022\017\n\007CorpsI"
    "D\030\001 \001(\r\022\023\n\013RefineValue\030\002 \001(\r\022\016\n\006Reason\030\003"
    " \001(\r\022\016\n\006RoleID\030\004 \001(\r\022\020\n\010RoleName\030\005 \001(\t\"["
    "\n CMessageChangeCorpsCollectActive\022\016\n\006Ro"
    "leID\030\001 \001(\r\022\023\n\013ActiveValue\030\002 \001(\r\022\022\n\nChang"
    "eType\030\003 \001(\r\"\\\n CMessageFamilyApExpChange"
    "dNotify\022\016\n\006RoleID\030\001 \001(\r\022\017\n\007FamiyID\030\002 \001(\r"
    "\022\n\n\002AP\030\003 \001(\r\022\013\n\003Exp\030\004 \001(\r\"[\n\037CMessageCor"
    "psApExpChangedNotify\022\016\n\006RoleID\030\001 \001(\r\022\017\n\007"
    "CorpsID\030\002 \001(\r\022\n\n\002AP\030\003 \001(\r\022\013\n\003Exp\030\004 \001(\r\"@"
    "\n\037CMessageChangeJudgeScoreReuqest\022\016\n\006Rol"
    "eID\030\001 \001(\r\022\r\n\005Total\030\002 \001(\r\"y\n\033CMessageChan"
    "geWizardRequest\022\016\n\006CharID\030\001 \001(\r\022\016\n\006LineI"
    "D\030\002 \001(\r\022\021\n\tCountryID\030\003 \001(\r\022\022\n\nChangeType"
    "\030\004 \001(\r\022\023\n\013WizardValue\030\005 \003(\r\">\n\034CMessageC"
    "hangeWizardResponse\022\016\n\006CharID\030\001 \001(\r\022\016\n\006R"
    "esult\030\002 \001(\r\"\226\001\n\036CMessageChangeConstructR"
    "equest\022\016\n\006CharID\030\001 \001(\r\022\016\n\006LineID\030\002 \001(\r\022\021"
    "\n\tCountryID\030\003 \001(\r\022\022\n\nChangeType\030\004 \001(\r\022\025\n"
    "\rConstructType\030\005 \003(\r\022\026\n\016ConstructValue\030\006"
    " \003(\r\"A\n\037CMessageChangeConstructResponse\022"
    "\016\n\006CharID\030\001 \001(\r\022\016\n\006Result\030\002 \001(\r\"w\n\032CMess"
    "ageChangePowerRequest\022\016\n\006CharID\030\001 \001(\r\022\016\n"
    "\006LineID\030\002 \001(\r\022\021\n\tCountryID\030\003 \001(\r\022\022\n\nChan"
    "geType\030\004 \001(\r\022\022\n\nPowerValue\030\005 \001(\r\"=\n\033CMes"
    "sageChangePowerResponse\022\016\n\006CharID\030\001 \001(\r\022"
    "\016\n\006Result\030\002 \001(\r\"\364\001\n\031CMessageUseFunctionN"
    "otify\022\016\n\006CharID\030\001 \001(\r\022\024\n\014FunctionType\030\002 "
    "\001(\r\022\025\n\rFunctionOrder\030\003 \001(\r\022\020\n\010TargetID\030\004"
    " \001(\r\022\017\n\007WorldID\030\005 \001(\r\022\021\n\tCountryID\030\006 \001(\r"
    "\022\017\n\007SrcName\030\007 \001(\t\022\037\n\010Teleport\030\010 \001(\0132\r.Te"
    "leportData\022\017\n\007CorpsID\030\t \001(\r\022\020\n\010FamilyID\030"
    "\n \001(\r\022\017\n\007TokenID\030\013 \001(\r\"k\n\031CMessageSetOff"
    "icialNotify\022\016\n\006CharID\030\001 \001(\r\022\025\n\rOfficialL"
    "evel\030\002 \001(\r\022\025\n\rOfficialOrder\030\003 \001(\r\022\020\n\010Tar"
    "getID\030\004 \001(\r\"y\n\032CMessageChangeFriendNotif"
    "y\022\016\n\006CharID\030\001 \001(\r\022\022\n\nChangeType\030\002 \001(\r\022\020\n"
    "\010SrcWorld\030\003 \001(\r\022\020\n\010DesWorld\030\004 \001(\r\022\023\n\013Cha"
    "ngeValue\030\005 \001(\r\"P\n\031CMessageKillPersonRequ"
    "est\022\021\n\tSrcCharID\030\001 \001(\r\022\021\n\tDesCharID\030\002 \001("
    "\r\022\r\n\005Honor\030\003 \001(\r\"S\n\032CMessageKillPersonRe"
    "sponse\022\021\n\tSrcCharID\030\001 \001(\r\022\021\n\tDesCharID\030\002"
    " \001(\r\022\017\n\007PKValue\030\003 \001(\r\"0\n\030CMessageSyncNat"
    "ionNotify\022\024\n\014NationStatus\030\001 \003(\r\"\230\001\n\034CMes"
    "sageBuyFamilyItemRequest\022\016\n\006RoleID\030\001 \001(\r"
    "\022\020\n\010EntityID\030\002 \001(\r\022\020\n\010FamilyID\030\003 \001(\r\022\016\n\006"
    "ItemID\030\004 \001(\r\022\017\n\007ItemNum\030\005 \001(\r\022\021\n\tTotalCo"
    "st\030\006 \001(\r\022\020\n\010NpcTmpID\030\007 \001(\r\"s\n\035CMessageBu"
    "yFamilyItemResponse\022\017\n\007Errcode\030\001 \001(\r\022\016\n\006"
    "RoleID\030\002 \001(\r\022\020\n\010EntityID\030\003 \001(\r\022\016\n\006ItemID"
    "\030\004 \001(\r\022\017\n\007ItemNum\030\005 \001(\r\"\251\001\n\033CMessageBuyC"
    "orpsItemRequest\022\016\n\006RoleID\030\001 \001(\r\022\020\n\010Entit"
    "yID\030\002 \001(\r\022\017\n\007CorpsID\030\003 \001(\r\022\016\n\006ItemID\030\004 \001"
    "(\r\022\017\n\007ItemNum\030\005 \001(\r\022\021\n\tTotalCost\030\006 \001(\r\022\020"
    "\n\010NpcTmpID\030\007 \001(\r\022\021\n\tCityMapID\030\010 \001(\r\"r\n\034C"
    "MessageBuyCorpsItemResponse\022\017\n\007Errcode\030\001"
    " \001(\r\022\016\n\006RoleID\030\002 \001(\r\022\020\n\010EntityID\030\003 \001(\r\022\016"
    "\n\006ItemID\030\004 \001(\r\022\017\n\007ItemNum\030\005 \001(\r\"P\n%CMess"
    "ageClearFamilyRepetionInfoNotify\022\020\n\010Fami"
    "lyID\030\001 \001(\r\022\025\n\rRepetionScore\030\002 \001(\r\"2\n CMe"
    "ssageJudgeModifySuccessNotice\022\016\n\006CharID\030"
    "\001 \001(\r\"/\n\035CMessage4EQueryYuanBaoRequest\022\016"
    "\n\006RoleID\030\001 \001(\r\"`\n\036CMessage4EQueryYuanBao"
    "Response\022\022\n\nResultCode\030\001 \001(\005\022\016\n\006RoleID\030\002"
    " \001(\r\022\032\n\006Remain\030\003 \003(\0132\n.PBIbMoney\"H\n\034CMes"
    "sage4EDrawYuanBaoRequest\022\016\n\006RoleID\030\001 \001(\r"
    "\022\030\n\004Draw\030\002 \001(\0132\n.PBIbMoney\"g\n\035CMessage4E"
    "DrawYuanBaoResponse\022\016\n\006RoleID\030\001 \001(\r\022\022\n\nR"
    "esultCode\030\002 \001(\005\022\016\n\006Amount\030\003 \001(\005\022\022\n\nLeftA"
    "mount\030\004 \001(\005\"w\n\035CMessageFamilyExchangeReq"
    "uest\022\016\n\006RoleID\030\001 \001(\r\022\020\n\010NpcTmpID\030\002 \001(\r\022\021"
    "\n\tComposeID\030\003 \001(\r\022\020\n\010FamilyID\030\004 \001(\r\022\017\n\007I"
    "temNum\030\005 \001(\r\"w\n\036CMessageFamilyExchangeRe"
    "sponse\022\017\n\007Errcode\030\001 \001(\r\022\016\n\006RoleID\030\002 \001(\r\022"
    "\020\n\010NpcTmpID\030\003 \001(\r\022\021\n\tComposeID\030\004 \001(\r\022\017\n\007"
    "ItemNum\030\005 \001(\r\"u\n\034CMessageCorpsExchangeRe"
    "quest\022\016\n\006RoleID\030\001 \001(\r\022\020\n\010NpcTmpID\030\002 \001(\r\022"
    "\021\n\tComposeID\030\003 \001(\r\022\017\n\007CorpsID\030\004 \001(\r\022\017\n\007I"
    "temNum\030\005 \001(\r\"v\n\035CMessageCorpsExchangeRes"
    "ponse\022\017\n\007Errcode\030\001 \001(\r\022\016\n\006RoleID\030\002 \001(\r\022\020"
    "\n\010NpcTmpID\030\003 \001(\r\022\021\n\tComposeID\030\004 \001(\r\022\017\n\007I"
    "temNum\030\005 \001(\r\"_\n#CMessageAddFamilyExchang"
    "eItemNotify\022\016\n\006RoleID\030\001 \001(\r\022\020\n\010FamilyID\030"
    "\002 \001(\r\022\026\n\016LeagueBagTmpID\030\003 \001(\r\"]\n\"CMessag"
    "eAddCorpsExchangeItemNotify\022\016\n\006RoleID\030\001 "
    "\001(\r\022\017\n\007CorpsID\030\002 \001(\r\022\026\n\016LeagueBagTmpID\030\003"
    " \001(\r\"t\n\030CMessageGateEntityGMMove\022\020\n\010Role"
    "Name\030\001 \001(\t\022\016\n\006LineID\030\002 \001(\005\022\r\n\005MapID\030\003 \001("
    "\005\022\014\n\004PosX\030\004 \001(\005\022\014\n\004PosY\030\005 \001(\005\022\013\n\003Key\030\006 \001"
    "(\003\"s\n\031CMessageSceneEntityGMMove\022\016\n\006RoleI"
    "D\030\001 \001(\005\022\016\n\006LineID\030\002 \001(\005\022\r\n\005MapID\030\003 \001(\005\022\014"
    "\n\004PosX\030\004 \001(\005\022\014\n\004PosY\030\005 \001(\005\022\013\n\003Key\030\006 \001(\003\""
    "~\n\021SingleActivityObj\022\022\n\nActivityID\030\001 \001(\r"
    "\022\020\n\010TimeType\030\002 \001(\r\022\020\n\010TimeInfo\030\003 \001(\r\022\020\n\010"
    "LmtLevel\030\004 \001(\r\022\020\n\010MaxTimes\030\005 \001(\r\022\r\n\005Stat"
    "e\030\006 \001(\r\"*\n\010DropInfo\022\016\n\006OgreID\030\001 \001(\r\022\016\n\006D"
    "ropID\030\002 \001(\r\";\n\007MapDrop\022\016\n\006DropID\030\001 \001(\r\022\020"
    "\n\010DropType\030\002 \001(\r\022\016\n\006MapIDs\030\003 \003(\r\"X\n\022Sing"
    "leActivityInfo\022\022\n\nActivityID\030\001 \001(\r\022\033\n\010dr"
    "opinfo\030\002 \003(\0132\t.DropInfo\022\021\n\togreindex\030\003 \003"
    "(\r\"s\n\034CMessageTodayActivitysNotify\022(\n\014Ac"
    "tivityList\030\001 \003(\0132\022.SingleActivityObj\022)\n\014"
    "ActivityInfo\030\002 \003(\0132\023.SingleActivityInfo\""
    "W\n\016SingleActivity\022\022\n\nActivityID\030\001 \001(\r\022\025\n"
    "\rActivityState\030\002 \001(\r\022\032\n\010MapDrops\030\003 \003(\0132\010"
    ".MapDrop\"E\n\034CMessageActivityChangeNotify"
    "\022%\n\014ActivityList\030\001 \003(\0132\017.SingleActivity\""
    "Y\n\"CMessageChangePasswordStatusNotify\022\016\n"
    "\006RoleID\030\001 \001(\r\022\021\n\tPwdStatus\030\002 \001(\r\022\020\n\010Pass"
    "word\030\003 \001(\t\"Q\n\037CMessageUpdateNationTitleN"
    "otice\022\016\n\006RoleID\030\001 \001(\005\022\017\n\007TitleID\030\002 \001(\r\022\r"
    "\n\005IsAdd\030\003 \001(\r\"3\n!CMessageGetNationTitleL"
    "istRequest\022\016\n\006RoleID\030\001 \001(\005\"G\n\"CMessageGe"
    "tNationTitleListResponse\022\016\n\006RoleID\030\001 \001(\005"
    "\022\021\n\tTitleList\030\002 \003(\r\"=\n\032CMessageSGProVipF"
    "lagNotice\022\016\n\006RoleID\030\001 \001(\005\022\017\n\007VipFlag\030\002 \001"
    "(\r\"1\n\037CMessageResetRolePasswordNotify\022\016\n"
    "\006RoleID\030\001 \001(\r\"Q\n\031CMessgeSafeShutdownNoti"
    "fy\022\022\n\nServerType\030\001 \001(\r\022\020\n\010ServerID\030\002 \001(\r"
    "\022\016\n\006OpType\030\003 \001(\r\"N\n\026CMessgeSafeShutdownA"
    "ck\022\022\n\nServerType\030\001 \001(\r\022\020\n\010ServerID\030\002 \001(\r"
    "\022\016\n\006OpType\030\003 \001(\r\"N\n\035CMessageRollCorpsMon"
    "eyRequest\022\r\n\005IsAll\030\001 \001(\r\022\017\n\007CorpsID\030\002 \001("
    "\r\022\r\n\005NpcID\030\003 \001(\r\"A\n\034CMessageCorpsBattleM"
    "apNotice\022\021\n\tBattleKey\030\001 \001(\004\022\016\n\006RoleID\030\002 "
    "\001(\r\"c\n\030CMessageTrySummonRequest\022\016\n\006CharI"
    "D\030\001 \001(\r\022\020\n\010CharName\030\002 \001(\t\022\021\n\tItemIndex\030\003"
    " \001(\r\022\022\n\nSummonType\030\004 \001(\r\"t\n\031CMessageTryS"
    "ummonResponse\022\016\n\006CharID\030\001 \001(\r\022\020\n\010CharNam"
    "e\030\002 \001(\t\022\016\n\006Result\030\003 \001(\r\022\021\n\tItemIndex\030\004 \001"
    "(\r\022\022\n\nSummonType\030\005 \001(\r\"\214\001\n\031CMessageRealS"
    "ummonRequest\022\016\n\006CharID\030\001 \001(\r\022\020\n\010CharName"
    "\030\002 \001(\t\022\022\n\nSummonType\030\003 \001(\r\022\016\n\006LineID\030\004 \001"
    "(\r\022\r\n\005MapID\030\005 \001(\r\022\014\n\004PosX\030\006 \001(\r\022\014\n\004PosY\030"
    "\007 \001(\r\"\304\001\n\030CMessageRealSummonNotify\022\023\n\013Sr"
    "cCharName\030\001 \001(\t\022\016\n\006LineID\030\002 \001(\r\022\r\n\005MapID"
    "\030\003 \001(\r\022\014\n\004PosX\030\004 \001(\r\022\014\n\004PosY\030\005 \001(\r\022\017\n\007To"
    "kenID\030\006 \001(\r\022\021\n\tDesCharID\030\007 \001(\r\022\020\n\010Family"
    "ID\030\010 \001(\r\022\017\n\007CorpsID\030\t \001(\r\022\021\n\tSrcCharID\030\n"
    " \001(\r\"b\n\030CMessageLockGoodsRequest\022\017\n\007Good"
    "sID\030\001 \001(\r\022\021\n\tLockCount\030\002 \001(\005\022\016\n\006RoleID\030\003"
    " \001(\r\022\022\n\nTransObjID\030\004 \001(\005\"\203\001\n\031CMessageLoc"
    "kGoodsResponse\022\016\n\006Result\030\001 \001(\005\022\017\n\007GoodsI"
    "D\030\002 \001(\r\022\016\n\006RoleID\030\003 \001(\r\022\021\n\tLockCount\030\004 \001"
    "(\005\022\016\n\006Remain\030\005 \001(\005\022\022\n\nTransObjID\030\006 \001(\005\"7"
    "\n\023CMessageS2GRoleMove\022\017\n\007SrcRole\030\001 \001(\t\022\017"
    "\n\007DesRole\030\002 \001(\t\"7\n\023CMessageG2SRoleMove\022\017"
    "\n\007SrcRole\030\001 \001(\t\022\017\n\007DesRole\030\002 \001(\t\"\207\001\n\027CMe"
    "ssageWarChangeNotify\022\017\n\007WorldID\030\001 \001(\r\022\020\n"
    "\010SeedType\030\002 \001(\r\022\021\n\tSeedValue\030\003 \001(\r\022\022\n\nSo"
    "urceType\030\004 \001(\r\022\023\n\013SourceValue\030\005 \001(\r\022\r\n\005M"
    "apID\030\006 \001(\r\"P\n\032CMessageReliveChangeNotify"
    "\022\017\n\007WorldID\030\001 \003(\r\022\016\n\006CampID\030\002 \003(\r\022\021\n\tWar"
    "Status\030\003 \001(\r\"A\n\014WarHonorData\022\016\n\006CharID\030\001"
    " \001(\r\022\020\n\010WarHonor\030\002 \001(\r\022\017\n\007WarKill\030\003 \001(\r\""
    "O\n\034CMessageObtainWarHonorNotify\022\037\n\010WarHo"
    "nor\030\001 \003(\0132\r.WarHonorData\022\016\n\006IsKill\030\002 \001(\r"
    "\"x\n\031CMessageBourseG2SLoadList\022\016\n\006ListID\030"
    "\001 \001(\r\022$\n\007BuyList\030\002 \001(\0132\023.PBBourseDetailL"
    "ist\022%\n\010SellList\030\003 \001(\0132\023.PBBourseDetailLi"
    "st\"\033\n\031CMessageBourseS2GLoadList\"C\n\033CMess"
    "ageSyncWarStatusNotify\022\021\n\tWarStatus\030\001 \001("
    "\r\022\021\n\tWarSerial\030\002 \001(\r\"q\n\030CMessageWarContr"
    "olNotify\022\024\n\014ControlState\030\001 \001(\r\022\016\n\006GMHour"
    "\030\002 \001(\005\022\r\n\005GMMin\030\003 \001(\005\022\r\n\005GMDay\030\004 \001(\005\022\021\n\t"
    "WarSerial\030\005 \001(\r\"d\n\031CMessageBourseTradeNo"
    "tice\022\"\n\tBuyDetail\030\001 \001(\0132\017.PBBourseDetail"
    "\022#\n\nSellDetail\030\002 \001(\0132\017.PBBourseDetail\"-\n"
    "\033CMessageReSavePlayerRequest\022\016\n\006RoleID\030\001"
    " \001(\r\"\214\001\n\034CMessageReSavePlayerResponse\022\016\n"
    "\006RoleID\030\001 \001(\r\022\016\n\006Result\030\002 \001(\r\022\016\n\006LineID\030"
    "\003 \001(\r\022\r\n\005MapID\030\004 \001(\r\022\021\n\tAccountID\030\005 \001(\r\022"
    "\014\n\004PosX\030\006 \001(\r\022\014\n\004PosY\030\007 \001(\r\"E\n\"CMessageB"
    "oursePlayerTradeBuyNotice\022\037\n\006Detail\030\001 \001("
    "\0132\017.PBBourseDetail\"F\n#CMessageBoursePlay"
    "erTradeSellNotice\022\037\n\006Detail\030\001 \001(\0132\017.PBBo"
    "urseDetail\"+\n\032CMessageWarStoneOverNotify"
    "\022\r\n\005MapID\030\001 \001(\r\"A\n\034CMessageCreateWarSton"
    "eNotify\022\022\n\nStoneLevel\030\001 \001(\r\022\r\n\005MapID\030\002 \001"
    "(\r\"%\n\024CMessageAddTaxNotify\022\r\n\005Money\030\001 \001("
    "\r\"\230\002\n\033CMessageSendSysMailToPlayer\022\021\n\trol"
    "e_name\030\001 \001(\t\022\017\n\007role_id\030\002 \001(\r\022\023\n\013sender_"
    "name\030\003 \001(\t\022\r\n\005title\030\004 \001(\t\022\014\n\004body\030\005 \001(\t\022"
    "\031\n\021receive_countryid\030\006 \001(\r\022\022\n\ngateway_id"
    "\030\007 \001(\r\022\017\n\007game_id\030\010 \001(\r\022\n\n\002fd\030\t \001(\r\022\014\n\004t"
    "ype\030\n \001(\r\022\022\n\nsession_id\030\013 \001(\r\022\016\n\006ItemID\030"
    "\r \003(\r\022\017\n\007ItemNum\030\016 \003(\r\022\024\n\014MailSendType\030\017"
    " \001(\r\"R\n\031CMessageCampAddHonerScore\022\017\n\007rol"
    "e_id\030\001 \001(\r\022\023\n\013honer_value\030\002 \001(\r\022\017\n\007camp_"
    "id\030\003 \001(\r\"[\n\031CMessageBattleTeamFixWait\022\016\n"
    "\006CharID\030\001 \001(\r\022\r\n\005Level\030\002 \001(\r\022\020\n\010BattleID"
    "\030\003 \001(\r\022\r\n\005MapID\030\004 \001(\r\"h\n\033CMessageActivit"
    "yEventNotify\022\022\n\nActivityID\030\001 \001(\r\022\017\n\007Even"
    "tID\030\002 \001(\r\022\021\n\tIntParams\030\003 \003(\r\022\021\n\tStrParam"
    "s\030\004 \003(\t\"@\n\035CMessageAddMasterPointRequest"
    "\022\020\n\010MasterID\030\001 \001(\r\022\r\n\005Point\030\002 \001(\r\"=\n\034CMe"
    "ssageAddMasterPointNotify\022\016\n\006CharID\030\001 \001("
    "\r\022\r\n\005Point\030\002 \001(\r\"]\n\033CMessageBattleSingle"
    "FixWait\022\016\n\006CharID\030\001 \001(\r\022\r\n\005Level\030\002 \001(\r\022\020"
    "\n\010BattleID\030\003 \001(\r\022\r\n\005MapID\030\004 \001(\r\"g\n\032CMess"
    "ageSpecialEventNotify\022\022\n\nSrcWorldID\030\001 \001("
    "\r\022\022\n\nDesWorldID\030\002 \001(\r\022\021\n\tEventType\030\003 \001(\r"
    "\022\016\n\006CharID\030\004 \001(\r\"@\n\033CMessageAcquireMaste"
    "rNotify\022\017\n\007SlaveID\030\001 \001(\r\022\020\n\010MasterID\030\002 \001"
    "(\r\"`\n\032CMessageBattleWinnerNotify\022\021\n\tHasW"
    "inner\030\001 \001(\r\022\020\n\010BattleID\030\002 \001(\r\022\r\n\005Level\030\003"
    " \001(\r\022\016\n\006CharID\030\004 \001(\r\"\237\001\n#CMessageChangeF"
    "amilyStabilityNotify\022\020\n\010FamilyID\030\001 \001(\r\022\016"
    "\n\006RoleID\030\003 \001(\r\022\016\n\006Reason\030\004 \001(\r\022\020\n\010RoleNa"
    "me\030\005 \001(\t\022\022\n\nOnLineTime\030\006 \001(\r\022\021\n\tRoleLeve"
    "l\030\007 \001(\r\022\r\n\005Value\030\t \001(\r\"\204\001\n&CMessageS2GJo"
    "inOnTimeOpenBattleRequest\022\020\n\010BattleID\030\001 "
    "\001(\r\022\r\n\005MapID\030\002 \001(\r\022\016\n\006CharID\030\003 \001(\r\022\014\n\004Po"
    "sX\030\004 \001(\r\022\014\n\004PosY\030\005 \001(\r\022\r\n\005Level\030\006 \001(\r\"W\n"
    "\031CMessageSyncGTAndLWNotify\022\034\n\006GTInfo\030\001 \003"
    "(\0132\014.GTAndLWInfo\022\034\n\006LWInfo\030\002 \003(\0132\014.GTAnd"
    "LWInfo\"9\n\026CMessageS2GBattleClose\022\020\n\010Batt"
    "leID\030\001 \001(\r\022\r\n\005MapID\030\002 \001(\r\"\202\001\n CMessageS2"
    "GIntoCorpsBossRepetion\022\020\n\010BattleID\030\001 \001(\r"
    "\022\r\n\005MapID\030\002 \001(\r\022\016\n\006CharID\030\003 \001(\r\022\017\n\007Corps"
    "ID\030\004 \001(\r\022\r\n\005PostX\030\005 \001(\r\022\r\n\005PostY\030\006 \001(\r\"R"
    "\n\036CMessgeS2GEndCorpsBossRepetion\022\020\n\010Batt"
    "leID\030\001 \001(\r\022\r\n\005MapID\030\002 \001(\r\022\017\n\007CorpsID\030\003 \001"
    "(\r\"1\n\014PBGroupTasks\022\016\n\006TaskID\030\001 \001(\r\022\021\n\tTa"
    "skState\030\002 \001(\r\"K\n$CMessageGateCheckGroupP"
    "ublishRequest\022\016\n\006CharID\030\001 \001(\r\022\023\n\013Publish"
    "Type\030\002 \001(\r\"\200\001\n\037CMessageGatePublishGroupR"
    "equest\022\016\n\006CharID\030\001 \001(\r\022\016\n\006TaskID\030\002 \001(\r\022\023"
    "\n\013PublishType\030\003 \001(\r\022\021\n\tTaskState\030\004 \001(\r\022\025"
    "\n\rPayGroupMoney\030\005 \001(\r\"^\n\013PBGroupInfo\022\017\n\007"
    "GroupID\030\001 \001(\r\022\022\n\nGroupLevel\030\002 \001(\r\022\022\n\nGro"
    "upMoney\030\003 \001(\r\022\026\n\016PlayerPosition\030\004 \001(\r\"\233\001"
    "\n%CMessageGateCheckGroupPublishResponse\022"
    "\016\n\006CharID\030\001 \001(\r\022\023\n\013PublishType\030\002 \001(\r\022\034\n\005"
    "Tasks\030\003 \003(\0132\r.PBGroupTasks\022\037\n\tGroupInfo\030"
    "\004 \001(\0132\014.PBGroupInfo\022\016\n\006Result\030\005 \001(\r\"\215\001\n "
    "CMessageGatePublishGroupResponse\022\016\n\006Char"
    "ID\030\001 \001(\r\022\016\n\006TaskID\030\002 \001(\r\022\023\n\013PublishType\030"
    "\003 \001(\r\022\021\n\tTaskState\030\004 \001(\r\022\021\n\tTaskAcion\030\005 "
    "\001(\r\022\016\n\006Result\030\006 \001(\r*\246C\n\021EMServerMessageI"
    "D\022\026\n\020ID_INTER_TIMEOUT\020\200\200\002\022\035\n\027ID_G2L_GATE"
    "_INFO_NOTICE\020\201\200\002\022\037\n\031ID_L2G_GATE_INFO_RES"
    "PONSE\020\202\200\002\022\037\n\031ID_S2G_SERVER_INFO_NOTICE\020\206"
    "\200\002\022!\n\033ID_G2S_SERVER_INFO_RESPONSE\020\207\200\002\022\036\n"
    "\030ID_G2S_CREATE_MAP_NOTICE\020\217\200\002\022 \n\032ID_S2G_"
    "CREATE_MAP_RESPONSE\020\220\200\002\022\"\n\034ID_G2S_SCENE_"
    "NOT_OPEN_NOTICE\020\224\200\002\022\"\n\034ID_G2L_UPDATE_VER"
    "SION_NOTICE\020\225\200\002\022!\n\033ID_X2X_ERATING_PROTO_"
    "STREAM\020\226\200\002\022\"\n\034ID_L2G_ERATING_STATUS_NOTI"
    "CE\020\227\200\002\022!\n\033ID_G2L_GATE_SHUTDOWN_NOTICE\020\230\200"
    "\002\022\035\n\027ID_G2L_HEARTBEAT_NOTICE\020\231\200\002\022\"\n\034ID_X"
    "2P_REGIST_SERVER_REQUEST\020\240\200\002\022#\n\035ID_P2X_R"
    "EGIST_SERVER_RESPONSE\020\241\200\002\022\036\n\030ID_X2P_HEAR"
    "T_BEAT_NOTICE\020\242\200\002\022\031\n\023ID_G2S_COUNTRY_INFO"
    "\020\260\200\002\022#\n\035ID_S2G_GAME_HEART_BEAT_NOTICE\020\261\200"
    "\002\022\"\n\034ID_A2G_GAME_PRIVILEGE_NOTICE\020\262\200\002\022!\n"
    "\033ID_G2S_NOTIFY_SAFE_SHUTDOWN\020\263\200\002\022!\n\033ID_S"
    "2G_REGIST_REPETION_INFO\020\264\200\002\022\036\n\030ID_S2G_AC"
    "K_SAFE_SHUTDOWN\020\265\200\002\022#\n\035ID_L2G_LOGINSVRST"
    "ARTUP_NOTICE\020\300\200\002\022%\n\037ID_L2G_PLAYER_ENTER_"
    "GATE_NOTICE\020\203\210\002\022\'\n!ID_G2L_PLAYER_ENTER_G"
    "ATE_RESPONSE\020\204\210\002\022%\n\037ID_G2L_PLAYER_LEAVE_"
    "GATE_NOTICE\020\205\210\002\022$\n\036ID_G2S_PLAYER_ENTER_M"
    "AP_NOTICE\020\210\210\002\022&\n ID_S2G_PLAYER_ENTER_MAP"
    "_RESPONSE\020\211\210\002\022)\n#ID_G2S_PLAYER_LOGIN_COM"
    "PLETE_NOTICE\020\212\210\002\022$\n\036ID_S2G_PLAYER_LEAVE_"
    "MAP_NOTICE\020\213\210\002\022&\n ID_G2S_PLAYER_LEAVE_MA"
    "P_RESPONSE\020\214\210\002\022&\n ID_S2G_PLAYER_RETURN2G"
    "ATE_NOTICE\020\215\210\002\022(\n\"ID_G2S_PLAYER_RETURN2G"
    "ATE_RESPONSE\020\216\210\002\022$\n\036ID_S2G_PLAYER_REDIRE"
    "CT_REQUEST\020\221\210\002\022%\n\037ID_G2S_PLAYER_REDIRECT"
    "_RESPONSE\020\222\210\002\022(\n\"ID_S2G_PLAYER_ENTER_CON"
    "FIRM_NOTICE\020\223\210\002\022#\n\035ID_G2S_KICKOFF_PLAYER"
    "_REQUEST\020\243\210\002\022$\n\036ID_S2G_KICKOFF_PLAYER_RE"
    "SPONSE\020\244\210\002\022 \n\032ID_G2S_REDIRECT_MAP_NOTICE"
    "\020\246\210\002\022(\n\"ID_S2G_REDIRECT_ENTER_MAP_RESPON"
    "SE\020\247\210\002\022\"\n\034ID_G2S_REDIRECT_G_ERROR_CODE\020\250"
    "\210\002\022\"\n\034ID_S2G_REDIRECT_S_ERROR_CODE\020\251\210\002\022%"
    "\n\037ID_S2G_SERVICE_MAILCOUNT_NOTICE\020\265\210\002\022\033\n"
    "\025ID_S2G_ENTITY_GM_MOVE\020\266\210\002\022\033\n\025ID_G2S_ENT"
    "ITY_GM_MOVE\020\267\210\002\022\"\n\034ID_S2G_ROLECHANGECAMP"
    "_NOTICE\020\271\210\002\022%\n\037ID_S2G_NOTIFY_ROLEGAMEINF"
    "O2GATE\020\301\210\002\022 \n\032ID_G2S_TRACEDPLAYER_NOTIFY"
    "\020\302\210\002\022#\n\035ID_G2S_NOTIFY_CREATE_REPETION\020\303\210"
    "\002\022(\n\"ID_S2G_NOTIFY_CHANGEPASSWORDSTATUS\020"
    "\304\210\002\022\033\n\025ID_S2G_NOTIFY_VIPFLAG\020\305\210\002\022%\n\037ID_G"
    "2S_NOTIFY_RESETROLEPASSWORD\020\306\210\002\022\026\n\020ID_S2"
    "G_ROLE_MOVE\020\307\210\002\022\026\n\020ID_G2S_ROLE_MOVE\020\310\210\002\022"
    "!\n\033ID_G2S_REQUEST_RESAVEPLAYER\020\311\210\002\022\"\n\034ID"
    "_S2G_RESPONSE_RESAVEPLAYER\020\312\210\002\022&\n ID_S2G"
    "_REQUEST_PLAYERPBULISHTASK\020\201\240\002\022\'\n!ID_G2S"
    "_RESPONSE_PBULISHTASKRESULT\020\202\240\002\022&\n ID_S2"
    "G_REQUEST_CHECKPUBLISHBOARD\020\203\240\002\022\'\n!ID_G2"
    "S_RESPONSE_CHECKPUBLISHBOARD\020\204\240\002\022)\n#ID_S"
    "2G_PLAYER_ONLINE_FRIEND_REQUEST\020\201\260\002\022*\n$I"
    "D_G2S_PLAYER_ONLINE_FIREND_RESPONSE\020\202\260\002\022"
    "(\n\"ID_S2G_PLAYER_CHANGE_STATUS_NOTICE\020\203\260"
    "\002\022\036\n\030ID_S2G_ADDFRIEND_REQUEST\020\204\260\002\022\037\n\031ID_"
    "G2S_ADDFRIEND_RESPONSE\020\205\260\002\022\036\n\030ID_S2G_GET"
    "CHARID_REQUEST\020\206\260\002\022\037\n\031ID_G2S_GETCHARID_R"
    "ESPONSE\020\207\260\002\022#\n\035ID_S2G_ADDMASTERPOINT_REQ"
    "UEST\020\210\260\002\022\"\n\034ID_G2S_ADDMASTERPOINT_NOTIFY"
    "\020\211\260\002\022!\n\033ID_S2G_ACQUIREMASTER_NOTIFY\020\212\260\002\022"
    "%\n\037ID_S2G_REQUEST_CREATETEAMATGATE\020\201\270\002\022 "
    "\n\032ID_S2G_REQUEST_JOINREQUEST\020\202\270\002\022%\n\037ID_S"
    "2G_REQUEST_REPLYJOINREQUEST\020\203\270\002\022\037\n\031ID_S2"
    "G_REQUEST_JOININVITE\020\204\270\002\022$\n\036ID_S2G_REQUE"
    "ST_REPLYJOININVITE\020\205\270\002\022 \n\032ID_S2G_REQUEST"
    "_KICKOUTTEAM\020\206\270\002\022!\n\033ID_S2G_REQUEST_CHANG"
    "EHEADER\020\207\270\002\022\036\n\030ID_S2G_REQUEST_LEAVETEAM\020"
    "\210\270\002\022\034\n\026ID_S2G_REQUEST_ENDTEAM\020\211\270\002\022\037\n\031ID_"
    "G2S_NOTIFY_ERRORNOTICE\020\212\270\002\022 \n\032ID_G2S_RES"
    "PONSE_CREATETEAM\020\213\270\002\022!\n\033ID_G2S_RESPONSE_"
    "JOINREQUEST\020\214\270\002\022 \n\032ID_G2S_RESPONSE_JOINI"
    "NVITE\020\215\270\002\022\036\n\030ID_G2S_NOTIFY_UPDATETEAM\020\216\270"
    "\002\022\034\n\026ID_G2S_NOTIFY_SENDLIST\020\217\270\002\022#\n\035ID_G2"
    "S_RESPONSE_INVITEREQUEST\020\220\270\002\022\"\n\034ID_S2G_R"
    "EQUEST_UPDATETEAMPRO\020\221\270\002\022#\n\035ID_G2S_RESPO"
    "NSE_UPDATETEAMPRO\020\222\270\002\022!\n\033ID_S2G_REQUEST_"
    "CLAIMRECRUIT\020\223\270\002\022&\n ID_S2G_REQUEST_QUERY"
    "CLAIMRECRUIT\020\224\270\002\022\'\n!ID_G2S_RESPONSE_QUER"
    "YCLAIMRECRUIT\020\225\270\002\022\"\n\034ID_G2S_RESPONSE_CLA"
    "IMRECRUIT\020\226\270\002\022\033\n\025ID_S2G_REQUEST_FOLLOW\020\227"
    "\270\002\022\034\n\026ID_G2S_RESPONSE_FOLLOW\020\230\270\002\022\'\n!ID_S"
    "2G_REQUEST_DELETECLAIMRECRUIT\020\231\270\002\022(\n\"ID_"
    "G2S_RESPONSE_DELETECLAIMRECRUIT\020\232\270\002\022\037\n\031I"
    "D_S2G_REQUEST_DISTRIBUTE\020\233\270\002\022 \n\032ID_G2S_R"
    "ESPONSE_DISTRIBUTE\020\234\270\002\022%\n\037ID_S2G_REQUEST"
    "_OBTAINTEAMATGATE\020\235\270\002\022 \n\032ID_S2G_REQUEST_"
    "CLEARRECORD\020\236\270\002\022 \n\032ID_C2G_REQUEST_GETMAI"
    "LINFO\020\201\300\002\022 \n\032ID_G2S_RESPONSE_GETMAIINFO\020"
    "\202\300\002\022\'\n!ID_G2S_NOTIFY_SENDSYSMAILTOPLAYER"
    "\020\203\300\002\022!\n\033ID_S2G_DESTROY_REPETION_MAP\020\201\330\002\022"
    "\035\n\027ID_S2G_BATTLE_TEAM_WAIT\020\202\330\002\022&\n ID_S2G"
    "_BATTLE_WAIT_LEAVE_REQUEST\020\203\330\002\022\037\n\031ID_G2S"
    "_BATTLE_JOIN_NOTICE\020\204\330\002\022\037\n\031ID_S2G_BATTLE"
    "_PLAYER_JOIN\020\205\330\002\022\037\n\031ID_G2S_BATTLE_WAIT_N"
    "OTICE\020\206\330\002\022\'\n!ID_G2S_BATTLE_WAIT_LEAVE_RE"
    "SPONSE\020\207\330\002\022\"\n\034ID_S2G_BATTLE_CREATE_REQUE"
    "ST\020\210\330\002\022#\n\035ID_G2S_BATTLE_CREATE_RESPONSE\020"
    "\211\330\002\022 \n\032ID_S2G_CREATE_REPETION_ERR\020\212\330\002\022\037\n"
    "\031ID_S2G_INTO_REPETION_TEAM\020\213\330\002\022!\n\033ID_S2G"
    "_INTO_REPETION_SINGLE\020\214\330\002\022!\n\033ID_G2S_INTO"
    "_REPETION_NOTIFY\020\215\330\002\022 \n\032ID_G2S_REPETION_"
    "EVENT_CODE\020\216\330\002\022!\n\033ID_S2G_BATTLE_TEAM_FIX"
    "_WAIT\020\217\330\002\022#\n\035ID_S2G_BATTLE_SINGLE_FIX_WA"
    "IT\020\220\330\002\022*\n$ID_S2G_BATTLE_FIX_WAIT_LEAVE_R"
    "EQUEST\020\221\330\002\022*\n$ID_S2G_REPETION_BATTLE_WIN"
    "NER_NOTIFY\020\222\330\002\022,\n&ID_S2G_JOIN_ONTIME_OPE"
    "N_BATTLE_REQUEST\020\223\330\002\022\031\n\023ID_S2G_BATTLE_CL"
    "OSE\020\224\330\002\022$\n\036ID_S2G_INTO_CORPSBOSS_REPETIO"
    "N\020\225\330\002\022#\n\035ID_S2G_END_CORPSBOSS_REPETION\020\226"
    "\330\002\022\'\n!ID_G2S_TODAYACTIVITYS_LIST_NOTIFY\020"
    "\201\340\002\022#\n\035ID_G2S_ACTIVITY_CHANGE_NOTIFY\020\202\340\002"
    "\022\"\n\034ID_G2S_ACTIVITY_EVENT_NOTIFY\020\203\340\002\022&\n "
    "ID_S2G_GETCAMPRANKFORYQS_REQUEST\020\204\340\002\022\'\n!"
    "ID_G2S_GETCAMPRANKFORYQS_RESPONSE\020\205\340\002\022%\n"
    "\037ID_S2G_UPDATEYQSGROWING_REQUEST\020\206\340\002\022&\n "
    "ID_G2S_UPDATEYQSGROWING_RESPONSE\020\207\340\002\022\032\n\024"
    "ID_G2S_SETTLE_NOTICE\020\210\340\002\022#\n\035ID_G2S_YAOQI"
    "ANSHUSTART_NOTICE\020\211\340\002\022\036\n\030ID_S2G_REQUEST_"
    "FAMILYMSG\020\201\350\002\022\037\n\031ID_G2S_RESPONSE_FAMILYM"
    "SG\020\202\350\002\022 \n\032ID_G2S_NOTIFY_FAMILYIDNAME\020\203\350\002"
    "\022\033\n\025ID_G2S_NOTIFY_NPCLIST\020\204\350\002\022\036\n\030ID_S2G_"
    "NOTIFY_BIDTIMEOUT\020\205\350\002\022 \n\032ID_S2G_REQUEST_"
    "BATTLESTART\020\206\350\002\022!\n\033ID_G2S_RESPONSE_BATTL"
    "ESTART\020\207\350\002\022\035\n\027ID_S2G_NOTIFY_BATTLEEND\020\210\350"
    "\002\022\036\n\030ID_G2S_NOTIFY_BIDRESTART\020\211\350\002\022*\n$ID_"
    "S2G_NOTIFY_CHANGEFAMILYCONTRIBUTE\020\212\350\002\022%\n"
    "\037ID_S2G_NOTIFY_CHANGEFAMILYGLORY\020\213\350\002\022%\n\037"
    "ID_S2G_NOTIFY_CHANGEFAMILYMONEY\020\214\350\002\022)\n#I"
    "D_S2G_NOTIFY_FAMILYAPANDEXPCHANGED\020\215\350\002\022\""
    "\n\034ID_S2G_REQUEST_BUYFAMILYITEM\020\216\350\002\022#\n\035ID"
    "_G2S_RESPONSE_BUYFAMILYITEM\020\217\350\002\022*\n$ID_G2"
    "S_NOTIFY_CLEARFAMILYREPETIONIFO\020\220\350\002\022#\n\035I"
    "D_S2G_REQUEST_FAMILYEXCHANGE\020\221\350\002\022$\n\036ID_G"
    "2S_RESPONSE_FAMILYEXCHANGE\020\222\350\002\022)\n#ID_S2G"
    "_NOTIFY_ADDFAMILYEXCHANGEITEM\020\223\350\002\022)\n#ID_"
    "S2G_NOTIFY_CHANGEFAMILYSTABILITY\020\224\350\002\022!\n\033"
    "ID_S2G_REQUEST_BIDTIMERSTOP\020\201\360\002\022\036\n\030ID_G2"
    "S_NOTIFY_JOINBATTLE\020\202\360\002\022!\n\033ID_S2G_REQUES"
    "T_BATTLERESULT\020\203\360\002\022\037\n\031ID_S2G_REQUEST_BAT"
    "TLEFLAG\020\204\360\002\022 \n\032ID_G2S_RESPONSE_BATTLEFLA"
    "G\020\205\360\002\022%\n\037ID_S2G_REQUEST_STARTCOPRSBATTLE"
    "\020\206\360\002\022)\n#ID_S2G_NOTIFY_CHANGECORPSCONTRIB"
    "UTE\020\207\360\002\022$\n\036ID_S2G_NOTIFY_CHANGECORPSGLOR"
    "Y\020\210\360\002\022$\n\036ID_S2G_NOTIFY_CHANGECORPSMONEY\020"
    "\211\360\002\022%\n\037ID_S2G_NOTIFY_CORPSAPEXPCHANGED\020\212"
    "\360\002\022!\n\033ID_S2G_REQUEST_BUYCORPSITEM\020\213\360\002\022\"\n"
    "\034ID_G2S_RESPONSE_BUYCORPSITEM\020\214\360\002\022\"\n\034ID_"
    "S2G_REQUEST_CORPSEXCHANGE\020\215\360\002\022#\n\035ID_G2S_"
    "RESPONSE_CORPSEXCHANGE\020\216\360\002\022)\n#ID_S2G_REQ"
    "UEST_ADDCORPSEXCHANGEITEM\020\217\360\002\022(\n\"ID_S2G_"
    "REQUEST_CALLBACK_CORPSMONEY\020\220\360\002\022\036\n\030ID_S2"
    "G_REQUEST_BATTLEMAP\020\221\360\002\022\"\n\034ID_S2G_CHANGE"
    "_CORPSBOSSTIMES\020\222\360\002\022(\n\"ID_S2G_CHANGE_COR"
    "PSBOSSREFINEVALUE\020\223\360\002\022&\n ID_S2G_CHANGE_C"
    "ORPSCOLLECTACTIVE\020\224\360\002\022$\n\036ID_S2G_NOTIFY_P"
    "ERSONALRANKINFO\020\201\370\002\022%\n\037ID_G2S_REQUEST_PE"
    "RSONALRANKINFO\020\202\370\002\022\035\n\027ID_G2S_NOTIFY_NEWT"
    "OPTEN\020\203\370\002\022\033\n\025ID_S2G_REQUEST_TOPTEN\020\204\370\002\022\034"
    "\n\026ID_G2S_RESPONSE_TOPTEN\020\205\370\002\022\030\n\022ID_S2G_R"
    "ANK_REMOVE\020\206\370\002\022\036\n\030ID_G2E_IBEXCHANGE_NOTI"
    "CE\020\201\220\003\022\036\n\030ID_S2E_IBITEMUSED_NOTICE\020\202\220\003\022 "
    "\n\032ID_S2G_LISTIBITEMS_REQUEST\020\203\220\003\022!\n\033ID_G"
    "2S_LISTIBITEMS_RESPONSE\020\204\220\003\022#\n\035ID_S2G_PU"
    "RCHASEIBITEM_REQUEST\020\205\220\003\022$\n\036ID_G2S_PURCH"
    "ASEIBITEM_RESPONSE\020\206\220\003\022\037\n\031ID_S2G_ROLEIBT"
    "RANS_NOTIFY\020\207\220\003\022#\n\035ID_S2V_SERVERVALIDATE"
    "_REQUEST\020\210\220\003\022$\n\036ID_V2S_SERVERVALIDATE_RE"
    "SPONSE\020\211\220\003\022\037\n\031ID_S2G_SYNIBSTORE_REQUEST\020"
    "\212\220\003\022 \n\032ID_G2S_SYNIBSTORE_RESPONSE\020\213\220\003\022!\n"
    "\033ID_S2G_QUERYYUANBAO_REQUEST\020\214\220\003\022\"\n\034ID_G"
    "2S_QUERYYUANBAO_RESPONSE\020\215\220\003\022 \n\032ID_S2G_D"
    "RAWYUANBAO_REQUEST\020\216\220\003\022!\n\033ID_G2S_DRAWYUA"
    "NBAO_RESPONSE\020\217\220\003\022\036\n\030ID_S2G_LOCKGOODS_RE"
    "QUEST\020\220\220\003\022\037\n\031ID_G2S_LOCKGOODS_RESPONSE\020\221"
    "\220\003\022$\n\036ID_G2S_NOTIFY_IBSTOREPROMOTION\020\222\220\003"
    "\022!\n\033ID_S2G_SYNFUNCSTORE_REQUEST\020\223\220\003\022\"\n\034I"
    "D_G2S_SYNFUNCSTORE_RESPONSE\020\224\220\003\022 \n\032ID_S2"
    "G_REQUEST_CHANGESCORE\020\201\230\003\022\037\n\031ID_G2S_NOTI"
    "FY_JUDGEMODIFY\020\202\230\003\022!\n\033ID_S2G_REQUEST_CHA"
    "NGEWIZARD\020\201\250\003\022\"\n\034ID_G2S_RESPONSE_CHANGEW"
    "IZARD\020\202\250\003\022$\n\036ID_S2G_REQUEST_CHANGECONSTR"
    "UCT\020\203\250\003\022%\n\037ID_G2S_REQPONSE_CHANGECONSTRU"
    "CT\020\204\250\003\022 \n\032ID_S2G_REQUEST_CHANGEPOWER\020\205\250\003"
    "\022!\n\033ID_G2S_RESPONSE_CHANGEPOWER\020\206\250\003\022\037\n\031I"
    "D_G2S_NOTIFY_USEFUNCTION\020\207\250\003\022\037\n\031ID_G2S_N"
    "OTIFY_SETOFFICIAL\020\210\250\003\022 \n\032ID_S2G_NOTIFY_C"
    "HANGEFRIEND\020\211\250\003\022\037\n\031ID_S2G_REQUEST_KILLPE"
    "RSON\020\212\250\003\022 \n\032ID_G2S_RESPONSE_KILLPERSON\020\213"
    "\250\003\022\036\n\030ID_G2S_NOTIFY_SYNCNATION\020\214\250\003\022\037\n\031ID"
    "_G2S_NOTIFY_NATIONTITLE\020\215\250\003\022$\n\036ID_S2G_RE"
    "QUEST_NATIONTITLELIST\020\216\250\003\022%\n\037ID_G2S_RESP"
    "ONSE_NATIONTITLELIST\020\217\250\003\022\036\n\030ID_S2G_REQUE"
    "ST_TRYSUMMON\020\220\250\003\022\037\n\031ID_G2S_RESPONSE_TRYS"
    "UMMON\020\221\250\003\022\037\n\031ID_S2G_REQUEST_REALSUMMON\020\222"
    "\250\003\022\036\n\030ID_G2S_NOTIFY_REALSUMMON\020\223\250\003\022\035\n\027ID"
    "_S2G_NOTIFY_WARCHANGE\020\224\250\003\022 \n\032ID_G2S_NOTI"
    "FY_RELIVECHANGE\020\225\250\003\022\"\n\034ID_S2G_NOTIFY_OBT"
    "AINWARHONOR\020\226\250\003\022!\n\033ID_G2S_NOTIFY_SYNCWAR"
    "STATUS\020\227\250\003\022\036\n\030ID_S2G_NOTIFY_WARCONTROL\020\230"
    "\250\003\022 \n\032ID_S2G_NOTIFY_WARSTONEOVER\020\231\250\003\022\"\n\034"
    "ID_G2S_NOTIFY_CREATEWARSTONE\020\232\250\003\022\032\n\024ID_S"
    "2G_NOTIFY_ADDTAX\020\233\250\003\022\034\n\026ID_S2G_ADDHONER_"
    "NOTICE\020\234\250\003\022 \n\032ID_G2S_CAMPWAEKLIST_NOTICE"
    "\020\235\250\003\022!\n\033ID_S2G_CAMPWEAKLIST_REQUEST\020\236\250\003\022"
    "\"\n\034ID_G2S_CAMPWEAKLIST_RESPONSE\020\237\250\003\022 \n\032I"
    "D_S2G_NOTIFY_SPECIALEVENT\020\240\250\003\022\036\n\030ID_D2G_"
    "BOURSELIST_NOTICE\020\201\260\003\022\034\n\026ID_S2G_BOURSELI"
    "ST_LOAD\020\202\260\003\022\034\n\026ID_G2S_BOURSELIST_LOAD\020\203\260"
    "\003\022 \n\032ID_D2G_BOURSE_TRADE_NOTICE\020\204\260\003\022\035\n\027I"
    "D_G2S_BOURSE_TRADE_BUY\020\205\260\003\022\036\n\030ID_G2S_BOU"
    "RSE_TRADE_SELL\020\206\260\003\022\027\n\021ID_D22_BOURSE_LOG\020"
    "\207\260\003\022\037\n\031ID_G2S_NOTIFY_SYNCGTANDLW\020\210\260\003*N\n\022"
    "EMFriendAddRetCode\022\017\n\013RET_SUCCESS\020\000\022\026\n\022R"
    "ET_INVALID_PLAYER\020\001\022\017\n\013RET_OFFLINE\020\002*?\n\014"
    "EMSaveResult\022\016\n\nEM_SAVE2DB\020\000\022\020\n\014EM_SAVE2"
    "FILE\020\001\022\r\n\tEM_NOSAVE\020\002*\210\001\n\rEMLeaveReason\022"
    "\025\n\021EM_LEAVE_REDIRECT\020\001\022\030\n\024EM_LEAVE_RETUR"
    "N2GATE\020\002\022\026\n\022EM_LEAVE_LEAVEGAME\020\003\022\024\n\020EM_L"
    "EAVE_KICKOUT\020\004\022\030\n\024EM_LEAVE_CLOSESOCKET\020\005"
    "*<\n\022EMGateInfoResponse\022\021\n\rERROR_SUCCESS\020"
    "\000\022\023\n\017ERROR_OUTOFDATE\020\001B\002H\001", 37386);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "servermessage_pb.hxx", &protobuf_RegisterTypes);
  #endif
  CMessageYQSActivtyStartNotice::default_instance_ = new CMessageYQSActivtyStartNotice();
  CMessageS2GGetCampRankForYQSRequest::default_instance_ = new CMessageS2GGetCampRankForYQSRequest();
  CampRankForYQSForSever::default_instance_ = new CampRankForYQSForSever();
  CMessageG2SGetCampRankForYQSResponse::default_instance_ = new CMessageG2SGetCampRankForYQSResponse();
  CMessageS2GUpdateYQSGrowingRequest::default_instance_ = new CMessageS2GUpdateYQSGrowingRequest();
  CMessageG2SUpdateYQSGrowingResponse::default_instance_ = new CMessageG2SUpdateYQSGrowingResponse();
  CMessageG2SSettleNotice::default_instance_ = new CMessageG2SSettleNotice();
  CMessageInternalTimeOut::default_instance_ = new CMessageInternalTimeOut();
  CMessageCountryInfo::default_instance_ = new CMessageCountryInfo();
  CMessageRedirectGErrorCode::default_instance_ = new CMessageRedirectGErrorCode();
  CMessageRedirectSErrorCode::default_instance_ = new CMessageRedirectSErrorCode();
  CMessagePlayerRedirectEnterMapResponse::default_instance_ = new CMessagePlayerRedirectEnterMapResponse();
  CMessageGateInfoNotice::default_instance_ = new CMessageGateInfoNotice();
  CMessageGateInfoResponse::default_instance_ = new CMessageGateInfoResponse();
  CMessagePlayerEnterGateNotice::default_instance_ = new CMessagePlayerEnterGateNotice();
  CMessagePlayerEnterGateResponse::default_instance_ = new CMessagePlayerEnterGateResponse();
  CMessagePlayerLeaveGateNotice::default_instance_ = new CMessagePlayerLeaveGateNotice();
  CMessageServerInfoNotice::default_instance_ = new CMessageServerInfoNotice();
  CMessageServerInfoResponse::default_instance_ = new CMessageServerInfoResponse();
  CMessagePlayerEnterMapNotice::default_instance_ = new CMessagePlayerEnterMapNotice();
  CMessagePlayerRedirectMapNotice::default_instance_ = new CMessagePlayerRedirectMapNotice();
  CMessagePlayerEnterMapResponse::default_instance_ = new CMessagePlayerEnterMapResponse();
  CMessagePlayerLoginCompleteNotice::default_instance_ = new CMessagePlayerLoginCompleteNotice();
  CMessagePlayerLeaveMapNotice::default_instance_ = new CMessagePlayerLeaveMapNotice();
  CMessagePlayerLeaveMapResponse::default_instance_ = new CMessagePlayerLeaveMapResponse();
  CMessagePlayerReturn2GateNotice::default_instance_ = new CMessagePlayerReturn2GateNotice();
  CMessagePlayerReturn2GateResponse::default_instance_ = new CMessagePlayerReturn2GateResponse();
  CMessageCreateMapNotice::default_instance_ = new CMessageCreateMapNotice();
  CMessageCreateMapResponse::default_instance_ = new CMessageCreateMapResponse();
  BattleLevel::default_instance_ = new BattleLevel();
  PBDate::default_instance_ = new PBDate();
  PBDateSpace::default_instance_ = new PBDateSpace();
  CMessageRegistRepetionInfo::default_instance_ = new CMessageRegistRepetionInfo();
  CMessageDestroyRepetionMap::default_instance_ = new CMessageDestroyRepetionMap();
  CMessageG2SRepetionEventCode::default_instance_ = new CMessageG2SRepetionEventCode();
  CMessagePlayerRedirectRequest::default_instance_ = new CMessagePlayerRedirectRequest();
  CMessagePlayerRedirectResponse::default_instance_ = new CMessagePlayerRedirectResponse();
  CMessagePlayerEnterConfirmNotice::default_instance_ = new CMessagePlayerEnterConfirmNotice();
  CMessageSceneNotOpenNotice::default_instance_ = new CMessageSceneNotOpenNotice();
  CMessageUpdateVersionNotice::default_instance_ = new CMessageUpdateVersionNotice();
  CMessageRegistServerRequest::default_instance_ = new CMessageRegistServerRequest();
  CMessageRegistServerResponse::default_instance_ = new CMessageRegistServerResponse();
  CMessageHeartBeatNotice::default_instance_ = new CMessageHeartBeatNotice();
  CMessagePlayerOnLineFriendRequest::default_instance_ = new CMessagePlayerOnLineFriendRequest();
  PBSinglePlayerInfo::default_instance_ = new PBSinglePlayerInfo();
  CMessagePlayerOnLineFriendResponse::default_instance_ = new CMessagePlayerOnLineFriendResponse();
  CMessagePlayerChangeStatusNotice::default_instance_ = new CMessagePlayerChangeStatusNotice();
  CMessageGameHeartBeatNotice::default_instance_ = new CMessageGameHeartBeatNotice();
  CMessageERatingProtoStream::default_instance_ = new CMessageERatingProtoStream();
  CMessageERatingStateNotice::default_instance_ = new CMessageERatingStateNotice();
  CMessageCreateGateTeamRequest::default_instance_ = new CMessageCreateGateTeamRequest();
  CMessageCreateGateTeamResponse::default_instance_ = new CMessageCreateGateTeamResponse();
  CMessageJoinGateTeamRequest::default_instance_ = new CMessageJoinGateTeamRequest();
  CMessageJoinGateTeamResponse::default_instance_ = new CMessageJoinGateTeamResponse();
  CMessageRequestJoinReply::default_instance_ = new CMessageRequestJoinReply();
  CMessageJoinGateTeamInvite::default_instance_ = new CMessageJoinGateTeamInvite();
  CMessageJoinTeamInviteResponse::default_instance_ = new CMessageJoinTeamInviteResponse();
  CMessageInviteJoinReply::default_instance_ = new CMessageInviteJoinReply();
  CMessageInvite2Request::default_instance_ = new CMessageInvite2Request();
  CMessageKickoutGateTeamRequest::default_instance_ = new CMessageKickoutGateTeamRequest();
  CMessageChangeHeaderRequest::default_instance_ = new CMessageChangeHeaderRequest();
  CMessageChangeDistributeRequest::default_instance_ = new CMessageChangeDistributeRequest();
  CMessageChangeDistributeResponse::default_instance_ = new CMessageChangeDistributeResponse();
  CMessageLeaveGateTeamRequest::default_instance_ = new CMessageLeaveGateTeamRequest();
  CMessageEndGateTeamRequest::default_instance_ = new CMessageEndGateTeamRequest();
  CMessageNotifySceneToUpdateTeam::default_instance_ = new CMessageNotifySceneToUpdateTeam();
  CMessageNotifySceneToSendTeamList::default_instance_ = new CMessageNotifySceneToSendTeamList();
  CMessageNotifyErrToScene::default_instance_ = new CMessageNotifyErrToScene();
  CMessageUpdateTeamPropertyRequest::default_instance_ = new CMessageUpdateTeamPropertyRequest();
  CMessageUpdateTeamPropertyResponse::default_instance_ = new CMessageUpdateTeamPropertyResponse();
  CMessageFollowRequest::default_instance_ = new CMessageFollowRequest();
  CMessageFollowResponse::default_instance_ = new CMessageFollowResponse();
  CMessageSendClaimRecruitRequest::default_instance_ = new CMessageSendClaimRecruitRequest();
  CMessageSendClaimRecruitResponse::default_instance_ = new CMessageSendClaimRecruitResponse();
  CMessageQueryClaimRecruitRequest::default_instance_ = new CMessageQueryClaimRecruitRequest();
  CMessageQueryClaimRecruitResponse::default_instance_ = new CMessageQueryClaimRecruitResponse();
  CMessageDeleteClaimRecruitRequest::default_instance_ = new CMessageDeleteClaimRecruitRequest();
  CMessageDeleteClaimRecruitResponse::default_instance_ = new CMessageDeleteClaimRecruitResponse();
  CMessageObtainGateTeamRequest::default_instance_ = new CMessageObtainGateTeamRequest();
  CMessageClearInvReqRecordRequest::default_instance_ = new CMessageClearInvReqRecordRequest();
  PBMsg::default_instance_ = new PBMsg();
  PBTeamItem::default_instance_ = new PBTeamItem();
  PBTeamInfo::default_instance_ = new PBTeamInfo();
  CMessageGateShutDownNotice::default_instance_ = new CMessageGateShutDownNotice();
  CMessageKickOffPlayerRequest::default_instance_ = new CMessageKickOffPlayerRequest();
  CMessageKickOffPlayerResponse::default_instance_ = new CMessageKickOffPlayerResponse();
  CMessageGetPlayerMailiInfoRequest::default_instance_ = new CMessageGetPlayerMailiInfoRequest();
  CMessageGetPlayerMailInfoResponse::default_instance_ = new CMessageGetPlayerMailInfoResponse();
  CMessageChangeMailCountNotify::default_instance_ = new CMessageChangeMailCountNotify();
  CMessageUserIbExchangeNotice::default_instance_ = new CMessageUserIbExchangeNotice();
  CMessageUserUseIbItemNotice::default_instance_ = new CMessageUserUseIbItemNotice();
  CMessageAddFriendRequest::default_instance_ = new CMessageAddFriendRequest();
  CMessageAddFriendResponse::default_instance_ = new CMessageAddFriendResponse();
  CMessageGetCharIDRequest::default_instance_ = new CMessageGetCharIDRequest();
  CMessageGetCharIDResponse::default_instance_ = new CMessageGetCharIDResponse();
  CMessageRoleChangeCampNotice::default_instance_ = new CMessageRoleChangeCampNotice();
  CMessageLoginSvrStartUpNotice::default_instance_ = new CMessageLoginSvrStartUpNotice();
  CMessageGate2LoginHeartBeatNotice::default_instance_ = new CMessageGate2LoginHeartBeatNotice();
  PBPersonalRankInfo::default_instance_ = new PBPersonalRankInfo();
  CMessagePersonalRankInfoNotify::default_instance_ = new CMessagePersonalRankInfoNotify();
  PBRankTopTen::default_instance_ = new PBRankTopTen();
  CMessageRankRemove::default_instance_ = new CMessageRankRemove();
  CMessagePersonalRankInfoRequest::default_instance_ = new CMessagePersonalRankInfoRequest();
  CMessageNewRankTopTenNotify::default_instance_ = new CMessageNewRankTopTenNotify();
  CMessageRoleGameInfoReportToGateNotify::default_instance_ = new CMessageRoleGameInfoReportToGateNotify();
  CMessageBattleTeamWait::default_instance_ = new CMessageBattleTeamWait();
  CMessageBattleWaitLeaveRequest::default_instance_ = new CMessageBattleWaitLeaveRequest();
  CMessageBattleJoinNotice::default_instance_ = new CMessageBattleJoinNotice();
  CMessageBattlePlayerJoin::default_instance_ = new CMessageBattlePlayerJoin();
  CMessageBattleWaitNotice::default_instance_ = new CMessageBattleWaitNotice();
  CMessageServerValidateRequest::default_instance_ = new CMessageServerValidateRequest();
  CMessageBattleWaitLeaveResponse::default_instance_ = new CMessageBattleWaitLeaveResponse();
  CMessageServerValidateResponse::default_instance_ = new CMessageServerValidateResponse();
  CTracedPlayerInfo::default_instance_ = new CTracedPlayerInfo();
  CMessageNotifyTracedPlayer::default_instance_ = new CMessageNotifyTracedPlayer();
  CMessageBattleCreateRequest::default_instance_ = new CMessageBattleCreateRequest();
  CMessageBattleCreateResponse::default_instance_ = new CMessageBattleCreateResponse();
  CMessageFamilyIDNameNotify::default_instance_ = new CMessageFamilyIDNameNotify();
  PBCorpsNpc::default_instance_ = new PBCorpsNpc();
  CMessageNpcListNotify::default_instance_ = new CMessageNpcListNotify();
  CMessageBidTimeOutNotify::default_instance_ = new CMessageBidTimeOutNotify();
  CMessageBattleStartRequest::default_instance_ = new CMessageBattleStartRequest();
  CMessageBattleStartResponse::default_instance_ = new CMessageBattleStartResponse();
  CMessageBattleEndNotify::default_instance_ = new CMessageBattleEndNotify();
  CMessageBidRestartNotify::default_instance_ = new CMessageBidRestartNotify();
  CMessageObtainTopTenRequest::default_instance_ = new CMessageObtainTopTenRequest();
  PBRankTitle::default_instance_ = new PBRankTitle();
  CMessageObtainTopTenResponse::default_instance_ = new CMessageObtainTopTenResponse();
  CMessageCorpsBidTimerStopRequest::default_instance_ = new CMessageCorpsBidTimerStopRequest();
  CMessageCorpsJoinBattleNotice::default_instance_ = new CMessageCorpsJoinBattleNotice();
  CMessageNotifyBattleResult2Gate::default_instance_ = new CMessageNotifyBattleResult2Gate();
  CMessageCorpsBattleFlagRequest::default_instance_ = new CMessageCorpsBattleFlagRequest();
  CMessageCorpsBattleFlagResponse::default_instance_ = new CMessageCorpsBattleFlagResponse();
  CMessageCreateRepetionNotify::default_instance_ = new CMessageCreateRepetionNotify();
  CMessageCreateRepetionErr::default_instance_ = new CMessageCreateRepetionErr();
  CMessageTeamIntoRepetion::default_instance_ = new CMessageTeamIntoRepetion();
  CMessageSingleIntoRepetion::default_instance_ = new CMessageSingleIntoRepetion();
  CMessageCorpsStartBattleRequest::default_instance_ = new CMessageCorpsStartBattleRequest();
  CMessageIntoRepetionNotify::default_instance_ = new CMessageIntoRepetionNotify();
  CMessageChangeFamilyContributeNotify::default_instance_ = new CMessageChangeFamilyContributeNotify();
  CMessageChangeFamilyGloryNotify::default_instance_ = new CMessageChangeFamilyGloryNotify();
  CMessageChangeFamilyMoneyNotify::default_instance_ = new CMessageChangeFamilyMoneyNotify();
  CMessageSynIbStoreRequest::default_instance_ = new CMessageSynIbStoreRequest();
  CMessageSynIbStoreResponse::default_instance_ = new CMessageSynIbStoreResponse();
  CMessageSynFuncStoreRequest::default_instance_ = new CMessageSynFuncStoreRequest();
  CMessageSynFuncStoreResponse::default_instance_ = new CMessageSynFuncStoreResponse();
  CMessageChangeCorpsContributeNotify::default_instance_ = new CMessageChangeCorpsContributeNotify();
  CMessageChangeCorpsGloryNotify::default_instance_ = new CMessageChangeCorpsGloryNotify();
  CMessageChangeCorpsMoneyNotify::default_instance_ = new CMessageChangeCorpsMoneyNotify();
  CMessageChangeCorpsBossTimes::default_instance_ = new CMessageChangeCorpsBossTimes();
  CMessageChangeCorpsBossRefineValue::default_instance_ = new CMessageChangeCorpsBossRefineValue();
  CMessageChangeCorpsCollectActive::default_instance_ = new CMessageChangeCorpsCollectActive();
  CMessageFamilyApExpChangedNotify::default_instance_ = new CMessageFamilyApExpChangedNotify();
  CMessageCorpsApExpChangedNotify::default_instance_ = new CMessageCorpsApExpChangedNotify();
  CMessageChangeJudgeScoreReuqest::default_instance_ = new CMessageChangeJudgeScoreReuqest();
  CMessageChangeWizardRequest::default_instance_ = new CMessageChangeWizardRequest();
  CMessageChangeWizardResponse::default_instance_ = new CMessageChangeWizardResponse();
  CMessageChangeConstructRequest::default_instance_ = new CMessageChangeConstructRequest();
  CMessageChangeConstructResponse::default_instance_ = new CMessageChangeConstructResponse();
  CMessageChangePowerRequest::default_instance_ = new CMessageChangePowerRequest();
  CMessageChangePowerResponse::default_instance_ = new CMessageChangePowerResponse();
  CMessageUseFunctionNotify::default_instance_ = new CMessageUseFunctionNotify();
  CMessageSetOfficialNotify::default_instance_ = new CMessageSetOfficialNotify();
  CMessageChangeFriendNotify::default_instance_ = new CMessageChangeFriendNotify();
  CMessageKillPersonRequest::default_instance_ = new CMessageKillPersonRequest();
  CMessageKillPersonResponse::default_instance_ = new CMessageKillPersonResponse();
  CMessageSyncNationNotify::default_instance_ = new CMessageSyncNationNotify();
  CMessageBuyFamilyItemRequest::default_instance_ = new CMessageBuyFamilyItemRequest();
  CMessageBuyFamilyItemResponse::default_instance_ = new CMessageBuyFamilyItemResponse();
  CMessageBuyCorpsItemRequest::default_instance_ = new CMessageBuyCorpsItemRequest();
  CMessageBuyCorpsItemResponse::default_instance_ = new CMessageBuyCorpsItemResponse();
  CMessageClearFamilyRepetionInfoNotify::default_instance_ = new CMessageClearFamilyRepetionInfoNotify();
  CMessageJudgeModifySuccessNotice::default_instance_ = new CMessageJudgeModifySuccessNotice();
  CMessage4EQueryYuanBaoRequest::default_instance_ = new CMessage4EQueryYuanBaoRequest();
  CMessage4EQueryYuanBaoResponse::default_instance_ = new CMessage4EQueryYuanBaoResponse();
  CMessage4EDrawYuanBaoRequest::default_instance_ = new CMessage4EDrawYuanBaoRequest();
  CMessage4EDrawYuanBaoResponse::default_instance_ = new CMessage4EDrawYuanBaoResponse();
  CMessageFamilyExchangeRequest::default_instance_ = new CMessageFamilyExchangeRequest();
  CMessageFamilyExchangeResponse::default_instance_ = new CMessageFamilyExchangeResponse();
  CMessageCorpsExchangeRequest::default_instance_ = new CMessageCorpsExchangeRequest();
  CMessageCorpsExchangeResponse::default_instance_ = new CMessageCorpsExchangeResponse();
  CMessageAddFamilyExchangeItemNotify::default_instance_ = new CMessageAddFamilyExchangeItemNotify();
  CMessageAddCorpsExchangeItemNotify::default_instance_ = new CMessageAddCorpsExchangeItemNotify();
  CMessageGateEntityGMMove::default_instance_ = new CMessageGateEntityGMMove();
  CMessageSceneEntityGMMove::default_instance_ = new CMessageSceneEntityGMMove();
  SingleActivityObj::default_instance_ = new SingleActivityObj();
  DropInfo::default_instance_ = new DropInfo();
  MapDrop::default_instance_ = new MapDrop();
  SingleActivityInfo::default_instance_ = new SingleActivityInfo();
  CMessageTodayActivitysNotify::default_instance_ = new CMessageTodayActivitysNotify();
  SingleActivity::default_instance_ = new SingleActivity();
  CMessageActivityChangeNotify::default_instance_ = new CMessageActivityChangeNotify();
  CMessageChangePasswordStatusNotify::default_instance_ = new CMessageChangePasswordStatusNotify();
  CMessageUpdateNationTitleNotice::default_instance_ = new CMessageUpdateNationTitleNotice();
  CMessageGetNationTitleListRequest::default_instance_ = new CMessageGetNationTitleListRequest();
  CMessageGetNationTitleListResponse::default_instance_ = new CMessageGetNationTitleListResponse();
  CMessageSGProVipFlagNotice::default_instance_ = new CMessageSGProVipFlagNotice();
  CMessageResetRolePasswordNotify::default_instance_ = new CMessageResetRolePasswordNotify();
  CMessgeSafeShutdownNotify::default_instance_ = new CMessgeSafeShutdownNotify();
  CMessgeSafeShutdownAck::default_instance_ = new CMessgeSafeShutdownAck();
  CMessageRollCorpsMoneyRequest::default_instance_ = new CMessageRollCorpsMoneyRequest();
  CMessageCorpsBattleMapNotice::default_instance_ = new CMessageCorpsBattleMapNotice();
  CMessageTrySummonRequest::default_instance_ = new CMessageTrySummonRequest();
  CMessageTrySummonResponse::default_instance_ = new CMessageTrySummonResponse();
  CMessageRealSummonRequest::default_instance_ = new CMessageRealSummonRequest();
  CMessageRealSummonNotify::default_instance_ = new CMessageRealSummonNotify();
  CMessageLockGoodsRequest::default_instance_ = new CMessageLockGoodsRequest();
  CMessageLockGoodsResponse::default_instance_ = new CMessageLockGoodsResponse();
  CMessageS2GRoleMove::default_instance_ = new CMessageS2GRoleMove();
  CMessageG2SRoleMove::default_instance_ = new CMessageG2SRoleMove();
  CMessageWarChangeNotify::default_instance_ = new CMessageWarChangeNotify();
  CMessageReliveChangeNotify::default_instance_ = new CMessageReliveChangeNotify();
  WarHonorData::default_instance_ = new WarHonorData();
  CMessageObtainWarHonorNotify::default_instance_ = new CMessageObtainWarHonorNotify();
  CMessageBourseG2SLoadList::default_instance_ = new CMessageBourseG2SLoadList();
  CMessageBourseS2GLoadList::default_instance_ = new CMessageBourseS2GLoadList();
  CMessageSyncWarStatusNotify::default_instance_ = new CMessageSyncWarStatusNotify();
  CMessageWarControlNotify::default_instance_ = new CMessageWarControlNotify();
  CMessageBourseTradeNotice::default_instance_ = new CMessageBourseTradeNotice();
  CMessageReSavePlayerRequest::default_instance_ = new CMessageReSavePlayerRequest();
  CMessageReSavePlayerResponse::default_instance_ = new CMessageReSavePlayerResponse();
  CMessageBoursePlayerTradeBuyNotice::default_instance_ = new CMessageBoursePlayerTradeBuyNotice();
  CMessageBoursePlayerTradeSellNotice::default_instance_ = new CMessageBoursePlayerTradeSellNotice();
  CMessageWarStoneOverNotify::default_instance_ = new CMessageWarStoneOverNotify();
  CMessageCreateWarStoneNotify::default_instance_ = new CMessageCreateWarStoneNotify();
  CMessageAddTaxNotify::default_instance_ = new CMessageAddTaxNotify();
  CMessageSendSysMailToPlayer::default_instance_ = new CMessageSendSysMailToPlayer();
  CMessageCampAddHonerScore::default_instance_ = new CMessageCampAddHonerScore();
  CMessageBattleTeamFixWait::default_instance_ = new CMessageBattleTeamFixWait();
  CMessageActivityEventNotify::default_instance_ = new CMessageActivityEventNotify();
  CMessageAddMasterPointRequest::default_instance_ = new CMessageAddMasterPointRequest();
  CMessageAddMasterPointNotify::default_instance_ = new CMessageAddMasterPointNotify();
  CMessageBattleSingleFixWait::default_instance_ = new CMessageBattleSingleFixWait();
  CMessageSpecialEventNotify::default_instance_ = new CMessageSpecialEventNotify();
  CMessageAcquireMasterNotify::default_instance_ = new CMessageAcquireMasterNotify();
  CMessageBattleWinnerNotify::default_instance_ = new CMessageBattleWinnerNotify();
  CMessageChangeFamilyStabilityNotify::default_instance_ = new CMessageChangeFamilyStabilityNotify();
  CMessageS2GJoinOnTimeOpenBattleRequest::default_instance_ = new CMessageS2GJoinOnTimeOpenBattleRequest();
  CMessageSyncGTAndLWNotify::default_instance_ = new CMessageSyncGTAndLWNotify();
  CMessageS2GBattleClose::default_instance_ = new CMessageS2GBattleClose();
  CMessageS2GIntoCorpsBossRepetion::default_instance_ = new CMessageS2GIntoCorpsBossRepetion();
  CMessgeS2GEndCorpsBossRepetion::default_instance_ = new CMessgeS2GEndCorpsBossRepetion();
  PBGroupTasks::default_instance_ = new PBGroupTasks();
  CMessageGateCheckGroupPublishRequest::default_instance_ = new CMessageGateCheckGroupPublishRequest();
  CMessageGatePublishGroupRequest::default_instance_ = new CMessageGatePublishGroupRequest();
  PBGroupInfo::default_instance_ = new PBGroupInfo();
  CMessageGateCheckGroupPublishResponse::default_instance_ = new CMessageGateCheckGroupPublishResponse();
  CMessageGatePublishGroupResponse::default_instance_ = new CMessageGatePublishGroupResponse();
  CMessageYQSActivtyStartNotice::default_instance_->InitAsDefaultInstance();
  CMessageS2GGetCampRankForYQSRequest::default_instance_->InitAsDefaultInstance();
  CampRankForYQSForSever::default_instance_->InitAsDefaultInstance();
  CMessageG2SGetCampRankForYQSResponse::default_instance_->InitAsDefaultInstance();
  CMessageS2GUpdateYQSGrowingRequest::default_instance_->InitAsDefaultInstance();
  CMessageG2SUpdateYQSGrowingResponse::default_instance_->InitAsDefaultInstance();
  CMessageG2SSettleNotice::default_instance_->InitAsDefaultInstance();
  CMessageInternalTimeOut::default_instance_->InitAsDefaultInstance();
  CMessageCountryInfo::default_instance_->InitAsDefaultInstance();
  CMessageRedirectGErrorCode::default_instance_->InitAsDefaultInstance();
  CMessageRedirectSErrorCode::default_instance_->InitAsDefaultInstance();
  CMessagePlayerRedirectEnterMapResponse::default_instance_->InitAsDefaultInstance();
  CMessageGateInfoNotice::default_instance_->InitAsDefaultInstance();
  CMessageGateInfoResponse::default_instance_->InitAsDefaultInstance();
  CMessagePlayerEnterGateNotice::default_instance_->InitAsDefaultInstance();
  CMessagePlayerEnterGateResponse::default_instance_->InitAsDefaultInstance();
  CMessagePlayerLeaveGateNotice::default_instance_->InitAsDefaultInstance();
  CMessageServerInfoNotice::default_instance_->InitAsDefaultInstance();
  CMessageServerInfoResponse::default_instance_->InitAsDefaultInstance();
  CMessagePlayerEnterMapNotice::default_instance_->InitAsDefaultInstance();
  CMessagePlayerRedirectMapNotice::default_instance_->InitAsDefaultInstance();
  CMessagePlayerEnterMapResponse::default_instance_->InitAsDefaultInstance();
  CMessagePlayerLoginCompleteNotice::default_instance_->InitAsDefaultInstance();
  CMessagePlayerLeaveMapNotice::default_instance_->InitAsDefaultInstance();
  CMessagePlayerLeaveMapResponse::default_instance_->InitAsDefaultInstance();
  CMessagePlayerReturn2GateNotice::default_instance_->InitAsDefaultInstance();
  CMessagePlayerReturn2GateResponse::default_instance_->InitAsDefaultInstance();
  CMessageCreateMapNotice::default_instance_->InitAsDefaultInstance();
  CMessageCreateMapResponse::default_instance_->InitAsDefaultInstance();
  BattleLevel::default_instance_->InitAsDefaultInstance();
  PBDate::default_instance_->InitAsDefaultInstance();
  PBDateSpace::default_instance_->InitAsDefaultInstance();
  CMessageRegistRepetionInfo::default_instance_->InitAsDefaultInstance();
  CMessageDestroyRepetionMap::default_instance_->InitAsDefaultInstance();
  CMessageG2SRepetionEventCode::default_instance_->InitAsDefaultInstance();
  CMessagePlayerRedirectRequest::default_instance_->InitAsDefaultInstance();
  CMessagePlayerRedirectResponse::default_instance_->InitAsDefaultInstance();
  CMessagePlayerEnterConfirmNotice::default_instance_->InitAsDefaultInstance();
  CMessageSceneNotOpenNotice::default_instance_->InitAsDefaultInstance();
  CMessageUpdateVersionNotice::default_instance_->InitAsDefaultInstance();
  CMessageRegistServerRequest::default_instance_->InitAsDefaultInstance();
  CMessageRegistServerResponse::default_instance_->InitAsDefaultInstance();
  CMessageHeartBeatNotice::default_instance_->InitAsDefaultInstance();
  CMessagePlayerOnLineFriendRequest::default_instance_->InitAsDefaultInstance();
  PBSinglePlayerInfo::default_instance_->InitAsDefaultInstance();
  CMessagePlayerOnLineFriendResponse::default_instance_->InitAsDefaultInstance();
  CMessagePlayerChangeStatusNotice::default_instance_->InitAsDefaultInstance();
  CMessageGameHeartBeatNotice::default_instance_->InitAsDefaultInstance();
  CMessageERatingProtoStream::default_instance_->InitAsDefaultInstance();
  CMessageERatingStateNotice::default_instance_->InitAsDefaultInstance();
  CMessageCreateGateTeamRequest::default_instance_->InitAsDefaultInstance();
  CMessageCreateGateTeamResponse::default_instance_->InitAsDefaultInstance();
  CMessageJoinGateTeamRequest::default_instance_->InitAsDefaultInstance();
  CMessageJoinGateTeamResponse::default_instance_->InitAsDefaultInstance();
  CMessageRequestJoinReply::default_instance_->InitAsDefaultInstance();
  CMessageJoinGateTeamInvite::default_instance_->InitAsDefaultInstance();
  CMessageJoinTeamInviteResponse::default_instance_->InitAsDefaultInstance();
  CMessageInviteJoinReply::default_instance_->InitAsDefaultInstance();
  CMessageInvite2Request::default_instance_->InitAsDefaultInstance();
  CMessageKickoutGateTeamRequest::default_instance_->InitAsDefaultInstance();
  CMessageChangeHeaderRequest::default_instance_->InitAsDefaultInstance();
  CMessageChangeDistributeRequest::default_instance_->InitAsDefaultInstance();
  CMessageChangeDistributeResponse::default_instance_->InitAsDefaultInstance();
  CMessageLeaveGateTeamRequest::default_instance_->InitAsDefaultInstance();
  CMessageEndGateTeamRequest::default_instance_->InitAsDefaultInstance();
  CMessageNotifySceneToUpdateTeam::default_instance_->InitAsDefaultInstance();
  CMessageNotifySceneToSendTeamList::default_instance_->InitAsDefaultInstance();
  CMessageNotifyErrToScene::default_instance_->InitAsDefaultInstance();
  CMessageUpdateTeamPropertyRequest::default_instance_->InitAsDefaultInstance();
  CMessageUpdateTeamPropertyResponse::default_instance_->InitAsDefaultInstance();
  CMessageFollowRequest::default_instance_->InitAsDefaultInstance();
  CMessageFollowResponse::default_instance_->InitAsDefaultInstance();
  CMessageSendClaimRecruitRequest::default_instance_->InitAsDefaultInstance();
  CMessageSendClaimRecruitResponse::default_instance_->InitAsDefaultInstance();
  CMessageQueryClaimRecruitRequest::default_instance_->InitAsDefaultInstance();
  CMessageQueryClaimRecruitResponse::default_instance_->InitAsDefaultInstance();
  CMessageDeleteClaimRecruitRequest::default_instance_->InitAsDefaultInstance();
  CMessageDeleteClaimRecruitResponse::default_instance_->InitAsDefaultInstance();
  CMessageObtainGateTeamRequest::default_instance_->InitAsDefaultInstance();
  CMessageClearInvReqRecordRequest::default_instance_->InitAsDefaultInstance();
  PBMsg::default_instance_->InitAsDefaultInstance();
  PBTeamItem::default_instance_->InitAsDefaultInstance();
  PBTeamInfo::default_instance_->InitAsDefaultInstance();
  CMessageGateShutDownNotice::default_instance_->InitAsDefaultInstance();
  CMessageKickOffPlayerRequest::default_instance_->InitAsDefaultInstance();
  CMessageKickOffPlayerResponse::default_instance_->InitAsDefaultInstance();
  CMessageGetPlayerMailiInfoRequest::default_instance_->InitAsDefaultInstance();
  CMessageGetPlayerMailInfoResponse::default_instance_->InitAsDefaultInstance();
  CMessageChangeMailCountNotify::default_instance_->InitAsDefaultInstance();
  CMessageUserIbExchangeNotice::default_instance_->InitAsDefaultInstance();
  CMessageUserUseIbItemNotice::default_instance_->InitAsDefaultInstance();
  CMessageAddFriendRequest::default_instance_->InitAsDefaultInstance();
  CMessageAddFriendResponse::default_instance_->InitAsDefaultInstance();
  CMessageGetCharIDRequest::default_instance_->InitAsDefaultInstance();
  CMessageGetCharIDResponse::default_instance_->InitAsDefaultInstance();
  CMessageRoleChangeCampNotice::default_instance_->InitAsDefaultInstance();
  CMessageLoginSvrStartUpNotice::default_instance_->InitAsDefaultInstance();
  CMessageGate2LoginHeartBeatNotice::default_instance_->InitAsDefaultInstance();
  PBPersonalRankInfo::default_instance_->InitAsDefaultInstance();
  CMessagePersonalRankInfoNotify::default_instance_->InitAsDefaultInstance();
  PBRankTopTen::default_instance_->InitAsDefaultInstance();
  CMessageRankRemove::default_instance_->InitAsDefaultInstance();
  CMessagePersonalRankInfoRequest::default_instance_->InitAsDefaultInstance();
  CMessageNewRankTopTenNotify::default_instance_->InitAsDefaultInstance();
  CMessageRoleGameInfoReportToGateNotify::default_instance_->InitAsDefaultInstance();
  CMessageBattleTeamWait::default_instance_->InitAsDefaultInstance();
  CMessageBattleWaitLeaveRequest::default_instance_->InitAsDefaultInstance();
  CMessageBattleJoinNotice::default_instance_->InitAsDefaultInstance();
  CMessageBattlePlayerJoin::default_instance_->InitAsDefaultInstance();
  CMessageBattleWaitNotice::default_instance_->InitAsDefaultInstance();
  CMessageServerValidateRequest::default_instance_->InitAsDefaultInstance();
  CMessageBattleWaitLeaveResponse::default_instance_->InitAsDefaultInstance();
  CMessageServerValidateResponse::default_instance_->InitAsDefaultInstance();
  CTracedPlayerInfo::default_instance_->InitAsDefaultInstance();
  CMessageNotifyTracedPlayer::default_instance_->InitAsDefaultInstance();
  CMessageBattleCreateRequest::default_instance_->InitAsDefaultInstance();
  CMessageBattleCreateResponse::default_instance_->InitAsDefaultInstance();
  CMessageFamilyIDNameNotify::default_instance_->InitAsDefaultInstance();
  PBCorpsNpc::default_instance_->InitAsDefaultInstance();
  CMessageNpcListNotify::default_instance_->InitAsDefaultInstance();
  CMessageBidTimeOutNotify::default_instance_->InitAsDefaultInstance();
  CMessageBattleStartRequest::default_instance_->InitAsDefaultInstance();
  CMessageBattleStartResponse::default_instance_->InitAsDefaultInstance();
  CMessageBattleEndNotify::default_instance_->InitAsDefaultInstance();
  CMessageBidRestartNotify::default_instance_->InitAsDefaultInstance();
  CMessageObtainTopTenRequest::default_instance_->InitAsDefaultInstance();
  PBRankTitle::default_instance_->InitAsDefaultInstance();
  CMessageObtainTopTenResponse::default_instance_->InitAsDefaultInstance();
  CMessageCorpsBidTimerStopRequest::default_instance_->InitAsDefaultInstance();
  CMessageCorpsJoinBattleNotice::default_instance_->InitAsDefaultInstance();
  CMessageNotifyBattleResult2Gate::default_instance_->InitAsDefaultInstance();
  CMessageCorpsBattleFlagRequest::default_instance_->InitAsDefaultInstance();
  CMessageCorpsBattleFlagResponse::default_instance_->InitAsDefaultInstance();
  CMessageCreateRepetionNotify::default_instance_->InitAsDefaultInstance();
  CMessageCreateRepetionErr::default_instance_->InitAsDefaultInstance();
  CMessageTeamIntoRepetion::default_instance_->InitAsDefaultInstance();
  CMessageSingleIntoRepetion::default_instance_->InitAsDefaultInstance();
  CMessageCorpsStartBattleRequest::default_instance_->InitAsDefaultInstance();
  CMessageIntoRepetionNotify::default_instance_->InitAsDefaultInstance();
  CMessageChangeFamilyContributeNotify::default_instance_->InitAsDefaultInstance();
  CMessageChangeFamilyGloryNotify::default_instance_->InitAsDefaultInstance();
  CMessageChangeFamilyMoneyNotify::default_instance_->InitAsDefaultInstance();
  CMessageSynIbStoreRequest::default_instance_->InitAsDefaultInstance();
  CMessageSynIbStoreResponse::default_instance_->InitAsDefaultInstance();
  CMessageSynFuncStoreRequest::default_instance_->InitAsDefaultInstance();
  CMessageSynFuncStoreResponse::default_instance_->InitAsDefaultInstance();
  CMessageChangeCorpsContributeNotify::default_instance_->InitAsDefaultInstance();
  CMessageChangeCorpsGloryNotify::default_instance_->InitAsDefaultInstance();
  CMessageChangeCorpsMoneyNotify::default_instance_->InitAsDefaultInstance();
  CMessageChangeCorpsBossTimes::default_instance_->InitAsDefaultInstance();
  CMessageChangeCorpsBossRefineValue::default_instance_->InitAsDefaultInstance();
  CMessageChangeCorpsCollectActive::default_instance_->InitAsDefaultInstance();
  CMessageFamilyApExpChangedNotify::default_instance_->InitAsDefaultInstance();
  CMessageCorpsApExpChangedNotify::default_instance_->InitAsDefaultInstance();
  CMessageChangeJudgeScoreReuqest::default_instance_->InitAsDefaultInstance();
  CMessageChangeWizardRequest::default_instance_->InitAsDefaultInstance();
  CMessageChangeWizardResponse::default_instance_->InitAsDefaultInstance();
  CMessageChangeConstructRequest::default_instance_->InitAsDefaultInstance();
  CMessageChangeConstructResponse::default_instance_->InitAsDefaultInstance();
  CMessageChangePowerRequest::default_instance_->InitAsDefaultInstance();
  CMessageChangePowerResponse::default_instance_->InitAsDefaultInstance();
  CMessageUseFunctionNotify::default_instance_->InitAsDefaultInstance();
  CMessageSetOfficialNotify::default_instance_->InitAsDefaultInstance();
  CMessageChangeFriendNotify::default_instance_->InitAsDefaultInstance();
  CMessageKillPersonRequest::default_instance_->InitAsDefaultInstance();
  CMessageKillPersonResponse::default_instance_->InitAsDefaultInstance();
  CMessageSyncNationNotify::default_instance_->InitAsDefaultInstance();
  CMessageBuyFamilyItemRequest::default_instance_->InitAsDefaultInstance();
  CMessageBuyFamilyItemResponse::default_instance_->InitAsDefaultInstance();
  CMessageBuyCorpsItemRequest::default_instance_->InitAsDefaultInstance();
  CMessageBuyCorpsItemResponse::default_instance_->InitAsDefaultInstance();
  CMessageClearFamilyRepetionInfoNotify::default_instance_->InitAsDefaultInstance();
  CMessageJudgeModifySuccessNotice::default_instance_->InitAsDefaultInstance();
  CMessage4EQueryYuanBaoRequest::default_instance_->InitAsDefaultInstance();
  CMessage4EQueryYuanBaoResponse::default_instance_->InitAsDefaultInstance();
  CMessage4EDrawYuanBaoRequest::default_instance_->InitAsDefaultInstance();
  CMessage4EDrawYuanBaoResponse::default_instance_->InitAsDefaultInstance();
  CMessageFamilyExchangeRequest::default_instance_->InitAsDefaultInstance();
  CMessageFamilyExchangeResponse::default_instance_->InitAsDefaultInstance();
  CMessageCorpsExchangeRequest::default_instance_->InitAsDefaultInstance();
  CMessageCorpsExchangeResponse::default_instance_->InitAsDefaultInstance();
  CMessageAddFamilyExchangeItemNotify::default_instance_->InitAsDefaultInstance();
  CMessageAddCorpsExchangeItemNotify::default_instance_->InitAsDefaultInstance();
  CMessageGateEntityGMMove::default_instance_->InitAsDefaultInstance();
  CMessageSceneEntityGMMove::default_instance_->InitAsDefaultInstance();
  SingleActivityObj::default_instance_->InitAsDefaultInstance();
  DropInfo::default_instance_->InitAsDefaultInstance();
  MapDrop::default_instance_->InitAsDefaultInstance();
  SingleActivityInfo::default_instance_->InitAsDefaultInstance();
  CMessageTodayActivitysNotify::default_instance_->InitAsDefaultInstance();
  SingleActivity::default_instance_->InitAsDefaultInstance();
  CMessageActivityChangeNotify::default_instance_->InitAsDefaultInstance();
  CMessageChangePasswordStatusNotify::default_instance_->InitAsDefaultInstance();
  CMessageUpdateNationTitleNotice::default_instance_->InitAsDefaultInstance();
  CMessageGetNationTitleListRequest::default_instance_->InitAsDefaultInstance();
  CMessageGetNationTitleListResponse::default_instance_->InitAsDefaultInstance();
  CMessageSGProVipFlagNotice::default_instance_->InitAsDefaultInstance();
  CMessageResetRolePasswordNotify::default_instance_->InitAsDefaultInstance();
  CMessgeSafeShutdownNotify::default_instance_->InitAsDefaultInstance();
  CMessgeSafeShutdownAck::default_instance_->InitAsDefaultInstance();
  CMessageRollCorpsMoneyRequest::default_instance_->InitAsDefaultInstance();
  CMessageCorpsBattleMapNotice::default_instance_->InitAsDefaultInstance();
  CMessageTrySummonRequest::default_instance_->InitAsDefaultInstance();
  CMessageTrySummonResponse::default_instance_->InitAsDefaultInstance();
  CMessageRealSummonRequest::default_instance_->InitAsDefaultInstance();
  CMessageRealSummonNotify::default_instance_->InitAsDefaultInstance();
  CMessageLockGoodsRequest::default_instance_->InitAsDefaultInstance();
  CMessageLockGoodsResponse::default_instance_->InitAsDefaultInstance();
  CMessageS2GRoleMove::default_instance_->InitAsDefaultInstance();
  CMessageG2SRoleMove::default_instance_->InitAsDefaultInstance();
  CMessageWarChangeNotify::default_instance_->InitAsDefaultInstance();
  CMessageReliveChangeNotify::default_instance_->InitAsDefaultInstance();
  WarHonorData::default_instance_->InitAsDefaultInstance();
  CMessageObtainWarHonorNotify::default_instance_->InitAsDefaultInstance();
  CMessageBourseG2SLoadList::default_instance_->InitAsDefaultInstance();
  CMessageBourseS2GLoadList::default_instance_->InitAsDefaultInstance();
  CMessageSyncWarStatusNotify::default_instance_->InitAsDefaultInstance();
  CMessageWarControlNotify::default_instance_->InitAsDefaultInstance();
  CMessageBourseTradeNotice::default_instance_->InitAsDefaultInstance();
  CMessageReSavePlayerRequest::default_instance_->InitAsDefaultInstance();
  CMessageReSavePlayerResponse::default_instance_->InitAsDefaultInstance();
  CMessageBoursePlayerTradeBuyNotice::default_instance_->InitAsDefaultInstance();
  CMessageBoursePlayerTradeSellNotice::default_instance_->InitAsDefaultInstance();
  CMessageWarStoneOverNotify::default_instance_->InitAsDefaultInstance();
  CMessageCreateWarStoneNotify::default_instance_->InitAsDefaultInstance();
  CMessageAddTaxNotify::default_instance_->InitAsDefaultInstance();
  CMessageSendSysMailToPlayer::default_instance_->InitAsDefaultInstance();
  CMessageCampAddHonerScore::default_instance_->InitAsDefaultInstance();
  CMessageBattleTeamFixWait::default_instance_->InitAsDefaultInstance();
  CMessageActivityEventNotify::default_instance_->InitAsDefaultInstance();
  CMessageAddMasterPointRequest::default_instance_->InitAsDefaultInstance();
  CMessageAddMasterPointNotify::default_instance_->InitAsDefaultInstance();
  CMessageBattleSingleFixWait::default_instance_->InitAsDefaultInstance();
  CMessageSpecialEventNotify::default_instance_->InitAsDefaultInstance();
  CMessageAcquireMasterNotify::default_instance_->InitAsDefaultInstance();
  CMessageBattleWinnerNotify::default_instance_->InitAsDefaultInstance();
  CMessageChangeFamilyStabilityNotify::default_instance_->InitAsDefaultInstance();
  CMessageS2GJoinOnTimeOpenBattleRequest::default_instance_->InitAsDefaultInstance();
  CMessageSyncGTAndLWNotify::default_instance_->InitAsDefaultInstance();
  CMessageS2GBattleClose::default_instance_->InitAsDefaultInstance();
  CMessageS2GIntoCorpsBossRepetion::default_instance_->InitAsDefaultInstance();
  CMessgeS2GEndCorpsBossRepetion::default_instance_->InitAsDefaultInstance();
  PBGroupTasks::default_instance_->InitAsDefaultInstance();
  CMessageGateCheckGroupPublishRequest::default_instance_->InitAsDefaultInstance();
  CMessageGatePublishGroupRequest::default_instance_->InitAsDefaultInstance();
  PBGroupInfo::default_instance_->InitAsDefaultInstance();
  CMessageGateCheckGroupPublishResponse::default_instance_->InitAsDefaultInstance();
  CMessageGatePublishGroupResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_servermessage_5fpb_2ehxx);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_servermessage_5fpb_2ehxx {
  StaticDescriptorInitializer_servermessage_5fpb_2ehxx() {
    protobuf_AddDesc_servermessage_5fpb_2ehxx();
  }
} static_descriptor_initializer_servermessage_5fpb_2ehxx_;

const ::google::protobuf::EnumDescriptor* EMServerMessageID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMServerMessageID_descriptor_;
}
bool EMServerMessageID_IsValid(int value) {
  switch(value) {
    case 32768:
    case 32769:
    case 32770:
    case 32774:
    case 32775:
    case 32783:
    case 32784:
    case 32788:
    case 32789:
    case 32790:
    case 32791:
    case 32792:
    case 32793:
    case 32800:
    case 32801:
    case 32802:
    case 32816:
    case 32817:
    case 32818:
    case 32819:
    case 32820:
    case 32821:
    case 32832:
    case 33795:
    case 33796:
    case 33797:
    case 33800:
    case 33801:
    case 33802:
    case 33803:
    case 33804:
    case 33805:
    case 33806:
    case 33809:
    case 33810:
    case 33811:
    case 33827:
    case 33828:
    case 33830:
    case 33831:
    case 33832:
    case 33833:
    case 33845:
    case 33846:
    case 33847:
    case 33849:
    case 33857:
    case 33858:
    case 33859:
    case 33860:
    case 33861:
    case 33862:
    case 33863:
    case 33864:
    case 33865:
    case 33866:
    case 36865:
    case 36866:
    case 36867:
    case 36868:
    case 38913:
    case 38914:
    case 38915:
    case 38916:
    case 38917:
    case 38918:
    case 38919:
    case 38920:
    case 38921:
    case 38922:
    case 39937:
    case 39938:
    case 39939:
    case 39940:
    case 39941:
    case 39942:
    case 39943:
    case 39944:
    case 39945:
    case 39946:
    case 39947:
    case 39948:
    case 39949:
    case 39950:
    case 39951:
    case 39952:
    case 39953:
    case 39954:
    case 39955:
    case 39956:
    case 39957:
    case 39958:
    case 39959:
    case 39960:
    case 39961:
    case 39962:
    case 39963:
    case 39964:
    case 39965:
    case 39966:
    case 40961:
    case 40962:
    case 40963:
    case 44033:
    case 44034:
    case 44035:
    case 44036:
    case 44037:
    case 44038:
    case 44039:
    case 44040:
    case 44041:
    case 44042:
    case 44043:
    case 44044:
    case 44045:
    case 44046:
    case 44047:
    case 44048:
    case 44049:
    case 44050:
    case 44051:
    case 44052:
    case 44053:
    case 44054:
    case 45057:
    case 45058:
    case 45059:
    case 45060:
    case 45061:
    case 45062:
    case 45063:
    case 45064:
    case 45065:
    case 46081:
    case 46082:
    case 46083:
    case 46084:
    case 46085:
    case 46086:
    case 46087:
    case 46088:
    case 46089:
    case 46090:
    case 46091:
    case 46092:
    case 46093:
    case 46094:
    case 46095:
    case 46096:
    case 46097:
    case 46098:
    case 46099:
    case 46100:
    case 47105:
    case 47106:
    case 47107:
    case 47108:
    case 47109:
    case 47110:
    case 47111:
    case 47112:
    case 47113:
    case 47114:
    case 47115:
    case 47116:
    case 47117:
    case 47118:
    case 47119:
    case 47120:
    case 47121:
    case 47122:
    case 47123:
    case 47124:
    case 48129:
    case 48130:
    case 48131:
    case 48132:
    case 48133:
    case 48134:
    case 51201:
    case 51202:
    case 51203:
    case 51204:
    case 51205:
    case 51206:
    case 51207:
    case 51208:
    case 51209:
    case 51210:
    case 51211:
    case 51212:
    case 51213:
    case 51214:
    case 51215:
    case 51216:
    case 51217:
    case 51218:
    case 51219:
    case 51220:
    case 52225:
    case 52226:
    case 54273:
    case 54274:
    case 54275:
    case 54276:
    case 54277:
    case 54278:
    case 54279:
    case 54280:
    case 54281:
    case 54282:
    case 54283:
    case 54284:
    case 54285:
    case 54286:
    case 54287:
    case 54288:
    case 54289:
    case 54290:
    case 54291:
    case 54292:
    case 54293:
    case 54294:
    case 54295:
    case 54296:
    case 54297:
    case 54298:
    case 54299:
    case 54300:
    case 54301:
    case 54302:
    case 54303:
    case 54304:
    case 55297:
    case 55298:
    case 55299:
    case 55300:
    case 55301:
    case 55302:
    case 55303:
    case 55304:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMFriendAddRetCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMFriendAddRetCode_descriptor_;
}
bool EMFriendAddRetCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMSaveResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMSaveResult_descriptor_;
}
bool EMSaveResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMLeaveReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMLeaveReason_descriptor_;
}
bool EMLeaveReason_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMGateInfoResponse_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMGateInfoResponse_descriptor_;
}
bool EMGateInfoResponse_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CMessageYQSActivtyStartNotice::kIdFieldNumber;
const int CMessageYQSActivtyStartNotice::kCampidFieldNumber;
const int CMessageYQSActivtyStartNotice::kCamprankidFieldNumber;
const int CMessageYQSActivtyStartNotice::kGrowingFieldNumber;
const int CMessageYQSActivtyStartNotice::kLevelFieldNumber;
const int CMessageYQSActivtyStartNotice::kHandindawnumFieldNumber;
const int CMessageYQSActivtyStartNotice::kSettlephaseFieldNumber;
#endif  // !_MSC_VER

CMessageYQSActivtyStartNotice::CMessageYQSActivtyStartNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageYQSActivtyStartNotice::InitAsDefaultInstance() {}

CMessageYQSActivtyStartNotice::CMessageYQSActivtyStartNotice(const CMessageYQSActivtyStartNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageYQSActivtyStartNotice::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  campid_ = 0u;
  camprankid_ = 0u;
  growing_ = 0u;
  level_ = 0u;
  handindawnum_ = 0u;
  settlephase_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageYQSActivtyStartNotice::~CMessageYQSActivtyStartNotice() {
  SharedDtor();
}

void CMessageYQSActivtyStartNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageYQSActivtyStartNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageYQSActivtyStartNotice_descriptor_;
}

const CMessageYQSActivtyStartNotice& CMessageYQSActivtyStartNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageYQSActivtyStartNotice* CMessageYQSActivtyStartNotice::default_instance_ = NULL;

CMessageYQSActivtyStartNotice* CMessageYQSActivtyStartNotice::New() const {
  return new CMessageYQSActivtyStartNotice;
}

void CMessageYQSActivtyStartNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    campid_ = 0u;
    camprankid_ = 0u;
    growing_ = 0u;
    level_ = 0u;
    handindawnum_ = 0u;
    settlephase_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageYQSActivtyStartNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_campid;
        break;
      }
      
      // optional uint32 campid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_campid:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &campid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_camprankid;
        break;
      }
      
      // optional uint32 camprankid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_camprankid:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &camprankid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_growing;
        break;
      }
      
      // optional uint32 growing = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_growing:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &growing_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_handindawnum;
        break;
      }
      
      // optional uint32 handindawnum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_handindawnum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &handindawnum_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_settlephase;
        break;
      }
      
      // optional uint32 settlephase = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_settlephase:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &settlephase_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageYQSActivtyStartNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageYQSActivtyStartNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->id(), output);
  }
  
  // optional uint32 campid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->campid(), output);
  }
  
  // optional uint32 camprankid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->camprankid(), output);
  }
  
  // optional uint32 growing = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->growing(), output);
  }
  
  // optional uint32 level = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->level(), output);
  }
  
  // optional uint32 handindawnum = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->handindawnum(), output);
  }
  
  // optional uint32 settlephase = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->settlephase(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageYQSActivtyStartNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional uint32 campid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->campid(), target);
  }
  
  // optional uint32 camprankid = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->camprankid(), target);
  }
  
  // optional uint32 growing = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->growing(), target);
  }
  
  // optional uint32 level = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->level(), target);
  }
  
  // optional uint32 handindawnum = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->handindawnum(), target);
  }
  
  // optional uint32 settlephase = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->settlephase(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageYQSActivtyStartNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->id());
    }
    
    // optional uint32 campid = 2;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->campid());
    }
    
    // optional uint32 camprankid = 3;
    if (has_camprankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->camprankid());
    }
    
    // optional uint32 growing = 4;
    if (has_growing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->growing());
    }
    
    // optional uint32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
    // optional uint32 handindawnum = 6;
    if (has_handindawnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->handindawnum());
    }
    
    // optional uint32 settlephase = 7;
    if (has_settlephase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->settlephase());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageYQSActivtyStartNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageYQSActivtyStartNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageYQSActivtyStartNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageYQSActivtyStartNotice::MergeFrom(const CMessageYQSActivtyStartNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_campid(from.campid());
    }
    if (from._has_bit(2)) {
      set_camprankid(from.camprankid());
    }
    if (from._has_bit(3)) {
      set_growing(from.growing());
    }
    if (from._has_bit(4)) {
      set_level(from.level());
    }
    if (from._has_bit(5)) {
      set_handindawnum(from.handindawnum());
    }
    if (from._has_bit(6)) {
      set_settlephase(from.settlephase());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageYQSActivtyStartNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageYQSActivtyStartNotice::CopyFrom(const CMessageYQSActivtyStartNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageYQSActivtyStartNotice::Swap(CMessageYQSActivtyStartNotice* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(campid_, other->campid_);
    std::swap(camprankid_, other->camprankid_);
    std::swap(growing_, other->growing_);
    std::swap(level_, other->level_);
    std::swap(handindawnum_, other->handindawnum_);
    std::swap(settlephase_, other->settlephase_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageYQSActivtyStartNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageYQSActivtyStartNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageYQSActivtyStartNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageYQSActivtyStartNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageS2GGetCampRankForYQSRequest::kPlayerIdFieldNumber;
const int CMessageS2GGetCampRankForYQSRequest::kParam1FieldNumber;
#endif  // !_MSC_VER

CMessageS2GGetCampRankForYQSRequest::CMessageS2GGetCampRankForYQSRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageS2GGetCampRankForYQSRequest::InitAsDefaultInstance() {}

CMessageS2GGetCampRankForYQSRequest::CMessageS2GGetCampRankForYQSRequest(const CMessageS2GGetCampRankForYQSRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageS2GGetCampRankForYQSRequest::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  param1_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageS2GGetCampRankForYQSRequest::~CMessageS2GGetCampRankForYQSRequest() {
  SharedDtor();
}

void CMessageS2GGetCampRankForYQSRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageS2GGetCampRankForYQSRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageS2GGetCampRankForYQSRequest_descriptor_;
}

const CMessageS2GGetCampRankForYQSRequest& CMessageS2GGetCampRankForYQSRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageS2GGetCampRankForYQSRequest* CMessageS2GGetCampRankForYQSRequest::default_instance_ = NULL;

CMessageS2GGetCampRankForYQSRequest* CMessageS2GGetCampRankForYQSRequest::New() const {
  return new CMessageS2GGetCampRankForYQSRequest;
}

void CMessageS2GGetCampRankForYQSRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    param1_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageS2GGetCampRankForYQSRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playerid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_param1;
        break;
      }
      
      // optional uint32 param1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_param1:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &param1_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageS2GGetCampRankForYQSRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageS2GGetCampRankForYQSRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 playerId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional uint32 param1 = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->param1(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageS2GGetCampRankForYQSRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional uint32 param1 = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->param1(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageS2GGetCampRankForYQSRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 param1 = 2;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->param1());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageS2GGetCampRankForYQSRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageS2GGetCampRankForYQSRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageS2GGetCampRankForYQSRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageS2GGetCampRankForYQSRequest::MergeFrom(const CMessageS2GGetCampRankForYQSRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_playerid(from.playerid());
    }
    if (from._has_bit(1)) {
      set_param1(from.param1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageS2GGetCampRankForYQSRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageS2GGetCampRankForYQSRequest::CopyFrom(const CMessageS2GGetCampRankForYQSRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageS2GGetCampRankForYQSRequest::Swap(CMessageS2GGetCampRankForYQSRequest* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(param1_, other->param1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageS2GGetCampRankForYQSRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageS2GGetCampRankForYQSRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageS2GGetCampRankForYQSRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageS2GGetCampRankForYQSRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CampRankForYQSForSever::kRankFieldNumber;
const int CampRankForYQSForSever::kCampidFieldNumber;
const int CampRankForYQSForSever::kGrowinggradeFieldNumber;
const int CampRankForYQSForSever::kGrowingphaseFieldNumber;
#endif  // !_MSC_VER

CampRankForYQSForSever::CampRankForYQSForSever()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CampRankForYQSForSever::InitAsDefaultInstance() {}

CampRankForYQSForSever::CampRankForYQSForSever(const CampRankForYQSForSever& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CampRankForYQSForSever::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0u;
  campid_ = 0u;
  growinggrade_ = 0u;
  growingphase_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CampRankForYQSForSever::~CampRankForYQSForSever() {
  SharedDtor();
}

void CampRankForYQSForSever::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CampRankForYQSForSever::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CampRankForYQSForSever_descriptor_;
}

const CampRankForYQSForSever& CampRankForYQSForSever::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CampRankForYQSForSever* CampRankForYQSForSever::default_instance_ = NULL;

CampRankForYQSForSever* CampRankForYQSForSever::New() const {
  return new CampRankForYQSForSever;
}

void CampRankForYQSForSever::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0u;
    campid_ = 0u;
    growinggrade_ = 0u;
    growingphase_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CampRankForYQSForSever::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rank_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_campid;
        break;
      }
      
      // optional uint32 campid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_campid:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &campid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_growinggrade;
        break;
      }
      
      // optional uint32 growinggrade = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_growinggrade:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &growinggrade_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_growingphase;
        break;
      }
      
      // optional uint32 growingphase = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_growingphase:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &growingphase_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CampRankForYQSForSever::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CampRankForYQSForSever::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 rank = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->rank(), output);
  }
  
  // optional uint32 campid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->campid(), output);
  }
  
  // optional uint32 growinggrade = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->growinggrade(), output);
  }
  
  // optional uint32 growingphase = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->growingphase(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CampRankForYQSForSever::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rank = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->rank(), target);
  }
  
  // optional uint32 campid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->campid(), target);
  }
  
  // optional uint32 growinggrade = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->growinggrade(), target);
  }
  
  // optional uint32 growingphase = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->growingphase(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CampRankForYQSForSever::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rank());
    }
    
    // optional uint32 campid = 2;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->campid());
    }
    
    // optional uint32 growinggrade = 3;
    if (has_growinggrade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->growinggrade());
    }
    
    // optional uint32 growingphase = 4;
    if (has_growingphase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->growingphase());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CampRankForYQSForSever::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CampRankForYQSForSever* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CampRankForYQSForSever*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CampRankForYQSForSever::MergeFrom(const CampRankForYQSForSever& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_rank(from.rank());
    }
    if (from._has_bit(1)) {
      set_campid(from.campid());
    }
    if (from._has_bit(2)) {
      set_growinggrade(from.growinggrade());
    }
    if (from._has_bit(3)) {
      set_growingphase(from.growingphase());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CampRankForYQSForSever::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CampRankForYQSForSever::CopyFrom(const CampRankForYQSForSever& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CampRankForYQSForSever::Swap(CampRankForYQSForSever* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(campid_, other->campid_);
    std::swap(growinggrade_, other->growinggrade_);
    std::swap(growingphase_, other->growingphase_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CampRankForYQSForSever::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CampRankForYQSForSever::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CampRankForYQSForSever::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CampRankForYQSForSever_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageG2SGetCampRankForYQSResponse::kResultFieldNumber;
const int CMessageG2SGetCampRankForYQSResponse::kPlayerIdFieldNumber;
const int CMessageG2SGetCampRankForYQSResponse::kParam1FieldNumber;
const int CMessageG2SGetCampRankForYQSResponse::kCamprankinfoFieldNumber;
#endif  // !_MSC_VER

CMessageG2SGetCampRankForYQSResponse::CMessageG2SGetCampRankForYQSResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageG2SGetCampRankForYQSResponse::InitAsDefaultInstance() {}

CMessageG2SGetCampRankForYQSResponse::CMessageG2SGetCampRankForYQSResponse(const CMessageG2SGetCampRankForYQSResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageG2SGetCampRankForYQSResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  playerid_ = 0u;
  param1_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageG2SGetCampRankForYQSResponse::~CMessageG2SGetCampRankForYQSResponse() {
  SharedDtor();
}

void CMessageG2SGetCampRankForYQSResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageG2SGetCampRankForYQSResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageG2SGetCampRankForYQSResponse_descriptor_;
}

const CMessageG2SGetCampRankForYQSResponse& CMessageG2SGetCampRankForYQSResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageG2SGetCampRankForYQSResponse* CMessageG2SGetCampRankForYQSResponse::default_instance_ = NULL;

CMessageG2SGetCampRankForYQSResponse* CMessageG2SGetCampRankForYQSResponse::New() const {
  return new CMessageG2SGetCampRankForYQSResponse;
}

void CMessageG2SGetCampRankForYQSResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    playerid_ = 0u;
    param1_ = 0u;
  }
  camprankinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageG2SGetCampRankForYQSResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }
      
      // optional uint32 playerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_playerId:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playerid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_param1;
        break;
      }
      
      // optional uint32 param1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_param1:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &param1_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_camprankinfo;
        break;
      }
      
      // repeated .CampRankForYQSForSever camprankinfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_camprankinfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_camprankinfo()));
        if (input->ExpectTag(34)) goto parse_camprankinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageG2SGetCampRankForYQSResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageG2SGetCampRankForYQSResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // optional uint32 playerId = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->playerid(), output);
  }
  
  // optional uint32 param1 = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->param1(), output);
  }
  
  // repeated .CampRankForYQSForSever camprankinfo = 4;
  for (int i = 0; i < this->camprankinfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->camprankinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageG2SGetCampRankForYQSResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // optional uint32 playerId = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->playerid(), target);
  }
  
  // optional uint32 param1 = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->param1(), target);
  }
  
  // repeated .CampRankForYQSForSever camprankinfo = 4;
  for (int i = 0; i < this->camprankinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(4, this->camprankinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageG2SGetCampRankForYQSResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 playerId = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 param1 = 3;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->param1());
    }
    
  }
  // repeated .CampRankForYQSForSever camprankinfo = 4;
  total_size += 1 * this->camprankinfo_size();
  for (int i = 0; i < this->camprankinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->camprankinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageG2SGetCampRankForYQSResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageG2SGetCampRankForYQSResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageG2SGetCampRankForYQSResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageG2SGetCampRankForYQSResponse::MergeFrom(const CMessageG2SGetCampRankForYQSResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  camprankinfo_.MergeFrom(from.camprankinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_playerid(from.playerid());
    }
    if (from._has_bit(2)) {
      set_param1(from.param1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageG2SGetCampRankForYQSResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageG2SGetCampRankForYQSResponse::CopyFrom(const CMessageG2SGetCampRankForYQSResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageG2SGetCampRankForYQSResponse::Swap(CMessageG2SGetCampRankForYQSResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(playerid_, other->playerid_);
    std::swap(param1_, other->param1_);
    camprankinfo_.Swap(&other->camprankinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageG2SGetCampRankForYQSResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageG2SGetCampRankForYQSResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageG2SGetCampRankForYQSResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageG2SGetCampRankForYQSResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageS2GUpdateYQSGrowingRequest::kPlayeridFieldNumber;
const int CMessageS2GUpdateYQSGrowingRequest::kCampidFieldNumber;
const int CMessageS2GUpdateYQSGrowingRequest::kGrowingchangevalueFieldNumber;
#endif  // !_MSC_VER

CMessageS2GUpdateYQSGrowingRequest::CMessageS2GUpdateYQSGrowingRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageS2GUpdateYQSGrowingRequest::InitAsDefaultInstance() {}

CMessageS2GUpdateYQSGrowingRequest::CMessageS2GUpdateYQSGrowingRequest(const CMessageS2GUpdateYQSGrowingRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageS2GUpdateYQSGrowingRequest::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  campid_ = 0u;
  growingchangevalue_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageS2GUpdateYQSGrowingRequest::~CMessageS2GUpdateYQSGrowingRequest() {
  SharedDtor();
}

void CMessageS2GUpdateYQSGrowingRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageS2GUpdateYQSGrowingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageS2GUpdateYQSGrowingRequest_descriptor_;
}

const CMessageS2GUpdateYQSGrowingRequest& CMessageS2GUpdateYQSGrowingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageS2GUpdateYQSGrowingRequest* CMessageS2GUpdateYQSGrowingRequest::default_instance_ = NULL;

CMessageS2GUpdateYQSGrowingRequest* CMessageS2GUpdateYQSGrowingRequest::New() const {
  return new CMessageS2GUpdateYQSGrowingRequest;
}

void CMessageS2GUpdateYQSGrowingRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    campid_ = 0u;
    growingchangevalue_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageS2GUpdateYQSGrowingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playerid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_campid;
        break;
      }
      
      // optional uint32 campid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_campid:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &campid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_growingchangevalue;
        break;
      }
      
      // optional uint32 growingchangevalue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_growingchangevalue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &growingchangevalue_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageS2GUpdateYQSGrowingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageS2GUpdateYQSGrowingRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 playerid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional uint32 campid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->campid(), output);
  }
  
  // optional uint32 growingchangevalue = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->growingchangevalue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageS2GUpdateYQSGrowingRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional uint32 campid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->campid(), target);
  }
  
  // optional uint32 growingchangevalue = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->growingchangevalue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageS2GUpdateYQSGrowingRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 campid = 2;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->campid());
    }
    
    // optional uint32 growingchangevalue = 3;
    if (has_growingchangevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->growingchangevalue());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageS2GUpdateYQSGrowingRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageS2GUpdateYQSGrowingRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageS2GUpdateYQSGrowingRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageS2GUpdateYQSGrowingRequest::MergeFrom(const CMessageS2GUpdateYQSGrowingRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_playerid(from.playerid());
    }
    if (from._has_bit(1)) {
      set_campid(from.campid());
    }
    if (from._has_bit(2)) {
      set_growingchangevalue(from.growingchangevalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageS2GUpdateYQSGrowingRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageS2GUpdateYQSGrowingRequest::CopyFrom(const CMessageS2GUpdateYQSGrowingRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageS2GUpdateYQSGrowingRequest::Swap(CMessageS2GUpdateYQSGrowingRequest* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(campid_, other->campid_);
    std::swap(growingchangevalue_, other->growingchangevalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageS2GUpdateYQSGrowingRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageS2GUpdateYQSGrowingRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageS2GUpdateYQSGrowingRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageS2GUpdateYQSGrowingRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageG2SUpdateYQSGrowingResponse::kResultFieldNumber;
const int CMessageG2SUpdateYQSGrowingResponse::kPlayeridFieldNumber;
const int CMessageG2SUpdateYQSGrowingResponse::kIdFieldNumber;
const int CMessageG2SUpdateYQSGrowingResponse::kCampidFieldNumber;
const int CMessageG2SUpdateYQSGrowingResponse::kCamprankidFieldNumber;
const int CMessageG2SUpdateYQSGrowingResponse::kGrowingFieldNumber;
const int CMessageG2SUpdateYQSGrowingResponse::kLevelFieldNumber;
const int CMessageG2SUpdateYQSGrowingResponse::kHandindawnumFieldNumber;
const int CMessageG2SUpdateYQSGrowingResponse::kSettlephaseFieldNumber;
const int CMessageG2SUpdateYQSGrowingResponse::kDeltagrowingFieldNumber;
#endif  // !_MSC_VER

CMessageG2SUpdateYQSGrowingResponse::CMessageG2SUpdateYQSGrowingResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageG2SUpdateYQSGrowingResponse::InitAsDefaultInstance() {}

CMessageG2SUpdateYQSGrowingResponse::CMessageG2SUpdateYQSGrowingResponse(const CMessageG2SUpdateYQSGrowingResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageG2SUpdateYQSGrowingResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  playerid_ = 0u;
  id_ = 0u;
  campid_ = 0u;
  camprankid_ = 0u;
  growing_ = 0u;
  level_ = 0u;
  handindawnum_ = 0u;
  settlephase_ = 0u;
  deltagrowing_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageG2SUpdateYQSGrowingResponse::~CMessageG2SUpdateYQSGrowingResponse() {
  SharedDtor();
}

void CMessageG2SUpdateYQSGrowingResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageG2SUpdateYQSGrowingResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageG2SUpdateYQSGrowingResponse_descriptor_;
}

const CMessageG2SUpdateYQSGrowingResponse& CMessageG2SUpdateYQSGrowingResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageG2SUpdateYQSGrowingResponse* CMessageG2SUpdateYQSGrowingResponse::default_instance_ = NULL;

CMessageG2SUpdateYQSGrowingResponse* CMessageG2SUpdateYQSGrowingResponse::New() const {
  return new CMessageG2SUpdateYQSGrowingResponse;
}

void CMessageG2SUpdateYQSGrowingResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    playerid_ = 0u;
    id_ = 0u;
    campid_ = 0u;
    camprankid_ = 0u;
    growing_ = 0u;
    level_ = 0u;
    handindawnum_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    settlephase_ = 0u;
    deltagrowing_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageG2SUpdateYQSGrowingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }
      
      // optional uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_playerid:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playerid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }
      
      // optional uint32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &id_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_campid;
        break;
      }
      
      // optional uint32 campid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_campid:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &campid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_camprankid;
        break;
      }
      
      // optional uint32 camprankid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_camprankid:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &camprankid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_growing;
        break;
      }
      
      // optional uint32 growing = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_growing:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &growing_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_handindawnum;
        break;
      }
      
      // optional uint32 handindawnum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_handindawnum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &handindawnum_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_settlephase;
        break;
      }
      
      // optional uint32 settlephase = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_settlephase:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &settlephase_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_deltagrowing;
        break;
      }
      
      // optional uint32 deltagrowing = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_deltagrowing:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deltagrowing_));
        _set_bit(9);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageG2SUpdateYQSGrowingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageG2SUpdateYQSGrowingResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // optional uint32 playerid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->playerid(), output);
  }
  
  // optional uint32 id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->id(), output);
  }
  
  // optional uint32 campid = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->campid(), output);
  }
  
  // optional uint32 camprankid = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->camprankid(), output);
  }
  
  // optional uint32 growing = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->growing(), output);
  }
  
  // optional uint32 level = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->level(), output);
  }
  
  // optional uint32 handindawnum = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->handindawnum(), output);
  }
  
  // optional uint32 settlephase = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->settlephase(), output);
  }
  
  // optional uint32 deltagrowing = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->deltagrowing(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageG2SUpdateYQSGrowingResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // optional uint32 playerid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->playerid(), target);
  }
  
  // optional uint32 id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->id(), target);
  }
  
  // optional uint32 campid = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->campid(), target);
  }
  
  // optional uint32 camprankid = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->camprankid(), target);
  }
  
  // optional uint32 growing = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->growing(), target);
  }
  
  // optional uint32 level = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->level(), target);
  }
  
  // optional uint32 handindawnum = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->handindawnum(), target);
  }
  
  // optional uint32 settlephase = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->settlephase(), target);
  }
  
  // optional uint32 deltagrowing = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->deltagrowing(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageG2SUpdateYQSGrowingResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->id());
    }
    
    // optional uint32 campid = 4;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->campid());
    }
    
    // optional uint32 camprankid = 5;
    if (has_camprankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->camprankid());
    }
    
    // optional uint32 growing = 6;
    if (has_growing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->growing());
    }
    
    // optional uint32 level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
    // optional uint32 handindawnum = 8;
    if (has_handindawnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->handindawnum());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 settlephase = 9;
    if (has_settlephase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->settlephase());
    }
    
    // optional uint32 deltagrowing = 10;
    if (has_deltagrowing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deltagrowing());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageG2SUpdateYQSGrowingResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageG2SUpdateYQSGrowingResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageG2SUpdateYQSGrowingResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageG2SUpdateYQSGrowingResponse::MergeFrom(const CMessageG2SUpdateYQSGrowingResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_playerid(from.playerid());
    }
    if (from._has_bit(2)) {
      set_id(from.id());
    }
    if (from._has_bit(3)) {
      set_campid(from.campid());
    }
    if (from._has_bit(4)) {
      set_camprankid(from.camprankid());
    }
    if (from._has_bit(5)) {
      set_growing(from.growing());
    }
    if (from._has_bit(6)) {
      set_level(from.level());
    }
    if (from._has_bit(7)) {
      set_handindawnum(from.handindawnum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_settlephase(from.settlephase());
    }
    if (from._has_bit(9)) {
      set_deltagrowing(from.deltagrowing());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageG2SUpdateYQSGrowingResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageG2SUpdateYQSGrowingResponse::CopyFrom(const CMessageG2SUpdateYQSGrowingResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageG2SUpdateYQSGrowingResponse::Swap(CMessageG2SUpdateYQSGrowingResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(playerid_, other->playerid_);
    std::swap(id_, other->id_);
    std::swap(campid_, other->campid_);
    std::swap(camprankid_, other->camprankid_);
    std::swap(growing_, other->growing_);
    std::swap(level_, other->level_);
    std::swap(handindawnum_, other->handindawnum_);
    std::swap(settlephase_, other->settlephase_);
    std::swap(deltagrowing_, other->deltagrowing_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageG2SUpdateYQSGrowingResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageG2SUpdateYQSGrowingResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageG2SUpdateYQSGrowingResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageG2SUpdateYQSGrowingResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageG2SSettleNotice::kIdFieldNumber;
const int CMessageG2SSettleNotice::kCampidFieldNumber;
const int CMessageG2SSettleNotice::kCamprankidFieldNumber;
const int CMessageG2SSettleNotice::kGrowingFieldNumber;
const int CMessageG2SSettleNotice::kLevelFieldNumber;
const int CMessageG2SSettleNotice::kHandindawnumFieldNumber;
const int CMessageG2SSettleNotice::kSettlephaseFieldNumber;
const int CMessageG2SSettleNotice::kSettlefinishFieldNumber;
const int CMessageG2SSettleNotice::kNoticeidFieldNumber;
const int CMessageG2SSettleNotice::kNoticeparam1FieldNumber;
const int CMessageG2SSettleNotice::kNoticeparam2FieldNumber;
const int CMessageG2SSettleNotice::kNoticeparam3FieldNumber;
const int CMessageG2SSettleNotice::kEncourageFieldNumber;
#endif  // !_MSC_VER

CMessageG2SSettleNotice::CMessageG2SSettleNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageG2SSettleNotice::InitAsDefaultInstance() {}

CMessageG2SSettleNotice::CMessageG2SSettleNotice(const CMessageG2SSettleNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageG2SSettleNotice::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  campid_ = 0u;
  camprankid_ = 0u;
  growing_ = 0u;
  level_ = 0u;
  handindawnum_ = 0u;
  settlephase_ = 0u;
  settlefinish_ = 0u;
  noticeid_ = 0u;
  noticeparam1_ = 0u;
  noticeparam2_ = 0u;
  noticeparam3_ = 0u;
  encourage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageG2SSettleNotice::~CMessageG2SSettleNotice() {
  SharedDtor();
}

void CMessageG2SSettleNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageG2SSettleNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageG2SSettleNotice_descriptor_;
}

const CMessageG2SSettleNotice& CMessageG2SSettleNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageG2SSettleNotice* CMessageG2SSettleNotice::default_instance_ = NULL;

CMessageG2SSettleNotice* CMessageG2SSettleNotice::New() const {
  return new CMessageG2SSettleNotice;
}

void CMessageG2SSettleNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    campid_ = 0u;
    camprankid_ = 0u;
    growing_ = 0u;
    level_ = 0u;
    handindawnum_ = 0u;
    settlephase_ = 0u;
    settlefinish_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    noticeid_ = 0u;
    noticeparam1_ = 0u;
    noticeparam2_ = 0u;
    noticeparam3_ = 0u;
    encourage_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageG2SSettleNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_campid;
        break;
      }
      
      // optional uint32 campid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_campid:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &campid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_camprankid;
        break;
      }
      
      // optional uint32 camprankid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_camprankid:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &camprankid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_growing;
        break;
      }
      
      // optional uint32 growing = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_growing:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &growing_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_handindawnum;
        break;
      }
      
      // optional uint32 handindawnum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_handindawnum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &handindawnum_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_settlephase;
        break;
      }
      
      // optional uint32 settlephase = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_settlephase:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &settlephase_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_settlefinish;
        break;
      }
      
      // optional uint32 settlefinish = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_settlefinish:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &settlefinish_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_noticeid;
        break;
      }
      
      // optional uint32 noticeid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_noticeid:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &noticeid_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_noticeparam1;
        break;
      }
      
      // optional uint32 noticeparam1 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_noticeparam1:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &noticeparam1_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_noticeparam2;
        break;
      }
      
      // optional uint32 noticeparam2 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_noticeparam2:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &noticeparam2_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_noticeparam3;
        break;
      }
      
      // optional uint32 noticeparam3 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_noticeparam3:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &noticeparam3_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_encourage;
        break;
      }
      
      // optional uint32 encourage = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_encourage:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &encourage_));
        _set_bit(12);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageG2SSettleNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageG2SSettleNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->id(), output);
  }
  
  // optional uint32 campid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->campid(), output);
  }
  
  // optional uint32 camprankid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->camprankid(), output);
  }
  
  // optional uint32 growing = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->growing(), output);
  }
  
  // optional uint32 level = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->level(), output);
  }
  
  // optional uint32 handindawnum = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->handindawnum(), output);
  }
  
  // optional uint32 settlephase = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->settlephase(), output);
  }
  
  // optional uint32 settlefinish = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->settlefinish(), output);
  }
  
  // optional uint32 noticeid = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->noticeid(), output);
  }
  
  // optional uint32 noticeparam1 = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->noticeparam1(), output);
  }
  
  // optional uint32 noticeparam2 = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->noticeparam2(), output);
  }
  
  // optional uint32 noticeparam3 = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->noticeparam3(), output);
  }
  
  // optional uint32 encourage = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->encourage(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageG2SSettleNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional uint32 campid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->campid(), target);
  }
  
  // optional uint32 camprankid = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->camprankid(), target);
  }
  
  // optional uint32 growing = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->growing(), target);
  }
  
  // optional uint32 level = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->level(), target);
  }
  
  // optional uint32 handindawnum = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->handindawnum(), target);
  }
  
  // optional uint32 settlephase = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->settlephase(), target);
  }
  
  // optional uint32 settlefinish = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->settlefinish(), target);
  }
  
  // optional uint32 noticeid = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->noticeid(), target);
  }
  
  // optional uint32 noticeparam1 = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->noticeparam1(), target);
  }
  
  // optional uint32 noticeparam2 = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->noticeparam2(), target);
  }
  
  // optional uint32 noticeparam3 = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->noticeparam3(), target);
  }
  
  // optional uint32 encourage = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->encourage(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageG2SSettleNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->id());
    }
    
    // optional uint32 campid = 2;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->campid());
    }
    
    // optional uint32 camprankid = 3;
    if (has_camprankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->camprankid());
    }
    
    // optional uint32 growing = 4;
    if (has_growing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->growing());
    }
    
    // optional uint32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
    // optional uint32 handindawnum = 6;
    if (has_handindawnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->handindawnum());
    }
    
    // optional uint32 settlephase = 7;
    if (has_settlephase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->settlephase());
    }
    
    // optional uint32 settlefinish = 8;
    if (has_settlefinish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->settlefinish());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 noticeid = 9;
    if (has_noticeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->noticeid());
    }
    
    // optional uint32 noticeparam1 = 10;
    if (has_noticeparam1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->noticeparam1());
    }
    
    // optional uint32 noticeparam2 = 11;
    if (has_noticeparam2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->noticeparam2());
    }
    
    // optional uint32 noticeparam3 = 12;
    if (has_noticeparam3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->noticeparam3());
    }
    
    // optional uint32 encourage = 13;
    if (has_encourage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->encourage());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageG2SSettleNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageG2SSettleNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageG2SSettleNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageG2SSettleNotice::MergeFrom(const CMessageG2SSettleNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_campid(from.campid());
    }
    if (from._has_bit(2)) {
      set_camprankid(from.camprankid());
    }
    if (from._has_bit(3)) {
      set_growing(from.growing());
    }
    if (from._has_bit(4)) {
      set_level(from.level());
    }
    if (from._has_bit(5)) {
      set_handindawnum(from.handindawnum());
    }
    if (from._has_bit(6)) {
      set_settlephase(from.settlephase());
    }
    if (from._has_bit(7)) {
      set_settlefinish(from.settlefinish());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_noticeid(from.noticeid());
    }
    if (from._has_bit(9)) {
      set_noticeparam1(from.noticeparam1());
    }
    if (from._has_bit(10)) {
      set_noticeparam2(from.noticeparam2());
    }
    if (from._has_bit(11)) {
      set_noticeparam3(from.noticeparam3());
    }
    if (from._has_bit(12)) {
      set_encourage(from.encourage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageG2SSettleNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageG2SSettleNotice::CopyFrom(const CMessageG2SSettleNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageG2SSettleNotice::Swap(CMessageG2SSettleNotice* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(campid_, other->campid_);
    std::swap(camprankid_, other->camprankid_);
    std::swap(growing_, other->growing_);
    std::swap(level_, other->level_);
    std::swap(handindawnum_, other->handindawnum_);
    std::swap(settlephase_, other->settlephase_);
    std::swap(settlefinish_, other->settlefinish_);
    std::swap(noticeid_, other->noticeid_);
    std::swap(noticeparam1_, other->noticeparam1_);
    std::swap(noticeparam2_, other->noticeparam2_);
    std::swap(noticeparam3_, other->noticeparam3_);
    std::swap(encourage_, other->encourage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageG2SSettleNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageG2SSettleNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageG2SSettleNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageG2SSettleNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageInternalTimeOut::kTimerIDFieldNumber;
const int CMessageInternalTimeOut::kOwnerIDFieldNumber;
const int CMessageInternalTimeOut::kTimerMarkFieldNumber;
const int CMessageInternalTimeOut::kMillSecondsFieldNumber;
const int CMessageInternalTimeOut::kCalledNumFieldNumber;
const int CMessageInternalTimeOut::kOtherInfoFieldNumber;
#endif  // !_MSC_VER

CMessageInternalTimeOut::CMessageInternalTimeOut()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageInternalTimeOut::InitAsDefaultInstance() {}

CMessageInternalTimeOut::CMessageInternalTimeOut(const CMessageInternalTimeOut& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageInternalTimeOut::SharedCtor() {
  _cached_size_ = 0;
  timerid_ = 0u;
  ownerid_ = 0u;
  timermark_ = 0u;
  millseconds_ = 0u;
  callednum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageInternalTimeOut::~CMessageInternalTimeOut() {
  SharedDtor();
}

void CMessageInternalTimeOut::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageInternalTimeOut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageInternalTimeOut_descriptor_;
}

const CMessageInternalTimeOut& CMessageInternalTimeOut::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageInternalTimeOut* CMessageInternalTimeOut::default_instance_ = NULL;

CMessageInternalTimeOut* CMessageInternalTimeOut::New() const {
  return new CMessageInternalTimeOut;
}

void CMessageInternalTimeOut::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timerid_ = 0u;
    ownerid_ = 0u;
    timermark_ = 0u;
    millseconds_ = 0u;
    callednum_ = 0u;
  }
  otherinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageInternalTimeOut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TimerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &timerid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_OwnerID;
        break;
      }
      
      // optional uint32 OwnerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OwnerID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ownerid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_TimerMark;
        break;
      }
      
      // optional uint32 TimerMark = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TimerMark:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &timermark_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_MillSeconds;
        break;
      }
      
      // optional uint32 MillSeconds = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MillSeconds:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &millseconds_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_CalledNum;
        break;
      }
      
      // optional uint32 CalledNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CalledNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &callednum_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_OtherInfo;
        break;
      }
      
      // repeated uint32 OtherInfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OtherInfo:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_otherinfo(value);
        if (input->ExpectTag(48)) goto parse_OtherInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageInternalTimeOut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageInternalTimeOut::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TimerID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->timerid(), output);
  }
  
  // optional uint32 OwnerID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->ownerid(), output);
  }
  
  // optional uint32 TimerMark = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->timermark(), output);
  }
  
  // optional uint32 MillSeconds = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->millseconds(), output);
  }
  
  // optional uint32 CalledNum = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->callednum(), output);
  }
  
  // repeated uint32 OtherInfo = 6;
  for (int i = 0; i < this->otherinfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->otherinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageInternalTimeOut::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TimerID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->timerid(), target);
  }
  
  // optional uint32 OwnerID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->ownerid(), target);
  }
  
  // optional uint32 TimerMark = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->timermark(), target);
  }
  
  // optional uint32 MillSeconds = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->millseconds(), target);
  }
  
  // optional uint32 CalledNum = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->callednum(), target);
  }
  
  // repeated uint32 OtherInfo = 6;
  for (int i = 0; i < this->otherinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->otherinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageInternalTimeOut::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TimerID = 1;
    if (has_timerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->timerid());
    }
    
    // optional uint32 OwnerID = 2;
    if (has_ownerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ownerid());
    }
    
    // optional uint32 TimerMark = 3;
    if (has_timermark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->timermark());
    }
    
    // optional uint32 MillSeconds = 4;
    if (has_millseconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->millseconds());
    }
    
    // optional uint32 CalledNum = 5;
    if (has_callednum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->callednum());
    }
    
  }
  // repeated uint32 OtherInfo = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->otherinfo_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->otherinfo(i));
    }
    total_size += 1 * this->otherinfo_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageInternalTimeOut::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageInternalTimeOut* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageInternalTimeOut*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageInternalTimeOut::MergeFrom(const CMessageInternalTimeOut& from) {
  GOOGLE_CHECK_NE(&from, this);
  otherinfo_.MergeFrom(from.otherinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_timerid(from.timerid());
    }
    if (from._has_bit(1)) {
      set_ownerid(from.ownerid());
    }
    if (from._has_bit(2)) {
      set_timermark(from.timermark());
    }
    if (from._has_bit(3)) {
      set_millseconds(from.millseconds());
    }
    if (from._has_bit(4)) {
      set_callednum(from.callednum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageInternalTimeOut::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageInternalTimeOut::CopyFrom(const CMessageInternalTimeOut& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageInternalTimeOut::Swap(CMessageInternalTimeOut* other) {
  if (other != this) {
    std::swap(timerid_, other->timerid_);
    std::swap(ownerid_, other->ownerid_);
    std::swap(timermark_, other->timermark_);
    std::swap(millseconds_, other->millseconds_);
    std::swap(callednum_, other->callednum_);
    otherinfo_.Swap(&other->otherinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageInternalTimeOut::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageInternalTimeOut::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageInternalTimeOut::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageInternalTimeOut_reflection_;
}

// ===================================================================

const ::std::string CMessageCountryInfo::_default_countrylist_;
#ifndef _MSC_VER
const int CMessageCountryInfo::kLengthFieldNumber;
const int CMessageCountryInfo::kCountryListFieldNumber;
#endif  // !_MSC_VER

CMessageCountryInfo::CMessageCountryInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCountryInfo::InitAsDefaultInstance() {}

CMessageCountryInfo::CMessageCountryInfo(const CMessageCountryInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCountryInfo::SharedCtor() {
  _cached_size_ = 0;
  length_ = 0u;
  countrylist_ = const_cast< ::std::string*>(&_default_countrylist_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCountryInfo::~CMessageCountryInfo() {
  SharedDtor();
}

void CMessageCountryInfo::SharedDtor() {
  if (countrylist_ != &_default_countrylist_) {
    delete countrylist_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCountryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCountryInfo_descriptor_;
}

const CMessageCountryInfo& CMessageCountryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCountryInfo* CMessageCountryInfo::default_instance_ = NULL;

CMessageCountryInfo* CMessageCountryInfo::New() const {
  return new CMessageCountryInfo;
}

void CMessageCountryInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    length_ = 0u;
    if (_has_bit(1)) {
      if (countrylist_ != &_default_countrylist_) {
        countrylist_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCountryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Length = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &length_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_CountryList;
        break;
      }
      
      // optional bytes CountryList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CountryList:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_countrylist()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCountryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCountryInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Length = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->length(), output);
  }
  
  // optional bytes CountryList = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->countrylist(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCountryInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Length = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->length(), target);
  }
  
  // optional bytes CountryList = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->countrylist(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCountryInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Length = 1;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->length());
    }
    
    // optional bytes CountryList = 2;
    if (has_countrylist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->countrylist());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCountryInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCountryInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCountryInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCountryInfo::MergeFrom(const CMessageCountryInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_length(from.length());
    }
    if (from._has_bit(1)) {
      set_countrylist(from.countrylist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCountryInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCountryInfo::CopyFrom(const CMessageCountryInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCountryInfo::Swap(CMessageCountryInfo* other) {
  if (other != this) {
    std::swap(length_, other->length_);
    std::swap(countrylist_, other->countrylist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCountryInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCountryInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCountryInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCountryInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageRedirectGErrorCode::kCharIDFieldNumber;
const int CMessageRedirectGErrorCode::kErrorCodeFieldNumber;
const int CMessageRedirectGErrorCode::kLineIDFieldNumber;
const int CMessageRedirectGErrorCode::kMapIDFieldNumber;
#endif  // !_MSC_VER

CMessageRedirectGErrorCode::CMessageRedirectGErrorCode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRedirectGErrorCode::InitAsDefaultInstance() {}

CMessageRedirectGErrorCode::CMessageRedirectGErrorCode(const CMessageRedirectGErrorCode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRedirectGErrorCode::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  errorcode_ = 0;
  lineid_ = 0u;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRedirectGErrorCode::~CMessageRedirectGErrorCode() {
  SharedDtor();
}

void CMessageRedirectGErrorCode::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageRedirectGErrorCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRedirectGErrorCode_descriptor_;
}

const CMessageRedirectGErrorCode& CMessageRedirectGErrorCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRedirectGErrorCode* CMessageRedirectGErrorCode::default_instance_ = NULL;

CMessageRedirectGErrorCode* CMessageRedirectGErrorCode::New() const {
  return new CMessageRedirectGErrorCode;
}

void CMessageRedirectGErrorCode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    errorcode_ = 0;
    lineid_ = 0u;
    mapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRedirectGErrorCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ErrorCode;
        break;
      }
      
      // optional int32 ErrorCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ErrorCode:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &errorcode_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_LineID;
        break;
      }
      
      // optional uint32 LineID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lineid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageRedirectGErrorCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRedirectGErrorCode::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional int32 ErrorCode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(2, this->errorcode(), output);
  }
  
  // optional uint32 LineID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->lineid(), output);
  }
  
  // optional uint32 MapID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->mapid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRedirectGErrorCode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional int32 ErrorCode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(2, this->errorcode(), target);
  }
  
  // optional uint32 LineID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->lineid(), target);
  }
  
  // optional uint32 MapID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->mapid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRedirectGErrorCode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional int32 ErrorCode = 2;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->errorcode());
    }
    
    // optional uint32 LineID = 3;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lineid());
    }
    
    // optional uint32 MapID = 4;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRedirectGErrorCode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRedirectGErrorCode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRedirectGErrorCode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRedirectGErrorCode::MergeFrom(const CMessageRedirectGErrorCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_errorcode(from.errorcode());
    }
    if (from._has_bit(2)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(3)) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRedirectGErrorCode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRedirectGErrorCode::CopyFrom(const CMessageRedirectGErrorCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRedirectGErrorCode::Swap(CMessageRedirectGErrorCode* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(lineid_, other->lineid_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRedirectGErrorCode::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRedirectGErrorCode::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRedirectGErrorCode::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRedirectGErrorCode_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageRedirectSErrorCode::kCharIDFieldNumber;
const int CMessageRedirectSErrorCode::kErrorCodeFieldNumber;
const int CMessageRedirectSErrorCode::kLineIDFieldNumber;
const int CMessageRedirectSErrorCode::kMapIDFieldNumber;
#endif  // !_MSC_VER

CMessageRedirectSErrorCode::CMessageRedirectSErrorCode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRedirectSErrorCode::InitAsDefaultInstance() {}

CMessageRedirectSErrorCode::CMessageRedirectSErrorCode(const CMessageRedirectSErrorCode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRedirectSErrorCode::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  errorcode_ = 0;
  lineid_ = 0u;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRedirectSErrorCode::~CMessageRedirectSErrorCode() {
  SharedDtor();
}

void CMessageRedirectSErrorCode::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageRedirectSErrorCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRedirectSErrorCode_descriptor_;
}

const CMessageRedirectSErrorCode& CMessageRedirectSErrorCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRedirectSErrorCode* CMessageRedirectSErrorCode::default_instance_ = NULL;

CMessageRedirectSErrorCode* CMessageRedirectSErrorCode::New() const {
  return new CMessageRedirectSErrorCode;
}

void CMessageRedirectSErrorCode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    errorcode_ = 0;
    lineid_ = 0u;
    mapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRedirectSErrorCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ErrorCode;
        break;
      }
      
      // optional int32 ErrorCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ErrorCode:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &errorcode_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_LineID;
        break;
      }
      
      // optional uint32 LineID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lineid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageRedirectSErrorCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRedirectSErrorCode::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional int32 ErrorCode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(2, this->errorcode(), output);
  }
  
  // optional uint32 LineID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->lineid(), output);
  }
  
  // optional uint32 MapID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->mapid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRedirectSErrorCode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional int32 ErrorCode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(2, this->errorcode(), target);
  }
  
  // optional uint32 LineID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->lineid(), target);
  }
  
  // optional uint32 MapID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->mapid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRedirectSErrorCode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional int32 ErrorCode = 2;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->errorcode());
    }
    
    // optional uint32 LineID = 3;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lineid());
    }
    
    // optional uint32 MapID = 4;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRedirectSErrorCode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRedirectSErrorCode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRedirectSErrorCode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRedirectSErrorCode::MergeFrom(const CMessageRedirectSErrorCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_errorcode(from.errorcode());
    }
    if (from._has_bit(2)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(3)) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRedirectSErrorCode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRedirectSErrorCode::CopyFrom(const CMessageRedirectSErrorCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRedirectSErrorCode::Swap(CMessageRedirectSErrorCode* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(lineid_, other->lineid_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRedirectSErrorCode::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRedirectSErrorCode::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRedirectSErrorCode::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRedirectSErrorCode_reflection_;
}

// ===================================================================

const ::std::string CMessagePlayerRedirectEnterMapResponse::_default_mapname_;
#ifndef _MSC_VER
const int CMessagePlayerRedirectEnterMapResponse::kCommHandleFieldNumber;
const int CMessagePlayerRedirectEnterMapResponse::kCharIDFieldNumber;
const int CMessagePlayerRedirectEnterMapResponse::kLineIDFieldNumber;
const int CMessagePlayerRedirectEnterMapResponse::kMapIDFieldNumber;
const int CMessagePlayerRedirectEnterMapResponse::kPosXFieldNumber;
const int CMessagePlayerRedirectEnterMapResponse::kPosYFieldNumber;
const int CMessagePlayerRedirectEnterMapResponse::kMapNameFieldNumber;
#endif  // !_MSC_VER

CMessagePlayerRedirectEnterMapResponse::CMessagePlayerRedirectEnterMapResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePlayerRedirectEnterMapResponse::InitAsDefaultInstance() {}

CMessagePlayerRedirectEnterMapResponse::CMessagePlayerRedirectEnterMapResponse(const CMessagePlayerRedirectEnterMapResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePlayerRedirectEnterMapResponse::SharedCtor() {
  _cached_size_ = 0;
  commhandle_ = 0u;
  charid_ = 0u;
  lineid_ = 0u;
  mapid_ = 0u;
  posx_ = 0u;
  posy_ = 0u;
  mapname_ = const_cast< ::std::string*>(&_default_mapname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePlayerRedirectEnterMapResponse::~CMessagePlayerRedirectEnterMapResponse() {
  SharedDtor();
}

void CMessagePlayerRedirectEnterMapResponse::SharedDtor() {
  if (mapname_ != &_default_mapname_) {
    delete mapname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessagePlayerRedirectEnterMapResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerRedirectEnterMapResponse_descriptor_;
}

const CMessagePlayerRedirectEnterMapResponse& CMessagePlayerRedirectEnterMapResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePlayerRedirectEnterMapResponse* CMessagePlayerRedirectEnterMapResponse::default_instance_ = NULL;

CMessagePlayerRedirectEnterMapResponse* CMessagePlayerRedirectEnterMapResponse::New() const {
  return new CMessagePlayerRedirectEnterMapResponse;
}

void CMessagePlayerRedirectEnterMapResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    commhandle_ = 0u;
    charid_ = 0u;
    lineid_ = 0u;
    mapid_ = 0u;
    posx_ = 0u;
    posy_ = 0u;
    if (_has_bit(6)) {
      if (mapname_ != &_default_mapname_) {
        mapname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePlayerRedirectEnterMapResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CommHandle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &commhandle_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_LineID;
        break;
      }
      
      // optional uint32 LineID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lineid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_PosX;
        break;
      }
      
      // optional uint32 PosX = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosX:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posx_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_PosY;
        break;
      }
      
      // optional uint32 PosY = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posy_));
        _set_bit(5);
        if (input->ExpectTag(58)) goto parse_MapName;
        break;
      }
      
      // optional string MapName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MapName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_mapname()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePlayerRedirectEnterMapResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePlayerRedirectEnterMapResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CommHandle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->commhandle(), output);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charid(), output);
  }
  
  // optional uint32 LineID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->lineid(), output);
  }
  
  // optional uint32 MapID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->mapid(), output);
  }
  
  // optional uint32 PosX = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->posx(), output);
  }
  
  // optional uint32 PosY = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->posy(), output);
  }
  
  // optional string MapName = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteString(7, this->mapname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePlayerRedirectEnterMapResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CommHandle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->commhandle(), target);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charid(), target);
  }
  
  // optional uint32 LineID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->lineid(), target);
  }
  
  // optional uint32 MapID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->mapid(), target);
  }
  
  // optional uint32 PosX = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->posx(), target);
  }
  
  // optional uint32 PosY = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->posy(), target);
  }
  
  // optional string MapName = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(7, this->mapname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePlayerRedirectEnterMapResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CommHandle = 1;
    if (has_commhandle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->commhandle());
    }
    
    // optional uint32 CharID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 LineID = 3;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lineid());
    }
    
    // optional uint32 MapID = 4;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 PosX = 5;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posx());
    }
    
    // optional uint32 PosY = 6;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posy());
    }
    
    // optional string MapName = 7;
    if (has_mapname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->mapname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePlayerRedirectEnterMapResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePlayerRedirectEnterMapResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePlayerRedirectEnterMapResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePlayerRedirectEnterMapResponse::MergeFrom(const CMessagePlayerRedirectEnterMapResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_commhandle(from.commhandle());
    }
    if (from._has_bit(1)) {
      set_charid(from.charid());
    }
    if (from._has_bit(2)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(3)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(4)) {
      set_posx(from.posx());
    }
    if (from._has_bit(5)) {
      set_posy(from.posy());
    }
    if (from._has_bit(6)) {
      set_mapname(from.mapname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePlayerRedirectEnterMapResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerRedirectEnterMapResponse::CopyFrom(const CMessagePlayerRedirectEnterMapResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerRedirectEnterMapResponse::Swap(CMessagePlayerRedirectEnterMapResponse* other) {
  if (other != this) {
    std::swap(commhandle_, other->commhandle_);
    std::swap(charid_, other->charid_);
    std::swap(lineid_, other->lineid_);
    std::swap(mapid_, other->mapid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(mapname_, other->mapname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePlayerRedirectEnterMapResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePlayerRedirectEnterMapResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePlayerRedirectEnterMapResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerRedirectEnterMapResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageGateInfoNotice::_default_address_;
const ::std::string CMessageGateInfoNotice::_default_hostname_;
const ::std::string CMessageGateInfoNotice::_default_gatecode_;
const ::std::string CMessageGateInfoNotice::_default_gatepasswd_;
const ::std::string CMessageGateInfoNotice::_default_gatemac_;
#ifndef _MSC_VER
const int CMessageGateInfoNotice::kAddressFieldNumber;
const int CMessageGateInfoNotice::kHostNameFieldNumber;
const int CMessageGateInfoNotice::kGateVersionFieldNumber;
const int CMessageGateInfoNotice::kWorldIDFieldNumber;
const int CMessageGateInfoNotice::kGateCodeFieldNumber;
const int CMessageGateInfoNotice::kGatePasswdFieldNumber;
const int CMessageGateInfoNotice::kGateMacFieldNumber;
const int CMessageGateInfoNotice::kGameIDFieldNumber;
#endif  // !_MSC_VER

CMessageGateInfoNotice::CMessageGateInfoNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGateInfoNotice::InitAsDefaultInstance() {}

CMessageGateInfoNotice::CMessageGateInfoNotice(const CMessageGateInfoNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGateInfoNotice::SharedCtor() {
  _cached_size_ = 0;
  address_ = const_cast< ::std::string*>(&_default_address_);
  hostname_ = const_cast< ::std::string*>(&_default_hostname_);
  gateversion_ = 0u;
  worldid_ = 0u;
  gatecode_ = const_cast< ::std::string*>(&_default_gatecode_);
  gatepasswd_ = const_cast< ::std::string*>(&_default_gatepasswd_);
  gatemac_ = const_cast< ::std::string*>(&_default_gatemac_);
  gameid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGateInfoNotice::~CMessageGateInfoNotice() {
  SharedDtor();
}

void CMessageGateInfoNotice::SharedDtor() {
  if (address_ != &_default_address_) {
    delete address_;
  }
  if (hostname_ != &_default_hostname_) {
    delete hostname_;
  }
  if (gatecode_ != &_default_gatecode_) {
    delete gatecode_;
  }
  if (gatepasswd_ != &_default_gatepasswd_) {
    delete gatepasswd_;
  }
  if (gatemac_ != &_default_gatemac_) {
    delete gatemac_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGateInfoNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGateInfoNotice_descriptor_;
}

const CMessageGateInfoNotice& CMessageGateInfoNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGateInfoNotice* CMessageGateInfoNotice::default_instance_ = NULL;

CMessageGateInfoNotice* CMessageGateInfoNotice::New() const {
  return new CMessageGateInfoNotice;
}

void CMessageGateInfoNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (address_ != &_default_address_) {
        address_->clear();
      }
    }
    if (_has_bit(1)) {
      if (hostname_ != &_default_hostname_) {
        hostname_->clear();
      }
    }
    gateversion_ = 0u;
    worldid_ = 0u;
    if (_has_bit(4)) {
      if (gatecode_ != &_default_gatecode_) {
        gatecode_->clear();
      }
    }
    if (_has_bit(5)) {
      if (gatepasswd_ != &_default_gatepasswd_) {
        gatepasswd_->clear();
      }
    }
    if (_has_bit(6)) {
      if (gatemac_ != &_default_gatemac_) {
        gatemac_->clear();
      }
    }
    gameid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGateInfoNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string Address = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_address()));
        if (input->ExpectTag(18)) goto parse_HostName;
        break;
      }
      
      // optional string HostName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_HostName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_hostname()));
        if (input->ExpectTag(24)) goto parse_GateVersion;
        break;
      }
      
      // optional uint32 GateVersion = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GateVersion:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &gateversion_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_WorldID;
        break;
      }
      
      // optional uint32 WorldID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WorldID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &worldid_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_GateCode;
        break;
      }
      
      // optional string GateCode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_GateCode:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_gatecode()));
        if (input->ExpectTag(50)) goto parse_GatePasswd;
        break;
      }
      
      // optional string GatePasswd = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_GatePasswd:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_gatepasswd()));
        if (input->ExpectTag(58)) goto parse_GateMac;
        break;
      }
      
      // optional string GateMac = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_GateMac:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_gatemac()));
        if (input->ExpectTag(64)) goto parse_GameID;
        break;
      }
      
      // optional uint32 GameID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GameID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &gameid_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGateInfoNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGateInfoNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string Address = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->address(), output);
  }
  
  // optional string HostName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->hostname(), output);
  }
  
  // optional uint32 GateVersion = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->gateversion(), output);
  }
  
  // optional uint32 WorldID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->worldid(), output);
  }
  
  // optional string GateCode = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->gatecode(), output);
  }
  
  // optional string GatePasswd = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteString(6, this->gatepasswd(), output);
  }
  
  // optional string GateMac = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteString(7, this->gatemac(), output);
  }
  
  // optional uint32 GameID = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->gameid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGateInfoNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Address = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->address(), target);
  }
  
  // optional string HostName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->hostname(), target);
  }
  
  // optional uint32 GateVersion = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->gateversion(), target);
  }
  
  // optional uint32 WorldID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->worldid(), target);
  }
  
  // optional string GateCode = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->gatecode(), target);
  }
  
  // optional string GatePasswd = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(6, this->gatepasswd(), target);
  }
  
  // optional string GateMac = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(7, this->gatemac(), target);
  }
  
  // optional uint32 GameID = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->gameid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGateInfoNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Address = 1;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->address());
    }
    
    // optional string HostName = 2;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->hostname());
    }
    
    // optional uint32 GateVersion = 3;
    if (has_gateversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->gateversion());
    }
    
    // optional uint32 WorldID = 4;
    if (has_worldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->worldid());
    }
    
    // optional string GateCode = 5;
    if (has_gatecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->gatecode());
    }
    
    // optional string GatePasswd = 6;
    if (has_gatepasswd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->gatepasswd());
    }
    
    // optional string GateMac = 7;
    if (has_gatemac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->gatemac());
    }
    
    // optional uint32 GameID = 8;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->gameid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGateInfoNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGateInfoNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGateInfoNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGateInfoNotice::MergeFrom(const CMessageGateInfoNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_address(from.address());
    }
    if (from._has_bit(1)) {
      set_hostname(from.hostname());
    }
    if (from._has_bit(2)) {
      set_gateversion(from.gateversion());
    }
    if (from._has_bit(3)) {
      set_worldid(from.worldid());
    }
    if (from._has_bit(4)) {
      set_gatecode(from.gatecode());
    }
    if (from._has_bit(5)) {
      set_gatepasswd(from.gatepasswd());
    }
    if (from._has_bit(6)) {
      set_gatemac(from.gatemac());
    }
    if (from._has_bit(7)) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGateInfoNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGateInfoNotice::CopyFrom(const CMessageGateInfoNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGateInfoNotice::Swap(CMessageGateInfoNotice* other) {
  if (other != this) {
    std::swap(address_, other->address_);
    std::swap(hostname_, other->hostname_);
    std::swap(gateversion_, other->gateversion_);
    std::swap(worldid_, other->worldid_);
    std::swap(gatecode_, other->gatecode_);
    std::swap(gatepasswd_, other->gatepasswd_);
    std::swap(gatemac_, other->gatemac_);
    std::swap(gameid_, other->gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGateInfoNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGateInfoNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGateInfoNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGateInfoNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGateInfoResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

CMessageGateInfoResponse::CMessageGateInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGateInfoResponse::InitAsDefaultInstance() {}

CMessageGateInfoResponse::CMessageGateInfoResponse(const CMessageGateInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGateInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGateInfoResponse::~CMessageGateInfoResponse() {
  SharedDtor();
}

void CMessageGateInfoResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGateInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGateInfoResponse_descriptor_;
}

const CMessageGateInfoResponse& CMessageGateInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGateInfoResponse* CMessageGateInfoResponse::default_instance_ = NULL;

CMessageGateInfoResponse* CMessageGateInfoResponse::New() const {
  return new CMessageGateInfoResponse;
}

void CMessageGateInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGateInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional int32 ErrorCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &errorcode_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGateInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGateInfoResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 ErrorCode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(1, this->errorcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGateInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ErrorCode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(1, this->errorcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGateInfoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ErrorCode = 1;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->errorcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGateInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGateInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGateInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGateInfoResponse::MergeFrom(const CMessageGateInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGateInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGateInfoResponse::CopyFrom(const CMessageGateInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGateInfoResponse::Swap(CMessageGateInfoResponse* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGateInfoResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGateInfoResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGateInfoResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGateInfoResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessagePlayerEnterGateNotice::kCommHandleFieldNumber;
const int CMessagePlayerEnterGateNotice::kLoginTokenFieldNumber;
const int CMessagePlayerEnterGateNotice::kAccountIDFieldNumber;
const int CMessagePlayerEnterGateNotice::kAdultFlagFieldNumber;
const int CMessagePlayerEnterGateNotice::kUserFlagFieldNumber;
const int CMessagePlayerEnterGateNotice::kUserClassFieldNumber;
const int CMessagePlayerEnterGateNotice::kUserPointFieldNumber;
const int CMessagePlayerEnterGateNotice::kWorldPlayerLimitFieldNumber;
const int CMessagePlayerEnterGateNotice::kUserStatusFieldNumber;
const int CMessagePlayerEnterGateNotice::kGameIDFieldNumber;
const int CMessagePlayerEnterGateNotice::kCpuidFieldNumber;
const int CMessagePlayerEnterGateNotice::kDiskidFieldNumber;
#endif  // !_MSC_VER

CMessagePlayerEnterGateNotice::CMessagePlayerEnterGateNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePlayerEnterGateNotice::InitAsDefaultInstance() {}

CMessagePlayerEnterGateNotice::CMessagePlayerEnterGateNotice(const CMessagePlayerEnterGateNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePlayerEnterGateNotice::SharedCtor() {
  _cached_size_ = 0;
  commhandle_ = 0u;
  logintoken_ = 0u;
  accountid_ = 0u;
  adultflag_ = 0u;
  userflag_ = 0u;
  userclass_ = 0u;
  userpoint_ = 0u;
  worldplayerlimit_ = 0u;
  userstatus_ = 0u;
  gameid_ = 0u;
  cpuid_ = 0;
  diskid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePlayerEnterGateNotice::~CMessagePlayerEnterGateNotice() {
  SharedDtor();
}

void CMessagePlayerEnterGateNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessagePlayerEnterGateNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerEnterGateNotice_descriptor_;
}

const CMessagePlayerEnterGateNotice& CMessagePlayerEnterGateNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePlayerEnterGateNotice* CMessagePlayerEnterGateNotice::default_instance_ = NULL;

CMessagePlayerEnterGateNotice* CMessagePlayerEnterGateNotice::New() const {
  return new CMessagePlayerEnterGateNotice;
}

void CMessagePlayerEnterGateNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    commhandle_ = 0u;
    logintoken_ = 0u;
    accountid_ = 0u;
    adultflag_ = 0u;
    userflag_ = 0u;
    userclass_ = 0u;
    userpoint_ = 0u;
    worldplayerlimit_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    userstatus_ = 0u;
    gameid_ = 0u;
    cpuid_ = 0;
    diskid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePlayerEnterGateNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CommHandle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &commhandle_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_LoginToken;
        break;
      }
      
      // optional uint32 LoginToken = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LoginToken:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &logintoken_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_AccountID;
        break;
      }
      
      // optional uint32 AccountID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AccountID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_AdultFlag;
        break;
      }
      
      // optional uint32 AdultFlag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AdultFlag:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &adultflag_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_UserFlag;
        break;
      }
      
      // optional uint32 UserFlag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UserFlag:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &userflag_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_UserClass;
        break;
      }
      
      // optional uint32 UserClass = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UserClass:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &userclass_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_UserPoint;
        break;
      }
      
      // optional uint32 UserPoint = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UserPoint:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &userpoint_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_WorldPlayerLimit;
        break;
      }
      
      // optional uint32 WorldPlayerLimit = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WorldPlayerLimit:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &worldplayerlimit_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_UserStatus;
        break;
      }
      
      // optional uint32 UserStatus = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UserStatus:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &userstatus_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_GameID;
        break;
      }
      
      // optional uint32 GameID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GameID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &gameid_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_cpuid;
        break;
      }
      
      // optional int32 cpuid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_cpuid:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &cpuid_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_diskid;
        break;
      }
      
      // optional int32 diskid = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_diskid:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &diskid_));
        _set_bit(11);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePlayerEnterGateNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePlayerEnterGateNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CommHandle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->commhandle(), output);
  }
  
  // optional uint32 LoginToken = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->logintoken(), output);
  }
  
  // optional uint32 AccountID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->accountid(), output);
  }
  
  // optional uint32 AdultFlag = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->adultflag(), output);
  }
  
  // optional uint32 UserFlag = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->userflag(), output);
  }
  
  // optional uint32 UserClass = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->userclass(), output);
  }
  
  // optional uint32 UserPoint = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->userpoint(), output);
  }
  
  // optional uint32 WorldPlayerLimit = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->worldplayerlimit(), output);
  }
  
  // optional uint32 UserStatus = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->userstatus(), output);
  }
  
  // optional uint32 GameID = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->gameid(), output);
  }
  
  // optional int32 cpuid = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(11, this->cpuid(), output);
  }
  
  // optional int32 diskid = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(12, this->diskid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePlayerEnterGateNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CommHandle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->commhandle(), target);
  }
  
  // optional uint32 LoginToken = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->logintoken(), target);
  }
  
  // optional uint32 AccountID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->accountid(), target);
  }
  
  // optional uint32 AdultFlag = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->adultflag(), target);
  }
  
  // optional uint32 UserFlag = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->userflag(), target);
  }
  
  // optional uint32 UserClass = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->userclass(), target);
  }
  
  // optional uint32 UserPoint = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->userpoint(), target);
  }
  
  // optional uint32 WorldPlayerLimit = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->worldplayerlimit(), target);
  }
  
  // optional uint32 UserStatus = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->userstatus(), target);
  }
  
  // optional uint32 GameID = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->gameid(), target);
  }
  
  // optional int32 cpuid = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(11, this->cpuid(), target);
  }
  
  // optional int32 diskid = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(12, this->diskid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePlayerEnterGateNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CommHandle = 1;
    if (has_commhandle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->commhandle());
    }
    
    // optional uint32 LoginToken = 2;
    if (has_logintoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->logintoken());
    }
    
    // optional uint32 AccountID = 3;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 AdultFlag = 4;
    if (has_adultflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->adultflag());
    }
    
    // optional uint32 UserFlag = 5;
    if (has_userflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->userflag());
    }
    
    // optional uint32 UserClass = 6;
    if (has_userclass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->userclass());
    }
    
    // optional uint32 UserPoint = 7;
    if (has_userpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->userpoint());
    }
    
    // optional uint32 WorldPlayerLimit = 8;
    if (has_worldplayerlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->worldplayerlimit());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 UserStatus = 9;
    if (has_userstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->userstatus());
    }
    
    // optional uint32 GameID = 10;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->gameid());
    }
    
    // optional int32 cpuid = 11;
    if (has_cpuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->cpuid());
    }
    
    // optional int32 diskid = 12;
    if (has_diskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->diskid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePlayerEnterGateNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePlayerEnterGateNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePlayerEnterGateNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePlayerEnterGateNotice::MergeFrom(const CMessagePlayerEnterGateNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_commhandle(from.commhandle());
    }
    if (from._has_bit(1)) {
      set_logintoken(from.logintoken());
    }
    if (from._has_bit(2)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(3)) {
      set_adultflag(from.adultflag());
    }
    if (from._has_bit(4)) {
      set_userflag(from.userflag());
    }
    if (from._has_bit(5)) {
      set_userclass(from.userclass());
    }
    if (from._has_bit(6)) {
      set_userpoint(from.userpoint());
    }
    if (from._has_bit(7)) {
      set_worldplayerlimit(from.worldplayerlimit());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_userstatus(from.userstatus());
    }
    if (from._has_bit(9)) {
      set_gameid(from.gameid());
    }
    if (from._has_bit(10)) {
      set_cpuid(from.cpuid());
    }
    if (from._has_bit(11)) {
      set_diskid(from.diskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePlayerEnterGateNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerEnterGateNotice::CopyFrom(const CMessagePlayerEnterGateNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerEnterGateNotice::Swap(CMessagePlayerEnterGateNotice* other) {
  if (other != this) {
    std::swap(commhandle_, other->commhandle_);
    std::swap(logintoken_, other->logintoken_);
    std::swap(accountid_, other->accountid_);
    std::swap(adultflag_, other->adultflag_);
    std::swap(userflag_, other->userflag_);
    std::swap(userclass_, other->userclass_);
    std::swap(userpoint_, other->userpoint_);
    std::swap(worldplayerlimit_, other->worldplayerlimit_);
    std::swap(userstatus_, other->userstatus_);
    std::swap(gameid_, other->gameid_);
    std::swap(cpuid_, other->cpuid_);
    std::swap(diskid_, other->diskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePlayerEnterGateNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePlayerEnterGateNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePlayerEnterGateNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerEnterGateNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessagePlayerEnterGateResponse::kCommHandleFieldNumber;
const int CMessagePlayerEnterGateResponse::kAccountIDFieldNumber;
const int CMessagePlayerEnterGateResponse::kLoginTokenFieldNumber;
const int CMessagePlayerEnterGateResponse::kErrorCodeFieldNumber;
const int CMessagePlayerEnterGateResponse::kWorldIDFieldNumber;
const int CMessagePlayerEnterGateResponse::kOtherClientFieldNumber;
#endif  // !_MSC_VER

CMessagePlayerEnterGateResponse::CMessagePlayerEnterGateResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePlayerEnterGateResponse::InitAsDefaultInstance() {}

CMessagePlayerEnterGateResponse::CMessagePlayerEnterGateResponse(const CMessagePlayerEnterGateResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePlayerEnterGateResponse::SharedCtor() {
  _cached_size_ = 0;
  commhandle_ = 0u;
  accountid_ = 0u;
  logintoken_ = 0u;
  errorcode_ = 0;
  worldid_ = 0;
  otherclient_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePlayerEnterGateResponse::~CMessagePlayerEnterGateResponse() {
  SharedDtor();
}

void CMessagePlayerEnterGateResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessagePlayerEnterGateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerEnterGateResponse_descriptor_;
}

const CMessagePlayerEnterGateResponse& CMessagePlayerEnterGateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePlayerEnterGateResponse* CMessagePlayerEnterGateResponse::default_instance_ = NULL;

CMessagePlayerEnterGateResponse* CMessagePlayerEnterGateResponse::New() const {
  return new CMessagePlayerEnterGateResponse;
}

void CMessagePlayerEnterGateResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    commhandle_ = 0u;
    accountid_ = 0u;
    logintoken_ = 0u;
    errorcode_ = 0;
    worldid_ = 0;
    otherclient_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePlayerEnterGateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CommHandle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &commhandle_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_AccountID;
        break;
      }
      
      // optional uint32 AccountID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AccountID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_LoginToken;
        break;
      }
      
      // optional uint32 LoginToken = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LoginToken:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &logintoken_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_ErrorCode;
        break;
      }
      
      // optional int32 ErrorCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ErrorCode:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &errorcode_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_WorldID;
        break;
      }
      
      // optional int32 WorldID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WorldID:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &worldid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_OtherClient;
        break;
      }
      
      // optional uint32 OtherClient = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OtherClient:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &otherclient_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePlayerEnterGateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePlayerEnterGateResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CommHandle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->commhandle(), output);
  }
  
  // optional uint32 AccountID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->accountid(), output);
  }
  
  // optional uint32 LoginToken = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->logintoken(), output);
  }
  
  // optional int32 ErrorCode = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->errorcode(), output);
  }
  
  // optional int32 WorldID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(5, this->worldid(), output);
  }
  
  // optional uint32 OtherClient = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->otherclient(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePlayerEnterGateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CommHandle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->commhandle(), target);
  }
  
  // optional uint32 AccountID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->accountid(), target);
  }
  
  // optional uint32 LoginToken = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->logintoken(), target);
  }
  
  // optional int32 ErrorCode = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->errorcode(), target);
  }
  
  // optional int32 WorldID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(5, this->worldid(), target);
  }
  
  // optional uint32 OtherClient = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->otherclient(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePlayerEnterGateResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CommHandle = 1;
    if (has_commhandle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->commhandle());
    }
    
    // optional uint32 AccountID = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 LoginToken = 3;
    if (has_logintoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->logintoken());
    }
    
    // optional int32 ErrorCode = 4;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->errorcode());
    }
    
    // optional int32 WorldID = 5;
    if (has_worldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->worldid());
    }
    
    // optional uint32 OtherClient = 6;
    if (has_otherclient()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->otherclient());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePlayerEnterGateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePlayerEnterGateResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePlayerEnterGateResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePlayerEnterGateResponse::MergeFrom(const CMessagePlayerEnterGateResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_commhandle(from.commhandle());
    }
    if (from._has_bit(1)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(2)) {
      set_logintoken(from.logintoken());
    }
    if (from._has_bit(3)) {
      set_errorcode(from.errorcode());
    }
    if (from._has_bit(4)) {
      set_worldid(from.worldid());
    }
    if (from._has_bit(5)) {
      set_otherclient(from.otherclient());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePlayerEnterGateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerEnterGateResponse::CopyFrom(const CMessagePlayerEnterGateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerEnterGateResponse::Swap(CMessagePlayerEnterGateResponse* other) {
  if (other != this) {
    std::swap(commhandle_, other->commhandle_);
    std::swap(accountid_, other->accountid_);
    std::swap(logintoken_, other->logintoken_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(worldid_, other->worldid_);
    std::swap(otherclient_, other->otherclient_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePlayerEnterGateResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePlayerEnterGateResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePlayerEnterGateResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerEnterGateResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessagePlayerLeaveGateNotice::kAccountIDFieldNumber;
const int CMessagePlayerLeaveGateNotice::kReasonFieldNumber;
#endif  // !_MSC_VER

CMessagePlayerLeaveGateNotice::CMessagePlayerLeaveGateNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePlayerLeaveGateNotice::InitAsDefaultInstance() {}

CMessagePlayerLeaveGateNotice::CMessagePlayerLeaveGateNotice(const CMessagePlayerLeaveGateNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePlayerLeaveGateNotice::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePlayerLeaveGateNotice::~CMessagePlayerLeaveGateNotice() {
  SharedDtor();
}

void CMessagePlayerLeaveGateNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessagePlayerLeaveGateNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerLeaveGateNotice_descriptor_;
}

const CMessagePlayerLeaveGateNotice& CMessagePlayerLeaveGateNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePlayerLeaveGateNotice* CMessagePlayerLeaveGateNotice::default_instance_ = NULL;

CMessagePlayerLeaveGateNotice* CMessagePlayerLeaveGateNotice::New() const {
  return new CMessagePlayerLeaveGateNotice;
}

void CMessagePlayerLeaveGateNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
    reason_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePlayerLeaveGateNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 AccountID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Reason;
        break;
      }
      
      // optional uint32 Reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Reason:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &reason_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePlayerLeaveGateNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePlayerLeaveGateNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 AccountID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->accountid(), output);
  }
  
  // optional uint32 Reason = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->reason(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePlayerLeaveGateNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 AccountID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->accountid(), target);
  }
  
  // optional uint32 Reason = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->reason(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePlayerLeaveGateNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AccountID = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 Reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->reason());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePlayerLeaveGateNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePlayerLeaveGateNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePlayerLeaveGateNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePlayerLeaveGateNotice::MergeFrom(const CMessagePlayerLeaveGateNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(1)) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePlayerLeaveGateNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerLeaveGateNotice::CopyFrom(const CMessagePlayerLeaveGateNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerLeaveGateNotice::Swap(CMessagePlayerLeaveGateNotice* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePlayerLeaveGateNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePlayerLeaveGateNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePlayerLeaveGateNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerLeaveGateNotice_reflection_;
}

// ===================================================================

const ::std::string CMessageServerInfoNotice::_default_address_;
const ::std::string CMessageServerInfoNotice::_default_servername_;
#ifndef _MSC_VER
const int CMessageServerInfoNotice::kAddressFieldNumber;
const int CMessageServerInfoNotice::kServerNameFieldNumber;
const int CMessageServerInfoNotice::kServerVersionFieldNumber;
const int CMessageServerInfoNotice::kTemplateVersionFieldNumber;
const int CMessageServerInfoNotice::kTaskVersionFieldNumber;
const int CMessageServerInfoNotice::kServerIDFieldNumber;
const int CMessageServerInfoNotice::kLaunchModeFieldNumber;
const int CMessageServerInfoNotice::kPlayerCapacityFieldNumber;
#endif  // !_MSC_VER

CMessageServerInfoNotice::CMessageServerInfoNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageServerInfoNotice::InitAsDefaultInstance() {}

CMessageServerInfoNotice::CMessageServerInfoNotice(const CMessageServerInfoNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageServerInfoNotice::SharedCtor() {
  _cached_size_ = 0;
  address_ = const_cast< ::std::string*>(&_default_address_);
  servername_ = const_cast< ::std::string*>(&_default_servername_);
  serverversion_ = 0u;
  templateversion_ = 0u;
  taskversion_ = 0u;
  serverid_ = 0u;
  launchmode_ = 0u;
  playercapacity_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageServerInfoNotice::~CMessageServerInfoNotice() {
  SharedDtor();
}

void CMessageServerInfoNotice::SharedDtor() {
  if (address_ != &_default_address_) {
    delete address_;
  }
  if (servername_ != &_default_servername_) {
    delete servername_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageServerInfoNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageServerInfoNotice_descriptor_;
}

const CMessageServerInfoNotice& CMessageServerInfoNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageServerInfoNotice* CMessageServerInfoNotice::default_instance_ = NULL;

CMessageServerInfoNotice* CMessageServerInfoNotice::New() const {
  return new CMessageServerInfoNotice;
}

void CMessageServerInfoNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (address_ != &_default_address_) {
        address_->clear();
      }
    }
    if (_has_bit(1)) {
      if (servername_ != &_default_servername_) {
        servername_->clear();
      }
    }
    serverversion_ = 0u;
    templateversion_ = 0u;
    taskversion_ = 0u;
    serverid_ = 0u;
    launchmode_ = 0u;
    playercapacity_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageServerInfoNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string Address = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_address()));
        if (input->ExpectTag(18)) goto parse_ServerName;
        break;
      }
      
      // optional string ServerName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ServerName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_servername()));
        if (input->ExpectTag(24)) goto parse_ServerVersion;
        break;
      }
      
      // optional uint32 ServerVersion = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ServerVersion:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &serverversion_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_TemplateVersion;
        break;
      }
      
      // optional uint32 TemplateVersion = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TemplateVersion:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &templateversion_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_TaskVersion;
        break;
      }
      
      // optional uint32 TaskVersion = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TaskVersion:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskversion_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_ServerID;
        break;
      }
      
      // optional uint32 ServerID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ServerID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &serverid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_LaunchMode;
        break;
      }
      
      // optional uint32 LaunchMode = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LaunchMode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &launchmode_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_PlayerCapacity;
        break;
      }
      
      // optional uint32 PlayerCapacity = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PlayerCapacity:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playercapacity_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageServerInfoNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageServerInfoNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string Address = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->address(), output);
  }
  
  // optional string ServerName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->servername(), output);
  }
  
  // optional uint32 ServerVersion = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->serverversion(), output);
  }
  
  // optional uint32 TemplateVersion = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->templateversion(), output);
  }
  
  // optional uint32 TaskVersion = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->taskversion(), output);
  }
  
  // optional uint32 ServerID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->serverid(), output);
  }
  
  // optional uint32 LaunchMode = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->launchmode(), output);
  }
  
  // optional uint32 PlayerCapacity = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->playercapacity(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageServerInfoNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Address = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->address(), target);
  }
  
  // optional string ServerName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->servername(), target);
  }
  
  // optional uint32 ServerVersion = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->serverversion(), target);
  }
  
  // optional uint32 TemplateVersion = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->templateversion(), target);
  }
  
  // optional uint32 TaskVersion = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->taskversion(), target);
  }
  
  // optional uint32 ServerID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->serverid(), target);
  }
  
  // optional uint32 LaunchMode = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->launchmode(), target);
  }
  
  // optional uint32 PlayerCapacity = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->playercapacity(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageServerInfoNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Address = 1;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->address());
    }
    
    // optional string ServerName = 2;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->servername());
    }
    
    // optional uint32 ServerVersion = 3;
    if (has_serverversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->serverversion());
    }
    
    // optional uint32 TemplateVersion = 4;
    if (has_templateversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->templateversion());
    }
    
    // optional uint32 TaskVersion = 5;
    if (has_taskversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskversion());
    }
    
    // optional uint32 ServerID = 6;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->serverid());
    }
    
    // optional uint32 LaunchMode = 7;
    if (has_launchmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->launchmode());
    }
    
    // optional uint32 PlayerCapacity = 8;
    if (has_playercapacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playercapacity());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageServerInfoNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageServerInfoNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageServerInfoNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageServerInfoNotice::MergeFrom(const CMessageServerInfoNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_address(from.address());
    }
    if (from._has_bit(1)) {
      set_servername(from.servername());
    }
    if (from._has_bit(2)) {
      set_serverversion(from.serverversion());
    }
    if (from._has_bit(3)) {
      set_templateversion(from.templateversion());
    }
    if (from._has_bit(4)) {
      set_taskversion(from.taskversion());
    }
    if (from._has_bit(5)) {
      set_serverid(from.serverid());
    }
    if (from._has_bit(6)) {
      set_launchmode(from.launchmode());
    }
    if (from._has_bit(7)) {
      set_playercapacity(from.playercapacity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageServerInfoNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageServerInfoNotice::CopyFrom(const CMessageServerInfoNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageServerInfoNotice::Swap(CMessageServerInfoNotice* other) {
  if (other != this) {
    std::swap(address_, other->address_);
    std::swap(servername_, other->servername_);
    std::swap(serverversion_, other->serverversion_);
    std::swap(templateversion_, other->templateversion_);
    std::swap(taskversion_, other->taskversion_);
    std::swap(serverid_, other->serverid_);
    std::swap(launchmode_, other->launchmode_);
    std::swap(playercapacity_, other->playercapacity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageServerInfoNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageServerInfoNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageServerInfoNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageServerInfoNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageServerInfoResponse::kWorldIDFieldNumber;
const int CMessageServerInfoResponse::kLineIDFieldNumber;
const int CMessageServerInfoResponse::kGameIDFieldNumber;
#endif  // !_MSC_VER

CMessageServerInfoResponse::CMessageServerInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageServerInfoResponse::InitAsDefaultInstance() {}

CMessageServerInfoResponse::CMessageServerInfoResponse(const CMessageServerInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageServerInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  worldid_ = 0u;
  lineid_ = 0u;
  gameid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageServerInfoResponse::~CMessageServerInfoResponse() {
  SharedDtor();
}

void CMessageServerInfoResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageServerInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageServerInfoResponse_descriptor_;
}

const CMessageServerInfoResponse& CMessageServerInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageServerInfoResponse* CMessageServerInfoResponse::default_instance_ = NULL;

CMessageServerInfoResponse* CMessageServerInfoResponse::New() const {
  return new CMessageServerInfoResponse;
}

void CMessageServerInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    worldid_ = 0u;
    lineid_ = 0u;
    gameid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageServerInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 WorldID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &worldid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_LineID;
        break;
      }
      
      // optional uint32 LineID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lineid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_GameID;
        break;
      }
      
      // optional uint32 GameID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GameID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &gameid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageServerInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageServerInfoResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 WorldID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->worldid(), output);
  }
  
  // optional uint32 LineID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->lineid(), output);
  }
  
  // optional uint32 GameID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->gameid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageServerInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 WorldID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->worldid(), target);
  }
  
  // optional uint32 LineID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->lineid(), target);
  }
  
  // optional uint32 GameID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->gameid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageServerInfoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 WorldID = 1;
    if (has_worldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->worldid());
    }
    
    // optional uint32 LineID = 2;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lineid());
    }
    
    // optional uint32 GameID = 3;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->gameid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageServerInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageServerInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageServerInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageServerInfoResponse::MergeFrom(const CMessageServerInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_worldid(from.worldid());
    }
    if (from._has_bit(1)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(2)) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageServerInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageServerInfoResponse::CopyFrom(const CMessageServerInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageServerInfoResponse::Swap(CMessageServerInfoResponse* other) {
  if (other != this) {
    std::swap(worldid_, other->worldid_);
    std::swap(lineid_, other->lineid_);
    std::swap(gameid_, other->gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageServerInfoResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageServerInfoResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageServerInfoResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageServerInfoResponse_reflection_;
}

// ===================================================================

const ::std::string CMessagePlayerEnterMapNotice::_default_familyname_;
const ::std::string CMessagePlayerEnterMapNotice::_default_corpsname_;
const ::std::string CMessagePlayerEnterMapNotice::_default_unionname_;
const ::std::string CMessagePlayerEnterMapNotice::_default_password_;
#ifndef _MSC_VER
const int CMessagePlayerEnterMapNotice::kLoginTokenFieldNumber;
const int CMessagePlayerEnterMapNotice::kLineIDFieldNumber;
const int CMessagePlayerEnterMapNotice::kMapIDFieldNumber;
const int CMessagePlayerEnterMapNotice::kPosXFieldNumber;
const int CMessagePlayerEnterMapNotice::kPosYFieldNumber;
const int CMessagePlayerEnterMapNotice::kCharIDFieldNumber;
const int CMessagePlayerEnterMapNotice::kAccountIDFieldNumber;
const int CMessagePlayerEnterMapNotice::kAdultFlagFieldNumber;
const int CMessagePlayerEnterMapNotice::kValidSecondsFieldNumber;
const int CMessagePlayerEnterMapNotice::kFamilyIDFieldNumber;
const int CMessagePlayerEnterMapNotice::kFamilyNameFieldNumber;
const int CMessagePlayerEnterMapNotice::kIsFamilyHeaderFieldNumber;
const int CMessagePlayerEnterMapNotice::kIfHasAppliesFieldNumber;
const int CMessagePlayerEnterMapNotice::kCorpsIDFieldNumber;
const int CMessagePlayerEnterMapNotice::kCorpsNameFieldNumber;
const int CMessagePlayerEnterMapNotice::kIsCorperHeaderFieldNumber;
const int CMessagePlayerEnterMapNotice::kIfHasCorpsApplyFieldNumber;
const int CMessagePlayerEnterMapNotice::kIfTracedPlayerFieldNumber;
const int CMessagePlayerEnterMapNotice::kKeyFieldNumber;
const int CMessagePlayerEnterMapNotice::kFamilyHeaderIDFieldNumber;
const int CMessagePlayerEnterMapNotice::kCorpsHeaderIDFieldNumber;
const int CMessagePlayerEnterMapNotice::kFamilyPostFieldNumber;
const int CMessagePlayerEnterMapNotice::kCorpsPostFieldNumber;
const int CMessagePlayerEnterMapNotice::kFamilyContributeFieldNumber;
const int CMessagePlayerEnterMapNotice::kCorpsContributeFieldNumber;
const int CMessagePlayerEnterMapNotice::kFamilyMoneyFieldNumber;
const int CMessagePlayerEnterMapNotice::kCorpsMoneyFieldNumber;
const int CMessagePlayerEnterMapNotice::kUnionIDFieldNumber;
const int CMessagePlayerEnterMapNotice::kUnionNameFieldNumber;
const int CMessagePlayerEnterMapNotice::kHeadCorpsIDFieldNumber;
const int CMessagePlayerEnterMapNotice::kCountryIDFieldNumber;
const int CMessagePlayerEnterMapNotice::kOfficialIDFieldNumber;
const int CMessagePlayerEnterMapNotice::kKingIDFieldNumber;
const int CMessagePlayerEnterMapNotice::kPasswordFieldNumber;
const int CMessagePlayerEnterMapNotice::kProtectTimeFieldNumber;
const int CMessagePlayerEnterMapNotice::kPasswordStatusFieldNumber;
const int CMessagePlayerEnterMapNotice::kProtectTimeLengthFieldNumber;
const int CMessagePlayerEnterMapNotice::kRoleWorldIDFieldNumber;
#endif  // !_MSC_VER

CMessagePlayerEnterMapNotice::CMessagePlayerEnterMapNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePlayerEnterMapNotice::InitAsDefaultInstance() {}

CMessagePlayerEnterMapNotice::CMessagePlayerEnterMapNotice(const CMessagePlayerEnterMapNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePlayerEnterMapNotice::SharedCtor() {
  _cached_size_ = 0;
  logintoken_ = 0u;
  lineid_ = 0u;
  mapid_ = 0u;
  posx_ = 0u;
  posy_ = 0u;
  charid_ = 0u;
  accountid_ = 0u;
  adultflag_ = 0u;
  validseconds_ = 0;
  familyid_ = 0u;
  familyname_ = const_cast< ::std::string*>(&_default_familyname_);
  isfamilyheader_ = 0u;
  ifhasapplies_ = 0u;
  corpsid_ = 0u;
  corpsname_ = const_cast< ::std::string*>(&_default_corpsname_);
  iscorperheader_ = 0u;
  ifhascorpsapply_ = 0u;
  iftracedplayer_ = 0u;
  key_ = GOOGLE_ULONGLONG(0);
  familyheaderid_ = 0u;
  corpsheaderid_ = 0u;
  familypost_ = 0u;
  corpspost_ = 0u;
  familycontribute_ = 0u;
  corpscontribute_ = 0u;
  familymoney_ = 0u;
  corpsmoney_ = 0u;
  unionid_ = 0u;
  unionname_ = const_cast< ::std::string*>(&_default_unionname_);
  headcorpsid_ = 0u;
  countryid_ = 0u;
  officialid_ = 0u;
  kingid_ = 0u;
  password_ = const_cast< ::std::string*>(&_default_password_);
  protecttime_ = 0u;
  passwordstatus_ = 0u;
  protecttimelength_ = 0u;
  roleworldid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePlayerEnterMapNotice::~CMessagePlayerEnterMapNotice() {
  SharedDtor();
}

void CMessagePlayerEnterMapNotice::SharedDtor() {
  if (familyname_ != &_default_familyname_) {
    delete familyname_;
  }
  if (corpsname_ != &_default_corpsname_) {
    delete corpsname_;
  }
  if (unionname_ != &_default_unionname_) {
    delete unionname_;
  }
  if (password_ != &_default_password_) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessagePlayerEnterMapNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerEnterMapNotice_descriptor_;
}

const CMessagePlayerEnterMapNotice& CMessagePlayerEnterMapNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePlayerEnterMapNotice* CMessagePlayerEnterMapNotice::default_instance_ = NULL;

CMessagePlayerEnterMapNotice* CMessagePlayerEnterMapNotice::New() const {
  return new CMessagePlayerEnterMapNotice;
}

void CMessagePlayerEnterMapNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    logintoken_ = 0u;
    lineid_ = 0u;
    mapid_ = 0u;
    posx_ = 0u;
    posy_ = 0u;
    charid_ = 0u;
    accountid_ = 0u;
    adultflag_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    validseconds_ = 0;
    familyid_ = 0u;
    if (_has_bit(10)) {
      if (familyname_ != &_default_familyname_) {
        familyname_->clear();
      }
    }
    isfamilyheader_ = 0u;
    ifhasapplies_ = 0u;
    corpsid_ = 0u;
    if (_has_bit(14)) {
      if (corpsname_ != &_default_corpsname_) {
        corpsname_->clear();
      }
    }
    iscorperheader_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    ifhascorpsapply_ = 0u;
    iftracedplayer_ = 0u;
    key_ = GOOGLE_ULONGLONG(0);
    familyheaderid_ = 0u;
    corpsheaderid_ = 0u;
    familypost_ = 0u;
    corpspost_ = 0u;
    familycontribute_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    corpscontribute_ = 0u;
    familymoney_ = 0u;
    corpsmoney_ = 0u;
    unionid_ = 0u;
    if (_has_bit(28)) {
      if (unionname_ != &_default_unionname_) {
        unionname_->clear();
      }
    }
    headcorpsid_ = 0u;
    countryid_ = 0u;
    officialid_ = 0u;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    kingid_ = 0u;
    if (_has_bit(33)) {
      if (password_ != &_default_password_) {
        password_->clear();
      }
    }
    protecttime_ = 0u;
    passwordstatus_ = 0u;
    protecttimelength_ = 0u;
    roleworldid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePlayerEnterMapNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 LoginToken = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &logintoken_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_LineID;
        break;
      }
      
      // optional uint32 LineID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lineid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_PosX;
        break;
      }
      
      // optional uint32 PosX = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosX:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posx_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_PosY;
        break;
      }
      
      // optional uint32 PosY = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posy_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_AccountID;
        break;
      }
      
      // optional uint32 AccountID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AccountID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_AdultFlag;
        break;
      }
      
      // optional uint32 AdultFlag = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AdultFlag:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &adultflag_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_ValidSeconds;
        break;
      }
      
      // optional int32 ValidSeconds = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ValidSeconds:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &validseconds_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_FamilyID;
        break;
      }
      
      // optional uint32 FamilyID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(9);
        if (input->ExpectTag(90)) goto parse_FamilyName;
        break;
      }
      
      // optional string FamilyName = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FamilyName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_familyname()));
        if (input->ExpectTag(96)) goto parse_IsFamilyHeader;
        break;
      }
      
      // optional uint32 IsFamilyHeader = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IsFamilyHeader:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &isfamilyheader_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_IfHasApplies;
        break;
      }
      
      // optional uint32 IfHasApplies = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IfHasApplies:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ifhasapplies_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_CorpsID;
        break;
      }
      
      // optional uint32 CorpsID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(13);
        if (input->ExpectTag(122)) goto parse_CorpsName;
        break;
      }
      
      // optional string CorpsName = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_corpsname()));
        if (input->ExpectTag(128)) goto parse_IsCorperHeader;
        break;
      }
      
      // optional uint32 IsCorperHeader = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IsCorperHeader:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &iscorperheader_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_IfHasCorpsApply;
        break;
      }
      
      // optional uint32 IfHasCorpsApply = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IfHasCorpsApply:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ifhascorpsapply_));
        _set_bit(16);
        if (input->ExpectTag(144)) goto parse_IfTracedPlayer;
        break;
      }
      
      // optional uint32 IfTracedPlayer = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IfTracedPlayer:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &iftracedplayer_));
        _set_bit(17);
        if (input->ExpectTag(152)) goto parse_Key;
        break;
      }
      
      // optional uint64 Key = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Key:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &key_));
        _set_bit(18);
        if (input->ExpectTag(160)) goto parse_FamilyHeaderID;
        break;
      }
      
      // optional uint32 FamilyHeaderID = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyHeaderID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyheaderid_));
        _set_bit(19);
        if (input->ExpectTag(168)) goto parse_CorpsHeaderID;
        break;
      }
      
      // optional uint32 CorpsHeaderID = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsHeaderID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsheaderid_));
        _set_bit(20);
        if (input->ExpectTag(176)) goto parse_FamilyPost;
        break;
      }
      
      // optional uint32 FamilyPost = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyPost:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familypost_));
        _set_bit(21);
        if (input->ExpectTag(184)) goto parse_CorpsPost;
        break;
      }
      
      // optional uint32 CorpsPost = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsPost:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpspost_));
        _set_bit(22);
        if (input->ExpectTag(192)) goto parse_FamilyContribute;
        break;
      }
      
      // optional uint32 FamilyContribute = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyContribute:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familycontribute_));
        _set_bit(23);
        if (input->ExpectTag(200)) goto parse_CorpsContribute;
        break;
      }
      
      // optional uint32 CorpsContribute = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsContribute:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpscontribute_));
        _set_bit(24);
        if (input->ExpectTag(208)) goto parse_FamilyMoney;
        break;
      }
      
      // optional uint32 FamilyMoney = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familymoney_));
        _set_bit(25);
        if (input->ExpectTag(216)) goto parse_CorpsMoney;
        break;
      }
      
      // optional uint32 CorpsMoney = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsmoney_));
        _set_bit(26);
        if (input->ExpectTag(224)) goto parse_UnionID;
        break;
      }
      
      // optional uint32 UnionID = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UnionID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &unionid_));
        _set_bit(27);
        if (input->ExpectTag(234)) goto parse_UnionName;
        break;
      }
      
      // optional string UnionName = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_UnionName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_unionname()));
        if (input->ExpectTag(240)) goto parse_HeadCorpsID;
        break;
      }
      
      // optional uint32 HeadCorpsID = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HeadCorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &headcorpsid_));
        _set_bit(29);
        if (input->ExpectTag(248)) goto parse_CountryID;
        break;
      }
      
      // optional uint32 CountryID = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CountryID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &countryid_));
        _set_bit(30);
        if (input->ExpectTag(256)) goto parse_OfficialID;
        break;
      }
      
      // optional uint32 OfficialID = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OfficialID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &officialid_));
        _set_bit(31);
        if (input->ExpectTag(264)) goto parse_KingID;
        break;
      }
      
      // optional uint32 KingID = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_KingID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &kingid_));
        _set_bit(32);
        if (input->ExpectTag(274)) goto parse_Password;
        break;
      }
      
      // optional string Password = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Password:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_password()));
        if (input->ExpectTag(280)) goto parse_ProtectTime;
        break;
      }
      
      // optional uint32 ProtectTime = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ProtectTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &protecttime_));
        _set_bit(34);
        if (input->ExpectTag(288)) goto parse_PasswordStatus;
        break;
      }
      
      // optional uint32 PasswordStatus = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PasswordStatus:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &passwordstatus_));
        _set_bit(35);
        if (input->ExpectTag(296)) goto parse_ProtectTimeLength;
        break;
      }
      
      // optional uint32 ProtectTimeLength = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ProtectTimeLength:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &protecttimelength_));
        _set_bit(36);
        if (input->ExpectTag(304)) goto parse_RoleWorldID;
        break;
      }
      
      // optional uint32 RoleWorldID = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleWorldID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleworldid_));
        _set_bit(37);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePlayerEnterMapNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePlayerEnterMapNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 LoginToken = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->logintoken(), output);
  }
  
  // optional uint32 LineID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->lineid(), output);
  }
  
  // optional uint32 MapID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->mapid(), output);
  }
  
  // optional uint32 PosX = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->posx(), output);
  }
  
  // optional uint32 PosY = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->posy(), output);
  }
  
  // optional uint32 CharID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->charid(), output);
  }
  
  // optional uint32 AccountID = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->accountid(), output);
  }
  
  // optional uint32 AdultFlag = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->adultflag(), output);
  }
  
  // optional int32 ValidSeconds = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(9, this->validseconds(), output);
  }
  
  // optional uint32 FamilyID = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->familyid(), output);
  }
  
  // optional string FamilyName = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteString(11, this->familyname(), output);
  }
  
  // optional uint32 IsFamilyHeader = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->isfamilyheader(), output);
  }
  
  // optional uint32 IfHasApplies = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->ifhasapplies(), output);
  }
  
  // optional uint32 CorpsID = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->corpsid(), output);
  }
  
  // optional string CorpsName = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteString(15, this->corpsname(), output);
  }
  
  // optional uint32 IsCorperHeader = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(16, this->iscorperheader(), output);
  }
  
  // optional uint32 IfHasCorpsApply = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(17, this->ifhascorpsapply(), output);
  }
  
  // optional uint32 IfTracedPlayer = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(18, this->iftracedplayer(), output);
  }
  
  // optional uint64 Key = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(19, this->key(), output);
  }
  
  // optional uint32 FamilyHeaderID = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(20, this->familyheaderid(), output);
  }
  
  // optional uint32 CorpsHeaderID = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(21, this->corpsheaderid(), output);
  }
  
  // optional uint32 FamilyPost = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(22, this->familypost(), output);
  }
  
  // optional uint32 CorpsPost = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(23, this->corpspost(), output);
  }
  
  // optional uint32 FamilyContribute = 24;
  if (_has_bit(23)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(24, this->familycontribute(), output);
  }
  
  // optional uint32 CorpsContribute = 25;
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(25, this->corpscontribute(), output);
  }
  
  // optional uint32 FamilyMoney = 26;
  if (_has_bit(25)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(26, this->familymoney(), output);
  }
  
  // optional uint32 CorpsMoney = 27;
  if (_has_bit(26)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(27, this->corpsmoney(), output);
  }
  
  // optional uint32 UnionID = 28;
  if (_has_bit(27)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(28, this->unionid(), output);
  }
  
  // optional string UnionName = 29;
  if (_has_bit(28)) {
    ::google::protobuf::internal::WireFormat::WriteString(29, this->unionname(), output);
  }
  
  // optional uint32 HeadCorpsID = 30;
  if (_has_bit(29)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(30, this->headcorpsid(), output);
  }
  
  // optional uint32 CountryID = 31;
  if (_has_bit(30)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(31, this->countryid(), output);
  }
  
  // optional uint32 OfficialID = 32;
  if (_has_bit(31)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(32, this->officialid(), output);
  }
  
  // optional uint32 KingID = 33;
  if (_has_bit(32)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(33, this->kingid(), output);
  }
  
  // optional string Password = 34;
  if (_has_bit(33)) {
    ::google::protobuf::internal::WireFormat::WriteString(34, this->password(), output);
  }
  
  // optional uint32 ProtectTime = 35;
  if (_has_bit(34)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(35, this->protecttime(), output);
  }
  
  // optional uint32 PasswordStatus = 36;
  if (_has_bit(35)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(36, this->passwordstatus(), output);
  }
  
  // optional uint32 ProtectTimeLength = 37;
  if (_has_bit(36)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(37, this->protecttimelength(), output);
  }
  
  // optional uint32 RoleWorldID = 38;
  if (_has_bit(37)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(38, this->roleworldid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePlayerEnterMapNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 LoginToken = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->logintoken(), target);
  }
  
  // optional uint32 LineID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->lineid(), target);
  }
  
  // optional uint32 MapID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->mapid(), target);
  }
  
  // optional uint32 PosX = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->posx(), target);
  }
  
  // optional uint32 PosY = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->posy(), target);
  }
  
  // optional uint32 CharID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->charid(), target);
  }
  
  // optional uint32 AccountID = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->accountid(), target);
  }
  
  // optional uint32 AdultFlag = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->adultflag(), target);
  }
  
  // optional int32 ValidSeconds = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(9, this->validseconds(), target);
  }
  
  // optional uint32 FamilyID = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->familyid(), target);
  }
  
  // optional string FamilyName = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(11, this->familyname(), target);
  }
  
  // optional uint32 IsFamilyHeader = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->isfamilyheader(), target);
  }
  
  // optional uint32 IfHasApplies = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->ifhasapplies(), target);
  }
  
  // optional uint32 CorpsID = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->corpsid(), target);
  }
  
  // optional string CorpsName = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(15, this->corpsname(), target);
  }
  
  // optional uint32 IsCorperHeader = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(16, this->iscorperheader(), target);
  }
  
  // optional uint32 IfHasCorpsApply = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(17, this->ifhascorpsapply(), target);
  }
  
  // optional uint32 IfTracedPlayer = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(18, this->iftracedplayer(), target);
  }
  
  // optional uint64 Key = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(19, this->key(), target);
  }
  
  // optional uint32 FamilyHeaderID = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(20, this->familyheaderid(), target);
  }
  
  // optional uint32 CorpsHeaderID = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(21, this->corpsheaderid(), target);
  }
  
  // optional uint32 FamilyPost = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(22, this->familypost(), target);
  }
  
  // optional uint32 CorpsPost = 23;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(23, this->corpspost(), target);
  }
  
  // optional uint32 FamilyContribute = 24;
  if (_has_bit(23)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(24, this->familycontribute(), target);
  }
  
  // optional uint32 CorpsContribute = 25;
  if (_has_bit(24)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(25, this->corpscontribute(), target);
  }
  
  // optional uint32 FamilyMoney = 26;
  if (_has_bit(25)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(26, this->familymoney(), target);
  }
  
  // optional uint32 CorpsMoney = 27;
  if (_has_bit(26)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(27, this->corpsmoney(), target);
  }
  
  // optional uint32 UnionID = 28;
  if (_has_bit(27)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(28, this->unionid(), target);
  }
  
  // optional string UnionName = 29;
  if (_has_bit(28)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(29, this->unionname(), target);
  }
  
  // optional uint32 HeadCorpsID = 30;
  if (_has_bit(29)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(30, this->headcorpsid(), target);
  }
  
  // optional uint32 CountryID = 31;
  if (_has_bit(30)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(31, this->countryid(), target);
  }
  
  // optional uint32 OfficialID = 32;
  if (_has_bit(31)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(32, this->officialid(), target);
  }
  
  // optional uint32 KingID = 33;
  if (_has_bit(32)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(33, this->kingid(), target);
  }
  
  // optional string Password = 34;
  if (_has_bit(33)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(34, this->password(), target);
  }
  
  // optional uint32 ProtectTime = 35;
  if (_has_bit(34)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(35, this->protecttime(), target);
  }
  
  // optional uint32 PasswordStatus = 36;
  if (_has_bit(35)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(36, this->passwordstatus(), target);
  }
  
  // optional uint32 ProtectTimeLength = 37;
  if (_has_bit(36)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(37, this->protecttimelength(), target);
  }
  
  // optional uint32 RoleWorldID = 38;
  if (_has_bit(37)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(38, this->roleworldid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePlayerEnterMapNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 LoginToken = 1;
    if (has_logintoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->logintoken());
    }
    
    // optional uint32 LineID = 2;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lineid());
    }
    
    // optional uint32 MapID = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 PosX = 4;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posx());
    }
    
    // optional uint32 PosY = 5;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posy());
    }
    
    // optional uint32 CharID = 6;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 AccountID = 7;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 AdultFlag = 8;
    if (has_adultflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->adultflag());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 ValidSeconds = 9;
    if (has_validseconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->validseconds());
    }
    
    // optional uint32 FamilyID = 10;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
    // optional string FamilyName = 11;
    if (has_familyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->familyname());
    }
    
    // optional uint32 IsFamilyHeader = 12;
    if (has_isfamilyheader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->isfamilyheader());
    }
    
    // optional uint32 IfHasApplies = 13;
    if (has_ifhasapplies()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ifhasapplies());
    }
    
    // optional uint32 CorpsID = 14;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
    // optional string CorpsName = 15;
    if (has_corpsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->corpsname());
    }
    
    // optional uint32 IsCorperHeader = 16;
    if (has_iscorperheader()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->iscorperheader());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 IfHasCorpsApply = 17;
    if (has_ifhascorpsapply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ifhascorpsapply());
    }
    
    // optional uint32 IfTracedPlayer = 18;
    if (has_iftracedplayer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->iftracedplayer());
    }
    
    // optional uint64 Key = 19;
    if (has_key()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->key());
    }
    
    // optional uint32 FamilyHeaderID = 20;
    if (has_familyheaderid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyheaderid());
    }
    
    // optional uint32 CorpsHeaderID = 21;
    if (has_corpsheaderid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsheaderid());
    }
    
    // optional uint32 FamilyPost = 22;
    if (has_familypost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familypost());
    }
    
    // optional uint32 CorpsPost = 23;
    if (has_corpspost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpspost());
    }
    
    // optional uint32 FamilyContribute = 24;
    if (has_familycontribute()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familycontribute());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 CorpsContribute = 25;
    if (has_corpscontribute()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpscontribute());
    }
    
    // optional uint32 FamilyMoney = 26;
    if (has_familymoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familymoney());
    }
    
    // optional uint32 CorpsMoney = 27;
    if (has_corpsmoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsmoney());
    }
    
    // optional uint32 UnionID = 28;
    if (has_unionid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->unionid());
    }
    
    // optional string UnionName = 29;
    if (has_unionname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::StringSize(this->unionname());
    }
    
    // optional uint32 HeadCorpsID = 30;
    if (has_headcorpsid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->headcorpsid());
    }
    
    // optional uint32 CountryID = 31;
    if (has_countryid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->countryid());
    }
    
    // optional uint32 OfficialID = 32;
    if (has_officialid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->officialid());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 KingID = 33;
    if (has_kingid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->kingid());
    }
    
    // optional string Password = 34;
    if (has_password()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::StringSize(this->password());
    }
    
    // optional uint32 ProtectTime = 35;
    if (has_protecttime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->protecttime());
    }
    
    // optional uint32 PasswordStatus = 36;
    if (has_passwordstatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->passwordstatus());
    }
    
    // optional uint32 ProtectTimeLength = 37;
    if (has_protecttimelength()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->protecttimelength());
    }
    
    // optional uint32 RoleWorldID = 38;
    if (has_roleworldid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleworldid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePlayerEnterMapNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePlayerEnterMapNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePlayerEnterMapNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePlayerEnterMapNotice::MergeFrom(const CMessagePlayerEnterMapNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_logintoken(from.logintoken());
    }
    if (from._has_bit(1)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(2)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(3)) {
      set_posx(from.posx());
    }
    if (from._has_bit(4)) {
      set_posy(from.posy());
    }
    if (from._has_bit(5)) {
      set_charid(from.charid());
    }
    if (from._has_bit(6)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(7)) {
      set_adultflag(from.adultflag());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_validseconds(from.validseconds());
    }
    if (from._has_bit(9)) {
      set_familyid(from.familyid());
    }
    if (from._has_bit(10)) {
      set_familyname(from.familyname());
    }
    if (from._has_bit(11)) {
      set_isfamilyheader(from.isfamilyheader());
    }
    if (from._has_bit(12)) {
      set_ifhasapplies(from.ifhasapplies());
    }
    if (from._has_bit(13)) {
      set_corpsid(from.corpsid());
    }
    if (from._has_bit(14)) {
      set_corpsname(from.corpsname());
    }
    if (from._has_bit(15)) {
      set_iscorperheader(from.iscorperheader());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_ifhascorpsapply(from.ifhascorpsapply());
    }
    if (from._has_bit(17)) {
      set_iftracedplayer(from.iftracedplayer());
    }
    if (from._has_bit(18)) {
      set_key(from.key());
    }
    if (from._has_bit(19)) {
      set_familyheaderid(from.familyheaderid());
    }
    if (from._has_bit(20)) {
      set_corpsheaderid(from.corpsheaderid());
    }
    if (from._has_bit(21)) {
      set_familypost(from.familypost());
    }
    if (from._has_bit(22)) {
      set_corpspost(from.corpspost());
    }
    if (from._has_bit(23)) {
      set_familycontribute(from.familycontribute());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from._has_bit(24)) {
      set_corpscontribute(from.corpscontribute());
    }
    if (from._has_bit(25)) {
      set_familymoney(from.familymoney());
    }
    if (from._has_bit(26)) {
      set_corpsmoney(from.corpsmoney());
    }
    if (from._has_bit(27)) {
      set_unionid(from.unionid());
    }
    if (from._has_bit(28)) {
      set_unionname(from.unionname());
    }
    if (from._has_bit(29)) {
      set_headcorpsid(from.headcorpsid());
    }
    if (from._has_bit(30)) {
      set_countryid(from.countryid());
    }
    if (from._has_bit(31)) {
      set_officialid(from.officialid());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from._has_bit(32)) {
      set_kingid(from.kingid());
    }
    if (from._has_bit(33)) {
      set_password(from.password());
    }
    if (from._has_bit(34)) {
      set_protecttime(from.protecttime());
    }
    if (from._has_bit(35)) {
      set_passwordstatus(from.passwordstatus());
    }
    if (from._has_bit(36)) {
      set_protecttimelength(from.protecttimelength());
    }
    if (from._has_bit(37)) {
      set_roleworldid(from.roleworldid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePlayerEnterMapNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerEnterMapNotice::CopyFrom(const CMessagePlayerEnterMapNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerEnterMapNotice::Swap(CMessagePlayerEnterMapNotice* other) {
  if (other != this) {
    std::swap(logintoken_, other->logintoken_);
    std::swap(lineid_, other->lineid_);
    std::swap(mapid_, other->mapid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(charid_, other->charid_);
    std::swap(accountid_, other->accountid_);
    std::swap(adultflag_, other->adultflag_);
    std::swap(validseconds_, other->validseconds_);
    std::swap(familyid_, other->familyid_);
    std::swap(familyname_, other->familyname_);
    std::swap(isfamilyheader_, other->isfamilyheader_);
    std::swap(ifhasapplies_, other->ifhasapplies_);
    std::swap(corpsid_, other->corpsid_);
    std::swap(corpsname_, other->corpsname_);
    std::swap(iscorperheader_, other->iscorperheader_);
    std::swap(ifhascorpsapply_, other->ifhascorpsapply_);
    std::swap(iftracedplayer_, other->iftracedplayer_);
    std::swap(key_, other->key_);
    std::swap(familyheaderid_, other->familyheaderid_);
    std::swap(corpsheaderid_, other->corpsheaderid_);
    std::swap(familypost_, other->familypost_);
    std::swap(corpspost_, other->corpspost_);
    std::swap(familycontribute_, other->familycontribute_);
    std::swap(corpscontribute_, other->corpscontribute_);
    std::swap(familymoney_, other->familymoney_);
    std::swap(corpsmoney_, other->corpsmoney_);
    std::swap(unionid_, other->unionid_);
    std::swap(unionname_, other->unionname_);
    std::swap(headcorpsid_, other->headcorpsid_);
    std::swap(countryid_, other->countryid_);
    std::swap(officialid_, other->officialid_);
    std::swap(kingid_, other->kingid_);
    std::swap(password_, other->password_);
    std::swap(protecttime_, other->protecttime_);
    std::swap(passwordstatus_, other->passwordstatus_);
    std::swap(protecttimelength_, other->protecttimelength_);
    std::swap(roleworldid_, other->roleworldid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePlayerEnterMapNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePlayerEnterMapNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePlayerEnterMapNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerEnterMapNotice_reflection_;
}

// ===================================================================

const ::std::string CMessagePlayerRedirectMapNotice::_default_charname_;
const ::std::string CMessagePlayerRedirectMapNotice::_default_data_;
const ::std::string CMessagePlayerRedirectMapNotice::_default_encryptkey_;
const ::std::string CMessagePlayerRedirectMapNotice::_default_familyname_;
const ::std::string CMessagePlayerRedirectMapNotice::_default_corpsname_;
const ::std::string CMessagePlayerRedirectMapNotice::_default_unionname_;
const ::std::string CMessagePlayerRedirectMapNotice::_default_password_;
#ifndef _MSC_VER
const int CMessagePlayerRedirectMapNotice::kCommHandleFieldNumber;
const int CMessagePlayerRedirectMapNotice::kLoginTokenFieldNumber;
const int CMessagePlayerRedirectMapNotice::kCharIDFieldNumber;
const int CMessagePlayerRedirectMapNotice::kAccountIDFieldNumber;
const int CMessagePlayerRedirectMapNotice::kLineIDFieldNumber;
const int CMessagePlayerRedirectMapNotice::kMapIDFieldNumber;
const int CMessagePlayerRedirectMapNotice::kPosXFieldNumber;
const int CMessagePlayerRedirectMapNotice::kPosYFieldNumber;
const int CMessagePlayerRedirectMapNotice::kCharNameFieldNumber;
const int CMessagePlayerRedirectMapNotice::kGenderFieldNumber;
const int CMessagePlayerRedirectMapNotice::kMetierFieldNumber;
const int CMessagePlayerRedirectMapNotice::kNationalityFieldNumber;
const int CMessagePlayerRedirectMapNotice::kFacetypeFieldNumber;
const int CMessagePlayerRedirectMapNotice::kCharlevelFieldNumber;
const int CMessagePlayerRedirectMapNotice::kExpFieldNumber;
const int CMessagePlayerRedirectMapNotice::kLastloginFieldNumber;
const int CMessagePlayerRedirectMapNotice::kDataLengthFieldNumber;
const int CMessagePlayerRedirectMapNotice::kDataFieldNumber;
const int CMessagePlayerRedirectMapNotice::kTeamFlagFieldNumber;
const int CMessagePlayerRedirectMapNotice::kKeyFieldNumber;
const int CMessagePlayerRedirectMapNotice::kEncryptKeyFieldNumber;
const int CMessagePlayerRedirectMapNotice::kPetTempIDFieldNumber;
const int CMessagePlayerRedirectMapNotice::kPetOnlineTimeFieldNumber;
const int CMessagePlayerRedirectMapNotice::kPetModeFieldNumber;
const int CMessagePlayerRedirectMapNotice::kTeamDataFieldNumber;
const int CMessagePlayerRedirectMapNotice::kTeamMsgFieldNumber;
const int CMessagePlayerRedirectMapNotice::kFamilyIDFieldNumber;
const int CMessagePlayerRedirectMapNotice::kFamilyNameFieldNumber;
const int CMessagePlayerRedirectMapNotice::kIsFamilyHeaderFieldNumber;
const int CMessagePlayerRedirectMapNotice::kIfHasAppliesFieldNumber;
const int CMessagePlayerRedirectMapNotice::kCorpsIDFieldNumber;
const int CMessagePlayerRedirectMapNotice::kCorpsNameFieldNumber;
const int CMessagePlayerRedirectMapNotice::kIsCorperHeaderFieldNumber;
const int CMessagePlayerRedirectMapNotice::kIfHasCorpsApplyFieldNumber;
const int CMessagePlayerRedirectMapNotice::kCampFieldNumber;
const int CMessagePlayerRedirectMapNotice::kIfTracedPlayerFieldNumber;
const int CMessagePlayerRedirectMapNotice::kFamilyHeaderIDFieldNumber;
const int CMessagePlayerRedirectMapNotice::kCorpsHeaderIDFieldNumber;
const int CMessagePlayerRedirectMapNotice::kValidSecondsFieldNumber;
const int CMessagePlayerRedirectMapNotice::kAdultFlagFieldNumber;
const int CMessagePlayerRedirectMapNotice::kFamilyPostFieldNumber;
const int CMessagePlayerRedirectMapNotice::kCorpsPostFieldNumber;
const int CMessagePlayerRedirectMapNotice::kFamilyContributeFieldNumber;
const int CMessagePlayerRedirectMapNotice::kCorpsContributeFieldNumber;
const int CMessagePlayerRedirectMapNotice::kFamilyMoneyFieldNumber;
const int CMessagePlayerRedirectMapNotice::kCorpsMoneyFieldNumber;
const int CMessagePlayerRedirectMapNotice::kUnionIDFieldNumber;
const int CMessagePlayerRedirectMapNotice::kUnionNameFieldNumber;
const int CMessagePlayerRedirectMapNotice::kHeadCorpsIDFieldNumber;
const int CMessagePlayerRedirectMapNotice::kCountryIDFieldNumber;
const int CMessagePlayerRedirectMapNotice::kOfficialIDFieldNumber;
const int CMessagePlayerRedirectMapNotice::kKingIDFieldNumber;
const int CMessagePlayerRedirectMapNotice::kPasswordFieldNumber;
const int CMessagePlayerRedirectMapNotice::kProtectTimeFieldNumber;
const int CMessagePlayerRedirectMapNotice::kPasswordStatusFieldNumber;
const int CMessagePlayerRedirectMapNotice::kProtectTimeLengthFieldNumber;
const int CMessagePlayerRedirectMapNotice::kRoleWorldIDFieldNumber;
#endif  // !_MSC_VER

CMessagePlayerRedirectMapNotice::CMessagePlayerRedirectMapNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePlayerRedirectMapNotice::InitAsDefaultInstance() {  teamdata_ = const_cast< ::PBTeamInfo*>(&::PBTeamInfo::default_instance());
  teammsg_ = const_cast< ::PBMsg*>(&::PBMsg::default_instance());
}

CMessagePlayerRedirectMapNotice::CMessagePlayerRedirectMapNotice(const CMessagePlayerRedirectMapNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePlayerRedirectMapNotice::SharedCtor() {
  _cached_size_ = 0;
  commhandle_ = 0u;
  logintoken_ = 0u;
  charid_ = 0u;
  accountid_ = 0u;
  lineid_ = 0u;
  mapid_ = 0u;
  posx_ = 0u;
  posy_ = 0u;
  charname_ = const_cast< ::std::string*>(&_default_charname_);
  gender_ = 0u;
  metier_ = 0u;
  nationality_ = 0u;
  facetype_ = 0u;
  charlevel_ = 0u;
  exp_ = GOOGLE_ULONGLONG(0);
  lastlogin_ = 0u;
  datalength_ = 0u;
  data_ = const_cast< ::std::string*>(&_default_data_);
  teamflag_ = 0u;
  key_ = GOOGLE_ULONGLONG(0);
  encryptkey_ = const_cast< ::std::string*>(&_default_encryptkey_);
  pettempid_ = 0u;
  petonlinetime_ = 0u;
  petmode_ = 0u;
  teamdata_ = NULL;
  teammsg_ = NULL;
  familyid_ = 0u;
  familyname_ = const_cast< ::std::string*>(&_default_familyname_);
  isfamilyheader_ = 0u;
  ifhasapplies_ = 0u;
  corpsid_ = 0u;
  corpsname_ = const_cast< ::std::string*>(&_default_corpsname_);
  iscorperheader_ = 0u;
  ifhascorpsapply_ = 0u;
  camp_ = 0u;
  iftracedplayer_ = 0u;
  familyheaderid_ = 0u;
  corpsheaderid_ = 0u;
  validseconds_ = 0;
  adultflag_ = 0u;
  familypost_ = 0u;
  corpspost_ = 0u;
  familycontribute_ = 0u;
  corpscontribute_ = 0u;
  familymoney_ = 0u;
  corpsmoney_ = 0u;
  unionid_ = 0u;
  unionname_ = const_cast< ::std::string*>(&_default_unionname_);
  headcorpsid_ = 0u;
  countryid_ = 0u;
  officialid_ = 0u;
  kingid_ = 0u;
  password_ = const_cast< ::std::string*>(&_default_password_);
  protecttime_ = 0u;
  passwordstatus_ = 0u;
  protecttimelength_ = 0u;
  roleworldid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePlayerRedirectMapNotice::~CMessagePlayerRedirectMapNotice() {
  SharedDtor();
}

void CMessagePlayerRedirectMapNotice::SharedDtor() {
  if (charname_ != &_default_charname_) {
    delete charname_;
  }
  if (data_ != &_default_data_) {
    delete data_;
  }
  if (encryptkey_ != &_default_encryptkey_) {
    delete encryptkey_;
  }
  if (familyname_ != &_default_familyname_) {
    delete familyname_;
  }
  if (corpsname_ != &_default_corpsname_) {
    delete corpsname_;
  }
  if (unionname_ != &_default_unionname_) {
    delete unionname_;
  }
  if (password_ != &_default_password_) {
    delete password_;
  }
  if (this != default_instance_) {
    delete teamdata_;
    delete teammsg_;
  }
}

const ::google::protobuf::Descriptor* CMessagePlayerRedirectMapNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerRedirectMapNotice_descriptor_;
}

const CMessagePlayerRedirectMapNotice& CMessagePlayerRedirectMapNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePlayerRedirectMapNotice* CMessagePlayerRedirectMapNotice::default_instance_ = NULL;

CMessagePlayerRedirectMapNotice* CMessagePlayerRedirectMapNotice::New() const {
  return new CMessagePlayerRedirectMapNotice;
}

void CMessagePlayerRedirectMapNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    commhandle_ = 0u;
    logintoken_ = 0u;
    charid_ = 0u;
    accountid_ = 0u;
    lineid_ = 0u;
    mapid_ = 0u;
    posx_ = 0u;
    posy_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (charname_ != &_default_charname_) {
        charname_->clear();
      }
    }
    gender_ = 0u;
    metier_ = 0u;
    nationality_ = 0u;
    facetype_ = 0u;
    charlevel_ = 0u;
    exp_ = GOOGLE_ULONGLONG(0);
    lastlogin_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    datalength_ = 0u;
    if (_has_bit(17)) {
      if (data_ != &_default_data_) {
        data_->clear();
      }
    }
    teamflag_ = 0u;
    key_ = GOOGLE_ULONGLONG(0);
    if (_has_bit(20)) {
      if (encryptkey_ != &_default_encryptkey_) {
        encryptkey_->clear();
      }
    }
    pettempid_ = 0u;
    petonlinetime_ = 0u;
    petmode_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (_has_bit(24)) {
      if (teamdata_ != NULL) teamdata_->::PBTeamInfo::Clear();
    }
    if (_has_bit(25)) {
      if (teammsg_ != NULL) teammsg_->::PBMsg::Clear();
    }
    familyid_ = 0u;
    if (_has_bit(27)) {
      if (familyname_ != &_default_familyname_) {
        familyname_->clear();
      }
    }
    isfamilyheader_ = 0u;
    ifhasapplies_ = 0u;
    corpsid_ = 0u;
    if (_has_bit(31)) {
      if (corpsname_ != &_default_corpsname_) {
        corpsname_->clear();
      }
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    iscorperheader_ = 0u;
    ifhascorpsapply_ = 0u;
    camp_ = 0u;
    iftracedplayer_ = 0u;
    familyheaderid_ = 0u;
    corpsheaderid_ = 0u;
    validseconds_ = 0;
    adultflag_ = 0u;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    familypost_ = 0u;
    corpspost_ = 0u;
    familycontribute_ = 0u;
    corpscontribute_ = 0u;
    familymoney_ = 0u;
    corpsmoney_ = 0u;
    unionid_ = 0u;
    if (_has_bit(47)) {
      if (unionname_ != &_default_unionname_) {
        unionname_->clear();
      }
    }
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    headcorpsid_ = 0u;
    countryid_ = 0u;
    officialid_ = 0u;
    kingid_ = 0u;
    if (_has_bit(52)) {
      if (password_ != &_default_password_) {
        password_->clear();
      }
    }
    protecttime_ = 0u;
    passwordstatus_ = 0u;
    protecttimelength_ = 0u;
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    roleworldid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePlayerRedirectMapNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CommHandle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &commhandle_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_LoginToken;
        break;
      }
      
      // optional uint32 LoginToken = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LoginToken:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &logintoken_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_AccountID;
        break;
      }
      
      // optional uint32 AccountID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AccountID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_LineID;
        break;
      }
      
      // optional uint32 LineID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lineid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_PosX;
        break;
      }
      
      // optional uint32 PosX = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosX:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posx_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_PosY;
        break;
      }
      
      // optional uint32 PosY = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posy_));
        _set_bit(7);
        if (input->ExpectTag(74)) goto parse_CharName;
        break;
      }
      
      // optional string CharName = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CharName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_charname()));
        if (input->ExpectTag(80)) goto parse_Gender;
        break;
      }
      
      // optional uint32 Gender = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Gender:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &gender_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_Metier;
        break;
      }
      
      // optional uint32 Metier = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Metier:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &metier_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_Nationality;
        break;
      }
      
      // optional uint32 Nationality = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Nationality:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &nationality_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_Facetype;
        break;
      }
      
      // optional uint32 Facetype = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Facetype:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &facetype_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_Charlevel;
        break;
      }
      
      // optional uint32 Charlevel = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Charlevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charlevel_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_Exp;
        break;
      }
      
      // optional uint64 Exp = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Exp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &exp_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_Lastlogin;
        break;
      }
      
      // optional uint32 Lastlogin = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Lastlogin:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lastlogin_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_DataLength;
        break;
      }
      
      // optional uint32 DataLength = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DataLength:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &datalength_));
        _set_bit(16);
        if (input->ExpectTag(146)) goto parse_Data;
        break;
      }
      
      // optional bytes Data = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Data:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_data()));
        if (input->ExpectTag(152)) goto parse_TeamFlag;
        break;
      }
      
      // optional uint32 TeamFlag = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TeamFlag:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &teamflag_));
        _set_bit(18);
        if (input->ExpectTag(160)) goto parse_Key;
        break;
      }
      
      // optional uint64 Key = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Key:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &key_));
        _set_bit(19);
        if (input->ExpectTag(170)) goto parse_EncryptKey;
        break;
      }
      
      // optional bytes EncryptKey = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_EncryptKey:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_encryptkey()));
        if (input->ExpectTag(176)) goto parse_PetTempID;
        break;
      }
      
      // optional uint32 PetTempID = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PetTempID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pettempid_));
        _set_bit(21);
        if (input->ExpectTag(184)) goto parse_PetOnlineTime;
        break;
      }
      
      // optional uint32 PetOnlineTime = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PetOnlineTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &petonlinetime_));
        _set_bit(22);
        if (input->ExpectTag(192)) goto parse_PetMode;
        break;
      }
      
      // optional uint32 PetMode = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PetMode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &petmode_));
        _set_bit(23);
        if (input->ExpectTag(202)) goto parse_TeamData;
        break;
      }
      
      // optional .PBTeamInfo TeamData = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_TeamData:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_teamdata()));
        if (input->ExpectTag(210)) goto parse_TeamMsg;
        break;
      }
      
      // optional .PBMsg TeamMsg = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_TeamMsg:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_teammsg()));
        if (input->ExpectTag(216)) goto parse_FamilyID;
        break;
      }
      
      // optional uint32 FamilyID = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(26);
        if (input->ExpectTag(226)) goto parse_FamilyName;
        break;
      }
      
      // optional string FamilyName = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FamilyName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_familyname()));
        if (input->ExpectTag(232)) goto parse_IsFamilyHeader;
        break;
      }
      
      // optional uint32 IsFamilyHeader = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IsFamilyHeader:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &isfamilyheader_));
        _set_bit(28);
        if (input->ExpectTag(240)) goto parse_IfHasApplies;
        break;
      }
      
      // optional uint32 IfHasApplies = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IfHasApplies:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ifhasapplies_));
        _set_bit(29);
        if (input->ExpectTag(248)) goto parse_CorpsID;
        break;
      }
      
      // optional uint32 CorpsID = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(30);
        if (input->ExpectTag(258)) goto parse_CorpsName;
        break;
      }
      
      // optional string CorpsName = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_corpsname()));
        if (input->ExpectTag(264)) goto parse_IsCorperHeader;
        break;
      }
      
      // optional uint32 IsCorperHeader = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IsCorperHeader:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &iscorperheader_));
        _set_bit(32);
        if (input->ExpectTag(272)) goto parse_IfHasCorpsApply;
        break;
      }
      
      // optional uint32 IfHasCorpsApply = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IfHasCorpsApply:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ifhascorpsapply_));
        _set_bit(33);
        if (input->ExpectTag(280)) goto parse_Camp;
        break;
      }
      
      // optional uint32 Camp = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Camp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &camp_));
        _set_bit(34);
        if (input->ExpectTag(288)) goto parse_IfTracedPlayer;
        break;
      }
      
      // optional uint32 IfTracedPlayer = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IfTracedPlayer:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &iftracedplayer_));
        _set_bit(35);
        if (input->ExpectTag(296)) goto parse_FamilyHeaderID;
        break;
      }
      
      // optional uint32 FamilyHeaderID = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyHeaderID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyheaderid_));
        _set_bit(36);
        if (input->ExpectTag(304)) goto parse_CorpsHeaderID;
        break;
      }
      
      // optional uint32 CorpsHeaderID = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsHeaderID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsheaderid_));
        _set_bit(37);
        if (input->ExpectTag(312)) goto parse_ValidSeconds;
        break;
      }
      
      // optional int32 ValidSeconds = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ValidSeconds:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &validseconds_));
        _set_bit(38);
        if (input->ExpectTag(320)) goto parse_AdultFlag;
        break;
      }
      
      // optional uint32 AdultFlag = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AdultFlag:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &adultflag_));
        _set_bit(39);
        if (input->ExpectTag(328)) goto parse_FamilyPost;
        break;
      }
      
      // optional uint32 FamilyPost = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyPost:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familypost_));
        _set_bit(40);
        if (input->ExpectTag(336)) goto parse_CorpsPost;
        break;
      }
      
      // optional uint32 CorpsPost = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsPost:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpspost_));
        _set_bit(41);
        if (input->ExpectTag(344)) goto parse_FamilyContribute;
        break;
      }
      
      // optional uint32 FamilyContribute = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyContribute:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familycontribute_));
        _set_bit(42);
        if (input->ExpectTag(352)) goto parse_CorpsContribute;
        break;
      }
      
      // optional uint32 CorpsContribute = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsContribute:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpscontribute_));
        _set_bit(43);
        if (input->ExpectTag(360)) goto parse_FamilyMoney;
        break;
      }
      
      // optional uint32 FamilyMoney = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familymoney_));
        _set_bit(44);
        if (input->ExpectTag(368)) goto parse_CorpsMoney;
        break;
      }
      
      // optional uint32 CorpsMoney = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsmoney_));
        _set_bit(45);
        if (input->ExpectTag(376)) goto parse_UnionID;
        break;
      }
      
      // optional uint32 UnionID = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UnionID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &unionid_));
        _set_bit(46);
        if (input->ExpectTag(386)) goto parse_UnionName;
        break;
      }
      
      // optional string UnionName = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_UnionName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_unionname()));
        if (input->ExpectTag(392)) goto parse_HeadCorpsID;
        break;
      }
      
      // optional uint32 HeadCorpsID = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HeadCorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &headcorpsid_));
        _set_bit(48);
        if (input->ExpectTag(400)) goto parse_CountryID;
        break;
      }
      
      // optional uint32 CountryID = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CountryID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &countryid_));
        _set_bit(49);
        if (input->ExpectTag(408)) goto parse_OfficialID;
        break;
      }
      
      // optional uint32 OfficialID = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OfficialID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &officialid_));
        _set_bit(50);
        if (input->ExpectTag(416)) goto parse_KingID;
        break;
      }
      
      // optional uint32 KingID = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_KingID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &kingid_));
        _set_bit(51);
        if (input->ExpectTag(426)) goto parse_Password;
        break;
      }
      
      // optional string Password = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Password:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_password()));
        if (input->ExpectTag(432)) goto parse_ProtectTime;
        break;
      }
      
      // optional uint32 ProtectTime = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ProtectTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &protecttime_));
        _set_bit(53);
        if (input->ExpectTag(440)) goto parse_PasswordStatus;
        break;
      }
      
      // optional uint32 PasswordStatus = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PasswordStatus:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &passwordstatus_));
        _set_bit(54);
        if (input->ExpectTag(448)) goto parse_ProtectTimeLength;
        break;
      }
      
      // optional uint32 ProtectTimeLength = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ProtectTimeLength:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &protecttimelength_));
        _set_bit(55);
        if (input->ExpectTag(456)) goto parse_RoleWorldID;
        break;
      }
      
      // optional uint32 RoleWorldID = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleWorldID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleworldid_));
        _set_bit(56);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePlayerRedirectMapNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePlayerRedirectMapNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CommHandle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->commhandle(), output);
  }
  
  // optional uint32 LoginToken = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->logintoken(), output);
  }
  
  // optional uint32 CharID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->charid(), output);
  }
  
  // optional uint32 AccountID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->accountid(), output);
  }
  
  // optional uint32 LineID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->lineid(), output);
  }
  
  // optional uint32 MapID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->mapid(), output);
  }
  
  // optional uint32 PosX = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->posx(), output);
  }
  
  // optional uint32 PosY = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->posy(), output);
  }
  
  // optional string CharName = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteString(9, this->charname(), output);
  }
  
  // optional uint32 Gender = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->gender(), output);
  }
  
  // optional uint32 Metier = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->metier(), output);
  }
  
  // optional uint32 Nationality = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->nationality(), output);
  }
  
  // optional uint32 Facetype = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->facetype(), output);
  }
  
  // optional uint32 Charlevel = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->charlevel(), output);
  }
  
  // optional uint64 Exp = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(15, this->exp(), output);
  }
  
  // optional uint32 Lastlogin = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(16, this->lastlogin(), output);
  }
  
  // optional uint32 DataLength = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(17, this->datalength(), output);
  }
  
  // optional bytes Data = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(18, this->data(), output);
  }
  
  // optional uint32 TeamFlag = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(19, this->teamflag(), output);
  }
  
  // optional uint64 Key = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(20, this->key(), output);
  }
  
  // optional bytes EncryptKey = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(21, this->encryptkey(), output);
  }
  
  // optional uint32 PetTempID = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(22, this->pettempid(), output);
  }
  
  // optional uint32 PetOnlineTime = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(23, this->petonlinetime(), output);
  }
  
  // optional uint32 PetMode = 24;
  if (_has_bit(23)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(24, this->petmode(), output);
  }
  
  // optional .PBTeamInfo TeamData = 25;
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(25, this->teamdata(), output);
  }
  
  // optional .PBMsg TeamMsg = 26;
  if (_has_bit(25)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(26, this->teammsg(), output);
  }
  
  // optional uint32 FamilyID = 27;
  if (_has_bit(26)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(27, this->familyid(), output);
  }
  
  // optional string FamilyName = 28;
  if (_has_bit(27)) {
    ::google::protobuf::internal::WireFormat::WriteString(28, this->familyname(), output);
  }
  
  // optional uint32 IsFamilyHeader = 29;
  if (_has_bit(28)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(29, this->isfamilyheader(), output);
  }
  
  // optional uint32 IfHasApplies = 30;
  if (_has_bit(29)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(30, this->ifhasapplies(), output);
  }
  
  // optional uint32 CorpsID = 31;
  if (_has_bit(30)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(31, this->corpsid(), output);
  }
  
  // optional string CorpsName = 32;
  if (_has_bit(31)) {
    ::google::protobuf::internal::WireFormat::WriteString(32, this->corpsname(), output);
  }
  
  // optional uint32 IsCorperHeader = 33;
  if (_has_bit(32)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(33, this->iscorperheader(), output);
  }
  
  // optional uint32 IfHasCorpsApply = 34;
  if (_has_bit(33)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(34, this->ifhascorpsapply(), output);
  }
  
  // optional uint32 Camp = 35;
  if (_has_bit(34)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(35, this->camp(), output);
  }
  
  // optional uint32 IfTracedPlayer = 36;
  if (_has_bit(35)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(36, this->iftracedplayer(), output);
  }
  
  // optional uint32 FamilyHeaderID = 37;
  if (_has_bit(36)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(37, this->familyheaderid(), output);
  }
  
  // optional uint32 CorpsHeaderID = 38;
  if (_has_bit(37)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(38, this->corpsheaderid(), output);
  }
  
  // optional int32 ValidSeconds = 39;
  if (_has_bit(38)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(39, this->validseconds(), output);
  }
  
  // optional uint32 AdultFlag = 40;
  if (_has_bit(39)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(40, this->adultflag(), output);
  }
  
  // optional uint32 FamilyPost = 41;
  if (_has_bit(40)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(41, this->familypost(), output);
  }
  
  // optional uint32 CorpsPost = 42;
  if (_has_bit(41)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(42, this->corpspost(), output);
  }
  
  // optional uint32 FamilyContribute = 43;
  if (_has_bit(42)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(43, this->familycontribute(), output);
  }
  
  // optional uint32 CorpsContribute = 44;
  if (_has_bit(43)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(44, this->corpscontribute(), output);
  }
  
  // optional uint32 FamilyMoney = 45;
  if (_has_bit(44)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(45, this->familymoney(), output);
  }
  
  // optional uint32 CorpsMoney = 46;
  if (_has_bit(45)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(46, this->corpsmoney(), output);
  }
  
  // optional uint32 UnionID = 47;
  if (_has_bit(46)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(47, this->unionid(), output);
  }
  
  // optional string UnionName = 48;
  if (_has_bit(47)) {
    ::google::protobuf::internal::WireFormat::WriteString(48, this->unionname(), output);
  }
  
  // optional uint32 HeadCorpsID = 49;
  if (_has_bit(48)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(49, this->headcorpsid(), output);
  }
  
  // optional uint32 CountryID = 50;
  if (_has_bit(49)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(50, this->countryid(), output);
  }
  
  // optional uint32 OfficialID = 51;
  if (_has_bit(50)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(51, this->officialid(), output);
  }
  
  // optional uint32 KingID = 52;
  if (_has_bit(51)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(52, this->kingid(), output);
  }
  
  // optional string Password = 53;
  if (_has_bit(52)) {
    ::google::protobuf::internal::WireFormat::WriteString(53, this->password(), output);
  }
  
  // optional uint32 ProtectTime = 54;
  if (_has_bit(53)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(54, this->protecttime(), output);
  }
  
  // optional uint32 PasswordStatus = 55;
  if (_has_bit(54)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(55, this->passwordstatus(), output);
  }
  
  // optional uint32 ProtectTimeLength = 56;
  if (_has_bit(55)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(56, this->protecttimelength(), output);
  }
  
  // optional uint32 RoleWorldID = 57;
  if (_has_bit(56)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(57, this->roleworldid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePlayerRedirectMapNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CommHandle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->commhandle(), target);
  }
  
  // optional uint32 LoginToken = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->logintoken(), target);
  }
  
  // optional uint32 CharID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->charid(), target);
  }
  
  // optional uint32 AccountID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->accountid(), target);
  }
  
  // optional uint32 LineID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->lineid(), target);
  }
  
  // optional uint32 MapID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->mapid(), target);
  }
  
  // optional uint32 PosX = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->posx(), target);
  }
  
  // optional uint32 PosY = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->posy(), target);
  }
  
  // optional string CharName = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(9, this->charname(), target);
  }
  
  // optional uint32 Gender = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->gender(), target);
  }
  
  // optional uint32 Metier = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->metier(), target);
  }
  
  // optional uint32 Nationality = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->nationality(), target);
  }
  
  // optional uint32 Facetype = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->facetype(), target);
  }
  
  // optional uint32 Charlevel = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->charlevel(), target);
  }
  
  // optional uint64 Exp = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(15, this->exp(), target);
  }
  
  // optional uint32 Lastlogin = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(16, this->lastlogin(), target);
  }
  
  // optional uint32 DataLength = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(17, this->datalength(), target);
  }
  
  // optional bytes Data = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(18, this->data(), target);
  }
  
  // optional uint32 TeamFlag = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(19, this->teamflag(), target);
  }
  
  // optional uint64 Key = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(20, this->key(), target);
  }
  
  // optional bytes EncryptKey = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(21, this->encryptkey(), target);
  }
  
  // optional uint32 PetTempID = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(22, this->pettempid(), target);
  }
  
  // optional uint32 PetOnlineTime = 23;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(23, this->petonlinetime(), target);
  }
  
  // optional uint32 PetMode = 24;
  if (_has_bit(23)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(24, this->petmode(), target);
  }
  
  // optional .PBTeamInfo TeamData = 25;
  if (_has_bit(24)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(25, this->teamdata(), target);
  }
  
  // optional .PBMsg TeamMsg = 26;
  if (_has_bit(25)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(26, this->teammsg(), target);
  }
  
  // optional uint32 FamilyID = 27;
  if (_has_bit(26)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(27, this->familyid(), target);
  }
  
  // optional string FamilyName = 28;
  if (_has_bit(27)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(28, this->familyname(), target);
  }
  
  // optional uint32 IsFamilyHeader = 29;
  if (_has_bit(28)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(29, this->isfamilyheader(), target);
  }
  
  // optional uint32 IfHasApplies = 30;
  if (_has_bit(29)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(30, this->ifhasapplies(), target);
  }
  
  // optional uint32 CorpsID = 31;
  if (_has_bit(30)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(31, this->corpsid(), target);
  }
  
  // optional string CorpsName = 32;
  if (_has_bit(31)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(32, this->corpsname(), target);
  }
  
  // optional uint32 IsCorperHeader = 33;
  if (_has_bit(32)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(33, this->iscorperheader(), target);
  }
  
  // optional uint32 IfHasCorpsApply = 34;
  if (_has_bit(33)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(34, this->ifhascorpsapply(), target);
  }
  
  // optional uint32 Camp = 35;
  if (_has_bit(34)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(35, this->camp(), target);
  }
  
  // optional uint32 IfTracedPlayer = 36;
  if (_has_bit(35)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(36, this->iftracedplayer(), target);
  }
  
  // optional uint32 FamilyHeaderID = 37;
  if (_has_bit(36)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(37, this->familyheaderid(), target);
  }
  
  // optional uint32 CorpsHeaderID = 38;
  if (_has_bit(37)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(38, this->corpsheaderid(), target);
  }
  
  // optional int32 ValidSeconds = 39;
  if (_has_bit(38)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(39, this->validseconds(), target);
  }
  
  // optional uint32 AdultFlag = 40;
  if (_has_bit(39)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(40, this->adultflag(), target);
  }
  
  // optional uint32 FamilyPost = 41;
  if (_has_bit(40)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(41, this->familypost(), target);
  }
  
  // optional uint32 CorpsPost = 42;
  if (_has_bit(41)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(42, this->corpspost(), target);
  }
  
  // optional uint32 FamilyContribute = 43;
  if (_has_bit(42)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(43, this->familycontribute(), target);
  }
  
  // optional uint32 CorpsContribute = 44;
  if (_has_bit(43)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(44, this->corpscontribute(), target);
  }
  
  // optional uint32 FamilyMoney = 45;
  if (_has_bit(44)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(45, this->familymoney(), target);
  }
  
  // optional uint32 CorpsMoney = 46;
  if (_has_bit(45)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(46, this->corpsmoney(), target);
  }
  
  // optional uint32 UnionID = 47;
  if (_has_bit(46)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(47, this->unionid(), target);
  }
  
  // optional string UnionName = 48;
  if (_has_bit(47)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(48, this->unionname(), target);
  }
  
  // optional uint32 HeadCorpsID = 49;
  if (_has_bit(48)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(49, this->headcorpsid(), target);
  }
  
  // optional uint32 CountryID = 50;
  if (_has_bit(49)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(50, this->countryid(), target);
  }
  
  // optional uint32 OfficialID = 51;
  if (_has_bit(50)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(51, this->officialid(), target);
  }
  
  // optional uint32 KingID = 52;
  if (_has_bit(51)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(52, this->kingid(), target);
  }
  
  // optional string Password = 53;
  if (_has_bit(52)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(53, this->password(), target);
  }
  
  // optional uint32 ProtectTime = 54;
  if (_has_bit(53)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(54, this->protecttime(), target);
  }
  
  // optional uint32 PasswordStatus = 55;
  if (_has_bit(54)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(55, this->passwordstatus(), target);
  }
  
  // optional uint32 ProtectTimeLength = 56;
  if (_has_bit(55)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(56, this->protecttimelength(), target);
  }
  
  // optional uint32 RoleWorldID = 57;
  if (_has_bit(56)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(57, this->roleworldid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePlayerRedirectMapNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CommHandle = 1;
    if (has_commhandle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->commhandle());
    }
    
    // optional uint32 LoginToken = 2;
    if (has_logintoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->logintoken());
    }
    
    // optional uint32 CharID = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 AccountID = 4;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 LineID = 5;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lineid());
    }
    
    // optional uint32 MapID = 6;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 PosX = 7;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posx());
    }
    
    // optional uint32 PosY = 8;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posy());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string CharName = 9;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->charname());
    }
    
    // optional uint32 Gender = 10;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->gender());
    }
    
    // optional uint32 Metier = 11;
    if (has_metier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->metier());
    }
    
    // optional uint32 Nationality = 12;
    if (has_nationality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->nationality());
    }
    
    // optional uint32 Facetype = 13;
    if (has_facetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->facetype());
    }
    
    // optional uint32 Charlevel = 14;
    if (has_charlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charlevel());
    }
    
    // optional uint64 Exp = 15;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->exp());
    }
    
    // optional uint32 Lastlogin = 16;
    if (has_lastlogin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lastlogin());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 DataLength = 17;
    if (has_datalength()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->datalength());
    }
    
    // optional bytes Data = 18;
    if (has_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->data());
    }
    
    // optional uint32 TeamFlag = 19;
    if (has_teamflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->teamflag());
    }
    
    // optional uint64 Key = 20;
    if (has_key()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->key());
    }
    
    // optional bytes EncryptKey = 21;
    if (has_encryptkey()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->encryptkey());
    }
    
    // optional uint32 PetTempID = 22;
    if (has_pettempid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pettempid());
    }
    
    // optional uint32 PetOnlineTime = 23;
    if (has_petonlinetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->petonlinetime());
    }
    
    // optional uint32 PetMode = 24;
    if (has_petmode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->petmode());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .PBTeamInfo TeamData = 25;
    if (has_teamdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->teamdata());
    }
    
    // optional .PBMsg TeamMsg = 26;
    if (has_teammsg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->teammsg());
    }
    
    // optional uint32 FamilyID = 27;
    if (has_familyid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
    // optional string FamilyName = 28;
    if (has_familyname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::StringSize(this->familyname());
    }
    
    // optional uint32 IsFamilyHeader = 29;
    if (has_isfamilyheader()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->isfamilyheader());
    }
    
    // optional uint32 IfHasApplies = 30;
    if (has_ifhasapplies()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ifhasapplies());
    }
    
    // optional uint32 CorpsID = 31;
    if (has_corpsid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
    // optional string CorpsName = 32;
    if (has_corpsname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::StringSize(this->corpsname());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 IsCorperHeader = 33;
    if (has_iscorperheader()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->iscorperheader());
    }
    
    // optional uint32 IfHasCorpsApply = 34;
    if (has_ifhascorpsapply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ifhascorpsapply());
    }
    
    // optional uint32 Camp = 35;
    if (has_camp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->camp());
    }
    
    // optional uint32 IfTracedPlayer = 36;
    if (has_iftracedplayer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->iftracedplayer());
    }
    
    // optional uint32 FamilyHeaderID = 37;
    if (has_familyheaderid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyheaderid());
    }
    
    // optional uint32 CorpsHeaderID = 38;
    if (has_corpsheaderid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsheaderid());
    }
    
    // optional int32 ValidSeconds = 39;
    if (has_validseconds()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->validseconds());
    }
    
    // optional uint32 AdultFlag = 40;
    if (has_adultflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->adultflag());
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional uint32 FamilyPost = 41;
    if (has_familypost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familypost());
    }
    
    // optional uint32 CorpsPost = 42;
    if (has_corpspost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpspost());
    }
    
    // optional uint32 FamilyContribute = 43;
    if (has_familycontribute()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familycontribute());
    }
    
    // optional uint32 CorpsContribute = 44;
    if (has_corpscontribute()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpscontribute());
    }
    
    // optional uint32 FamilyMoney = 45;
    if (has_familymoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familymoney());
    }
    
    // optional uint32 CorpsMoney = 46;
    if (has_corpsmoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsmoney());
    }
    
    // optional uint32 UnionID = 47;
    if (has_unionid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->unionid());
    }
    
    // optional string UnionName = 48;
    if (has_unionname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::StringSize(this->unionname());
    }
    
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional uint32 HeadCorpsID = 49;
    if (has_headcorpsid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->headcorpsid());
    }
    
    // optional uint32 CountryID = 50;
    if (has_countryid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->countryid());
    }
    
    // optional uint32 OfficialID = 51;
    if (has_officialid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->officialid());
    }
    
    // optional uint32 KingID = 52;
    if (has_kingid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->kingid());
    }
    
    // optional string Password = 53;
    if (has_password()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::StringSize(this->password());
    }
    
    // optional uint32 ProtectTime = 54;
    if (has_protecttime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->protecttime());
    }
    
    // optional uint32 PasswordStatus = 55;
    if (has_passwordstatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->passwordstatus());
    }
    
    // optional uint32 ProtectTimeLength = 56;
    if (has_protecttimelength()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->protecttimelength());
    }
    
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional uint32 RoleWorldID = 57;
    if (has_roleworldid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleworldid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePlayerRedirectMapNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePlayerRedirectMapNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePlayerRedirectMapNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePlayerRedirectMapNotice::MergeFrom(const CMessagePlayerRedirectMapNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_commhandle(from.commhandle());
    }
    if (from._has_bit(1)) {
      set_logintoken(from.logintoken());
    }
    if (from._has_bit(2)) {
      set_charid(from.charid());
    }
    if (from._has_bit(3)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(4)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(5)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(6)) {
      set_posx(from.posx());
    }
    if (from._has_bit(7)) {
      set_posy(from.posy());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_charname(from.charname());
    }
    if (from._has_bit(9)) {
      set_gender(from.gender());
    }
    if (from._has_bit(10)) {
      set_metier(from.metier());
    }
    if (from._has_bit(11)) {
      set_nationality(from.nationality());
    }
    if (from._has_bit(12)) {
      set_facetype(from.facetype());
    }
    if (from._has_bit(13)) {
      set_charlevel(from.charlevel());
    }
    if (from._has_bit(14)) {
      set_exp(from.exp());
    }
    if (from._has_bit(15)) {
      set_lastlogin(from.lastlogin());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_datalength(from.datalength());
    }
    if (from._has_bit(17)) {
      set_data(from.data());
    }
    if (from._has_bit(18)) {
      set_teamflag(from.teamflag());
    }
    if (from._has_bit(19)) {
      set_key(from.key());
    }
    if (from._has_bit(20)) {
      set_encryptkey(from.encryptkey());
    }
    if (from._has_bit(21)) {
      set_pettempid(from.pettempid());
    }
    if (from._has_bit(22)) {
      set_petonlinetime(from.petonlinetime());
    }
    if (from._has_bit(23)) {
      set_petmode(from.petmode());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from._has_bit(24)) {
      mutable_teamdata()->::PBTeamInfo::MergeFrom(from.teamdata());
    }
    if (from._has_bit(25)) {
      mutable_teammsg()->::PBMsg::MergeFrom(from.teammsg());
    }
    if (from._has_bit(26)) {
      set_familyid(from.familyid());
    }
    if (from._has_bit(27)) {
      set_familyname(from.familyname());
    }
    if (from._has_bit(28)) {
      set_isfamilyheader(from.isfamilyheader());
    }
    if (from._has_bit(29)) {
      set_ifhasapplies(from.ifhasapplies());
    }
    if (from._has_bit(30)) {
      set_corpsid(from.corpsid());
    }
    if (from._has_bit(31)) {
      set_corpsname(from.corpsname());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from._has_bit(32)) {
      set_iscorperheader(from.iscorperheader());
    }
    if (from._has_bit(33)) {
      set_ifhascorpsapply(from.ifhascorpsapply());
    }
    if (from._has_bit(34)) {
      set_camp(from.camp());
    }
    if (from._has_bit(35)) {
      set_iftracedplayer(from.iftracedplayer());
    }
    if (from._has_bit(36)) {
      set_familyheaderid(from.familyheaderid());
    }
    if (from._has_bit(37)) {
      set_corpsheaderid(from.corpsheaderid());
    }
    if (from._has_bit(38)) {
      set_validseconds(from.validseconds());
    }
    if (from._has_bit(39)) {
      set_adultflag(from.adultflag());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from._has_bit(40)) {
      set_familypost(from.familypost());
    }
    if (from._has_bit(41)) {
      set_corpspost(from.corpspost());
    }
    if (from._has_bit(42)) {
      set_familycontribute(from.familycontribute());
    }
    if (from._has_bit(43)) {
      set_corpscontribute(from.corpscontribute());
    }
    if (from._has_bit(44)) {
      set_familymoney(from.familymoney());
    }
    if (from._has_bit(45)) {
      set_corpsmoney(from.corpsmoney());
    }
    if (from._has_bit(46)) {
      set_unionid(from.unionid());
    }
    if (from._has_bit(47)) {
      set_unionname(from.unionname());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from._has_bit(48)) {
      set_headcorpsid(from.headcorpsid());
    }
    if (from._has_bit(49)) {
      set_countryid(from.countryid());
    }
    if (from._has_bit(50)) {
      set_officialid(from.officialid());
    }
    if (from._has_bit(51)) {
      set_kingid(from.kingid());
    }
    if (from._has_bit(52)) {
      set_password(from.password());
    }
    if (from._has_bit(53)) {
      set_protecttime(from.protecttime());
    }
    if (from._has_bit(54)) {
      set_passwordstatus(from.passwordstatus());
    }
    if (from._has_bit(55)) {
      set_protecttimelength(from.protecttimelength());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from._has_bit(56)) {
      set_roleworldid(from.roleworldid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePlayerRedirectMapNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerRedirectMapNotice::CopyFrom(const CMessagePlayerRedirectMapNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerRedirectMapNotice::Swap(CMessagePlayerRedirectMapNotice* other) {
  if (other != this) {
    std::swap(commhandle_, other->commhandle_);
    std::swap(logintoken_, other->logintoken_);
    std::swap(charid_, other->charid_);
    std::swap(accountid_, other->accountid_);
    std::swap(lineid_, other->lineid_);
    std::swap(mapid_, other->mapid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(charname_, other->charname_);
    std::swap(gender_, other->gender_);
    std::swap(metier_, other->metier_);
    std::swap(nationality_, other->nationality_);
    std::swap(facetype_, other->facetype_);
    std::swap(charlevel_, other->charlevel_);
    std::swap(exp_, other->exp_);
    std::swap(lastlogin_, other->lastlogin_);
    std::swap(datalength_, other->datalength_);
    std::swap(data_, other->data_);
    std::swap(teamflag_, other->teamflag_);
    std::swap(key_, other->key_);
    std::swap(encryptkey_, other->encryptkey_);
    std::swap(pettempid_, other->pettempid_);
    std::swap(petonlinetime_, other->petonlinetime_);
    std::swap(petmode_, other->petmode_);
    std::swap(teamdata_, other->teamdata_);
    std::swap(teammsg_, other->teammsg_);
    std::swap(familyid_, other->familyid_);
    std::swap(familyname_, other->familyname_);
    std::swap(isfamilyheader_, other->isfamilyheader_);
    std::swap(ifhasapplies_, other->ifhasapplies_);
    std::swap(corpsid_, other->corpsid_);
    std::swap(corpsname_, other->corpsname_);
    std::swap(iscorperheader_, other->iscorperheader_);
    std::swap(ifhascorpsapply_, other->ifhascorpsapply_);
    std::swap(camp_, other->camp_);
    std::swap(iftracedplayer_, other->iftracedplayer_);
    std::swap(familyheaderid_, other->familyheaderid_);
    std::swap(corpsheaderid_, other->corpsheaderid_);
    std::swap(validseconds_, other->validseconds_);
    std::swap(adultflag_, other->adultflag_);
    std::swap(familypost_, other->familypost_);
    std::swap(corpspost_, other->corpspost_);
    std::swap(familycontribute_, other->familycontribute_);
    std::swap(corpscontribute_, other->corpscontribute_);
    std::swap(familymoney_, other->familymoney_);
    std::swap(corpsmoney_, other->corpsmoney_);
    std::swap(unionid_, other->unionid_);
    std::swap(unionname_, other->unionname_);
    std::swap(headcorpsid_, other->headcorpsid_);
    std::swap(countryid_, other->countryid_);
    std::swap(officialid_, other->officialid_);
    std::swap(kingid_, other->kingid_);
    std::swap(password_, other->password_);
    std::swap(protecttime_, other->protecttime_);
    std::swap(passwordstatus_, other->passwordstatus_);
    std::swap(protecttimelength_, other->protecttimelength_);
    std::swap(roleworldid_, other->roleworldid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePlayerRedirectMapNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePlayerRedirectMapNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePlayerRedirectMapNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerRedirectMapNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessagePlayerEnterMapResponse::kAccountIDFieldNumber;
const int CMessagePlayerEnterMapResponse::kCharIDFieldNumber;
const int CMessagePlayerEnterMapResponse::kLineIDFieldNumber;
const int CMessagePlayerEnterMapResponse::kMapIDFieldNumber;
const int CMessagePlayerEnterMapResponse::kPosXFieldNumber;
const int CMessagePlayerEnterMapResponse::kPosYFieldNumber;
const int CMessagePlayerEnterMapResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

CMessagePlayerEnterMapResponse::CMessagePlayerEnterMapResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePlayerEnterMapResponse::InitAsDefaultInstance() {}

CMessagePlayerEnterMapResponse::CMessagePlayerEnterMapResponse(const CMessagePlayerEnterMapResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePlayerEnterMapResponse::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  charid_ = 0u;
  lineid_ = 0u;
  mapid_ = 0u;
  posx_ = 0u;
  posy_ = 0u;
  errorcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePlayerEnterMapResponse::~CMessagePlayerEnterMapResponse() {
  SharedDtor();
}

void CMessagePlayerEnterMapResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessagePlayerEnterMapResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerEnterMapResponse_descriptor_;
}

const CMessagePlayerEnterMapResponse& CMessagePlayerEnterMapResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePlayerEnterMapResponse* CMessagePlayerEnterMapResponse::default_instance_ = NULL;

CMessagePlayerEnterMapResponse* CMessagePlayerEnterMapResponse::New() const {
  return new CMessagePlayerEnterMapResponse;
}

void CMessagePlayerEnterMapResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
    charid_ = 0u;
    lineid_ = 0u;
    mapid_ = 0u;
    posx_ = 0u;
    posy_ = 0u;
    errorcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePlayerEnterMapResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 AccountID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_LineID;
        break;
      }
      
      // optional uint32 LineID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lineid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_PosX;
        break;
      }
      
      // optional uint32 PosX = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosX:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posx_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_PosY;
        break;
      }
      
      // optional uint32 PosY = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posy_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_ErrorCode;
        break;
      }
      
      // optional int32 ErrorCode = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ErrorCode:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &errorcode_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePlayerEnterMapResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePlayerEnterMapResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 AccountID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->accountid(), output);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charid(), output);
  }
  
  // optional uint32 LineID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->lineid(), output);
  }
  
  // optional uint32 MapID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->mapid(), output);
  }
  
  // optional uint32 PosX = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->posx(), output);
  }
  
  // optional uint32 PosY = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->posy(), output);
  }
  
  // optional int32 ErrorCode = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(7, this->errorcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePlayerEnterMapResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 AccountID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->accountid(), target);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charid(), target);
  }
  
  // optional uint32 LineID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->lineid(), target);
  }
  
  // optional uint32 MapID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->mapid(), target);
  }
  
  // optional uint32 PosX = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->posx(), target);
  }
  
  // optional uint32 PosY = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->posy(), target);
  }
  
  // optional int32 ErrorCode = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(7, this->errorcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePlayerEnterMapResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AccountID = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 CharID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 LineID = 3;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lineid());
    }
    
    // optional uint32 MapID = 4;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 PosX = 5;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posx());
    }
    
    // optional uint32 PosY = 6;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posy());
    }
    
    // optional int32 ErrorCode = 7;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->errorcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePlayerEnterMapResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePlayerEnterMapResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePlayerEnterMapResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePlayerEnterMapResponse::MergeFrom(const CMessagePlayerEnterMapResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(1)) {
      set_charid(from.charid());
    }
    if (from._has_bit(2)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(3)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(4)) {
      set_posx(from.posx());
    }
    if (from._has_bit(5)) {
      set_posy(from.posy());
    }
    if (from._has_bit(6)) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePlayerEnterMapResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerEnterMapResponse::CopyFrom(const CMessagePlayerEnterMapResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerEnterMapResponse::Swap(CMessagePlayerEnterMapResponse* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(charid_, other->charid_);
    std::swap(lineid_, other->lineid_);
    std::swap(mapid_, other->mapid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePlayerEnterMapResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePlayerEnterMapResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePlayerEnterMapResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerEnterMapResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessagePlayerLoginCompleteNotice::kAccountIDFieldNumber;
#endif  // !_MSC_VER

CMessagePlayerLoginCompleteNotice::CMessagePlayerLoginCompleteNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePlayerLoginCompleteNotice::InitAsDefaultInstance() {}

CMessagePlayerLoginCompleteNotice::CMessagePlayerLoginCompleteNotice(const CMessagePlayerLoginCompleteNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePlayerLoginCompleteNotice::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePlayerLoginCompleteNotice::~CMessagePlayerLoginCompleteNotice() {
  SharedDtor();
}

void CMessagePlayerLoginCompleteNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessagePlayerLoginCompleteNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerLoginCompleteNotice_descriptor_;
}

const CMessagePlayerLoginCompleteNotice& CMessagePlayerLoginCompleteNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePlayerLoginCompleteNotice* CMessagePlayerLoginCompleteNotice::default_instance_ = NULL;

CMessagePlayerLoginCompleteNotice* CMessagePlayerLoginCompleteNotice::New() const {
  return new CMessagePlayerLoginCompleteNotice;
}

void CMessagePlayerLoginCompleteNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePlayerLoginCompleteNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 AccountID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePlayerLoginCompleteNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePlayerLoginCompleteNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 AccountID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->accountid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePlayerLoginCompleteNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 AccountID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->accountid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePlayerLoginCompleteNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AccountID = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePlayerLoginCompleteNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePlayerLoginCompleteNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePlayerLoginCompleteNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePlayerLoginCompleteNotice::MergeFrom(const CMessagePlayerLoginCompleteNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_accountid(from.accountid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePlayerLoginCompleteNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerLoginCompleteNotice::CopyFrom(const CMessagePlayerLoginCompleteNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerLoginCompleteNotice::Swap(CMessagePlayerLoginCompleteNotice* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePlayerLoginCompleteNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePlayerLoginCompleteNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePlayerLoginCompleteNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerLoginCompleteNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessagePlayerLeaveMapNotice::kCharIDFieldNumber;
const int CMessagePlayerLeaveMapNotice::kAccountIDFieldNumber;
const int CMessagePlayerLeaveMapNotice::kReasonFieldNumber;
const int CMessagePlayerLeaveMapNotice::kCharLevelFieldNumber;
const int CMessagePlayerLeaveMapNotice::kCharMetierFieldNumber;
const int CMessagePlayerLeaveMapNotice::kMoney1FieldNumber;
const int CMessagePlayerLeaveMapNotice::kMoney2FieldNumber;
const int CMessagePlayerLeaveMapNotice::kExpFieldNumber;
const int CMessagePlayerLeaveMapNotice::kLogoutFlagFieldNumber;
const int CMessagePlayerLeaveMapNotice::kSaveFlagFieldNumber;
const int CMessagePlayerLeaveMapNotice::kGlobalSceneWorldIDFieldNumber;
#endif  // !_MSC_VER

CMessagePlayerLeaveMapNotice::CMessagePlayerLeaveMapNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePlayerLeaveMapNotice::InitAsDefaultInstance() {}

CMessagePlayerLeaveMapNotice::CMessagePlayerLeaveMapNotice(const CMessagePlayerLeaveMapNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePlayerLeaveMapNotice::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  accountid_ = 0u;
  reason_ = 1;
  charlevel_ = 0u;
  charmetier_ = 0u;
  money1_ = 0u;
  money2_ = 0u;
  exp_ = GOOGLE_ULONGLONG(0);
  logoutflag_ = 0u;
  saveflag_ = 0;
  globalsceneworldid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePlayerLeaveMapNotice::~CMessagePlayerLeaveMapNotice() {
  SharedDtor();
}

void CMessagePlayerLeaveMapNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessagePlayerLeaveMapNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerLeaveMapNotice_descriptor_;
}

const CMessagePlayerLeaveMapNotice& CMessagePlayerLeaveMapNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePlayerLeaveMapNotice* CMessagePlayerLeaveMapNotice::default_instance_ = NULL;

CMessagePlayerLeaveMapNotice* CMessagePlayerLeaveMapNotice::New() const {
  return new CMessagePlayerLeaveMapNotice;
}

void CMessagePlayerLeaveMapNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    accountid_ = 0u;
    reason_ = 1;
    charlevel_ = 0u;
    charmetier_ = 0u;
    money1_ = 0u;
    money2_ = 0u;
    exp_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    logoutflag_ = 0u;
    saveflag_ = 0;
    globalsceneworldid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePlayerLeaveMapNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_AccountID;
        break;
      }
      
      // optional uint32 AccountID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AccountID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Reason;
        break;
      }
      
      // optional .EMLeaveReason Reason = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Reason:
        int value;
        DO_(::google::protobuf::internal::WireFormat::ReadEnum(input, &value));
        if (EMLeaveReason_IsValid(value)) {
          set_reason(static_cast< EMLeaveReason >(value));
        } else {
          mutable_unknown_fields()->AddVarint(3, value);
        }
        if (input->ExpectTag(32)) goto parse_CharLevel;
        break;
      }
      
      // optional uint32 CharLevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charlevel_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_CharMetier;
        break;
      }
      
      // optional uint32 CharMetier = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharMetier:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charmetier_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Money1;
        break;
      }
      
      // optional uint32 Money1 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money1:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money1_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_Money2;
        break;
      }
      
      // optional uint32 Money2 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money2:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money2_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_Exp;
        break;
      }
      
      // optional uint64 Exp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Exp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &exp_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_LogoutFlag;
        break;
      }
      
      // optional uint32 LogoutFlag = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LogoutFlag:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &logoutflag_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_SaveFlag;
        break;
      }
      
      // optional .EMSaveResult SaveFlag = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SaveFlag:
        int value;
        DO_(::google::protobuf::internal::WireFormat::ReadEnum(input, &value));
        if (EMSaveResult_IsValid(value)) {
          set_saveflag(static_cast< EMSaveResult >(value));
        } else {
          mutable_unknown_fields()->AddVarint(10, value);
        }
        if (input->ExpectTag(88)) goto parse_GlobalSceneWorldID;
        break;
      }
      
      // optional uint32 GlobalSceneWorldID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GlobalSceneWorldID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &globalsceneworldid_));
        _set_bit(10);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePlayerLeaveMapNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePlayerLeaveMapNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 AccountID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->accountid(), output);
  }
  
  // optional .EMLeaveReason Reason = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteEnum(3, this->reason(), output);
  }
  
  // optional uint32 CharLevel = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->charlevel(), output);
  }
  
  // optional uint32 CharMetier = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->charmetier(), output);
  }
  
  // optional uint32 Money1 = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->money1(), output);
  }
  
  // optional uint32 Money2 = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->money2(), output);
  }
  
  // optional uint64 Exp = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(8, this->exp(), output);
  }
  
  // optional uint32 LogoutFlag = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->logoutflag(), output);
  }
  
  // optional .EMSaveResult SaveFlag = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteEnum(10, this->saveflag(), output);
  }
  
  // optional uint32 GlobalSceneWorldID = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->globalsceneworldid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePlayerLeaveMapNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 AccountID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->accountid(), target);
  }
  
  // optional .EMLeaveReason Reason = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteEnumToArray(3, this->reason(), target);
  }
  
  // optional uint32 CharLevel = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->charlevel(), target);
  }
  
  // optional uint32 CharMetier = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->charmetier(), target);
  }
  
  // optional uint32 Money1 = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->money1(), target);
  }
  
  // optional uint32 Money2 = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->money2(), target);
  }
  
  // optional uint64 Exp = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(8, this->exp(), target);
  }
  
  // optional uint32 LogoutFlag = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->logoutflag(), target);
  }
  
  // optional .EMSaveResult SaveFlag = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteEnumToArray(10, this->saveflag(), target);
  }
  
  // optional uint32 GlobalSceneWorldID = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->globalsceneworldid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePlayerLeaveMapNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 AccountID = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional .EMLeaveReason Reason = 3;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::EnumSize(this->reason());
    }
    
    // optional uint32 CharLevel = 4;
    if (has_charlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charlevel());
    }
    
    // optional uint32 CharMetier = 5;
    if (has_charmetier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charmetier());
    }
    
    // optional uint32 Money1 = 6;
    if (has_money1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money1());
    }
    
    // optional uint32 Money2 = 7;
    if (has_money2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money2());
    }
    
    // optional uint64 Exp = 8;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->exp());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 LogoutFlag = 9;
    if (has_logoutflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->logoutflag());
    }
    
    // optional .EMSaveResult SaveFlag = 10;
    if (has_saveflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::EnumSize(this->saveflag());
    }
    
    // optional uint32 GlobalSceneWorldID = 11;
    if (has_globalsceneworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->globalsceneworldid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePlayerLeaveMapNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePlayerLeaveMapNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePlayerLeaveMapNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePlayerLeaveMapNotice::MergeFrom(const CMessagePlayerLeaveMapNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(2)) {
      set_reason(from.reason());
    }
    if (from._has_bit(3)) {
      set_charlevel(from.charlevel());
    }
    if (from._has_bit(4)) {
      set_charmetier(from.charmetier());
    }
    if (from._has_bit(5)) {
      set_money1(from.money1());
    }
    if (from._has_bit(6)) {
      set_money2(from.money2());
    }
    if (from._has_bit(7)) {
      set_exp(from.exp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_logoutflag(from.logoutflag());
    }
    if (from._has_bit(9)) {
      set_saveflag(from.saveflag());
    }
    if (from._has_bit(10)) {
      set_globalsceneworldid(from.globalsceneworldid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePlayerLeaveMapNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerLeaveMapNotice::CopyFrom(const CMessagePlayerLeaveMapNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerLeaveMapNotice::Swap(CMessagePlayerLeaveMapNotice* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(accountid_, other->accountid_);
    std::swap(reason_, other->reason_);
    std::swap(charlevel_, other->charlevel_);
    std::swap(charmetier_, other->charmetier_);
    std::swap(money1_, other->money1_);
    std::swap(money2_, other->money2_);
    std::swap(exp_, other->exp_);
    std::swap(logoutflag_, other->logoutflag_);
    std::swap(saveflag_, other->saveflag_);
    std::swap(globalsceneworldid_, other->globalsceneworldid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePlayerLeaveMapNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePlayerLeaveMapNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePlayerLeaveMapNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerLeaveMapNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessagePlayerLeaveMapResponse::kCharIDFieldNumber;
#endif  // !_MSC_VER

CMessagePlayerLeaveMapResponse::CMessagePlayerLeaveMapResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePlayerLeaveMapResponse::InitAsDefaultInstance() {}

CMessagePlayerLeaveMapResponse::CMessagePlayerLeaveMapResponse(const CMessagePlayerLeaveMapResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePlayerLeaveMapResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePlayerLeaveMapResponse::~CMessagePlayerLeaveMapResponse() {
  SharedDtor();
}

void CMessagePlayerLeaveMapResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessagePlayerLeaveMapResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerLeaveMapResponse_descriptor_;
}

const CMessagePlayerLeaveMapResponse& CMessagePlayerLeaveMapResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePlayerLeaveMapResponse* CMessagePlayerLeaveMapResponse::default_instance_ = NULL;

CMessagePlayerLeaveMapResponse* CMessagePlayerLeaveMapResponse::New() const {
  return new CMessagePlayerLeaveMapResponse;
}

void CMessagePlayerLeaveMapResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePlayerLeaveMapResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePlayerLeaveMapResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePlayerLeaveMapResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePlayerLeaveMapResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePlayerLeaveMapResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePlayerLeaveMapResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePlayerLeaveMapResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePlayerLeaveMapResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePlayerLeaveMapResponse::MergeFrom(const CMessagePlayerLeaveMapResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePlayerLeaveMapResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerLeaveMapResponse::CopyFrom(const CMessagePlayerLeaveMapResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerLeaveMapResponse::Swap(CMessagePlayerLeaveMapResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePlayerLeaveMapResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePlayerLeaveMapResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePlayerLeaveMapResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerLeaveMapResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessagePlayerReturn2GateNotice::kAccountIDFieldNumber;
const int CMessagePlayerReturn2GateNotice::kCharIDFieldNumber;
#endif  // !_MSC_VER

CMessagePlayerReturn2GateNotice::CMessagePlayerReturn2GateNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePlayerReturn2GateNotice::InitAsDefaultInstance() {}

CMessagePlayerReturn2GateNotice::CMessagePlayerReturn2GateNotice(const CMessagePlayerReturn2GateNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePlayerReturn2GateNotice::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePlayerReturn2GateNotice::~CMessagePlayerReturn2GateNotice() {
  SharedDtor();
}

void CMessagePlayerReturn2GateNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessagePlayerReturn2GateNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerReturn2GateNotice_descriptor_;
}

const CMessagePlayerReturn2GateNotice& CMessagePlayerReturn2GateNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePlayerReturn2GateNotice* CMessagePlayerReturn2GateNotice::default_instance_ = NULL;

CMessagePlayerReturn2GateNotice* CMessagePlayerReturn2GateNotice::New() const {
  return new CMessagePlayerReturn2GateNotice;
}

void CMessagePlayerReturn2GateNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePlayerReturn2GateNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 AccountID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePlayerReturn2GateNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePlayerReturn2GateNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 AccountID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->accountid(), output);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePlayerReturn2GateNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 AccountID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->accountid(), target);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePlayerReturn2GateNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AccountID = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 CharID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePlayerReturn2GateNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePlayerReturn2GateNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePlayerReturn2GateNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePlayerReturn2GateNotice::MergeFrom(const CMessagePlayerReturn2GateNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(1)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePlayerReturn2GateNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerReturn2GateNotice::CopyFrom(const CMessagePlayerReturn2GateNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerReturn2GateNotice::Swap(CMessagePlayerReturn2GateNotice* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePlayerReturn2GateNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePlayerReturn2GateNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePlayerReturn2GateNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerReturn2GateNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessagePlayerReturn2GateResponse::kCharIDFieldNumber;
#endif  // !_MSC_VER

CMessagePlayerReturn2GateResponse::CMessagePlayerReturn2GateResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePlayerReturn2GateResponse::InitAsDefaultInstance() {}

CMessagePlayerReturn2GateResponse::CMessagePlayerReturn2GateResponse(const CMessagePlayerReturn2GateResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePlayerReturn2GateResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePlayerReturn2GateResponse::~CMessagePlayerReturn2GateResponse() {
  SharedDtor();
}

void CMessagePlayerReturn2GateResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessagePlayerReturn2GateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerReturn2GateResponse_descriptor_;
}

const CMessagePlayerReturn2GateResponse& CMessagePlayerReturn2GateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePlayerReturn2GateResponse* CMessagePlayerReturn2GateResponse::default_instance_ = NULL;

CMessagePlayerReturn2GateResponse* CMessagePlayerReturn2GateResponse::New() const {
  return new CMessagePlayerReturn2GateResponse;
}

void CMessagePlayerReturn2GateResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePlayerReturn2GateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePlayerReturn2GateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePlayerReturn2GateResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePlayerReturn2GateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePlayerReturn2GateResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePlayerReturn2GateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePlayerReturn2GateResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePlayerReturn2GateResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePlayerReturn2GateResponse::MergeFrom(const CMessagePlayerReturn2GateResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePlayerReturn2GateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerReturn2GateResponse::CopyFrom(const CMessagePlayerReturn2GateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerReturn2GateResponse::Swap(CMessagePlayerReturn2GateResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePlayerReturn2GateResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePlayerReturn2GateResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePlayerReturn2GateResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerReturn2GateResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageCreateMapNotice::_default_notice_;
#ifndef _MSC_VER
const int CMessageCreateMapNotice::kLineIDFieldNumber;
const int CMessageCreateMapNotice::kMapIDFieldNumber;
const int CMessageCreateMapNotice::kTplNameFieldNumber;
const int CMessageCreateMapNotice::kCountFieldNumber;
const int CMessageCreateMapNotice::kRtnCodeFieldNumber;
const int CMessageCreateMapNotice::kNoticeFieldNumber;
#endif  // !_MSC_VER

CMessageCreateMapNotice::CMessageCreateMapNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCreateMapNotice::InitAsDefaultInstance() {}

CMessageCreateMapNotice::CMessageCreateMapNotice(const CMessageCreateMapNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCreateMapNotice::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0u;
  rtncode_ = 0u;
  notice_ = const_cast< ::std::string*>(&_default_notice_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCreateMapNotice::~CMessageCreateMapNotice() {
  SharedDtor();
}

void CMessageCreateMapNotice::SharedDtor() {
  if (notice_ != &_default_notice_) {
    delete notice_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCreateMapNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCreateMapNotice_descriptor_;
}

const CMessageCreateMapNotice& CMessageCreateMapNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCreateMapNotice* CMessageCreateMapNotice::default_instance_ = NULL;

CMessageCreateMapNotice* CMessageCreateMapNotice::New() const {
  return new CMessageCreateMapNotice;
}

void CMessageCreateMapNotice::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    count_ = 0u;
    rtncode_ = 0u;
    if (_has_bit(5)) {
      if (notice_ != &_default_notice_) {
        notice_->clear();
      }
    }
  }
  lineid_.Clear();
  mapid_.Clear();
  tplname_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCreateMapNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated uint32 LineID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_lineid(value);
        if (input->ExpectTag(8)) goto parse_LineID;
        if (input->ExpectTag(16)) goto parse_MapID;
        break;
      }
      
      // repeated uint32 MapID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_mapid(value);
        if (input->ExpectTag(16)) goto parse_MapID;
        if (input->ExpectTag(26)) goto parse_TplName;
        break;
      }
      
      // repeated string TplName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_TplName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(
             input, add_tplname()));
        if (input->ExpectTag(26)) goto parse_TplName;
        if (input->ExpectTag(32)) goto parse_Count;
        break;
      }
      
      // optional uint32 Count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Count:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &count_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_RtnCode;
        break;
      }
      
      // optional uint32 RtnCode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RtnCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rtncode_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_Notice;
        break;
      }
      
      // optional string Notice = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Notice:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_notice()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCreateMapNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCreateMapNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated uint32 LineID = 1;
  for (int i = 0; i < this->lineid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->lineid(i), output);
  }
  
  // repeated uint32 MapID = 2;
  for (int i = 0; i < this->mapid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->mapid(i), output);
  }
  
  // repeated string TplName = 3;
  for (int i = 0; i < this->tplname_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->tplname(i), output);
  }
  
  // optional uint32 Count = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->count(), output);
  }
  
  // optional uint32 RtnCode = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->rtncode(), output);
  }
  
  // optional string Notice = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteString(6, this->notice(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCreateMapNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 LineID = 1;
  for (int i = 0; i < this->lineid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->lineid(i), target);
  }
  
  // repeated uint32 MapID = 2;
  for (int i = 0; i < this->mapid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->mapid(i), target);
  }
  
  // repeated string TplName = 3;
  for (int i = 0; i < this->tplname_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->tplname(i), target);
  }
  
  // optional uint32 Count = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->count(), target);
  }
  
  // optional uint32 RtnCode = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->rtncode(), target);
  }
  
  // optional string Notice = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(6, this->notice(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCreateMapNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional uint32 Count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->count());
    }
    
    // optional uint32 RtnCode = 5;
    if (has_rtncode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rtncode());
    }
    
    // optional string Notice = 6;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->notice());
    }
    
  }
  // repeated uint32 LineID = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->lineid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->lineid(i));
    }
    total_size += 1 * this->lineid_size() + data_size;
  }
  
  // repeated uint32 MapID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->mapid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->mapid(i));
    }
    total_size += 1 * this->mapid_size() + data_size;
  }
  
  // repeated string TplName = 3;
  total_size += 1 * this->tplname_size();
  for (int i = 0; i < this->tplname_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormat::StringSize(
      this->tplname(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCreateMapNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCreateMapNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCreateMapNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCreateMapNotice::MergeFrom(const CMessageCreateMapNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  lineid_.MergeFrom(from.lineid_);
  mapid_.MergeFrom(from.mapid_);
  tplname_.MergeFrom(from.tplname_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from._has_bit(3)) {
      set_count(from.count());
    }
    if (from._has_bit(4)) {
      set_rtncode(from.rtncode());
    }
    if (from._has_bit(5)) {
      set_notice(from.notice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCreateMapNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCreateMapNotice::CopyFrom(const CMessageCreateMapNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCreateMapNotice::Swap(CMessageCreateMapNotice* other) {
  if (other != this) {
    lineid_.Swap(&other->lineid_);
    mapid_.Swap(&other->mapid_);
    tplname_.Swap(&other->tplname_);
    std::swap(count_, other->count_);
    std::swap(rtncode_, other->rtncode_);
    std::swap(notice_, other->notice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCreateMapNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCreateMapNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCreateMapNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCreateMapNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCreateMapResponse::kLineIDFieldNumber;
const int CMessageCreateMapResponse::kMapIDFieldNumber;
const int CMessageCreateMapResponse::kTplNameFieldNumber;
#endif  // !_MSC_VER

CMessageCreateMapResponse::CMessageCreateMapResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCreateMapResponse::InitAsDefaultInstance() {}

CMessageCreateMapResponse::CMessageCreateMapResponse(const CMessageCreateMapResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCreateMapResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCreateMapResponse::~CMessageCreateMapResponse() {
  SharedDtor();
}

void CMessageCreateMapResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCreateMapResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCreateMapResponse_descriptor_;
}

const CMessageCreateMapResponse& CMessageCreateMapResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCreateMapResponse* CMessageCreateMapResponse::default_instance_ = NULL;

CMessageCreateMapResponse* CMessageCreateMapResponse::New() const {
  return new CMessageCreateMapResponse;
}

void CMessageCreateMapResponse::Clear() {
  lineid_.Clear();
  mapid_.Clear();
  tplname_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCreateMapResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated uint32 LineID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_lineid(value);
        if (input->ExpectTag(8)) goto parse_LineID;
        if (input->ExpectTag(16)) goto parse_MapID;
        break;
      }
      
      // repeated uint32 MapID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_mapid(value);
        if (input->ExpectTag(16)) goto parse_MapID;
        if (input->ExpectTag(26)) goto parse_TplName;
        break;
      }
      
      // repeated string TplName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_TplName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(
             input, add_tplname()));
        if (input->ExpectTag(26)) goto parse_TplName;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCreateMapResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCreateMapResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated uint32 LineID = 1;
  for (int i = 0; i < this->lineid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->lineid(i), output);
  }
  
  // repeated uint32 MapID = 2;
  for (int i = 0; i < this->mapid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->mapid(i), output);
  }
  
  // repeated string TplName = 3;
  for (int i = 0; i < this->tplname_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->tplname(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCreateMapResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 LineID = 1;
  for (int i = 0; i < this->lineid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->lineid(i), target);
  }
  
  // repeated uint32 MapID = 2;
  for (int i = 0; i < this->mapid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->mapid(i), target);
  }
  
  // repeated string TplName = 3;
  for (int i = 0; i < this->tplname_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->tplname(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCreateMapResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 LineID = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->lineid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->lineid(i));
    }
    total_size += 1 * this->lineid_size() + data_size;
  }
  
  // repeated uint32 MapID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->mapid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->mapid(i));
    }
    total_size += 1 * this->mapid_size() + data_size;
  }
  
  // repeated string TplName = 3;
  total_size += 1 * this->tplname_size();
  for (int i = 0; i < this->tplname_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormat::StringSize(
      this->tplname(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCreateMapResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCreateMapResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCreateMapResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCreateMapResponse::MergeFrom(const CMessageCreateMapResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  lineid_.MergeFrom(from.lineid_);
  mapid_.MergeFrom(from.mapid_);
  tplname_.MergeFrom(from.tplname_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCreateMapResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCreateMapResponse::CopyFrom(const CMessageCreateMapResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCreateMapResponse::Swap(CMessageCreateMapResponse* other) {
  if (other != this) {
    lineid_.Swap(&other->lineid_);
    mapid_.Swap(&other->mapid_);
    tplname_.Swap(&other->tplname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCreateMapResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCreateMapResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCreateMapResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCreateMapResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int BattleLevel::kLevelMinFieldNumber;
const int BattleLevel::kLevelMaxFieldNumber;
#endif  // !_MSC_VER

BattleLevel::BattleLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleLevel::InitAsDefaultInstance() {}

BattleLevel::BattleLevel(const BattleLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleLevel::SharedCtor() {
  _cached_size_ = 0;
  levelmin_ = 0u;
  levelmax_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleLevel::~BattleLevel() {
  SharedDtor();
}

void BattleLevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* BattleLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleLevel_descriptor_;
}

const BattleLevel& BattleLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

BattleLevel* BattleLevel::default_instance_ = NULL;

BattleLevel* BattleLevel::New() const {
  return new BattleLevel;
}

void BattleLevel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    levelmin_ = 0u;
    levelmax_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 LevelMin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &levelmin_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_LevelMax;
        break;
      }
      
      // optional uint32 LevelMax = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LevelMax:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &levelmax_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    BattleLevel::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 LevelMin = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->levelmin(), output);
  }
  
  // optional uint32 LevelMax = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->levelmax(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 LevelMin = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->levelmin(), target);
  }
  
  // optional uint32 LevelMax = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->levelmax(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleLevel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 LevelMin = 1;
    if (has_levelmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->levelmin());
    }
    
    // optional uint32 LevelMax = 2;
    if (has_levelmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->levelmax());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void BattleLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleLevel::MergeFrom(const BattleLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_levelmin(from.levelmin());
    }
    if (from._has_bit(1)) {
      set_levelmax(from.levelmax());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleLevel::CopyFrom(const BattleLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleLevel::Swap(BattleLevel* other) {
  if (other != this) {
    std::swap(levelmin_, other->levelmin_);
    std::swap(levelmax_, other->levelmax_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool BattleLevel::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* BattleLevel::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* BattleLevel::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return BattleLevel_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBDate::kYearFieldNumber;
const int PBDate::kMonthFieldNumber;
const int PBDate::kDayFieldNumber;
const int PBDate::kWeekFieldNumber;
const int PBDate::kHrFieldNumber;
const int PBDate::kMinuteFieldNumber;
const int PBDate::kSecFieldNumber;
#endif  // !_MSC_VER

PBDate::PBDate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBDate::InitAsDefaultInstance() {}

PBDate::PBDate(const PBDate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBDate::SharedCtor() {
  _cached_size_ = 0;
  year_ = 0u;
  month_ = 0u;
  day_ = 0u;
  week_ = 0u;
  hr_ = 0u;
  minute_ = 0u;
  sec_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBDate::~PBDate() {
  SharedDtor();
}

void PBDate::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBDate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBDate_descriptor_;
}

const PBDate& PBDate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

PBDate* PBDate::default_instance_ = NULL;

PBDate* PBDate::New() const {
  return new PBDate;
}

void PBDate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    year_ = 0u;
    month_ = 0u;
    day_ = 0u;
    week_ = 0u;
    hr_ = 0u;
    minute_ = 0u;
    sec_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBDate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Year = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &year_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Month;
        break;
      }
      
      // optional uint32 Month = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Month:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &month_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Day;
        break;
      }
      
      // optional uint32 Day = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Day:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &day_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Week;
        break;
      }
      
      // optional uint32 Week = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Week:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &week_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Hr;
        break;
      }
      
      // optional uint32 Hr = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Hr:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &hr_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Minute;
        break;
      }
      
      // optional uint32 Minute = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Minute:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &minute_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_Sec;
        break;
      }
      
      // optional uint32 Sec = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Sec:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sec_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBDate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBDate::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Year = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->year(), output);
  }
  
  // optional uint32 Month = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->month(), output);
  }
  
  // optional uint32 Day = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->day(), output);
  }
  
  // optional uint32 Week = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->week(), output);
  }
  
  // optional uint32 Hr = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->hr(), output);
  }
  
  // optional uint32 Minute = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->minute(), output);
  }
  
  // optional uint32 Sec = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->sec(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBDate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Year = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->year(), target);
  }
  
  // optional uint32 Month = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->month(), target);
  }
  
  // optional uint32 Day = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->day(), target);
  }
  
  // optional uint32 Week = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->week(), target);
  }
  
  // optional uint32 Hr = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->hr(), target);
  }
  
  // optional uint32 Minute = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->minute(), target);
  }
  
  // optional uint32 Sec = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->sec(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBDate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Year = 1;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->year());
    }
    
    // optional uint32 Month = 2;
    if (has_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->month());
    }
    
    // optional uint32 Day = 3;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->day());
    }
    
    // optional uint32 Week = 4;
    if (has_week()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->week());
    }
    
    // optional uint32 Hr = 5;
    if (has_hr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->hr());
    }
    
    // optional uint32 Minute = 6;
    if (has_minute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->minute());
    }
    
    // optional uint32 Sec = 7;
    if (has_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sec());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBDate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBDate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBDate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBDate::MergeFrom(const PBDate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_year(from.year());
    }
    if (from._has_bit(1)) {
      set_month(from.month());
    }
    if (from._has_bit(2)) {
      set_day(from.day());
    }
    if (from._has_bit(3)) {
      set_week(from.week());
    }
    if (from._has_bit(4)) {
      set_hr(from.hr());
    }
    if (from._has_bit(5)) {
      set_minute(from.minute());
    }
    if (from._has_bit(6)) {
      set_sec(from.sec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBDate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDate::CopyFrom(const PBDate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDate::Swap(PBDate* other) {
  if (other != this) {
    std::swap(year_, other->year_);
    std::swap(month_, other->month_);
    std::swap(day_, other->day_);
    std::swap(week_, other->week_);
    std::swap(hr_, other->hr_);
    std::swap(minute_, other->minute_);
    std::swap(sec_, other->sec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBDate::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBDate::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBDate::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBDate_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBDateSpace::kStartFieldNumber;
const int PBDateSpace::kFinishFieldNumber;
#endif  // !_MSC_VER

PBDateSpace::PBDateSpace()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBDateSpace::InitAsDefaultInstance() {  start_ = const_cast< ::PBDate*>(&::PBDate::default_instance());
  finish_ = const_cast< ::PBDate*>(&::PBDate::default_instance());
}

PBDateSpace::PBDateSpace(const PBDateSpace& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBDateSpace::SharedCtor() {
  _cached_size_ = 0;
  start_ = NULL;
  finish_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBDateSpace::~PBDateSpace() {
  SharedDtor();
}

void PBDateSpace::SharedDtor() {
  if (this != default_instance_) {
    delete start_;
    delete finish_;
  }
}

const ::google::protobuf::Descriptor* PBDateSpace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBDateSpace_descriptor_;
}

const PBDateSpace& PBDateSpace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

PBDateSpace* PBDateSpace::default_instance_ = NULL;

PBDateSpace* PBDateSpace::New() const {
  return new PBDateSpace;
}

void PBDateSpace::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (start_ != NULL) start_->::PBDate::Clear();
    }
    if (_has_bit(1)) {
      if (finish_ != NULL) finish_->::PBDate::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBDateSpace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBDate Start = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_start()));
        if (input->ExpectTag(18)) goto parse_finish;
        break;
      }
      
      // optional .PBDate finish = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_finish:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_finish()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBDateSpace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBDateSpace::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBDate Start = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->start(), output);
  }
  
  // optional .PBDate finish = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->finish(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBDateSpace::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBDate Start = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->start(), target);
  }
  
  // optional .PBDate finish = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->finish(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBDateSpace::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBDate Start = 1;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->start());
    }
    
    // optional .PBDate finish = 2;
    if (has_finish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->finish());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBDateSpace::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBDateSpace* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBDateSpace*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBDateSpace::MergeFrom(const PBDateSpace& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_start()->::PBDate::MergeFrom(from.start());
    }
    if (from._has_bit(1)) {
      mutable_finish()->::PBDate::MergeFrom(from.finish());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBDateSpace::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDateSpace::CopyFrom(const PBDateSpace& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDateSpace::Swap(PBDateSpace* other) {
  if (other != this) {
    std::swap(start_, other->start_);
    std::swap(finish_, other->finish_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBDateSpace::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBDateSpace::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBDateSpace::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBDateSpace_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageRegistRepetionInfo::kLineIDFieldNumber;
const int CMessageRegistRepetionInfo::kMapIDFieldNumber;
const int CMessageRegistRepetionInfo::kPlayerMaxFieldNumber;
const int CMessageRegistRepetionInfo::kBackMapIDFieldNumber;
const int CMessageRegistRepetionInfo::kBackPosXFieldNumber;
const int CMessageRegistRepetionInfo::kBackPosYFieldNumber;
const int CMessageRegistRepetionInfo::kCountMaxFieldNumber;
const int CMessageRegistRepetionInfo::kRepetionIDFieldNumber;
const int CMessageRegistRepetionInfo::kLevelFieldNumber;
const int CMessageRegistRepetionInfo::kSpaceFieldNumber;
const int CMessageRegistRepetionInfo::kIsOnTimeOpenFieldNumber;
const int CMessageRegistRepetionInfo::kNotLimitTimeFieldNumber;
const int CMessageRegistRepetionInfo::kReloginFieldNumber;
#endif  // !_MSC_VER

CMessageRegistRepetionInfo::CMessageRegistRepetionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRegistRepetionInfo::InitAsDefaultInstance() {}

CMessageRegistRepetionInfo::CMessageRegistRepetionInfo(const CMessageRegistRepetionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRegistRepetionInfo::SharedCtor() {
  _cached_size_ = 0;
  lineid_ = 0u;
  playermax_ = 0u;
  backmapid_ = 0u;
  backposx_ = 0u;
  backposy_ = 0u;
  countmax_ = 0u;
  repetionid_ = 0u;
  isontimeopen_ = 0u;
  notlimittime_ = 0u;
  relogin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRegistRepetionInfo::~CMessageRegistRepetionInfo() {
  SharedDtor();
}

void CMessageRegistRepetionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageRegistRepetionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRegistRepetionInfo_descriptor_;
}

const CMessageRegistRepetionInfo& CMessageRegistRepetionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRegistRepetionInfo* CMessageRegistRepetionInfo::default_instance_ = NULL;

CMessageRegistRepetionInfo* CMessageRegistRepetionInfo::New() const {
  return new CMessageRegistRepetionInfo;
}

void CMessageRegistRepetionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lineid_ = 0u;
    playermax_ = 0u;
    backmapid_ = 0u;
    backposx_ = 0u;
    backposy_ = 0u;
    countmax_ = 0u;
    repetionid_ = 0u;
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    isontimeopen_ = 0u;
    notlimittime_ = 0u;
    relogin_ = 0u;
  }
  mapid_.Clear();
  level_.Clear();
  space_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRegistRepetionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 LineID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lineid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_MapID;
        break;
      }
      
      // repeated uint32 MapID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_mapid(value);
        if (input->ExpectTag(16)) goto parse_MapID;
        if (input->ExpectTag(24)) goto parse_PlayerMax;
        break;
      }
      
      // optional uint32 PlayerMax = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PlayerMax:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playermax_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_BackMapID;
        break;
      }
      
      // optional uint32 BackMapID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BackMapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &backmapid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_BackPosX;
        break;
      }
      
      // optional uint32 BackPosX = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BackPosX:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &backposx_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_BackPosY;
        break;
      }
      
      // optional uint32 BackPosY = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BackPosY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &backposy_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_CountMax;
        break;
      }
      
      // optional uint32 CountMax = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CountMax:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &countmax_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_RepetionID;
        break;
      }
      
      // optional uint32 RepetionID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RepetionID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &repetionid_));
        _set_bit(7);
        if (input->ExpectTag(74)) goto parse_Level;
        break;
      }
      
      // repeated .BattleLevel Level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_level()));
        if (input->ExpectTag(74)) goto parse_Level;
        if (input->ExpectTag(82)) goto parse_Space;
        break;
      }
      
      // repeated .PBDateSpace Space = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Space:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_space()));
        if (input->ExpectTag(82)) goto parse_Space;
        if (input->ExpectTag(88)) goto parse_IsOnTimeOpen;
        break;
      }
      
      // optional uint32 IsOnTimeOpen = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IsOnTimeOpen:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &isontimeopen_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_NotLimitTime;
        break;
      }
      
      // optional uint32 NotLimitTime = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NotLimitTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &notlimittime_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_Relogin;
        break;
      }
      
      // optional uint32 Relogin = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Relogin:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &relogin_));
        _set_bit(12);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageRegistRepetionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRegistRepetionInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 LineID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->lineid(), output);
  }
  
  // repeated uint32 MapID = 2;
  for (int i = 0; i < this->mapid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->mapid(i), output);
  }
  
  // optional uint32 PlayerMax = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->playermax(), output);
  }
  
  // optional uint32 BackMapID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->backmapid(), output);
  }
  
  // optional uint32 BackPosX = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->backposx(), output);
  }
  
  // optional uint32 BackPosY = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->backposy(), output);
  }
  
  // optional uint32 CountMax = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->countmax(), output);
  }
  
  // optional uint32 RepetionID = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->repetionid(), output);
  }
  
  // repeated .BattleLevel Level = 9;
  for (int i = 0; i < this->level_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(9, this->level(i), output);
  }
  
  // repeated .PBDateSpace Space = 10;
  for (int i = 0; i < this->space_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(10, this->space(i), output);
  }
  
  // optional uint32 IsOnTimeOpen = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->isontimeopen(), output);
  }
  
  // optional uint32 NotLimitTime = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->notlimittime(), output);
  }
  
  // optional uint32 Relogin = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->relogin(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRegistRepetionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 LineID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->lineid(), target);
  }
  
  // repeated uint32 MapID = 2;
  for (int i = 0; i < this->mapid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->mapid(i), target);
  }
  
  // optional uint32 PlayerMax = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->playermax(), target);
  }
  
  // optional uint32 BackMapID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->backmapid(), target);
  }
  
  // optional uint32 BackPosX = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->backposx(), target);
  }
  
  // optional uint32 BackPosY = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->backposy(), target);
  }
  
  // optional uint32 CountMax = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->countmax(), target);
  }
  
  // optional uint32 RepetionID = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->repetionid(), target);
  }
  
  // repeated .BattleLevel Level = 9;
  for (int i = 0; i < this->level_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(9, this->level(i), target);
  }
  
  // repeated .PBDateSpace Space = 10;
  for (int i = 0; i < this->space_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(10, this->space(i), target);
  }
  
  // optional uint32 IsOnTimeOpen = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->isontimeopen(), target);
  }
  
  // optional uint32 NotLimitTime = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->notlimittime(), target);
  }
  
  // optional uint32 Relogin = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->relogin(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRegistRepetionInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 LineID = 1;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lineid());
    }
    
    // optional uint32 PlayerMax = 3;
    if (has_playermax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playermax());
    }
    
    // optional uint32 BackMapID = 4;
    if (has_backmapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->backmapid());
    }
    
    // optional uint32 BackPosX = 5;
    if (has_backposx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->backposx());
    }
    
    // optional uint32 BackPosY = 6;
    if (has_backposy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->backposy());
    }
    
    // optional uint32 CountMax = 7;
    if (has_countmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->countmax());
    }
    
    // optional uint32 RepetionID = 8;
    if (has_repetionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->repetionid());
    }
    
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional uint32 IsOnTimeOpen = 11;
    if (has_isontimeopen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->isontimeopen());
    }
    
    // optional uint32 NotLimitTime = 12;
    if (has_notlimittime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->notlimittime());
    }
    
    // optional uint32 Relogin = 13;
    if (has_relogin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->relogin());
    }
    
  }
  // repeated uint32 MapID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->mapid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->mapid(i));
    }
    total_size += 1 * this->mapid_size() + data_size;
  }
  
  // repeated .BattleLevel Level = 9;
  total_size += 1 * this->level_size();
  for (int i = 0; i < this->level_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->level(i));
  }
  
  // repeated .PBDateSpace Space = 10;
  total_size += 1 * this->space_size();
  for (int i = 0; i < this->space_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->space(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRegistRepetionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRegistRepetionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRegistRepetionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRegistRepetionInfo::MergeFrom(const CMessageRegistRepetionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mapid_.MergeFrom(from.mapid_);
  level_.MergeFrom(from.level_);
  space_.MergeFrom(from.space_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(2)) {
      set_playermax(from.playermax());
    }
    if (from._has_bit(3)) {
      set_backmapid(from.backmapid());
    }
    if (from._has_bit(4)) {
      set_backposx(from.backposx());
    }
    if (from._has_bit(5)) {
      set_backposy(from.backposy());
    }
    if (from._has_bit(6)) {
      set_countmax(from.countmax());
    }
    if (from._has_bit(7)) {
      set_repetionid(from.repetionid());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from._has_bit(10)) {
      set_isontimeopen(from.isontimeopen());
    }
    if (from._has_bit(11)) {
      set_notlimittime(from.notlimittime());
    }
    if (from._has_bit(12)) {
      set_relogin(from.relogin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRegistRepetionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRegistRepetionInfo::CopyFrom(const CMessageRegistRepetionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRegistRepetionInfo::Swap(CMessageRegistRepetionInfo* other) {
  if (other != this) {
    std::swap(lineid_, other->lineid_);
    mapid_.Swap(&other->mapid_);
    std::swap(playermax_, other->playermax_);
    std::swap(backmapid_, other->backmapid_);
    std::swap(backposx_, other->backposx_);
    std::swap(backposy_, other->backposy_);
    std::swap(countmax_, other->countmax_);
    std::swap(repetionid_, other->repetionid_);
    level_.Swap(&other->level_);
    space_.Swap(&other->space_);
    std::swap(isontimeopen_, other->isontimeopen_);
    std::swap(notlimittime_, other->notlimittime_);
    std::swap(relogin_, other->relogin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRegistRepetionInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRegistRepetionInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRegistRepetionInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRegistRepetionInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageDestroyRepetionMap::kRepetionIndexFieldNumber;
const int CMessageDestroyRepetionMap::kKeyFieldNumber;
const int CMessageDestroyRepetionMap::kParameFieldNumber;
#endif  // !_MSC_VER

CMessageDestroyRepetionMap::CMessageDestroyRepetionMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageDestroyRepetionMap::InitAsDefaultInstance() {}

CMessageDestroyRepetionMap::CMessageDestroyRepetionMap(const CMessageDestroyRepetionMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageDestroyRepetionMap::SharedCtor() {
  _cached_size_ = 0;
  repetionindex_ = 0u;
  key_ = GOOGLE_ULONGLONG(0);
  parame_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageDestroyRepetionMap::~CMessageDestroyRepetionMap() {
  SharedDtor();
}

void CMessageDestroyRepetionMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageDestroyRepetionMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageDestroyRepetionMap_descriptor_;
}

const CMessageDestroyRepetionMap& CMessageDestroyRepetionMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageDestroyRepetionMap* CMessageDestroyRepetionMap::default_instance_ = NULL;

CMessageDestroyRepetionMap* CMessageDestroyRepetionMap::New() const {
  return new CMessageDestroyRepetionMap;
}

void CMessageDestroyRepetionMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    repetionindex_ = 0u;
    key_ = GOOGLE_ULONGLONG(0);
    parame_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageDestroyRepetionMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RepetionIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &repetionindex_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Key;
        break;
      }
      
      // optional uint64 Key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Key:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &key_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Parame;
        break;
      }
      
      // optional uint32 Parame = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Parame:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &parame_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageDestroyRepetionMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageDestroyRepetionMap::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RepetionIndex = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->repetionindex(), output);
  }
  
  // optional uint64 Key = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(2, this->key(), output);
  }
  
  // optional uint32 Parame = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->parame(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageDestroyRepetionMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RepetionIndex = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->repetionindex(), target);
  }
  
  // optional uint64 Key = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(2, this->key(), target);
  }
  
  // optional uint32 Parame = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->parame(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageDestroyRepetionMap::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RepetionIndex = 1;
    if (has_repetionindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->repetionindex());
    }
    
    // optional uint64 Key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->key());
    }
    
    // optional uint32 Parame = 3;
    if (has_parame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->parame());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageDestroyRepetionMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageDestroyRepetionMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageDestroyRepetionMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageDestroyRepetionMap::MergeFrom(const CMessageDestroyRepetionMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_repetionindex(from.repetionindex());
    }
    if (from._has_bit(1)) {
      set_key(from.key());
    }
    if (from._has_bit(2)) {
      set_parame(from.parame());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageDestroyRepetionMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDestroyRepetionMap::CopyFrom(const CMessageDestroyRepetionMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDestroyRepetionMap::Swap(CMessageDestroyRepetionMap* other) {
  if (other != this) {
    std::swap(repetionindex_, other->repetionindex_);
    std::swap(key_, other->key_);
    std::swap(parame_, other->parame_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageDestroyRepetionMap::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageDestroyRepetionMap::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageDestroyRepetionMap::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageDestroyRepetionMap_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageG2SRepetionEventCode::kRoleIDFieldNumber;
const int CMessageG2SRepetionEventCode::kCodeFieldNumber;
const int CMessageG2SRepetionEventCode::kRepetionIDFieldNumber;
const int CMessageG2SRepetionEventCode::kParameFieldNumber;
#endif  // !_MSC_VER

CMessageG2SRepetionEventCode::CMessageG2SRepetionEventCode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageG2SRepetionEventCode::InitAsDefaultInstance() {}

CMessageG2SRepetionEventCode::CMessageG2SRepetionEventCode(const CMessageG2SRepetionEventCode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageG2SRepetionEventCode::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  code_ = 0;
  repetionid_ = 0;
  parame_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageG2SRepetionEventCode::~CMessageG2SRepetionEventCode() {
  SharedDtor();
}

void CMessageG2SRepetionEventCode::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageG2SRepetionEventCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageG2SRepetionEventCode_descriptor_;
}

const CMessageG2SRepetionEventCode& CMessageG2SRepetionEventCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageG2SRepetionEventCode* CMessageG2SRepetionEventCode::default_instance_ = NULL;

CMessageG2SRepetionEventCode* CMessageG2SRepetionEventCode::New() const {
  return new CMessageG2SRepetionEventCode;
}

void CMessageG2SRepetionEventCode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    code_ = 0;
    repetionid_ = 0;
    parame_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageG2SRepetionEventCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional int32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Code;
        break;
      }
      
      // optional int32 Code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Code:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &code_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_RepetionID;
        break;
      }
      
      // optional int32 RepetionID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RepetionID:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &repetionid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Parame;
        break;
      }
      
      // optional int32 Parame = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Parame:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &parame_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageG2SRepetionEventCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageG2SRepetionEventCode::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(1, this->roleid(), output);
  }
  
  // optional int32 Code = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(2, this->code(), output);
  }
  
  // optional int32 RepetionID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->repetionid(), output);
  }
  
  // optional int32 Parame = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->parame(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageG2SRepetionEventCode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(1, this->roleid(), target);
  }
  
  // optional int32 Code = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(2, this->code(), target);
  }
  
  // optional int32 RepetionID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->repetionid(), target);
  }
  
  // optional int32 Parame = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->parame(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageG2SRepetionEventCode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->roleid());
    }
    
    // optional int32 Code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->code());
    }
    
    // optional int32 RepetionID = 3;
    if (has_repetionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->repetionid());
    }
    
    // optional int32 Parame = 4;
    if (has_parame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->parame());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageG2SRepetionEventCode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageG2SRepetionEventCode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageG2SRepetionEventCode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageG2SRepetionEventCode::MergeFrom(const CMessageG2SRepetionEventCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_code(from.code());
    }
    if (from._has_bit(2)) {
      set_repetionid(from.repetionid());
    }
    if (from._has_bit(3)) {
      set_parame(from.parame());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageG2SRepetionEventCode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageG2SRepetionEventCode::CopyFrom(const CMessageG2SRepetionEventCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageG2SRepetionEventCode::Swap(CMessageG2SRepetionEventCode* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(code_, other->code_);
    std::swap(repetionid_, other->repetionid_);
    std::swap(parame_, other->parame_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageG2SRepetionEventCode::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageG2SRepetionEventCode::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageG2SRepetionEventCode::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageG2SRepetionEventCode_reflection_;
}

// ===================================================================

const ::std::string CMessagePlayerRedirectRequest::_default_charname_;
const ::std::string CMessagePlayerRedirectRequest::_default_data_;
const ::std::string CMessagePlayerRedirectRequest::_default_encryptkey_;
#ifndef _MSC_VER
const int CMessagePlayerRedirectRequest::kLineIDFieldNumber;
const int CMessagePlayerRedirectRequest::kMapIDFieldNumber;
const int CMessagePlayerRedirectRequest::kPosXFieldNumber;
const int CMessagePlayerRedirectRequest::kPosYFieldNumber;
const int CMessagePlayerRedirectRequest::kAccountIDFieldNumber;
const int CMessagePlayerRedirectRequest::kCharIDFieldNumber;
const int CMessagePlayerRedirectRequest::kCharNameFieldNumber;
const int CMessagePlayerRedirectRequest::kGenderFieldNumber;
const int CMessagePlayerRedirectRequest::kMetierFieldNumber;
const int CMessagePlayerRedirectRequest::kNationalityFieldNumber;
const int CMessagePlayerRedirectRequest::kFacetypeFieldNumber;
const int CMessagePlayerRedirectRequest::kCharlevelFieldNumber;
const int CMessagePlayerRedirectRequest::kExpFieldNumber;
const int CMessagePlayerRedirectRequest::kLastloginFieldNumber;
const int CMessagePlayerRedirectRequest::kDataLengthFieldNumber;
const int CMessagePlayerRedirectRequest::kDataFieldNumber;
const int CMessagePlayerRedirectRequest::kTeamFlagFieldNumber;
const int CMessagePlayerRedirectRequest::kTeamLevelFieldNumber;
const int CMessagePlayerRedirectRequest::kEncryptKeyFieldNumber;
const int CMessagePlayerRedirectRequest::kTeamInfoFieldNumber;
const int CMessagePlayerRedirectRequest::kPetTempIDFieldNumber;
const int CMessagePlayerRedirectRequest::kPetOnlineTimeFieldNumber;
const int CMessagePlayerRedirectRequest::kPetModeFieldNumber;
#endif  // !_MSC_VER

CMessagePlayerRedirectRequest::CMessagePlayerRedirectRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePlayerRedirectRequest::InitAsDefaultInstance() {  teaminfo_ = const_cast< ::PBTeamInfo*>(&::PBTeamInfo::default_instance());
}

CMessagePlayerRedirectRequest::CMessagePlayerRedirectRequest(const CMessagePlayerRedirectRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePlayerRedirectRequest::SharedCtor() {
  _cached_size_ = 0;
  lineid_ = 0u;
  mapid_ = 0u;
  posx_ = 0u;
  posy_ = 0u;
  accountid_ = 0u;
  charid_ = 0u;
  charname_ = const_cast< ::std::string*>(&_default_charname_);
  gender_ = 0u;
  metier_ = 0u;
  nationality_ = 0u;
  facetype_ = 0u;
  charlevel_ = 0u;
  exp_ = GOOGLE_ULONGLONG(0);
  lastlogin_ = 0u;
  datalength_ = 0u;
  data_ = const_cast< ::std::string*>(&_default_data_);
  teamflag_ = 0u;
  teamlevel_ = 0u;
  encryptkey_ = const_cast< ::std::string*>(&_default_encryptkey_);
  teaminfo_ = NULL;
  pettempid_ = 0u;
  petonlinetime_ = 0u;
  petmode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePlayerRedirectRequest::~CMessagePlayerRedirectRequest() {
  SharedDtor();
}

void CMessagePlayerRedirectRequest::SharedDtor() {
  if (charname_ != &_default_charname_) {
    delete charname_;
  }
  if (data_ != &_default_data_) {
    delete data_;
  }
  if (encryptkey_ != &_default_encryptkey_) {
    delete encryptkey_;
  }
  if (this != default_instance_) {
    delete teaminfo_;
  }
}

const ::google::protobuf::Descriptor* CMessagePlayerRedirectRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerRedirectRequest_descriptor_;
}

const CMessagePlayerRedirectRequest& CMessagePlayerRedirectRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePlayerRedirectRequest* CMessagePlayerRedirectRequest::default_instance_ = NULL;

CMessagePlayerRedirectRequest* CMessagePlayerRedirectRequest::New() const {
  return new CMessagePlayerRedirectRequest;
}

void CMessagePlayerRedirectRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lineid_ = 0u;
    mapid_ = 0u;
    posx_ = 0u;
    posy_ = 0u;
    accountid_ = 0u;
    charid_ = 0u;
    if (_has_bit(6)) {
      if (charname_ != &_default_charname_) {
        charname_->clear();
      }
    }
    gender_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    metier_ = 0u;
    nationality_ = 0u;
    facetype_ = 0u;
    charlevel_ = 0u;
    exp_ = GOOGLE_ULONGLONG(0);
    lastlogin_ = 0u;
    datalength_ = 0u;
    if (_has_bit(15)) {
      if (data_ != &_default_data_) {
        data_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    teamflag_ = 0u;
    teamlevel_ = 0u;
    if (_has_bit(18)) {
      if (encryptkey_ != &_default_encryptkey_) {
        encryptkey_->clear();
      }
    }
    if (_has_bit(19)) {
      if (teaminfo_ != NULL) teaminfo_->::PBTeamInfo::Clear();
    }
    pettempid_ = 0u;
    petonlinetime_ = 0u;
    petmode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePlayerRedirectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 LineID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lineid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_PosX;
        break;
      }
      
      // optional uint32 PosX = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosX:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posx_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_PosY;
        break;
      }
      
      // optional uint32 PosY = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posy_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_AccountID;
        break;
      }
      
      // optional uint32 AccountID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AccountID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(5);
        if (input->ExpectTag(58)) goto parse_CharName;
        break;
      }
      
      // optional string CharName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CharName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_charname()));
        if (input->ExpectTag(64)) goto parse_Gender;
        break;
      }
      
      // optional uint32 Gender = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Gender:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &gender_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_Metier;
        break;
      }
      
      // optional uint32 Metier = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Metier:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &metier_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_Nationality;
        break;
      }
      
      // optional uint32 Nationality = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Nationality:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &nationality_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_Facetype;
        break;
      }
      
      // optional uint32 Facetype = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Facetype:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &facetype_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_Charlevel;
        break;
      }
      
      // optional uint32 Charlevel = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Charlevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charlevel_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_Exp;
        break;
      }
      
      // optional uint64 Exp = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Exp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &exp_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_Lastlogin;
        break;
      }
      
      // optional uint32 Lastlogin = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Lastlogin:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lastlogin_));
        _set_bit(13);
        if (input->ExpectTag(128)) goto parse_DataLength;
        break;
      }
      
      // optional uint32 DataLength = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DataLength:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &datalength_));
        _set_bit(14);
        if (input->ExpectTag(138)) goto parse_Data;
        break;
      }
      
      // optional bytes Data = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Data:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_data()));
        if (input->ExpectTag(144)) goto parse_TeamFlag;
        break;
      }
      
      // optional uint32 TeamFlag = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TeamFlag:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &teamflag_));
        _set_bit(16);
        if (input->ExpectTag(152)) goto parse_TeamLevel;
        break;
      }
      
      // optional uint32 TeamLevel = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TeamLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &teamlevel_));
        _set_bit(17);
        if (input->ExpectTag(162)) goto parse_EncryptKey;
        break;
      }
      
      // optional bytes EncryptKey = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_EncryptKey:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_encryptkey()));
        if (input->ExpectTag(170)) goto parse_TeamInfo;
        break;
      }
      
      // optional .PBTeamInfo TeamInfo = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_TeamInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_teaminfo()));
        if (input->ExpectTag(176)) goto parse_PetTempID;
        break;
      }
      
      // optional uint32 PetTempID = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PetTempID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pettempid_));
        _set_bit(20);
        if (input->ExpectTag(184)) goto parse_PetOnlineTime;
        break;
      }
      
      // optional uint32 PetOnlineTime = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PetOnlineTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &petonlinetime_));
        _set_bit(21);
        if (input->ExpectTag(192)) goto parse_PetMode;
        break;
      }
      
      // optional uint32 PetMode = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PetMode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &petmode_));
        _set_bit(22);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePlayerRedirectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePlayerRedirectRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 LineID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->lineid(), output);
  }
  
  // optional uint32 MapID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->mapid(), output);
  }
  
  // optional uint32 PosX = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->posx(), output);
  }
  
  // optional uint32 PosY = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->posy(), output);
  }
  
  // optional uint32 AccountID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->accountid(), output);
  }
  
  // optional uint32 CharID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->charid(), output);
  }
  
  // optional string CharName = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteString(7, this->charname(), output);
  }
  
  // optional uint32 Gender = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->gender(), output);
  }
  
  // optional uint32 Metier = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->metier(), output);
  }
  
  // optional uint32 Nationality = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->nationality(), output);
  }
  
  // optional uint32 Facetype = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->facetype(), output);
  }
  
  // optional uint32 Charlevel = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->charlevel(), output);
  }
  
  // optional uint64 Exp = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(13, this->exp(), output);
  }
  
  // optional uint32 Lastlogin = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->lastlogin(), output);
  }
  
  // optional uint32 DataLength = 16;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(16, this->datalength(), output);
  }
  
  // optional bytes Data = 17;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(17, this->data(), output);
  }
  
  // optional uint32 TeamFlag = 18;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(18, this->teamflag(), output);
  }
  
  // optional uint32 TeamLevel = 19;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(19, this->teamlevel(), output);
  }
  
  // optional bytes EncryptKey = 20;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(20, this->encryptkey(), output);
  }
  
  // optional .PBTeamInfo TeamInfo = 21;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(21, this->teaminfo(), output);
  }
  
  // optional uint32 PetTempID = 22;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(22, this->pettempid(), output);
  }
  
  // optional uint32 PetOnlineTime = 23;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(23, this->petonlinetime(), output);
  }
  
  // optional uint32 PetMode = 24;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(24, this->petmode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePlayerRedirectRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 LineID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->lineid(), target);
  }
  
  // optional uint32 MapID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->mapid(), target);
  }
  
  // optional uint32 PosX = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->posx(), target);
  }
  
  // optional uint32 PosY = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->posy(), target);
  }
  
  // optional uint32 AccountID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->accountid(), target);
  }
  
  // optional uint32 CharID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->charid(), target);
  }
  
  // optional string CharName = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(7, this->charname(), target);
  }
  
  // optional uint32 Gender = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->gender(), target);
  }
  
  // optional uint32 Metier = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->metier(), target);
  }
  
  // optional uint32 Nationality = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->nationality(), target);
  }
  
  // optional uint32 Facetype = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->facetype(), target);
  }
  
  // optional uint32 Charlevel = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->charlevel(), target);
  }
  
  // optional uint64 Exp = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(13, this->exp(), target);
  }
  
  // optional uint32 Lastlogin = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->lastlogin(), target);
  }
  
  // optional uint32 DataLength = 16;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(16, this->datalength(), target);
  }
  
  // optional bytes Data = 17;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(17, this->data(), target);
  }
  
  // optional uint32 TeamFlag = 18;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(18, this->teamflag(), target);
  }
  
  // optional uint32 TeamLevel = 19;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(19, this->teamlevel(), target);
  }
  
  // optional bytes EncryptKey = 20;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(20, this->encryptkey(), target);
  }
  
  // optional .PBTeamInfo TeamInfo = 21;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(21, this->teaminfo(), target);
  }
  
  // optional uint32 PetTempID = 22;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(22, this->pettempid(), target);
  }
  
  // optional uint32 PetOnlineTime = 23;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(23, this->petonlinetime(), target);
  }
  
  // optional uint32 PetMode = 24;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(24, this->petmode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePlayerRedirectRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 LineID = 1;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lineid());
    }
    
    // optional uint32 MapID = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 PosX = 3;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posx());
    }
    
    // optional uint32 PosY = 4;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posy());
    }
    
    // optional uint32 AccountID = 5;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 CharID = 6;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional string CharName = 7;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->charname());
    }
    
    // optional uint32 Gender = 8;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->gender());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 Metier = 9;
    if (has_metier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->metier());
    }
    
    // optional uint32 Nationality = 10;
    if (has_nationality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->nationality());
    }
    
    // optional uint32 Facetype = 11;
    if (has_facetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->facetype());
    }
    
    // optional uint32 Charlevel = 12;
    if (has_charlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charlevel());
    }
    
    // optional uint64 Exp = 13;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->exp());
    }
    
    // optional uint32 Lastlogin = 14;
    if (has_lastlogin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lastlogin());
    }
    
    // optional uint32 DataLength = 16;
    if (has_datalength()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->datalength());
    }
    
    // optional bytes Data = 17;
    if (has_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->data());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 TeamFlag = 18;
    if (has_teamflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->teamflag());
    }
    
    // optional uint32 TeamLevel = 19;
    if (has_teamlevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->teamlevel());
    }
    
    // optional bytes EncryptKey = 20;
    if (has_encryptkey()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->encryptkey());
    }
    
    // optional .PBTeamInfo TeamInfo = 21;
    if (has_teaminfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->teaminfo());
    }
    
    // optional uint32 PetTempID = 22;
    if (has_pettempid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pettempid());
    }
    
    // optional uint32 PetOnlineTime = 23;
    if (has_petonlinetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->petonlinetime());
    }
    
    // optional uint32 PetMode = 24;
    if (has_petmode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->petmode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePlayerRedirectRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePlayerRedirectRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePlayerRedirectRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePlayerRedirectRequest::MergeFrom(const CMessagePlayerRedirectRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(1)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(2)) {
      set_posx(from.posx());
    }
    if (from._has_bit(3)) {
      set_posy(from.posy());
    }
    if (from._has_bit(4)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(5)) {
      set_charid(from.charid());
    }
    if (from._has_bit(6)) {
      set_charname(from.charname());
    }
    if (from._has_bit(7)) {
      set_gender(from.gender());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_metier(from.metier());
    }
    if (from._has_bit(9)) {
      set_nationality(from.nationality());
    }
    if (from._has_bit(10)) {
      set_facetype(from.facetype());
    }
    if (from._has_bit(11)) {
      set_charlevel(from.charlevel());
    }
    if (from._has_bit(12)) {
      set_exp(from.exp());
    }
    if (from._has_bit(13)) {
      set_lastlogin(from.lastlogin());
    }
    if (from._has_bit(14)) {
      set_datalength(from.datalength());
    }
    if (from._has_bit(15)) {
      set_data(from.data());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_teamflag(from.teamflag());
    }
    if (from._has_bit(17)) {
      set_teamlevel(from.teamlevel());
    }
    if (from._has_bit(18)) {
      set_encryptkey(from.encryptkey());
    }
    if (from._has_bit(19)) {
      mutable_teaminfo()->::PBTeamInfo::MergeFrom(from.teaminfo());
    }
    if (from._has_bit(20)) {
      set_pettempid(from.pettempid());
    }
    if (from._has_bit(21)) {
      set_petonlinetime(from.petonlinetime());
    }
    if (from._has_bit(22)) {
      set_petmode(from.petmode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePlayerRedirectRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerRedirectRequest::CopyFrom(const CMessagePlayerRedirectRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerRedirectRequest::Swap(CMessagePlayerRedirectRequest* other) {
  if (other != this) {
    std::swap(lineid_, other->lineid_);
    std::swap(mapid_, other->mapid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(accountid_, other->accountid_);
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(gender_, other->gender_);
    std::swap(metier_, other->metier_);
    std::swap(nationality_, other->nationality_);
    std::swap(facetype_, other->facetype_);
    std::swap(charlevel_, other->charlevel_);
    std::swap(exp_, other->exp_);
    std::swap(lastlogin_, other->lastlogin_);
    std::swap(datalength_, other->datalength_);
    std::swap(data_, other->data_);
    std::swap(teamflag_, other->teamflag_);
    std::swap(teamlevel_, other->teamlevel_);
    std::swap(encryptkey_, other->encryptkey_);
    std::swap(teaminfo_, other->teaminfo_);
    std::swap(pettempid_, other->pettempid_);
    std::swap(petonlinetime_, other->petonlinetime_);
    std::swap(petmode_, other->petmode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePlayerRedirectRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePlayerRedirectRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePlayerRedirectRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerRedirectRequest_reflection_;
}

// ===================================================================

const ::std::string CMessagePlayerRedirectResponse::_default_address_;
#ifndef _MSC_VER
const int CMessagePlayerRedirectResponse::kCharIDFieldNumber;
const int CMessagePlayerRedirectResponse::kRedirectFieldNumber;
const int CMessagePlayerRedirectResponse::kLineIDFieldNumber;
const int CMessagePlayerRedirectResponse::kMapIDFieldNumber;
const int CMessagePlayerRedirectResponse::kPosXFieldNumber;
const int CMessagePlayerRedirectResponse::kPosYFieldNumber;
const int CMessagePlayerRedirectResponse::kAddressFieldNumber;
#endif  // !_MSC_VER

CMessagePlayerRedirectResponse::CMessagePlayerRedirectResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePlayerRedirectResponse::InitAsDefaultInstance() {}

CMessagePlayerRedirectResponse::CMessagePlayerRedirectResponse(const CMessagePlayerRedirectResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePlayerRedirectResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  redirect_ = false;
  lineid_ = 0u;
  mapid_ = 0u;
  posx_ = 0u;
  posy_ = 0u;
  address_ = const_cast< ::std::string*>(&_default_address_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePlayerRedirectResponse::~CMessagePlayerRedirectResponse() {
  SharedDtor();
}

void CMessagePlayerRedirectResponse::SharedDtor() {
  if (address_ != &_default_address_) {
    delete address_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessagePlayerRedirectResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerRedirectResponse_descriptor_;
}

const CMessagePlayerRedirectResponse& CMessagePlayerRedirectResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePlayerRedirectResponse* CMessagePlayerRedirectResponse::default_instance_ = NULL;

CMessagePlayerRedirectResponse* CMessagePlayerRedirectResponse::New() const {
  return new CMessagePlayerRedirectResponse;
}

void CMessagePlayerRedirectResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    redirect_ = false;
    lineid_ = 0u;
    mapid_ = 0u;
    posx_ = 0u;
    posy_ = 0u;
    if (_has_bit(6)) {
      if (address_ != &_default_address_) {
        address_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePlayerRedirectResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Redirect;
        break;
      }
      
      // optional bool Redirect = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Redirect:
        DO_(::google::protobuf::internal::WireFormat::ReadBool(
              input, &redirect_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_LineID;
        break;
      }
      
      // optional uint32 LineID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lineid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_PosX;
        break;
      }
      
      // optional uint32 PosX = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosX:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posx_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_PosY;
        break;
      }
      
      // optional uint32 PosY = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posy_));
        _set_bit(5);
        if (input->ExpectTag(58)) goto parse_Address;
        break;
      }
      
      // optional string Address = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Address:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_address()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePlayerRedirectResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePlayerRedirectResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional bool Redirect = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBool(2, this->redirect(), output);
  }
  
  // optional uint32 LineID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->lineid(), output);
  }
  
  // optional uint32 MapID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->mapid(), output);
  }
  
  // optional uint32 PosX = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->posx(), output);
  }
  
  // optional uint32 PosY = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->posy(), output);
  }
  
  // optional string Address = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteString(7, this->address(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePlayerRedirectResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional bool Redirect = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBoolToArray(2, this->redirect(), target);
  }
  
  // optional uint32 LineID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->lineid(), target);
  }
  
  // optional uint32 MapID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->mapid(), target);
  }
  
  // optional uint32 PosX = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->posx(), target);
  }
  
  // optional uint32 PosY = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->posy(), target);
  }
  
  // optional string Address = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(7, this->address(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePlayerRedirectResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional bool Redirect = 2;
    if (has_redirect()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 LineID = 3;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lineid());
    }
    
    // optional uint32 MapID = 4;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 PosX = 5;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posx());
    }
    
    // optional uint32 PosY = 6;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posy());
    }
    
    // optional string Address = 7;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->address());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePlayerRedirectResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePlayerRedirectResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePlayerRedirectResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePlayerRedirectResponse::MergeFrom(const CMessagePlayerRedirectResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_redirect(from.redirect());
    }
    if (from._has_bit(2)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(3)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(4)) {
      set_posx(from.posx());
    }
    if (from._has_bit(5)) {
      set_posy(from.posy());
    }
    if (from._has_bit(6)) {
      set_address(from.address());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePlayerRedirectResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerRedirectResponse::CopyFrom(const CMessagePlayerRedirectResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerRedirectResponse::Swap(CMessagePlayerRedirectResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(redirect_, other->redirect_);
    std::swap(lineid_, other->lineid_);
    std::swap(mapid_, other->mapid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(address_, other->address_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePlayerRedirectResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePlayerRedirectResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePlayerRedirectResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerRedirectResponse_reflection_;
}

// ===================================================================

const ::std::string CMessagePlayerEnterConfirmNotice::_default_charname_;
const ::std::string CMessagePlayerEnterConfirmNotice::_default_cskey_;
#ifndef _MSC_VER
const int CMessagePlayerEnterConfirmNotice::kAccountIDFieldNumber;
const int CMessagePlayerEnterConfirmNotice::kCharIDFieldNumber;
const int CMessagePlayerEnterConfirmNotice::kCharNameFieldNumber;
const int CMessagePlayerEnterConfirmNotice::kLineIDFieldNumber;
const int CMessagePlayerEnterConfirmNotice::kMapIDFieldNumber;
const int CMessagePlayerEnterConfirmNotice::kFaceFieldNumber;
const int CMessagePlayerEnterConfirmNotice::kMetierFieldNumber;
const int CMessagePlayerEnterConfirmNotice::kLevelFieldNumber;
const int CMessagePlayerEnterConfirmNotice::kSexFieldNumber;
const int CMessagePlayerEnterConfirmNotice::kNationalityFieldNumber;
const int CMessagePlayerEnterConfirmNotice::kCSKeyFieldNumber;
const int CMessagePlayerEnterConfirmNotice::kVipFlagFieldNumber;
#endif  // !_MSC_VER

CMessagePlayerEnterConfirmNotice::CMessagePlayerEnterConfirmNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePlayerEnterConfirmNotice::InitAsDefaultInstance() {}

CMessagePlayerEnterConfirmNotice::CMessagePlayerEnterConfirmNotice(const CMessagePlayerEnterConfirmNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePlayerEnterConfirmNotice::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  charid_ = 0u;
  charname_ = const_cast< ::std::string*>(&_default_charname_);
  lineid_ = 0u;
  mapid_ = 0u;
  face_ = 0u;
  metier_ = 0u;
  level_ = 0u;
  sex_ = 0u;
  nationality_ = 0u;
  cskey_ = const_cast< ::std::string*>(&_default_cskey_);
  vipflag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePlayerEnterConfirmNotice::~CMessagePlayerEnterConfirmNotice() {
  SharedDtor();
}

void CMessagePlayerEnterConfirmNotice::SharedDtor() {
  if (charname_ != &_default_charname_) {
    delete charname_;
  }
  if (cskey_ != &_default_cskey_) {
    delete cskey_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessagePlayerEnterConfirmNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerEnterConfirmNotice_descriptor_;
}

const CMessagePlayerEnterConfirmNotice& CMessagePlayerEnterConfirmNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePlayerEnterConfirmNotice* CMessagePlayerEnterConfirmNotice::default_instance_ = NULL;

CMessagePlayerEnterConfirmNotice* CMessagePlayerEnterConfirmNotice::New() const {
  return new CMessagePlayerEnterConfirmNotice;
}

void CMessagePlayerEnterConfirmNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
    charid_ = 0u;
    if (_has_bit(2)) {
      if (charname_ != &_default_charname_) {
        charname_->clear();
      }
    }
    lineid_ = 0u;
    mapid_ = 0u;
    face_ = 0u;
    metier_ = 0u;
    level_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    sex_ = 0u;
    nationality_ = 0u;
    if (_has_bit(10)) {
      if (cskey_ != &_default_cskey_) {
        cskey_->clear();
      }
    }
    vipflag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePlayerEnterConfirmNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 AccountID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_CharName;
        break;
      }
      
      // optional string CharName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CharName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_charname()));
        if (input->ExpectTag(32)) goto parse_LineID;
        break;
      }
      
      // optional uint32 LineID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lineid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Face;
        break;
      }
      
      // optional uint32 Face = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Face:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &face_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_Metier;
        break;
      }
      
      // optional uint32 Metier = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Metier:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &metier_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_Sex;
        break;
      }
      
      // optional uint32 Sex = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Sex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sex_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_Nationality;
        break;
      }
      
      // optional uint32 Nationality = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Nationality:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &nationality_));
        _set_bit(9);
        if (input->ExpectTag(90)) goto parse_CSKey;
        break;
      }
      
      // optional bytes CSKey = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CSKey:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_cskey()));
        if (input->ExpectTag(96)) goto parse_VipFlag;
        break;
      }
      
      // optional uint32 VipFlag = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_VipFlag:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &vipflag_));
        _set_bit(11);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePlayerEnterConfirmNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePlayerEnterConfirmNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 AccountID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->accountid(), output);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charid(), output);
  }
  
  // optional string CharName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->charname(), output);
  }
  
  // optional uint32 LineID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->lineid(), output);
  }
  
  // optional uint32 MapID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->mapid(), output);
  }
  
  // optional uint32 Face = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->face(), output);
  }
  
  // optional uint32 Metier = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->metier(), output);
  }
  
  // optional uint32 Level = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->level(), output);
  }
  
  // optional uint32 Sex = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->sex(), output);
  }
  
  // optional uint32 Nationality = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->nationality(), output);
  }
  
  // optional bytes CSKey = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(11, this->cskey(), output);
  }
  
  // optional uint32 VipFlag = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->vipflag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePlayerEnterConfirmNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 AccountID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->accountid(), target);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charid(), target);
  }
  
  // optional string CharName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->charname(), target);
  }
  
  // optional uint32 LineID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->lineid(), target);
  }
  
  // optional uint32 MapID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->mapid(), target);
  }
  
  // optional uint32 Face = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->face(), target);
  }
  
  // optional uint32 Metier = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->metier(), target);
  }
  
  // optional uint32 Level = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->level(), target);
  }
  
  // optional uint32 Sex = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->sex(), target);
  }
  
  // optional uint32 Nationality = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->nationality(), target);
  }
  
  // optional bytes CSKey = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(11, this->cskey(), target);
  }
  
  // optional uint32 VipFlag = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->vipflag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePlayerEnterConfirmNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AccountID = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 CharID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional string CharName = 3;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->charname());
    }
    
    // optional uint32 LineID = 4;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lineid());
    }
    
    // optional uint32 MapID = 5;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 Face = 6;
    if (has_face()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->face());
    }
    
    // optional uint32 Metier = 7;
    if (has_metier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->metier());
    }
    
    // optional uint32 Level = 8;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 Sex = 9;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sex());
    }
    
    // optional uint32 Nationality = 10;
    if (has_nationality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->nationality());
    }
    
    // optional bytes CSKey = 11;
    if (has_cskey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->cskey());
    }
    
    // optional uint32 VipFlag = 12;
    if (has_vipflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->vipflag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePlayerEnterConfirmNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePlayerEnterConfirmNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePlayerEnterConfirmNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePlayerEnterConfirmNotice::MergeFrom(const CMessagePlayerEnterConfirmNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(1)) {
      set_charid(from.charid());
    }
    if (from._has_bit(2)) {
      set_charname(from.charname());
    }
    if (from._has_bit(3)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(4)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(5)) {
      set_face(from.face());
    }
    if (from._has_bit(6)) {
      set_metier(from.metier());
    }
    if (from._has_bit(7)) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_sex(from.sex());
    }
    if (from._has_bit(9)) {
      set_nationality(from.nationality());
    }
    if (from._has_bit(10)) {
      set_cskey(from.cskey());
    }
    if (from._has_bit(11)) {
      set_vipflag(from.vipflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePlayerEnterConfirmNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerEnterConfirmNotice::CopyFrom(const CMessagePlayerEnterConfirmNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerEnterConfirmNotice::Swap(CMessagePlayerEnterConfirmNotice* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(lineid_, other->lineid_);
    std::swap(mapid_, other->mapid_);
    std::swap(face_, other->face_);
    std::swap(metier_, other->metier_);
    std::swap(level_, other->level_);
    std::swap(sex_, other->sex_);
    std::swap(nationality_, other->nationality_);
    std::swap(cskey_, other->cskey_);
    std::swap(vipflag_, other->vipflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePlayerEnterConfirmNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePlayerEnterConfirmNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePlayerEnterConfirmNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerEnterConfirmNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageSceneNotOpenNotice::kCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageSceneNotOpenNotice::CMessageSceneNotOpenNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageSceneNotOpenNotice::InitAsDefaultInstance() {}

CMessageSceneNotOpenNotice::CMessageSceneNotOpenNotice(const CMessageSceneNotOpenNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageSceneNotOpenNotice::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageSceneNotOpenNotice::~CMessageSceneNotOpenNotice() {
  SharedDtor();
}

void CMessageSceneNotOpenNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageSceneNotOpenNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageSceneNotOpenNotice_descriptor_;
}

const CMessageSceneNotOpenNotice& CMessageSceneNotOpenNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageSceneNotOpenNotice* CMessageSceneNotOpenNotice::default_instance_ = NULL;

CMessageSceneNotOpenNotice* CMessageSceneNotOpenNotice::New() const {
  return new CMessageSceneNotOpenNotice;
}

void CMessageSceneNotOpenNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageSceneNotOpenNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageSceneNotOpenNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageSceneNotOpenNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageSceneNotOpenNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageSceneNotOpenNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageSceneNotOpenNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageSceneNotOpenNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageSceneNotOpenNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageSceneNotOpenNotice::MergeFrom(const CMessageSceneNotOpenNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageSceneNotOpenNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSceneNotOpenNotice::CopyFrom(const CMessageSceneNotOpenNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSceneNotOpenNotice::Swap(CMessageSceneNotOpenNotice* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageSceneNotOpenNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageSceneNotOpenNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageSceneNotOpenNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageSceneNotOpenNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageUpdateVersionNotice::kTemplateVersionFieldNumber;
const int CMessageUpdateVersionNotice::kTaskVersionFieldNumber;
#endif  // !_MSC_VER

CMessageUpdateVersionNotice::CMessageUpdateVersionNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUpdateVersionNotice::InitAsDefaultInstance() {}

CMessageUpdateVersionNotice::CMessageUpdateVersionNotice(const CMessageUpdateVersionNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUpdateVersionNotice::SharedCtor() {
  _cached_size_ = 0;
  templateversion_ = 0u;
  taskversion_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUpdateVersionNotice::~CMessageUpdateVersionNotice() {
  SharedDtor();
}

void CMessageUpdateVersionNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageUpdateVersionNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUpdateVersionNotice_descriptor_;
}

const CMessageUpdateVersionNotice& CMessageUpdateVersionNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageUpdateVersionNotice* CMessageUpdateVersionNotice::default_instance_ = NULL;

CMessageUpdateVersionNotice* CMessageUpdateVersionNotice::New() const {
  return new CMessageUpdateVersionNotice;
}

void CMessageUpdateVersionNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    templateversion_ = 0u;
    taskversion_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUpdateVersionNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TemplateVersion = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &templateversion_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_TaskVersion;
        break;
      }
      
      // optional uint32 TaskVersion = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TaskVersion:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskversion_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUpdateVersionNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUpdateVersionNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TemplateVersion = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->templateversion(), output);
  }
  
  // optional uint32 TaskVersion = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->taskversion(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUpdateVersionNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TemplateVersion = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->templateversion(), target);
  }
  
  // optional uint32 TaskVersion = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->taskversion(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUpdateVersionNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TemplateVersion = 1;
    if (has_templateversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->templateversion());
    }
    
    // optional uint32 TaskVersion = 2;
    if (has_taskversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskversion());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUpdateVersionNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUpdateVersionNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUpdateVersionNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUpdateVersionNotice::MergeFrom(const CMessageUpdateVersionNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_templateversion(from.templateversion());
    }
    if (from._has_bit(1)) {
      set_taskversion(from.taskversion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUpdateVersionNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUpdateVersionNotice::CopyFrom(const CMessageUpdateVersionNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUpdateVersionNotice::Swap(CMessageUpdateVersionNotice* other) {
  if (other != this) {
    std::swap(templateversion_, other->templateversion_);
    std::swap(taskversion_, other->taskversion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUpdateVersionNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUpdateVersionNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUpdateVersionNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUpdateVersionNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageRegistServerRequest::kServerTypeFieldNumber;
const int CMessageRegistServerRequest::kServerIDFieldNumber;
#endif  // !_MSC_VER

CMessageRegistServerRequest::CMessageRegistServerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRegistServerRequest::InitAsDefaultInstance() {}

CMessageRegistServerRequest::CMessageRegistServerRequest(const CMessageRegistServerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRegistServerRequest::SharedCtor() {
  _cached_size_ = 0;
  servertype_ = 0u;
  serverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRegistServerRequest::~CMessageRegistServerRequest() {
  SharedDtor();
}

void CMessageRegistServerRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageRegistServerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRegistServerRequest_descriptor_;
}

const CMessageRegistServerRequest& CMessageRegistServerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRegistServerRequest* CMessageRegistServerRequest::default_instance_ = NULL;

CMessageRegistServerRequest* CMessageRegistServerRequest::New() const {
  return new CMessageRegistServerRequest;
}

void CMessageRegistServerRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    servertype_ = 0u;
    serverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRegistServerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ServerType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &servertype_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ServerID;
        break;
      }
      
      // optional uint32 ServerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ServerID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &serverid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageRegistServerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRegistServerRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ServerType = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->servertype(), output);
  }
  
  // optional uint32 ServerID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->serverid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRegistServerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ServerType = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->servertype(), target);
  }
  
  // optional uint32 ServerID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->serverid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRegistServerRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ServerType = 1;
    if (has_servertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->servertype());
    }
    
    // optional uint32 ServerID = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->serverid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRegistServerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRegistServerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRegistServerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRegistServerRequest::MergeFrom(const CMessageRegistServerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_servertype(from.servertype());
    }
    if (from._has_bit(1)) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRegistServerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRegistServerRequest::CopyFrom(const CMessageRegistServerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRegistServerRequest::Swap(CMessageRegistServerRequest* other) {
  if (other != this) {
    std::swap(servertype_, other->servertype_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRegistServerRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRegistServerRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRegistServerRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRegistServerRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageRegistServerResponse::kServerTypeFieldNumber;
const int CMessageRegistServerResponse::kServerIDFieldNumber;
#endif  // !_MSC_VER

CMessageRegistServerResponse::CMessageRegistServerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRegistServerResponse::InitAsDefaultInstance() {}

CMessageRegistServerResponse::CMessageRegistServerResponse(const CMessageRegistServerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRegistServerResponse::SharedCtor() {
  _cached_size_ = 0;
  servertype_ = 0u;
  serverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRegistServerResponse::~CMessageRegistServerResponse() {
  SharedDtor();
}

void CMessageRegistServerResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageRegistServerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRegistServerResponse_descriptor_;
}

const CMessageRegistServerResponse& CMessageRegistServerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRegistServerResponse* CMessageRegistServerResponse::default_instance_ = NULL;

CMessageRegistServerResponse* CMessageRegistServerResponse::New() const {
  return new CMessageRegistServerResponse;
}

void CMessageRegistServerResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    servertype_ = 0u;
    serverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRegistServerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ServerType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &servertype_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ServerID;
        break;
      }
      
      // optional uint32 ServerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ServerID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &serverid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageRegistServerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRegistServerResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ServerType = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->servertype(), output);
  }
  
  // optional uint32 ServerID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->serverid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRegistServerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ServerType = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->servertype(), target);
  }
  
  // optional uint32 ServerID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->serverid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRegistServerResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ServerType = 1;
    if (has_servertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->servertype());
    }
    
    // optional uint32 ServerID = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->serverid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRegistServerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRegistServerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRegistServerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRegistServerResponse::MergeFrom(const CMessageRegistServerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_servertype(from.servertype());
    }
    if (from._has_bit(1)) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRegistServerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRegistServerResponse::CopyFrom(const CMessageRegistServerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRegistServerResponse::Swap(CMessageRegistServerResponse* other) {
  if (other != this) {
    std::swap(servertype_, other->servertype_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRegistServerResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRegistServerResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRegistServerResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRegistServerResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageHeartBeatNotice::kServerTypeFieldNumber;
const int CMessageHeartBeatNotice::kServerIDFieldNumber;
#endif  // !_MSC_VER

CMessageHeartBeatNotice::CMessageHeartBeatNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageHeartBeatNotice::InitAsDefaultInstance() {}

CMessageHeartBeatNotice::CMessageHeartBeatNotice(const CMessageHeartBeatNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageHeartBeatNotice::SharedCtor() {
  _cached_size_ = 0;
  servertype_ = 0u;
  serverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageHeartBeatNotice::~CMessageHeartBeatNotice() {
  SharedDtor();
}

void CMessageHeartBeatNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageHeartBeatNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageHeartBeatNotice_descriptor_;
}

const CMessageHeartBeatNotice& CMessageHeartBeatNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageHeartBeatNotice* CMessageHeartBeatNotice::default_instance_ = NULL;

CMessageHeartBeatNotice* CMessageHeartBeatNotice::New() const {
  return new CMessageHeartBeatNotice;
}

void CMessageHeartBeatNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    servertype_ = 0u;
    serverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageHeartBeatNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ServerType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &servertype_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ServerID;
        break;
      }
      
      // optional uint32 ServerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ServerID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &serverid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageHeartBeatNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageHeartBeatNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ServerType = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->servertype(), output);
  }
  
  // optional uint32 ServerID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->serverid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageHeartBeatNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ServerType = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->servertype(), target);
  }
  
  // optional uint32 ServerID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->serverid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageHeartBeatNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ServerType = 1;
    if (has_servertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->servertype());
    }
    
    // optional uint32 ServerID = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->serverid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageHeartBeatNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageHeartBeatNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageHeartBeatNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageHeartBeatNotice::MergeFrom(const CMessageHeartBeatNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_servertype(from.servertype());
    }
    if (from._has_bit(1)) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageHeartBeatNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageHeartBeatNotice::CopyFrom(const CMessageHeartBeatNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageHeartBeatNotice::Swap(CMessageHeartBeatNotice* other) {
  if (other != this) {
    std::swap(servertype_, other->servertype_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageHeartBeatNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageHeartBeatNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageHeartBeatNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageHeartBeatNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessagePlayerOnLineFriendRequest::kCharIDsFieldNumber;
const int CMessagePlayerOnLineFriendRequest::kRequesterFieldNumber;
const int CMessagePlayerOnLineFriendRequest::kFlagFieldNumber;
#endif  // !_MSC_VER

CMessagePlayerOnLineFriendRequest::CMessagePlayerOnLineFriendRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePlayerOnLineFriendRequest::InitAsDefaultInstance() {}

CMessagePlayerOnLineFriendRequest::CMessagePlayerOnLineFriendRequest(const CMessagePlayerOnLineFriendRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePlayerOnLineFriendRequest::SharedCtor() {
  _cached_size_ = 0;
  requester_ = 0u;
  flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePlayerOnLineFriendRequest::~CMessagePlayerOnLineFriendRequest() {
  SharedDtor();
}

void CMessagePlayerOnLineFriendRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessagePlayerOnLineFriendRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerOnLineFriendRequest_descriptor_;
}

const CMessagePlayerOnLineFriendRequest& CMessagePlayerOnLineFriendRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePlayerOnLineFriendRequest* CMessagePlayerOnLineFriendRequest::default_instance_ = NULL;

CMessagePlayerOnLineFriendRequest* CMessagePlayerOnLineFriendRequest::New() const {
  return new CMessagePlayerOnLineFriendRequest;
}

void CMessagePlayerOnLineFriendRequest::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    requester_ = 0u;
    flag_ = 0u;
  }
  charids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePlayerOnLineFriendRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated uint32 CharIDs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharIDs:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_charids(value);
        if (input->ExpectTag(8)) goto parse_CharIDs;
        if (input->ExpectTag(16)) goto parse_Requester;
        break;
      }
      
      // optional uint32 Requester = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Requester:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &requester_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Flag;
        break;
      }
      
      // optional uint32 Flag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Flag:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &flag_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePlayerOnLineFriendRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePlayerOnLineFriendRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated uint32 CharIDs = 1;
  for (int i = 0; i < this->charids_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charids(i), output);
  }
  
  // optional uint32 Requester = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->requester(), output);
  }
  
  // optional uint32 Flag = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePlayerOnLineFriendRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 CharIDs = 1;
  for (int i = 0; i < this->charids_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charids(i), target);
  }
  
  // optional uint32 Requester = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->requester(), target);
  }
  
  // optional uint32 Flag = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePlayerOnLineFriendRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 Requester = 2;
    if (has_requester()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->requester());
    }
    
    // optional uint32 Flag = 3;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->flag());
    }
    
  }
  // repeated uint32 CharIDs = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->charids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->charids(i));
    }
    total_size += 1 * this->charids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePlayerOnLineFriendRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePlayerOnLineFriendRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePlayerOnLineFriendRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePlayerOnLineFriendRequest::MergeFrom(const CMessagePlayerOnLineFriendRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  charids_.MergeFrom(from.charids_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_requester(from.requester());
    }
    if (from._has_bit(2)) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePlayerOnLineFriendRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerOnLineFriendRequest::CopyFrom(const CMessagePlayerOnLineFriendRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerOnLineFriendRequest::Swap(CMessagePlayerOnLineFriendRequest* other) {
  if (other != this) {
    charids_.Swap(&other->charids_);
    std::swap(requester_, other->requester_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePlayerOnLineFriendRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePlayerOnLineFriendRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePlayerOnLineFriendRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerOnLineFriendRequest_reflection_;
}

// ===================================================================

const ::std::string PBSinglePlayerInfo::_default_name_;
#ifndef _MSC_VER
const int PBSinglePlayerInfo::kCharIDFieldNumber;
const int PBSinglePlayerInfo::kStatusFieldNumber;
const int PBSinglePlayerInfo::kNameFieldNumber;
const int PBSinglePlayerInfo::kSexFieldNumber;
const int PBSinglePlayerInfo::kFaceFieldNumber;
const int PBSinglePlayerInfo::kNationFieldNumber;
const int PBSinglePlayerInfo::kVipFlagFieldNumber;
const int PBSinglePlayerInfo::kNoExistFieldNumber;
#endif  // !_MSC_VER

PBSinglePlayerInfo::PBSinglePlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSinglePlayerInfo::InitAsDefaultInstance() {}

PBSinglePlayerInfo::PBSinglePlayerInfo(const PBSinglePlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSinglePlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  status_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  sex_ = 0u;
  face_ = 0u;
  nation_ = 0u;
  vipflag_ = 0u;
  noexist_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSinglePlayerInfo::~PBSinglePlayerInfo() {
  SharedDtor();
}

void PBSinglePlayerInfo::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBSinglePlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSinglePlayerInfo_descriptor_;
}

const PBSinglePlayerInfo& PBSinglePlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

PBSinglePlayerInfo* PBSinglePlayerInfo::default_instance_ = NULL;

PBSinglePlayerInfo* PBSinglePlayerInfo::New() const {
  return new PBSinglePlayerInfo;
}

void PBSinglePlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    status_ = 0u;
    if (_has_bit(2)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    sex_ = 0u;
    face_ = 0u;
    nation_ = 0u;
    vipflag_ = 0u;
    noexist_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSinglePlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Status;
        break;
      }
      
      // optional uint32 Status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Status:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &status_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_Name;
        break;
      }
      
      // optional string Name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(32)) goto parse_Sex;
        break;
      }
      
      // optional uint32 Sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Sex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sex_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Face;
        break;
      }
      
      // optional uint32 Face = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Face:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &face_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Nation;
        break;
      }
      
      // optional uint32 Nation = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Nation:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &nation_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_VipFlag;
        break;
      }
      
      // optional uint32 VipFlag = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_VipFlag:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &vipflag_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_noExist;
        break;
      }
      
      // optional uint32 noExist = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_noExist:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &noexist_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSinglePlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBSinglePlayerInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 Status = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->status(), output);
  }
  
  // optional string Name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->name(), output);
  }
  
  // optional uint32 Sex = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->sex(), output);
  }
  
  // optional uint32 Face = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->face(), output);
  }
  
  // optional uint32 Nation = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->nation(), output);
  }
  
  // optional uint32 VipFlag = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->vipflag(), output);
  }
  
  // optional uint32 noExist = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->noexist(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSinglePlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 Status = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->status(), target);
  }
  
  // optional string Name = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->name(), target);
  }
  
  // optional uint32 Sex = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->sex(), target);
  }
  
  // optional uint32 Face = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->face(), target);
  }
  
  // optional uint32 Nation = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->nation(), target);
  }
  
  // optional uint32 VipFlag = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->vipflag(), target);
  }
  
  // optional uint32 noExist = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->noexist(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSinglePlayerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 Status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->status());
    }
    
    // optional string Name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional uint32 Sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sex());
    }
    
    // optional uint32 Face = 5;
    if (has_face()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->face());
    }
    
    // optional uint32 Nation = 6;
    if (has_nation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->nation());
    }
    
    // optional uint32 VipFlag = 7;
    if (has_vipflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->vipflag());
    }
    
    // optional uint32 noExist = 8;
    if (has_noexist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->noexist());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBSinglePlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSinglePlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSinglePlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSinglePlayerInfo::MergeFrom(const PBSinglePlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_status(from.status());
    }
    if (from._has_bit(2)) {
      set_name(from.name());
    }
    if (from._has_bit(3)) {
      set_sex(from.sex());
    }
    if (from._has_bit(4)) {
      set_face(from.face());
    }
    if (from._has_bit(5)) {
      set_nation(from.nation());
    }
    if (from._has_bit(6)) {
      set_vipflag(from.vipflag());
    }
    if (from._has_bit(7)) {
      set_noexist(from.noexist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSinglePlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSinglePlayerInfo::CopyFrom(const PBSinglePlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSinglePlayerInfo::Swap(PBSinglePlayerInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(status_, other->status_);
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(face_, other->face_);
    std::swap(nation_, other->nation_);
    std::swap(vipflag_, other->vipflag_);
    std::swap(noexist_, other->noexist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBSinglePlayerInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBSinglePlayerInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBSinglePlayerInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBSinglePlayerInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessagePlayerOnLineFriendResponse::kFriendsFieldNumber;
const int CMessagePlayerOnLineFriendResponse::kRequesterFieldNumber;
const int CMessagePlayerOnLineFriendResponse::kFlagFieldNumber;
#endif  // !_MSC_VER

CMessagePlayerOnLineFriendResponse::CMessagePlayerOnLineFriendResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePlayerOnLineFriendResponse::InitAsDefaultInstance() {}

CMessagePlayerOnLineFriendResponse::CMessagePlayerOnLineFriendResponse(const CMessagePlayerOnLineFriendResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePlayerOnLineFriendResponse::SharedCtor() {
  _cached_size_ = 0;
  requester_ = 0u;
  flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePlayerOnLineFriendResponse::~CMessagePlayerOnLineFriendResponse() {
  SharedDtor();
}

void CMessagePlayerOnLineFriendResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessagePlayerOnLineFriendResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerOnLineFriendResponse_descriptor_;
}

const CMessagePlayerOnLineFriendResponse& CMessagePlayerOnLineFriendResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePlayerOnLineFriendResponse* CMessagePlayerOnLineFriendResponse::default_instance_ = NULL;

CMessagePlayerOnLineFriendResponse* CMessagePlayerOnLineFriendResponse::New() const {
  return new CMessagePlayerOnLineFriendResponse;
}

void CMessagePlayerOnLineFriendResponse::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    requester_ = 0u;
    flag_ = 0u;
  }
  friends_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePlayerOnLineFriendResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .PBSinglePlayerInfo Friends = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Friends:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_friends()));
        if (input->ExpectTag(10)) goto parse_Friends;
        if (input->ExpectTag(16)) goto parse_Requester;
        break;
      }
      
      // optional uint32 Requester = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Requester:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &requester_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Flag;
        break;
      }
      
      // optional uint32 Flag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Flag:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &flag_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePlayerOnLineFriendResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePlayerOnLineFriendResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .PBSinglePlayerInfo Friends = 1;
  for (int i = 0; i < this->friends_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->friends(i), output);
  }
  
  // optional uint32 Requester = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->requester(), output);
  }
  
  // optional uint32 Flag = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePlayerOnLineFriendResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBSinglePlayerInfo Friends = 1;
  for (int i = 0; i < this->friends_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->friends(i), target);
  }
  
  // optional uint32 Requester = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->requester(), target);
  }
  
  // optional uint32 Flag = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePlayerOnLineFriendResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 Requester = 2;
    if (has_requester()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->requester());
    }
    
    // optional uint32 Flag = 3;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->flag());
    }
    
  }
  // repeated .PBSinglePlayerInfo Friends = 1;
  total_size += 1 * this->friends_size();
  for (int i = 0; i < this->friends_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->friends(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePlayerOnLineFriendResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePlayerOnLineFriendResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePlayerOnLineFriendResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePlayerOnLineFriendResponse::MergeFrom(const CMessagePlayerOnLineFriendResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  friends_.MergeFrom(from.friends_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_requester(from.requester());
    }
    if (from._has_bit(2)) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePlayerOnLineFriendResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerOnLineFriendResponse::CopyFrom(const CMessagePlayerOnLineFriendResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerOnLineFriendResponse::Swap(CMessagePlayerOnLineFriendResponse* other) {
  if (other != this) {
    friends_.Swap(&other->friends_);
    std::swap(requester_, other->requester_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePlayerOnLineFriendResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePlayerOnLineFriendResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePlayerOnLineFriendResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerOnLineFriendResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessagePlayerChangeStatusNotice::kCharIDFieldNumber;
const int CMessagePlayerChangeStatusNotice::kStatusFieldNumber;
#endif  // !_MSC_VER

CMessagePlayerChangeStatusNotice::CMessagePlayerChangeStatusNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePlayerChangeStatusNotice::InitAsDefaultInstance() {}

CMessagePlayerChangeStatusNotice::CMessagePlayerChangeStatusNotice(const CMessagePlayerChangeStatusNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePlayerChangeStatusNotice::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePlayerChangeStatusNotice::~CMessagePlayerChangeStatusNotice() {
  SharedDtor();
}

void CMessagePlayerChangeStatusNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessagePlayerChangeStatusNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerChangeStatusNotice_descriptor_;
}

const CMessagePlayerChangeStatusNotice& CMessagePlayerChangeStatusNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePlayerChangeStatusNotice* CMessagePlayerChangeStatusNotice::default_instance_ = NULL;

CMessagePlayerChangeStatusNotice* CMessagePlayerChangeStatusNotice::New() const {
  return new CMessagePlayerChangeStatusNotice;
}

void CMessagePlayerChangeStatusNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePlayerChangeStatusNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Status;
        break;
      }
      
      // optional uint32 Status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Status:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &status_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePlayerChangeStatusNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePlayerChangeStatusNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 Status = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePlayerChangeStatusNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 Status = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePlayerChangeStatusNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 Status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePlayerChangeStatusNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePlayerChangeStatusNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePlayerChangeStatusNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePlayerChangeStatusNotice::MergeFrom(const CMessagePlayerChangeStatusNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePlayerChangeStatusNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerChangeStatusNotice::CopyFrom(const CMessagePlayerChangeStatusNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerChangeStatusNotice::Swap(CMessagePlayerChangeStatusNotice* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePlayerChangeStatusNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePlayerChangeStatusNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePlayerChangeStatusNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerChangeStatusNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGameHeartBeatNotice::kServerIDFieldNumber;
const int CMessageGameHeartBeatNotice::kCharIDsFieldNumber;
const int CMessageGameHeartBeatNotice::kExternalCharIDsFieldNumber;
#endif  // !_MSC_VER

CMessageGameHeartBeatNotice::CMessageGameHeartBeatNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGameHeartBeatNotice::InitAsDefaultInstance() {}

CMessageGameHeartBeatNotice::CMessageGameHeartBeatNotice(const CMessageGameHeartBeatNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGameHeartBeatNotice::SharedCtor() {
  _cached_size_ = 0;
  serverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGameHeartBeatNotice::~CMessageGameHeartBeatNotice() {
  SharedDtor();
}

void CMessageGameHeartBeatNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGameHeartBeatNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGameHeartBeatNotice_descriptor_;
}

const CMessageGameHeartBeatNotice& CMessageGameHeartBeatNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGameHeartBeatNotice* CMessageGameHeartBeatNotice::default_instance_ = NULL;

CMessageGameHeartBeatNotice* CMessageGameHeartBeatNotice::New() const {
  return new CMessageGameHeartBeatNotice;
}

void CMessageGameHeartBeatNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serverid_ = 0u;
  }
  charids_.Clear();
  externalcharids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGameHeartBeatNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ServerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &serverid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CharIDs;
        break;
      }
      
      // repeated uint32 CharIDs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharIDs:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_charids(value);
        if (input->ExpectTag(16)) goto parse_CharIDs;
        if (input->ExpectTag(24)) goto parse_ExternalCharIDs;
        break;
      }
      
      // repeated uint32 ExternalCharIDs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExternalCharIDs:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_externalcharids(value);
        if (input->ExpectTag(24)) goto parse_ExternalCharIDs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGameHeartBeatNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGameHeartBeatNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ServerID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->serverid(), output);
  }
  
  // repeated uint32 CharIDs = 2;
  for (int i = 0; i < this->charids_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charids(i), output);
  }
  
  // repeated uint32 ExternalCharIDs = 3;
  for (int i = 0; i < this->externalcharids_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->externalcharids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGameHeartBeatNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ServerID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->serverid(), target);
  }
  
  // repeated uint32 CharIDs = 2;
  for (int i = 0; i < this->charids_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charids(i), target);
  }
  
  // repeated uint32 ExternalCharIDs = 3;
  for (int i = 0; i < this->externalcharids_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->externalcharids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGameHeartBeatNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ServerID = 1;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->serverid());
    }
    
  }
  // repeated uint32 CharIDs = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->charids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->charids(i));
    }
    total_size += 1 * this->charids_size() + data_size;
  }
  
  // repeated uint32 ExternalCharIDs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->externalcharids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->externalcharids(i));
    }
    total_size += 1 * this->externalcharids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGameHeartBeatNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGameHeartBeatNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGameHeartBeatNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGameHeartBeatNotice::MergeFrom(const CMessageGameHeartBeatNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  charids_.MergeFrom(from.charids_);
  externalcharids_.MergeFrom(from.externalcharids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGameHeartBeatNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGameHeartBeatNotice::CopyFrom(const CMessageGameHeartBeatNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGameHeartBeatNotice::Swap(CMessageGameHeartBeatNotice* other) {
  if (other != this) {
    std::swap(serverid_, other->serverid_);
    charids_.Swap(&other->charids_);
    externalcharids_.Swap(&other->externalcharids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGameHeartBeatNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGameHeartBeatNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGameHeartBeatNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGameHeartBeatNotice_reflection_;
}

// ===================================================================

const ::std::string CMessageERatingProtoStream::_default_buffer_;
#ifndef _MSC_VER
const int CMessageERatingProtoStream::kLengthFieldNumber;
const int CMessageERatingProtoStream::kBufferFieldNumber;
#endif  // !_MSC_VER

CMessageERatingProtoStream::CMessageERatingProtoStream()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageERatingProtoStream::InitAsDefaultInstance() {}

CMessageERatingProtoStream::CMessageERatingProtoStream(const CMessageERatingProtoStream& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageERatingProtoStream::SharedCtor() {
  _cached_size_ = 0;
  length_ = 0u;
  buffer_ = const_cast< ::std::string*>(&_default_buffer_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageERatingProtoStream::~CMessageERatingProtoStream() {
  SharedDtor();
}

void CMessageERatingProtoStream::SharedDtor() {
  if (buffer_ != &_default_buffer_) {
    delete buffer_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageERatingProtoStream::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageERatingProtoStream_descriptor_;
}

const CMessageERatingProtoStream& CMessageERatingProtoStream::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageERatingProtoStream* CMessageERatingProtoStream::default_instance_ = NULL;

CMessageERatingProtoStream* CMessageERatingProtoStream::New() const {
  return new CMessageERatingProtoStream;
}

void CMessageERatingProtoStream::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    length_ = 0u;
    if (_has_bit(1)) {
      if (buffer_ != &_default_buffer_) {
        buffer_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageERatingProtoStream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Length = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &length_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_buffer;
        break;
      }
      
      // optional bytes buffer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_buffer:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_buffer()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageERatingProtoStream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageERatingProtoStream::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Length = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->length(), output);
  }
  
  // optional bytes buffer = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->buffer(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageERatingProtoStream::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Length = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->length(), target);
  }
  
  // optional bytes buffer = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->buffer(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageERatingProtoStream::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Length = 1;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->length());
    }
    
    // optional bytes buffer = 2;
    if (has_buffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->buffer());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageERatingProtoStream::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageERatingProtoStream* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageERatingProtoStream*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageERatingProtoStream::MergeFrom(const CMessageERatingProtoStream& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_length(from.length());
    }
    if (from._has_bit(1)) {
      set_buffer(from.buffer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageERatingProtoStream::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageERatingProtoStream::CopyFrom(const CMessageERatingProtoStream& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageERatingProtoStream::Swap(CMessageERatingProtoStream* other) {
  if (other != this) {
    std::swap(length_, other->length_);
    std::swap(buffer_, other->buffer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageERatingProtoStream::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageERatingProtoStream::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageERatingProtoStream::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageERatingProtoStream_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageERatingStateNotice::kGatewayIDFieldNumber;
const int CMessageERatingStateNotice::kBindedFieldNumber;
#endif  // !_MSC_VER

CMessageERatingStateNotice::CMessageERatingStateNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageERatingStateNotice::InitAsDefaultInstance() {}

CMessageERatingStateNotice::CMessageERatingStateNotice(const CMessageERatingStateNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageERatingStateNotice::SharedCtor() {
  _cached_size_ = 0;
  gatewayid_ = 0u;
  binded_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageERatingStateNotice::~CMessageERatingStateNotice() {
  SharedDtor();
}

void CMessageERatingStateNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageERatingStateNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageERatingStateNotice_descriptor_;
}

const CMessageERatingStateNotice& CMessageERatingStateNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageERatingStateNotice* CMessageERatingStateNotice::default_instance_ = NULL;

CMessageERatingStateNotice* CMessageERatingStateNotice::New() const {
  return new CMessageERatingStateNotice;
}

void CMessageERatingStateNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gatewayid_ = 0u;
    binded_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageERatingStateNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 GatewayID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &gatewayid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_binded;
        break;
      }
      
      // optional uint32 binded = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_binded:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &binded_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageERatingStateNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageERatingStateNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 GatewayID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->gatewayid(), output);
  }
  
  // optional uint32 binded = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->binded(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageERatingStateNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 GatewayID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->gatewayid(), target);
  }
  
  // optional uint32 binded = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->binded(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageERatingStateNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 GatewayID = 1;
    if (has_gatewayid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->gatewayid());
    }
    
    // optional uint32 binded = 2;
    if (has_binded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->binded());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageERatingStateNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageERatingStateNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageERatingStateNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageERatingStateNotice::MergeFrom(const CMessageERatingStateNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_gatewayid(from.gatewayid());
    }
    if (from._has_bit(1)) {
      set_binded(from.binded());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageERatingStateNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageERatingStateNotice::CopyFrom(const CMessageERatingStateNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageERatingStateNotice::Swap(CMessageERatingStateNotice* other) {
  if (other != this) {
    std::swap(gatewayid_, other->gatewayid_);
    std::swap(binded_, other->binded_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageERatingStateNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageERatingStateNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageERatingStateNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageERatingStateNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCreateGateTeamRequest::kCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageCreateGateTeamRequest::CMessageCreateGateTeamRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCreateGateTeamRequest::InitAsDefaultInstance() {}

CMessageCreateGateTeamRequest::CMessageCreateGateTeamRequest(const CMessageCreateGateTeamRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCreateGateTeamRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCreateGateTeamRequest::~CMessageCreateGateTeamRequest() {
  SharedDtor();
}

void CMessageCreateGateTeamRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCreateGateTeamRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCreateGateTeamRequest_descriptor_;
}

const CMessageCreateGateTeamRequest& CMessageCreateGateTeamRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCreateGateTeamRequest* CMessageCreateGateTeamRequest::default_instance_ = NULL;

CMessageCreateGateTeamRequest* CMessageCreateGateTeamRequest::New() const {
  return new CMessageCreateGateTeamRequest;
}

void CMessageCreateGateTeamRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCreateGateTeamRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCreateGateTeamRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCreateGateTeamRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCreateGateTeamRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCreateGateTeamRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCreateGateTeamRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCreateGateTeamRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCreateGateTeamRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCreateGateTeamRequest::MergeFrom(const CMessageCreateGateTeamRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCreateGateTeamRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCreateGateTeamRequest::CopyFrom(const CMessageCreateGateTeamRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCreateGateTeamRequest::Swap(CMessageCreateGateTeamRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCreateGateTeamRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCreateGateTeamRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCreateGateTeamRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCreateGateTeamRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCreateGateTeamResponse::kCharIDFieldNumber;
const int CMessageCreateGateTeamResponse::kTeamIDFieldNumber;
#endif  // !_MSC_VER

CMessageCreateGateTeamResponse::CMessageCreateGateTeamResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCreateGateTeamResponse::InitAsDefaultInstance() {}

CMessageCreateGateTeamResponse::CMessageCreateGateTeamResponse(const CMessageCreateGateTeamResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCreateGateTeamResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  teamid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCreateGateTeamResponse::~CMessageCreateGateTeamResponse() {
  SharedDtor();
}

void CMessageCreateGateTeamResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCreateGateTeamResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCreateGateTeamResponse_descriptor_;
}

const CMessageCreateGateTeamResponse& CMessageCreateGateTeamResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCreateGateTeamResponse* CMessageCreateGateTeamResponse::default_instance_ = NULL;

CMessageCreateGateTeamResponse* CMessageCreateGateTeamResponse::New() const {
  return new CMessageCreateGateTeamResponse;
}

void CMessageCreateGateTeamResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    teamid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCreateGateTeamResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_TeamID;
        break;
      }
      
      // optional uint32 TeamID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TeamID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &teamid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCreateGateTeamResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCreateGateTeamResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 TeamID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->teamid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCreateGateTeamResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 TeamID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->teamid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCreateGateTeamResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 TeamID = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->teamid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCreateGateTeamResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCreateGateTeamResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCreateGateTeamResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCreateGateTeamResponse::MergeFrom(const CMessageCreateGateTeamResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCreateGateTeamResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCreateGateTeamResponse::CopyFrom(const CMessageCreateGateTeamResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCreateGateTeamResponse::Swap(CMessageCreateGateTeamResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCreateGateTeamResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCreateGateTeamResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCreateGateTeamResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCreateGateTeamResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageJoinGateTeamRequest::kSrcCharIDFieldNumber;
const int CMessageJoinGateTeamRequest::kDesCharIDFieldNumber;
const int CMessageJoinGateTeamRequest::kSrcNationFieldNumber;
const int CMessageJoinGateTeamRequest::kDesNaitonFieldNumber;
#endif  // !_MSC_VER

CMessageJoinGateTeamRequest::CMessageJoinGateTeamRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageJoinGateTeamRequest::InitAsDefaultInstance() {}

CMessageJoinGateTeamRequest::CMessageJoinGateTeamRequest(const CMessageJoinGateTeamRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageJoinGateTeamRequest::SharedCtor() {
  _cached_size_ = 0;
  srccharid_ = 0u;
  descharid_ = 0u;
  srcnation_ = 0u;
  desnaiton_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageJoinGateTeamRequest::~CMessageJoinGateTeamRequest() {
  SharedDtor();
}

void CMessageJoinGateTeamRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageJoinGateTeamRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageJoinGateTeamRequest_descriptor_;
}

const CMessageJoinGateTeamRequest& CMessageJoinGateTeamRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageJoinGateTeamRequest* CMessageJoinGateTeamRequest::default_instance_ = NULL;

CMessageJoinGateTeamRequest* CMessageJoinGateTeamRequest::New() const {
  return new CMessageJoinGateTeamRequest;
}

void CMessageJoinGateTeamRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    srccharid_ = 0u;
    descharid_ = 0u;
    srcnation_ = 0u;
    desnaiton_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageJoinGateTeamRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 SrcCharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srccharid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_DesCharID;
        break;
      }
      
      // optional uint32 DesCharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DesCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &descharid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_SrcNation;
        break;
      }
      
      // optional uint32 SrcNation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SrcNation:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srcnation_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_DesNaiton;
        break;
      }
      
      // optional uint32 DesNaiton = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DesNaiton:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &desnaiton_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageJoinGateTeamRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageJoinGateTeamRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 SrcCharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->srccharid(), output);
  }
  
  // optional uint32 DesCharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->descharid(), output);
  }
  
  // optional uint32 SrcNation = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->srcnation(), output);
  }
  
  // optional uint32 DesNaiton = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->desnaiton(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageJoinGateTeamRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 SrcCharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->srccharid(), target);
  }
  
  // optional uint32 DesCharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->descharid(), target);
  }
  
  // optional uint32 SrcNation = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->srcnation(), target);
  }
  
  // optional uint32 DesNaiton = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->desnaiton(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageJoinGateTeamRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SrcCharID = 1;
    if (has_srccharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srccharid());
    }
    
    // optional uint32 DesCharID = 2;
    if (has_descharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->descharid());
    }
    
    // optional uint32 SrcNation = 3;
    if (has_srcnation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srcnation());
    }
    
    // optional uint32 DesNaiton = 4;
    if (has_desnaiton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->desnaiton());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageJoinGateTeamRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageJoinGateTeamRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageJoinGateTeamRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageJoinGateTeamRequest::MergeFrom(const CMessageJoinGateTeamRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_srccharid(from.srccharid());
    }
    if (from._has_bit(1)) {
      set_descharid(from.descharid());
    }
    if (from._has_bit(2)) {
      set_srcnation(from.srcnation());
    }
    if (from._has_bit(3)) {
      set_desnaiton(from.desnaiton());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageJoinGateTeamRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageJoinGateTeamRequest::CopyFrom(const CMessageJoinGateTeamRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageJoinGateTeamRequest::Swap(CMessageJoinGateTeamRequest* other) {
  if (other != this) {
    std::swap(srccharid_, other->srccharid_);
    std::swap(descharid_, other->descharid_);
    std::swap(srcnation_, other->srcnation_);
    std::swap(desnaiton_, other->desnaiton_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageJoinGateTeamRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageJoinGateTeamRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageJoinGateTeamRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageJoinGateTeamRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageJoinGateTeamResponse::kDesCharIDFieldNumber;
const int CMessageJoinGateTeamResponse::kItemFieldNumber;
#endif  // !_MSC_VER

CMessageJoinGateTeamResponse::CMessageJoinGateTeamResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageJoinGateTeamResponse::InitAsDefaultInstance() {  item_ = const_cast< ::PBTeamItem*>(&::PBTeamItem::default_instance());
}

CMessageJoinGateTeamResponse::CMessageJoinGateTeamResponse(const CMessageJoinGateTeamResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageJoinGateTeamResponse::SharedCtor() {
  _cached_size_ = 0;
  descharid_ = 0u;
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageJoinGateTeamResponse::~CMessageJoinGateTeamResponse() {
  SharedDtor();
}

void CMessageJoinGateTeamResponse::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

const ::google::protobuf::Descriptor* CMessageJoinGateTeamResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageJoinGateTeamResponse_descriptor_;
}

const CMessageJoinGateTeamResponse& CMessageJoinGateTeamResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageJoinGateTeamResponse* CMessageJoinGateTeamResponse::default_instance_ = NULL;

CMessageJoinGateTeamResponse* CMessageJoinGateTeamResponse::New() const {
  return new CMessageJoinGateTeamResponse;
}

void CMessageJoinGateTeamResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    descharid_ = 0u;
    if (_has_bit(1)) {
      if (item_ != NULL) item_->::PBTeamItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageJoinGateTeamResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 DesCharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &descharid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Item;
        break;
      }
      
      // optional .PBTeamItem Item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Item:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_item()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageJoinGateTeamResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageJoinGateTeamResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 DesCharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->descharid(), output);
  }
  
  // optional .PBTeamItem Item = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->item(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageJoinGateTeamResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 DesCharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->descharid(), target);
  }
  
  // optional .PBTeamItem Item = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->item(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageJoinGateTeamResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 DesCharID = 1;
    if (has_descharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->descharid());
    }
    
    // optional .PBTeamItem Item = 2;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->item());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageJoinGateTeamResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageJoinGateTeamResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageJoinGateTeamResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageJoinGateTeamResponse::MergeFrom(const CMessageJoinGateTeamResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_descharid(from.descharid());
    }
    if (from._has_bit(1)) {
      mutable_item()->::PBTeamItem::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageJoinGateTeamResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageJoinGateTeamResponse::CopyFrom(const CMessageJoinGateTeamResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageJoinGateTeamResponse::Swap(CMessageJoinGateTeamResponse* other) {
  if (other != this) {
    std::swap(descharid_, other->descharid_);
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageJoinGateTeamResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageJoinGateTeamResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageJoinGateTeamResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageJoinGateTeamResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageRequestJoinReply::kSrcCharIDFieldNumber;
const int CMessageRequestJoinReply::kDesCharIDFieldNumber;
const int CMessageRequestJoinReply::kRtnCodeFieldNumber;
#endif  // !_MSC_VER

CMessageRequestJoinReply::CMessageRequestJoinReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRequestJoinReply::InitAsDefaultInstance() {}

CMessageRequestJoinReply::CMessageRequestJoinReply(const CMessageRequestJoinReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRequestJoinReply::SharedCtor() {
  _cached_size_ = 0;
  srccharid_ = 0u;
  descharid_ = 0u;
  rtncode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRequestJoinReply::~CMessageRequestJoinReply() {
  SharedDtor();
}

void CMessageRequestJoinReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageRequestJoinReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRequestJoinReply_descriptor_;
}

const CMessageRequestJoinReply& CMessageRequestJoinReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRequestJoinReply* CMessageRequestJoinReply::default_instance_ = NULL;

CMessageRequestJoinReply* CMessageRequestJoinReply::New() const {
  return new CMessageRequestJoinReply;
}

void CMessageRequestJoinReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    srccharid_ = 0u;
    descharid_ = 0u;
    rtncode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRequestJoinReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 SrcCharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srccharid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_DesCharID;
        break;
      }
      
      // optional uint32 DesCharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DesCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &descharid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_RtnCode;
        break;
      }
      
      // optional uint32 RtnCode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RtnCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rtncode_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageRequestJoinReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRequestJoinReply::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 SrcCharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->srccharid(), output);
  }
  
  // optional uint32 DesCharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->descharid(), output);
  }
  
  // optional uint32 RtnCode = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->rtncode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRequestJoinReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 SrcCharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->srccharid(), target);
  }
  
  // optional uint32 DesCharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->descharid(), target);
  }
  
  // optional uint32 RtnCode = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->rtncode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRequestJoinReply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SrcCharID = 1;
    if (has_srccharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srccharid());
    }
    
    // optional uint32 DesCharID = 2;
    if (has_descharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->descharid());
    }
    
    // optional uint32 RtnCode = 3;
    if (has_rtncode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rtncode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRequestJoinReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRequestJoinReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRequestJoinReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRequestJoinReply::MergeFrom(const CMessageRequestJoinReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_srccharid(from.srccharid());
    }
    if (from._has_bit(1)) {
      set_descharid(from.descharid());
    }
    if (from._has_bit(2)) {
      set_rtncode(from.rtncode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRequestJoinReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRequestJoinReply::CopyFrom(const CMessageRequestJoinReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRequestJoinReply::Swap(CMessageRequestJoinReply* other) {
  if (other != this) {
    std::swap(srccharid_, other->srccharid_);
    std::swap(descharid_, other->descharid_);
    std::swap(rtncode_, other->rtncode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRequestJoinReply::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRequestJoinReply::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRequestJoinReply::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRequestJoinReply_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageJoinGateTeamInvite::kSrcCharIDFieldNumber;
const int CMessageJoinGateTeamInvite::kDesCharIDFieldNumber;
const int CMessageJoinGateTeamInvite::kSrcNationFieldNumber;
const int CMessageJoinGateTeamInvite::kDesNaitonFieldNumber;
#endif  // !_MSC_VER

CMessageJoinGateTeamInvite::CMessageJoinGateTeamInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageJoinGateTeamInvite::InitAsDefaultInstance() {}

CMessageJoinGateTeamInvite::CMessageJoinGateTeamInvite(const CMessageJoinGateTeamInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageJoinGateTeamInvite::SharedCtor() {
  _cached_size_ = 0;
  srccharid_ = 0u;
  descharid_ = 0u;
  srcnation_ = 0u;
  desnaiton_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageJoinGateTeamInvite::~CMessageJoinGateTeamInvite() {
  SharedDtor();
}

void CMessageJoinGateTeamInvite::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageJoinGateTeamInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageJoinGateTeamInvite_descriptor_;
}

const CMessageJoinGateTeamInvite& CMessageJoinGateTeamInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageJoinGateTeamInvite* CMessageJoinGateTeamInvite::default_instance_ = NULL;

CMessageJoinGateTeamInvite* CMessageJoinGateTeamInvite::New() const {
  return new CMessageJoinGateTeamInvite;
}

void CMessageJoinGateTeamInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    srccharid_ = 0u;
    descharid_ = 0u;
    srcnation_ = 0u;
    desnaiton_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageJoinGateTeamInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 SrcCharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srccharid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_DesCharID;
        break;
      }
      
      // optional uint32 DesCharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DesCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &descharid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_SrcNation;
        break;
      }
      
      // optional uint32 SrcNation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SrcNation:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srcnation_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_DesNaiton;
        break;
      }
      
      // optional uint32 DesNaiton = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DesNaiton:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &desnaiton_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageJoinGateTeamInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageJoinGateTeamInvite::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 SrcCharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->srccharid(), output);
  }
  
  // optional uint32 DesCharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->descharid(), output);
  }
  
  // optional uint32 SrcNation = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->srcnation(), output);
  }
  
  // optional uint32 DesNaiton = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->desnaiton(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageJoinGateTeamInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 SrcCharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->srccharid(), target);
  }
  
  // optional uint32 DesCharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->descharid(), target);
  }
  
  // optional uint32 SrcNation = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->srcnation(), target);
  }
  
  // optional uint32 DesNaiton = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->desnaiton(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageJoinGateTeamInvite::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SrcCharID = 1;
    if (has_srccharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srccharid());
    }
    
    // optional uint32 DesCharID = 2;
    if (has_descharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->descharid());
    }
    
    // optional uint32 SrcNation = 3;
    if (has_srcnation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srcnation());
    }
    
    // optional uint32 DesNaiton = 4;
    if (has_desnaiton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->desnaiton());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageJoinGateTeamInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageJoinGateTeamInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageJoinGateTeamInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageJoinGateTeamInvite::MergeFrom(const CMessageJoinGateTeamInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_srccharid(from.srccharid());
    }
    if (from._has_bit(1)) {
      set_descharid(from.descharid());
    }
    if (from._has_bit(2)) {
      set_srcnation(from.srcnation());
    }
    if (from._has_bit(3)) {
      set_desnaiton(from.desnaiton());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageJoinGateTeamInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageJoinGateTeamInvite::CopyFrom(const CMessageJoinGateTeamInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageJoinGateTeamInvite::Swap(CMessageJoinGateTeamInvite* other) {
  if (other != this) {
    std::swap(srccharid_, other->srccharid_);
    std::swap(descharid_, other->descharid_);
    std::swap(srcnation_, other->srcnation_);
    std::swap(desnaiton_, other->desnaiton_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageJoinGateTeamInvite::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageJoinGateTeamInvite::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageJoinGateTeamInvite::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageJoinGateTeamInvite_reflection_;
}

// ===================================================================

const ::std::string CMessageJoinTeamInviteResponse::_default_srcname_;
const ::std::string CMessageJoinTeamInviteResponse::_default_headname_;
#ifndef _MSC_VER
const int CMessageJoinTeamInviteResponse::kDesCharIDFieldNumber;
const int CMessageJoinTeamInviteResponse::kTeamIDFieldNumber;
const int CMessageJoinTeamInviteResponse::kSrcCharIDFieldNumber;
const int CMessageJoinTeamInviteResponse::kSrcNameFieldNumber;
const int CMessageJoinTeamInviteResponse::kHeadNameFieldNumber;
const int CMessageJoinTeamInviteResponse::kTeamInfoFieldNumber;
#endif  // !_MSC_VER

CMessageJoinTeamInviteResponse::CMessageJoinTeamInviteResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageJoinTeamInviteResponse::InitAsDefaultInstance() {  teaminfo_ = const_cast< ::PBTeamInfo*>(&::PBTeamInfo::default_instance());
}

CMessageJoinTeamInviteResponse::CMessageJoinTeamInviteResponse(const CMessageJoinTeamInviteResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageJoinTeamInviteResponse::SharedCtor() {
  _cached_size_ = 0;
  descharid_ = 0u;
  teamid_ = 0u;
  srccharid_ = 0u;
  srcname_ = const_cast< ::std::string*>(&_default_srcname_);
  headname_ = const_cast< ::std::string*>(&_default_headname_);
  teaminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageJoinTeamInviteResponse::~CMessageJoinTeamInviteResponse() {
  SharedDtor();
}

void CMessageJoinTeamInviteResponse::SharedDtor() {
  if (srcname_ != &_default_srcname_) {
    delete srcname_;
  }
  if (headname_ != &_default_headname_) {
    delete headname_;
  }
  if (this != default_instance_) {
    delete teaminfo_;
  }
}

const ::google::protobuf::Descriptor* CMessageJoinTeamInviteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageJoinTeamInviteResponse_descriptor_;
}

const CMessageJoinTeamInviteResponse& CMessageJoinTeamInviteResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageJoinTeamInviteResponse* CMessageJoinTeamInviteResponse::default_instance_ = NULL;

CMessageJoinTeamInviteResponse* CMessageJoinTeamInviteResponse::New() const {
  return new CMessageJoinTeamInviteResponse;
}

void CMessageJoinTeamInviteResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    descharid_ = 0u;
    teamid_ = 0u;
    srccharid_ = 0u;
    if (_has_bit(3)) {
      if (srcname_ != &_default_srcname_) {
        srcname_->clear();
      }
    }
    if (_has_bit(4)) {
      if (headname_ != &_default_headname_) {
        headname_->clear();
      }
    }
    if (_has_bit(5)) {
      if (teaminfo_ != NULL) teaminfo_->::PBTeamInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageJoinTeamInviteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 DesCharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &descharid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_TeamID;
        break;
      }
      
      // optional uint32 TeamID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TeamID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &teamid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_SrcCharID;
        break;
      }
      
      // optional uint32 SrcCharID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SrcCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srccharid_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_SrcName;
        break;
      }
      
      // optional string SrcName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SrcName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_srcname()));
        if (input->ExpectTag(42)) goto parse_HeadName;
        break;
      }
      
      // optional string HeadName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_HeadName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_headname()));
        if (input->ExpectTag(50)) goto parse_TeamInfo;
        break;
      }
      
      // optional .PBTeamInfo TeamInfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_TeamInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_teaminfo()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageJoinTeamInviteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageJoinTeamInviteResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 DesCharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->descharid(), output);
  }
  
  // optional uint32 TeamID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->teamid(), output);
  }
  
  // optional uint32 SrcCharID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->srccharid(), output);
  }
  
  // optional string SrcName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->srcname(), output);
  }
  
  // optional string HeadName = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->headname(), output);
  }
  
  // optional .PBTeamInfo TeamInfo = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(6, this->teaminfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageJoinTeamInviteResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 DesCharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->descharid(), target);
  }
  
  // optional uint32 TeamID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->teamid(), target);
  }
  
  // optional uint32 SrcCharID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->srccharid(), target);
  }
  
  // optional string SrcName = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->srcname(), target);
  }
  
  // optional string HeadName = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->headname(), target);
  }
  
  // optional .PBTeamInfo TeamInfo = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(6, this->teaminfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageJoinTeamInviteResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 DesCharID = 1;
    if (has_descharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->descharid());
    }
    
    // optional uint32 TeamID = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->teamid());
    }
    
    // optional uint32 SrcCharID = 3;
    if (has_srccharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srccharid());
    }
    
    // optional string SrcName = 4;
    if (has_srcname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->srcname());
    }
    
    // optional string HeadName = 5;
    if (has_headname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->headname());
    }
    
    // optional .PBTeamInfo TeamInfo = 6;
    if (has_teaminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->teaminfo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageJoinTeamInviteResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageJoinTeamInviteResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageJoinTeamInviteResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageJoinTeamInviteResponse::MergeFrom(const CMessageJoinTeamInviteResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_descharid(from.descharid());
    }
    if (from._has_bit(1)) {
      set_teamid(from.teamid());
    }
    if (from._has_bit(2)) {
      set_srccharid(from.srccharid());
    }
    if (from._has_bit(3)) {
      set_srcname(from.srcname());
    }
    if (from._has_bit(4)) {
      set_headname(from.headname());
    }
    if (from._has_bit(5)) {
      mutable_teaminfo()->::PBTeamInfo::MergeFrom(from.teaminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageJoinTeamInviteResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageJoinTeamInviteResponse::CopyFrom(const CMessageJoinTeamInviteResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageJoinTeamInviteResponse::Swap(CMessageJoinTeamInviteResponse* other) {
  if (other != this) {
    std::swap(descharid_, other->descharid_);
    std::swap(teamid_, other->teamid_);
    std::swap(srccharid_, other->srccharid_);
    std::swap(srcname_, other->srcname_);
    std::swap(headname_, other->headname_);
    std::swap(teaminfo_, other->teaminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageJoinTeamInviteResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageJoinTeamInviteResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageJoinTeamInviteResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageJoinTeamInviteResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageInviteJoinReply::kSrcCharIDFieldNumber;
const int CMessageInviteJoinReply::kDesCharIDFieldNumber;
const int CMessageInviteJoinReply::kTeamIDFieldNumber;
const int CMessageInviteJoinReply::kRtnCodeFieldNumber;
#endif  // !_MSC_VER

CMessageInviteJoinReply::CMessageInviteJoinReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageInviteJoinReply::InitAsDefaultInstance() {}

CMessageInviteJoinReply::CMessageInviteJoinReply(const CMessageInviteJoinReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageInviteJoinReply::SharedCtor() {
  _cached_size_ = 0;
  srccharid_ = 0u;
  descharid_ = 0u;
  teamid_ = 0u;
  rtncode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageInviteJoinReply::~CMessageInviteJoinReply() {
  SharedDtor();
}

void CMessageInviteJoinReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageInviteJoinReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageInviteJoinReply_descriptor_;
}

const CMessageInviteJoinReply& CMessageInviteJoinReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageInviteJoinReply* CMessageInviteJoinReply::default_instance_ = NULL;

CMessageInviteJoinReply* CMessageInviteJoinReply::New() const {
  return new CMessageInviteJoinReply;
}

void CMessageInviteJoinReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    srccharid_ = 0u;
    descharid_ = 0u;
    teamid_ = 0u;
    rtncode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageInviteJoinReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 SrcCharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srccharid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_DesCharID;
        break;
      }
      
      // optional uint32 DesCharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DesCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &descharid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_TeamID;
        break;
      }
      
      // optional uint32 TeamID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TeamID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &teamid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_RtnCode;
        break;
      }
      
      // optional uint32 RtnCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RtnCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rtncode_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageInviteJoinReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageInviteJoinReply::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 SrcCharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->srccharid(), output);
  }
  
  // optional uint32 DesCharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->descharid(), output);
  }
  
  // optional uint32 TeamID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->teamid(), output);
  }
  
  // optional uint32 RtnCode = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->rtncode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageInviteJoinReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 SrcCharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->srccharid(), target);
  }
  
  // optional uint32 DesCharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->descharid(), target);
  }
  
  // optional uint32 TeamID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->teamid(), target);
  }
  
  // optional uint32 RtnCode = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->rtncode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageInviteJoinReply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SrcCharID = 1;
    if (has_srccharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srccharid());
    }
    
    // optional uint32 DesCharID = 2;
    if (has_descharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->descharid());
    }
    
    // optional uint32 TeamID = 3;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->teamid());
    }
    
    // optional uint32 RtnCode = 4;
    if (has_rtncode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rtncode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageInviteJoinReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageInviteJoinReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageInviteJoinReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageInviteJoinReply::MergeFrom(const CMessageInviteJoinReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_srccharid(from.srccharid());
    }
    if (from._has_bit(1)) {
      set_descharid(from.descharid());
    }
    if (from._has_bit(2)) {
      set_teamid(from.teamid());
    }
    if (from._has_bit(3)) {
      set_rtncode(from.rtncode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageInviteJoinReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageInviteJoinReply::CopyFrom(const CMessageInviteJoinReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageInviteJoinReply::Swap(CMessageInviteJoinReply* other) {
  if (other != this) {
    std::swap(srccharid_, other->srccharid_);
    std::swap(descharid_, other->descharid_);
    std::swap(teamid_, other->teamid_);
    std::swap(rtncode_, other->rtncode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageInviteJoinReply::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageInviteJoinReply::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageInviteJoinReply::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageInviteJoinReply_reflection_;
}

// ===================================================================

const ::std::string CMessageInvite2Request::_default_invitername_;
#ifndef _MSC_VER
const int CMessageInvite2Request::kSrcItemFieldNumber;
const int CMessageInvite2Request::kDesCharIDFieldNumber;
const int CMessageInvite2Request::kInviterNameFieldNumber;
const int CMessageInvite2Request::kInviterCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageInvite2Request::CMessageInvite2Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageInvite2Request::InitAsDefaultInstance() {  srcitem_ = const_cast< ::PBTeamItem*>(&::PBTeamItem::default_instance());
}

CMessageInvite2Request::CMessageInvite2Request(const CMessageInvite2Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageInvite2Request::SharedCtor() {
  _cached_size_ = 0;
  srcitem_ = NULL;
  descharid_ = 0u;
  invitername_ = const_cast< ::std::string*>(&_default_invitername_);
  invitercharid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageInvite2Request::~CMessageInvite2Request() {
  SharedDtor();
}

void CMessageInvite2Request::SharedDtor() {
  if (invitername_ != &_default_invitername_) {
    delete invitername_;
  }
  if (this != default_instance_) {
    delete srcitem_;
  }
}

const ::google::protobuf::Descriptor* CMessageInvite2Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageInvite2Request_descriptor_;
}

const CMessageInvite2Request& CMessageInvite2Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageInvite2Request* CMessageInvite2Request::default_instance_ = NULL;

CMessageInvite2Request* CMessageInvite2Request::New() const {
  return new CMessageInvite2Request;
}

void CMessageInvite2Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (srcitem_ != NULL) srcitem_->::PBTeamItem::Clear();
    }
    descharid_ = 0u;
    if (_has_bit(2)) {
      if (invitername_ != &_default_invitername_) {
        invitername_->clear();
      }
    }
    invitercharid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageInvite2Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBTeamItem SrcItem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_srcitem()));
        if (input->ExpectTag(16)) goto parse_DesCharID;
        break;
      }
      
      // optional uint32 DesCharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DesCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &descharid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_InviterName;
        break;
      }
      
      // optional string InviterName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_InviterName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_invitername()));
        if (input->ExpectTag(32)) goto parse_InviterCharID;
        break;
      }
      
      // optional uint32 InviterCharID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InviterCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &invitercharid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageInvite2Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageInvite2Request::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBTeamItem SrcItem = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->srcitem(), output);
  }
  
  // optional uint32 DesCharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->descharid(), output);
  }
  
  // optional string InviterName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->invitername(), output);
  }
  
  // optional uint32 InviterCharID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->invitercharid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageInvite2Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBTeamItem SrcItem = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->srcitem(), target);
  }
  
  // optional uint32 DesCharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->descharid(), target);
  }
  
  // optional string InviterName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->invitername(), target);
  }
  
  // optional uint32 InviterCharID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->invitercharid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageInvite2Request::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBTeamItem SrcItem = 1;
    if (has_srcitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->srcitem());
    }
    
    // optional uint32 DesCharID = 2;
    if (has_descharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->descharid());
    }
    
    // optional string InviterName = 3;
    if (has_invitername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->invitername());
    }
    
    // optional uint32 InviterCharID = 4;
    if (has_invitercharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->invitercharid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageInvite2Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageInvite2Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageInvite2Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageInvite2Request::MergeFrom(const CMessageInvite2Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_srcitem()->::PBTeamItem::MergeFrom(from.srcitem());
    }
    if (from._has_bit(1)) {
      set_descharid(from.descharid());
    }
    if (from._has_bit(2)) {
      set_invitername(from.invitername());
    }
    if (from._has_bit(3)) {
      set_invitercharid(from.invitercharid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageInvite2Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageInvite2Request::CopyFrom(const CMessageInvite2Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageInvite2Request::Swap(CMessageInvite2Request* other) {
  if (other != this) {
    std::swap(srcitem_, other->srcitem_);
    std::swap(descharid_, other->descharid_);
    std::swap(invitername_, other->invitername_);
    std::swap(invitercharid_, other->invitercharid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageInvite2Request::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageInvite2Request::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageInvite2Request::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageInvite2Request_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageKickoutGateTeamRequest::kHeadCharIDFieldNumber;
const int CMessageKickoutGateTeamRequest::kMemberCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageKickoutGateTeamRequest::CMessageKickoutGateTeamRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageKickoutGateTeamRequest::InitAsDefaultInstance() {}

CMessageKickoutGateTeamRequest::CMessageKickoutGateTeamRequest(const CMessageKickoutGateTeamRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageKickoutGateTeamRequest::SharedCtor() {
  _cached_size_ = 0;
  headcharid_ = 0u;
  membercharid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageKickoutGateTeamRequest::~CMessageKickoutGateTeamRequest() {
  SharedDtor();
}

void CMessageKickoutGateTeamRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageKickoutGateTeamRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageKickoutGateTeamRequest_descriptor_;
}

const CMessageKickoutGateTeamRequest& CMessageKickoutGateTeamRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageKickoutGateTeamRequest* CMessageKickoutGateTeamRequest::default_instance_ = NULL;

CMessageKickoutGateTeamRequest* CMessageKickoutGateTeamRequest::New() const {
  return new CMessageKickoutGateTeamRequest;
}

void CMessageKickoutGateTeamRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    headcharid_ = 0u;
    membercharid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageKickoutGateTeamRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 HeadCharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &headcharid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_MemberCharID;
        break;
      }
      
      // optional uint32 MemberCharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MemberCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &membercharid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageKickoutGateTeamRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageKickoutGateTeamRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 HeadCharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->headcharid(), output);
  }
  
  // optional uint32 MemberCharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->membercharid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageKickoutGateTeamRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 HeadCharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->headcharid(), target);
  }
  
  // optional uint32 MemberCharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->membercharid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageKickoutGateTeamRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 HeadCharID = 1;
    if (has_headcharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->headcharid());
    }
    
    // optional uint32 MemberCharID = 2;
    if (has_membercharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->membercharid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageKickoutGateTeamRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageKickoutGateTeamRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageKickoutGateTeamRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageKickoutGateTeamRequest::MergeFrom(const CMessageKickoutGateTeamRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_headcharid(from.headcharid());
    }
    if (from._has_bit(1)) {
      set_membercharid(from.membercharid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageKickoutGateTeamRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageKickoutGateTeamRequest::CopyFrom(const CMessageKickoutGateTeamRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageKickoutGateTeamRequest::Swap(CMessageKickoutGateTeamRequest* other) {
  if (other != this) {
    std::swap(headcharid_, other->headcharid_);
    std::swap(membercharid_, other->membercharid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageKickoutGateTeamRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageKickoutGateTeamRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageKickoutGateTeamRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageKickoutGateTeamRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageChangeHeaderRequest::kOldHeaderFieldNumber;
const int CMessageChangeHeaderRequest::kNewHeaderFieldNumber;
#endif  // !_MSC_VER

CMessageChangeHeaderRequest::CMessageChangeHeaderRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeHeaderRequest::InitAsDefaultInstance() {}

CMessageChangeHeaderRequest::CMessageChangeHeaderRequest(const CMessageChangeHeaderRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeHeaderRequest::SharedCtor() {
  _cached_size_ = 0;
  oldheader_ = 0u;
  newheader_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeHeaderRequest::~CMessageChangeHeaderRequest() {
  SharedDtor();
}

void CMessageChangeHeaderRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageChangeHeaderRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeHeaderRequest_descriptor_;
}

const CMessageChangeHeaderRequest& CMessageChangeHeaderRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeHeaderRequest* CMessageChangeHeaderRequest::default_instance_ = NULL;

CMessageChangeHeaderRequest* CMessageChangeHeaderRequest::New() const {
  return new CMessageChangeHeaderRequest;
}

void CMessageChangeHeaderRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oldheader_ = 0u;
    newheader_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeHeaderRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 OldHeader = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &oldheader_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_NewHeader;
        break;
      }
      
      // optional uint32 NewHeader = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NewHeader:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &newheader_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeHeaderRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeHeaderRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 OldHeader = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->oldheader(), output);
  }
  
  // optional uint32 NewHeader = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->newheader(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeHeaderRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 OldHeader = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->oldheader(), target);
  }
  
  // optional uint32 NewHeader = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->newheader(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeHeaderRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 OldHeader = 1;
    if (has_oldheader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->oldheader());
    }
    
    // optional uint32 NewHeader = 2;
    if (has_newheader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->newheader());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeHeaderRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeHeaderRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeHeaderRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeHeaderRequest::MergeFrom(const CMessageChangeHeaderRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oldheader(from.oldheader());
    }
    if (from._has_bit(1)) {
      set_newheader(from.newheader());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeHeaderRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeHeaderRequest::CopyFrom(const CMessageChangeHeaderRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeHeaderRequest::Swap(CMessageChangeHeaderRequest* other) {
  if (other != this) {
    std::swap(oldheader_, other->oldheader_);
    std::swap(newheader_, other->newheader_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeHeaderRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeHeaderRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeHeaderRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeHeaderRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageChangeDistributeRequest::kCharIDFieldNumber;
const int CMessageChangeDistributeRequest::kModeFieldNumber;
#endif  // !_MSC_VER

CMessageChangeDistributeRequest::CMessageChangeDistributeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeDistributeRequest::InitAsDefaultInstance() {}

CMessageChangeDistributeRequest::CMessageChangeDistributeRequest(const CMessageChangeDistributeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeDistributeRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  mode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeDistributeRequest::~CMessageChangeDistributeRequest() {
  SharedDtor();
}

void CMessageChangeDistributeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageChangeDistributeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeDistributeRequest_descriptor_;
}

const CMessageChangeDistributeRequest& CMessageChangeDistributeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeDistributeRequest* CMessageChangeDistributeRequest::default_instance_ = NULL;

CMessageChangeDistributeRequest* CMessageChangeDistributeRequest::New() const {
  return new CMessageChangeDistributeRequest;
}

void CMessageChangeDistributeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    mode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeDistributeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Mode;
        break;
      }
      
      // optional uint32 Mode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Mode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mode_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeDistributeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeDistributeRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 Mode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->mode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeDistributeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 Mode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->mode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeDistributeRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 Mode = 2;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeDistributeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeDistributeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeDistributeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeDistributeRequest::MergeFrom(const CMessageChangeDistributeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_mode(from.mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeDistributeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeDistributeRequest::CopyFrom(const CMessageChangeDistributeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeDistributeRequest::Swap(CMessageChangeDistributeRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(mode_, other->mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeDistributeRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeDistributeRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeDistributeRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeDistributeRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageChangeDistributeResponse::kCharIDFieldNumber;
const int CMessageChangeDistributeResponse::kModeFieldNumber;
#endif  // !_MSC_VER

CMessageChangeDistributeResponse::CMessageChangeDistributeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeDistributeResponse::InitAsDefaultInstance() {}

CMessageChangeDistributeResponse::CMessageChangeDistributeResponse(const CMessageChangeDistributeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeDistributeResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  mode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeDistributeResponse::~CMessageChangeDistributeResponse() {
  SharedDtor();
}

void CMessageChangeDistributeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageChangeDistributeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeDistributeResponse_descriptor_;
}

const CMessageChangeDistributeResponse& CMessageChangeDistributeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeDistributeResponse* CMessageChangeDistributeResponse::default_instance_ = NULL;

CMessageChangeDistributeResponse* CMessageChangeDistributeResponse::New() const {
  return new CMessageChangeDistributeResponse;
}

void CMessageChangeDistributeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    mode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeDistributeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Mode;
        break;
      }
      
      // optional uint32 Mode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Mode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mode_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeDistributeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeDistributeResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 Mode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->mode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeDistributeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 Mode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->mode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeDistributeResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 Mode = 2;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeDistributeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeDistributeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeDistributeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeDistributeResponse::MergeFrom(const CMessageChangeDistributeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_mode(from.mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeDistributeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeDistributeResponse::CopyFrom(const CMessageChangeDistributeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeDistributeResponse::Swap(CMessageChangeDistributeResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(mode_, other->mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeDistributeResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeDistributeResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeDistributeResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeDistributeResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLeaveGateTeamRequest::kCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageLeaveGateTeamRequest::CMessageLeaveGateTeamRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLeaveGateTeamRequest::InitAsDefaultInstance() {}

CMessageLeaveGateTeamRequest::CMessageLeaveGateTeamRequest(const CMessageLeaveGateTeamRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLeaveGateTeamRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLeaveGateTeamRequest::~CMessageLeaveGateTeamRequest() {
  SharedDtor();
}

void CMessageLeaveGateTeamRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLeaveGateTeamRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLeaveGateTeamRequest_descriptor_;
}

const CMessageLeaveGateTeamRequest& CMessageLeaveGateTeamRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageLeaveGateTeamRequest* CMessageLeaveGateTeamRequest::default_instance_ = NULL;

CMessageLeaveGateTeamRequest* CMessageLeaveGateTeamRequest::New() const {
  return new CMessageLeaveGateTeamRequest;
}

void CMessageLeaveGateTeamRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLeaveGateTeamRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLeaveGateTeamRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLeaveGateTeamRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLeaveGateTeamRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLeaveGateTeamRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLeaveGateTeamRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLeaveGateTeamRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLeaveGateTeamRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLeaveGateTeamRequest::MergeFrom(const CMessageLeaveGateTeamRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLeaveGateTeamRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLeaveGateTeamRequest::CopyFrom(const CMessageLeaveGateTeamRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLeaveGateTeamRequest::Swap(CMessageLeaveGateTeamRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLeaveGateTeamRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLeaveGateTeamRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLeaveGateTeamRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLeaveGateTeamRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageEndGateTeamRequest::kCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageEndGateTeamRequest::CMessageEndGateTeamRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageEndGateTeamRequest::InitAsDefaultInstance() {}

CMessageEndGateTeamRequest::CMessageEndGateTeamRequest(const CMessageEndGateTeamRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageEndGateTeamRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageEndGateTeamRequest::~CMessageEndGateTeamRequest() {
  SharedDtor();
}

void CMessageEndGateTeamRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageEndGateTeamRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageEndGateTeamRequest_descriptor_;
}

const CMessageEndGateTeamRequest& CMessageEndGateTeamRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageEndGateTeamRequest* CMessageEndGateTeamRequest::default_instance_ = NULL;

CMessageEndGateTeamRequest* CMessageEndGateTeamRequest::New() const {
  return new CMessageEndGateTeamRequest;
}

void CMessageEndGateTeamRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageEndGateTeamRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageEndGateTeamRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageEndGateTeamRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageEndGateTeamRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageEndGateTeamRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageEndGateTeamRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageEndGateTeamRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageEndGateTeamRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageEndGateTeamRequest::MergeFrom(const CMessageEndGateTeamRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageEndGateTeamRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageEndGateTeamRequest::CopyFrom(const CMessageEndGateTeamRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageEndGateTeamRequest::Swap(CMessageEndGateTeamRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageEndGateTeamRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageEndGateTeamRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageEndGateTeamRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageEndGateTeamRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageNotifySceneToUpdateTeam::kCodeFieldNumber;
const int CMessageNotifySceneToUpdateTeam::kDesCharIDFieldNumber;
const int CMessageNotifySceneToUpdateTeam::kHeadIDFieldNumber;
const int CMessageNotifySceneToUpdateTeam::kItemFieldNumber;
#endif  // !_MSC_VER

CMessageNotifySceneToUpdateTeam::CMessageNotifySceneToUpdateTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageNotifySceneToUpdateTeam::InitAsDefaultInstance() {  item_ = const_cast< ::PBTeamItem*>(&::PBTeamItem::default_instance());
}

CMessageNotifySceneToUpdateTeam::CMessageNotifySceneToUpdateTeam(const CMessageNotifySceneToUpdateTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageNotifySceneToUpdateTeam::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0u;
  descharid_ = 0u;
  headid_ = 0u;
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageNotifySceneToUpdateTeam::~CMessageNotifySceneToUpdateTeam() {
  SharedDtor();
}

void CMessageNotifySceneToUpdateTeam::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

const ::google::protobuf::Descriptor* CMessageNotifySceneToUpdateTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageNotifySceneToUpdateTeam_descriptor_;
}

const CMessageNotifySceneToUpdateTeam& CMessageNotifySceneToUpdateTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageNotifySceneToUpdateTeam* CMessageNotifySceneToUpdateTeam::default_instance_ = NULL;

CMessageNotifySceneToUpdateTeam* CMessageNotifySceneToUpdateTeam::New() const {
  return new CMessageNotifySceneToUpdateTeam;
}

void CMessageNotifySceneToUpdateTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0u;
    descharid_ = 0u;
    headid_ = 0u;
    if (_has_bit(3)) {
      if (item_ != NULL) item_->::PBTeamItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageNotifySceneToUpdateTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &code_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_DesCharID;
        break;
      }
      
      // optional uint32 DesCharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DesCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &descharid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_HeadID;
        break;
      }
      
      // optional uint32 HeadID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HeadID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &headid_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_Item;
        break;
      }
      
      // optional .PBTeamItem Item = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Item:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_item()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageNotifySceneToUpdateTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageNotifySceneToUpdateTeam::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Code = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->code(), output);
  }
  
  // optional uint32 DesCharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->descharid(), output);
  }
  
  // optional uint32 HeadID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->headid(), output);
  }
  
  // optional .PBTeamItem Item = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->item(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageNotifySceneToUpdateTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Code = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->code(), target);
  }
  
  // optional uint32 DesCharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->descharid(), target);
  }
  
  // optional uint32 HeadID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->headid(), target);
  }
  
  // optional .PBTeamItem Item = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(4, this->item(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageNotifySceneToUpdateTeam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->code());
    }
    
    // optional uint32 DesCharID = 2;
    if (has_descharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->descharid());
    }
    
    // optional uint32 HeadID = 3;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->headid());
    }
    
    // optional .PBTeamItem Item = 4;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->item());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageNotifySceneToUpdateTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageNotifySceneToUpdateTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageNotifySceneToUpdateTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageNotifySceneToUpdateTeam::MergeFrom(const CMessageNotifySceneToUpdateTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_code(from.code());
    }
    if (from._has_bit(1)) {
      set_descharid(from.descharid());
    }
    if (from._has_bit(2)) {
      set_headid(from.headid());
    }
    if (from._has_bit(3)) {
      mutable_item()->::PBTeamItem::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageNotifySceneToUpdateTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageNotifySceneToUpdateTeam::CopyFrom(const CMessageNotifySceneToUpdateTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageNotifySceneToUpdateTeam::Swap(CMessageNotifySceneToUpdateTeam* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(descharid_, other->descharid_);
    std::swap(headid_, other->headid_);
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageNotifySceneToUpdateTeam::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageNotifySceneToUpdateTeam::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageNotifySceneToUpdateTeam::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageNotifySceneToUpdateTeam_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageNotifySceneToSendTeamList::kDesCharIDFieldNumber;
const int CMessageNotifySceneToSendTeamList::kTeamInfoFieldNumber;
#endif  // !_MSC_VER

CMessageNotifySceneToSendTeamList::CMessageNotifySceneToSendTeamList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageNotifySceneToSendTeamList::InitAsDefaultInstance() {  teaminfo_ = const_cast< ::PBTeamInfo*>(&::PBTeamInfo::default_instance());
}

CMessageNotifySceneToSendTeamList::CMessageNotifySceneToSendTeamList(const CMessageNotifySceneToSendTeamList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageNotifySceneToSendTeamList::SharedCtor() {
  _cached_size_ = 0;
  descharid_ = 0u;
  teaminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageNotifySceneToSendTeamList::~CMessageNotifySceneToSendTeamList() {
  SharedDtor();
}

void CMessageNotifySceneToSendTeamList::SharedDtor() {
  if (this != default_instance_) {
    delete teaminfo_;
  }
}

const ::google::protobuf::Descriptor* CMessageNotifySceneToSendTeamList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageNotifySceneToSendTeamList_descriptor_;
}

const CMessageNotifySceneToSendTeamList& CMessageNotifySceneToSendTeamList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageNotifySceneToSendTeamList* CMessageNotifySceneToSendTeamList::default_instance_ = NULL;

CMessageNotifySceneToSendTeamList* CMessageNotifySceneToSendTeamList::New() const {
  return new CMessageNotifySceneToSendTeamList;
}

void CMessageNotifySceneToSendTeamList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    descharid_ = 0u;
    if (_has_bit(1)) {
      if (teaminfo_ != NULL) teaminfo_->::PBTeamInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageNotifySceneToSendTeamList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 DesCharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &descharid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_TeamInfo;
        break;
      }
      
      // optional .PBTeamInfo TeamInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_TeamInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_teaminfo()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageNotifySceneToSendTeamList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageNotifySceneToSendTeamList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 DesCharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->descharid(), output);
  }
  
  // optional .PBTeamInfo TeamInfo = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->teaminfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageNotifySceneToSendTeamList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 DesCharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->descharid(), target);
  }
  
  // optional .PBTeamInfo TeamInfo = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->teaminfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageNotifySceneToSendTeamList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 DesCharID = 1;
    if (has_descharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->descharid());
    }
    
    // optional .PBTeamInfo TeamInfo = 2;
    if (has_teaminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->teaminfo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageNotifySceneToSendTeamList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageNotifySceneToSendTeamList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageNotifySceneToSendTeamList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageNotifySceneToSendTeamList::MergeFrom(const CMessageNotifySceneToSendTeamList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_descharid(from.descharid());
    }
    if (from._has_bit(1)) {
      mutable_teaminfo()->::PBTeamInfo::MergeFrom(from.teaminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageNotifySceneToSendTeamList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageNotifySceneToSendTeamList::CopyFrom(const CMessageNotifySceneToSendTeamList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageNotifySceneToSendTeamList::Swap(CMessageNotifySceneToSendTeamList* other) {
  if (other != this) {
    std::swap(descharid_, other->descharid_);
    std::swap(teaminfo_, other->teaminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageNotifySceneToSendTeamList::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageNotifySceneToSendTeamList::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageNotifySceneToSendTeamList::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageNotifySceneToSendTeamList_reflection_;
}

// ===================================================================

const ::std::string CMessageNotifyErrToScene::_default_param1_;
const ::std::string CMessageNotifyErrToScene::_default_param2_;
#ifndef _MSC_VER
const int CMessageNotifyErrToScene::kDesCharIDFieldNumber;
const int CMessageNotifyErrToScene::kCodeFieldNumber;
const int CMessageNotifyErrToScene::kParam1FieldNumber;
const int CMessageNotifyErrToScene::kParam2FieldNumber;
#endif  // !_MSC_VER

CMessageNotifyErrToScene::CMessageNotifyErrToScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageNotifyErrToScene::InitAsDefaultInstance() {}

CMessageNotifyErrToScene::CMessageNotifyErrToScene(const CMessageNotifyErrToScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageNotifyErrToScene::SharedCtor() {
  _cached_size_ = 0;
  descharid_ = 0u;
  code_ = 0u;
  param1_ = const_cast< ::std::string*>(&_default_param1_);
  param2_ = const_cast< ::std::string*>(&_default_param2_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageNotifyErrToScene::~CMessageNotifyErrToScene() {
  SharedDtor();
}

void CMessageNotifyErrToScene::SharedDtor() {
  if (param1_ != &_default_param1_) {
    delete param1_;
  }
  if (param2_ != &_default_param2_) {
    delete param2_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageNotifyErrToScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageNotifyErrToScene_descriptor_;
}

const CMessageNotifyErrToScene& CMessageNotifyErrToScene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageNotifyErrToScene* CMessageNotifyErrToScene::default_instance_ = NULL;

CMessageNotifyErrToScene* CMessageNotifyErrToScene::New() const {
  return new CMessageNotifyErrToScene;
}

void CMessageNotifyErrToScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    descharid_ = 0u;
    code_ = 0u;
    if (_has_bit(2)) {
      if (param1_ != &_default_param1_) {
        param1_->clear();
      }
    }
    if (_has_bit(3)) {
      if (param2_ != &_default_param2_) {
        param2_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageNotifyErrToScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 DesCharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &descharid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Code;
        break;
      }
      
      // optional uint32 Code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Code:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &code_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_Param1;
        break;
      }
      
      // optional string Param1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Param1:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_param1()));
        if (input->ExpectTag(34)) goto parse_Param2;
        break;
      }
      
      // optional string Param2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Param2:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_param2()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageNotifyErrToScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageNotifyErrToScene::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 DesCharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->descharid(), output);
  }
  
  // optional uint32 Code = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->code(), output);
  }
  
  // optional string Param1 = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->param1(), output);
  }
  
  // optional string Param2 = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->param2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageNotifyErrToScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 DesCharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->descharid(), target);
  }
  
  // optional uint32 Code = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->code(), target);
  }
  
  // optional string Param1 = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->param1(), target);
  }
  
  // optional string Param2 = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->param2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageNotifyErrToScene::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 DesCharID = 1;
    if (has_descharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->descharid());
    }
    
    // optional uint32 Code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->code());
    }
    
    // optional string Param1 = 3;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->param1());
    }
    
    // optional string Param2 = 4;
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->param2());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageNotifyErrToScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageNotifyErrToScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageNotifyErrToScene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageNotifyErrToScene::MergeFrom(const CMessageNotifyErrToScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_descharid(from.descharid());
    }
    if (from._has_bit(1)) {
      set_code(from.code());
    }
    if (from._has_bit(2)) {
      set_param1(from.param1());
    }
    if (from._has_bit(3)) {
      set_param2(from.param2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageNotifyErrToScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageNotifyErrToScene::CopyFrom(const CMessageNotifyErrToScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageNotifyErrToScene::Swap(CMessageNotifyErrToScene* other) {
  if (other != this) {
    std::swap(descharid_, other->descharid_);
    std::swap(code_, other->code_);
    std::swap(param1_, other->param1_);
    std::swap(param2_, other->param2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageNotifyErrToScene::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageNotifyErrToScene::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageNotifyErrToScene::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageNotifyErrToScene_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageUpdateTeamPropertyRequest::kCharIDFieldNumber;
const int CMessageUpdateTeamPropertyRequest::kInfoFieldNumber;
#endif  // !_MSC_VER

CMessageUpdateTeamPropertyRequest::CMessageUpdateTeamPropertyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUpdateTeamPropertyRequest::InitAsDefaultInstance() {  info_ = const_cast< ::PBTeamInfo*>(&::PBTeamInfo::default_instance());
}

CMessageUpdateTeamPropertyRequest::CMessageUpdateTeamPropertyRequest(const CMessageUpdateTeamPropertyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUpdateTeamPropertyRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUpdateTeamPropertyRequest::~CMessageUpdateTeamPropertyRequest() {
  SharedDtor();
}

void CMessageUpdateTeamPropertyRequest::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

const ::google::protobuf::Descriptor* CMessageUpdateTeamPropertyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUpdateTeamPropertyRequest_descriptor_;
}

const CMessageUpdateTeamPropertyRequest& CMessageUpdateTeamPropertyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageUpdateTeamPropertyRequest* CMessageUpdateTeamPropertyRequest::default_instance_ = NULL;

CMessageUpdateTeamPropertyRequest* CMessageUpdateTeamPropertyRequest::New() const {
  return new CMessageUpdateTeamPropertyRequest;
}

void CMessageUpdateTeamPropertyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (_has_bit(1)) {
      if (info_ != NULL) info_->::PBTeamInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUpdateTeamPropertyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Info;
        break;
      }
      
      // optional .PBTeamInfo Info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Info:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_info()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUpdateTeamPropertyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUpdateTeamPropertyRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional .PBTeamInfo Info = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUpdateTeamPropertyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional .PBTeamInfo Info = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUpdateTeamPropertyRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional .PBTeamInfo Info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUpdateTeamPropertyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUpdateTeamPropertyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUpdateTeamPropertyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUpdateTeamPropertyRequest::MergeFrom(const CMessageUpdateTeamPropertyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      mutable_info()->::PBTeamInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUpdateTeamPropertyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUpdateTeamPropertyRequest::CopyFrom(const CMessageUpdateTeamPropertyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUpdateTeamPropertyRequest::Swap(CMessageUpdateTeamPropertyRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUpdateTeamPropertyRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUpdateTeamPropertyRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUpdateTeamPropertyRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUpdateTeamPropertyRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageUpdateTeamPropertyResponse::kCharIDFieldNumber;
const int CMessageUpdateTeamPropertyResponse::kInfoFieldNumber;
#endif  // !_MSC_VER

CMessageUpdateTeamPropertyResponse::CMessageUpdateTeamPropertyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUpdateTeamPropertyResponse::InitAsDefaultInstance() {  info_ = const_cast< ::PBTeamInfo*>(&::PBTeamInfo::default_instance());
}

CMessageUpdateTeamPropertyResponse::CMessageUpdateTeamPropertyResponse(const CMessageUpdateTeamPropertyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUpdateTeamPropertyResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUpdateTeamPropertyResponse::~CMessageUpdateTeamPropertyResponse() {
  SharedDtor();
}

void CMessageUpdateTeamPropertyResponse::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

const ::google::protobuf::Descriptor* CMessageUpdateTeamPropertyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUpdateTeamPropertyResponse_descriptor_;
}

const CMessageUpdateTeamPropertyResponse& CMessageUpdateTeamPropertyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageUpdateTeamPropertyResponse* CMessageUpdateTeamPropertyResponse::default_instance_ = NULL;

CMessageUpdateTeamPropertyResponse* CMessageUpdateTeamPropertyResponse::New() const {
  return new CMessageUpdateTeamPropertyResponse;
}

void CMessageUpdateTeamPropertyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (_has_bit(1)) {
      if (info_ != NULL) info_->::PBTeamInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUpdateTeamPropertyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Info;
        break;
      }
      
      // optional .PBTeamInfo Info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Info:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_info()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUpdateTeamPropertyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUpdateTeamPropertyResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional .PBTeamInfo Info = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUpdateTeamPropertyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional .PBTeamInfo Info = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUpdateTeamPropertyResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional .PBTeamInfo Info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUpdateTeamPropertyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUpdateTeamPropertyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUpdateTeamPropertyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUpdateTeamPropertyResponse::MergeFrom(const CMessageUpdateTeamPropertyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      mutable_info()->::PBTeamInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUpdateTeamPropertyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUpdateTeamPropertyResponse::CopyFrom(const CMessageUpdateTeamPropertyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUpdateTeamPropertyResponse::Swap(CMessageUpdateTeamPropertyResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUpdateTeamPropertyResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUpdateTeamPropertyResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUpdateTeamPropertyResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUpdateTeamPropertyResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageFollowRequest::kCharIDFieldNumber;
const int CMessageFollowRequest::kActionTypeFieldNumber;
const int CMessageFollowRequest::kResultCodeFieldNumber;
#endif  // !_MSC_VER

CMessageFollowRequest::CMessageFollowRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFollowRequest::InitAsDefaultInstance() {}

CMessageFollowRequest::CMessageFollowRequest(const CMessageFollowRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFollowRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  actiontype_ = 0u;
  resultcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFollowRequest::~CMessageFollowRequest() {
  SharedDtor();
}

void CMessageFollowRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageFollowRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFollowRequest_descriptor_;
}

const CMessageFollowRequest& CMessageFollowRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFollowRequest* CMessageFollowRequest::default_instance_ = NULL;

CMessageFollowRequest* CMessageFollowRequest::New() const {
  return new CMessageFollowRequest;
}

void CMessageFollowRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    actiontype_ = 0u;
    resultcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFollowRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ActionType;
        break;
      }
      
      // optional uint32 ActionType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ActionType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &actiontype_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_ResultCode;
        break;
      }
      
      // optional uint32 ResultCode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ResultCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &resultcode_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageFollowRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFollowRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 ActionType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->actiontype(), output);
  }
  
  // optional uint32 ResultCode = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->resultcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFollowRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 ActionType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->actiontype(), target);
  }
  
  // optional uint32 ResultCode = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->resultcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFollowRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 ActionType = 2;
    if (has_actiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->actiontype());
    }
    
    // optional uint32 ResultCode = 3;
    if (has_resultcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->resultcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFollowRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFollowRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFollowRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFollowRequest::MergeFrom(const CMessageFollowRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_actiontype(from.actiontype());
    }
    if (from._has_bit(2)) {
      set_resultcode(from.resultcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFollowRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFollowRequest::CopyFrom(const CMessageFollowRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFollowRequest::Swap(CMessageFollowRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(actiontype_, other->actiontype_);
    std::swap(resultcode_, other->resultcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFollowRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFollowRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFollowRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFollowRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageFollowResponse::kCharIDFieldNumber;
const int CMessageFollowResponse::kHeadIDFieldNumber;
const int CMessageFollowResponse::kActionTypeFieldNumber;
const int CMessageFollowResponse::kResultCodeFieldNumber;
#endif  // !_MSC_VER

CMessageFollowResponse::CMessageFollowResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFollowResponse::InitAsDefaultInstance() {}

CMessageFollowResponse::CMessageFollowResponse(const CMessageFollowResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFollowResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  headid_ = 0u;
  actiontype_ = 0u;
  resultcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFollowResponse::~CMessageFollowResponse() {
  SharedDtor();
}

void CMessageFollowResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageFollowResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFollowResponse_descriptor_;
}

const CMessageFollowResponse& CMessageFollowResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFollowResponse* CMessageFollowResponse::default_instance_ = NULL;

CMessageFollowResponse* CMessageFollowResponse::New() const {
  return new CMessageFollowResponse;
}

void CMessageFollowResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    headid_ = 0u;
    actiontype_ = 0u;
    resultcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFollowResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_HeadID;
        break;
      }
      
      // optional uint32 HeadID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HeadID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &headid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_ActionType;
        break;
      }
      
      // optional uint32 ActionType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ActionType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &actiontype_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_ResultCode;
        break;
      }
      
      // optional uint32 ResultCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ResultCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &resultcode_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageFollowResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFollowResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 HeadID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->headid(), output);
  }
  
  // optional uint32 ActionType = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->actiontype(), output);
  }
  
  // optional uint32 ResultCode = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->resultcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFollowResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 HeadID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->headid(), target);
  }
  
  // optional uint32 ActionType = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->actiontype(), target);
  }
  
  // optional uint32 ResultCode = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->resultcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFollowResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 HeadID = 2;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->headid());
    }
    
    // optional uint32 ActionType = 3;
    if (has_actiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->actiontype());
    }
    
    // optional uint32 ResultCode = 4;
    if (has_resultcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->resultcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFollowResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFollowResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFollowResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFollowResponse::MergeFrom(const CMessageFollowResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_headid(from.headid());
    }
    if (from._has_bit(2)) {
      set_actiontype(from.actiontype());
    }
    if (from._has_bit(3)) {
      set_resultcode(from.resultcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFollowResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFollowResponse::CopyFrom(const CMessageFollowResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFollowResponse::Swap(CMessageFollowResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(headid_, other->headid_);
    std::swap(actiontype_, other->actiontype_);
    std::swap(resultcode_, other->resultcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFollowResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFollowResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFollowResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFollowResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageSendClaimRecruitRequest::kCharIDFieldNumber;
const int CMessageSendClaimRecruitRequest::kMsgFieldNumber;
const int CMessageSendClaimRecruitRequest::kActionTypeFieldNumber;
#endif  // !_MSC_VER

CMessageSendClaimRecruitRequest::CMessageSendClaimRecruitRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageSendClaimRecruitRequest::InitAsDefaultInstance() {  msg_ = const_cast< ::PBMsg*>(&::PBMsg::default_instance());
}

CMessageSendClaimRecruitRequest::CMessageSendClaimRecruitRequest(const CMessageSendClaimRecruitRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageSendClaimRecruitRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  msg_ = NULL;
  actiontype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageSendClaimRecruitRequest::~CMessageSendClaimRecruitRequest() {
  SharedDtor();
}

void CMessageSendClaimRecruitRequest::SharedDtor() {
  if (this != default_instance_) {
    delete msg_;
  }
}

const ::google::protobuf::Descriptor* CMessageSendClaimRecruitRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageSendClaimRecruitRequest_descriptor_;
}

const CMessageSendClaimRecruitRequest& CMessageSendClaimRecruitRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageSendClaimRecruitRequest* CMessageSendClaimRecruitRequest::default_instance_ = NULL;

CMessageSendClaimRecruitRequest* CMessageSendClaimRecruitRequest::New() const {
  return new CMessageSendClaimRecruitRequest;
}

void CMessageSendClaimRecruitRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (_has_bit(1)) {
      if (msg_ != NULL) msg_->::PBMsg::Clear();
    }
    actiontype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageSendClaimRecruitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Msg;
        break;
      }
      
      // optional .PBMsg Msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Msg:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_msg()));
        if (input->ExpectTag(24)) goto parse_ActionType;
        break;
      }
      
      // optional uint32 ActionType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ActionType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &actiontype_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageSendClaimRecruitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageSendClaimRecruitRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional .PBMsg Msg = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->msg(), output);
  }
  
  // optional uint32 ActionType = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->actiontype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageSendClaimRecruitRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional .PBMsg Msg = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->msg(), target);
  }
  
  // optional uint32 ActionType = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->actiontype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageSendClaimRecruitRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional .PBMsg Msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->msg());
    }
    
    // optional uint32 ActionType = 3;
    if (has_actiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->actiontype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageSendClaimRecruitRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageSendClaimRecruitRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageSendClaimRecruitRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageSendClaimRecruitRequest::MergeFrom(const CMessageSendClaimRecruitRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      mutable_msg()->::PBMsg::MergeFrom(from.msg());
    }
    if (from._has_bit(2)) {
      set_actiontype(from.actiontype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageSendClaimRecruitRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSendClaimRecruitRequest::CopyFrom(const CMessageSendClaimRecruitRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSendClaimRecruitRequest::Swap(CMessageSendClaimRecruitRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(msg_, other->msg_);
    std::swap(actiontype_, other->actiontype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageSendClaimRecruitRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageSendClaimRecruitRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageSendClaimRecruitRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageSendClaimRecruitRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageSendClaimRecruitResponse::kCharIDFieldNumber;
const int CMessageSendClaimRecruitResponse::kMsgFieldNumber;
const int CMessageSendClaimRecruitResponse::kActionTypeFieldNumber;
#endif  // !_MSC_VER

CMessageSendClaimRecruitResponse::CMessageSendClaimRecruitResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageSendClaimRecruitResponse::InitAsDefaultInstance() {  msg_ = const_cast< ::PBMsg*>(&::PBMsg::default_instance());
}

CMessageSendClaimRecruitResponse::CMessageSendClaimRecruitResponse(const CMessageSendClaimRecruitResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageSendClaimRecruitResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  msg_ = NULL;
  actiontype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageSendClaimRecruitResponse::~CMessageSendClaimRecruitResponse() {
  SharedDtor();
}

void CMessageSendClaimRecruitResponse::SharedDtor() {
  if (this != default_instance_) {
    delete msg_;
  }
}

const ::google::protobuf::Descriptor* CMessageSendClaimRecruitResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageSendClaimRecruitResponse_descriptor_;
}

const CMessageSendClaimRecruitResponse& CMessageSendClaimRecruitResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageSendClaimRecruitResponse* CMessageSendClaimRecruitResponse::default_instance_ = NULL;

CMessageSendClaimRecruitResponse* CMessageSendClaimRecruitResponse::New() const {
  return new CMessageSendClaimRecruitResponse;
}

void CMessageSendClaimRecruitResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (_has_bit(1)) {
      if (msg_ != NULL) msg_->::PBMsg::Clear();
    }
    actiontype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageSendClaimRecruitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Msg;
        break;
      }
      
      // optional .PBMsg Msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Msg:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_msg()));
        if (input->ExpectTag(24)) goto parse_ActionType;
        break;
      }
      
      // optional uint32 ActionType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ActionType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &actiontype_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageSendClaimRecruitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageSendClaimRecruitResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional .PBMsg Msg = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->msg(), output);
  }
  
  // optional uint32 ActionType = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->actiontype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageSendClaimRecruitResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional .PBMsg Msg = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->msg(), target);
  }
  
  // optional uint32 ActionType = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->actiontype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageSendClaimRecruitResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional .PBMsg Msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->msg());
    }
    
    // optional uint32 ActionType = 3;
    if (has_actiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->actiontype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageSendClaimRecruitResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageSendClaimRecruitResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageSendClaimRecruitResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageSendClaimRecruitResponse::MergeFrom(const CMessageSendClaimRecruitResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      mutable_msg()->::PBMsg::MergeFrom(from.msg());
    }
    if (from._has_bit(2)) {
      set_actiontype(from.actiontype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageSendClaimRecruitResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSendClaimRecruitResponse::CopyFrom(const CMessageSendClaimRecruitResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSendClaimRecruitResponse::Swap(CMessageSendClaimRecruitResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(msg_, other->msg_);
    std::swap(actiontype_, other->actiontype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageSendClaimRecruitResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageSendClaimRecruitResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageSendClaimRecruitResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageSendClaimRecruitResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageQueryClaimRecruitRequest::kCharIDFieldNumber;
const int CMessageQueryClaimRecruitRequest::kActionTypeFieldNumber;
const int CMessageQueryClaimRecruitRequest::kRootConditionFieldNumber;
const int CMessageQueryClaimRecruitRequest::kSubConditionFieldNumber;
const int CMessageQueryClaimRecruitRequest::kLevelFieldNumber;
const int CMessageQueryClaimRecruitRequest::kMetierFieldNumber;
const int CMessageQueryClaimRecruitRequest::kMinLevelFieldNumber;
const int CMessageQueryClaimRecruitRequest::kMaxLevelFieldNumber;
const int CMessageQueryClaimRecruitRequest::kNationalityFieldNumber;
const int CMessageQueryClaimRecruitRequest::kPageIndexFieldNumber;
#endif  // !_MSC_VER

CMessageQueryClaimRecruitRequest::CMessageQueryClaimRecruitRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageQueryClaimRecruitRequest::InitAsDefaultInstance() {}

CMessageQueryClaimRecruitRequest::CMessageQueryClaimRecruitRequest(const CMessageQueryClaimRecruitRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageQueryClaimRecruitRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  actiontype_ = 0u;
  rootcondition_ = 0u;
  subcondition_ = 0u;
  level_ = 0u;
  metier_ = 0u;
  minlevel_ = 0u;
  maxlevel_ = 0u;
  nationality_ = 0u;
  pageindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageQueryClaimRecruitRequest::~CMessageQueryClaimRecruitRequest() {
  SharedDtor();
}

void CMessageQueryClaimRecruitRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageQueryClaimRecruitRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryClaimRecruitRequest_descriptor_;
}

const CMessageQueryClaimRecruitRequest& CMessageQueryClaimRecruitRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageQueryClaimRecruitRequest* CMessageQueryClaimRecruitRequest::default_instance_ = NULL;

CMessageQueryClaimRecruitRequest* CMessageQueryClaimRecruitRequest::New() const {
  return new CMessageQueryClaimRecruitRequest;
}

void CMessageQueryClaimRecruitRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    actiontype_ = 0u;
    rootcondition_ = 0u;
    subcondition_ = 0u;
    level_ = 0u;
    metier_ = 0u;
    minlevel_ = 0u;
    maxlevel_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    nationality_ = 0u;
    pageindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageQueryClaimRecruitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ActionType;
        break;
      }
      
      // optional uint32 ActionType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ActionType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &actiontype_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_RootCondition;
        break;
      }
      
      // optional uint32 RootCondition = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RootCondition:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rootcondition_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_SubCondition;
        break;
      }
      
      // optional uint32 SubCondition = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SubCondition:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &subcondition_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Metier;
        break;
      }
      
      // optional uint32 Metier = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Metier:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &metier_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_MinLevel;
        break;
      }
      
      // optional uint32 MinLevel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MinLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &minlevel_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_MaxLevel;
        break;
      }
      
      // optional uint32 MaxLevel = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxlevel_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_Nationality;
        break;
      }
      
      // optional uint32 Nationality = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Nationality:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &nationality_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_PageIndex;
        break;
      }
      
      // optional uint32 PageIndex = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PageIndex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pageindex_));
        _set_bit(9);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageQueryClaimRecruitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageQueryClaimRecruitRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 ActionType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->actiontype(), output);
  }
  
  // optional uint32 RootCondition = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->rootcondition(), output);
  }
  
  // optional uint32 SubCondition = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->subcondition(), output);
  }
  
  // optional uint32 Level = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->level(), output);
  }
  
  // optional uint32 Metier = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->metier(), output);
  }
  
  // optional uint32 MinLevel = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->minlevel(), output);
  }
  
  // optional uint32 MaxLevel = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->maxlevel(), output);
  }
  
  // optional uint32 Nationality = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->nationality(), output);
  }
  
  // optional uint32 PageIndex = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->pageindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageQueryClaimRecruitRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 ActionType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->actiontype(), target);
  }
  
  // optional uint32 RootCondition = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->rootcondition(), target);
  }
  
  // optional uint32 SubCondition = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->subcondition(), target);
  }
  
  // optional uint32 Level = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->level(), target);
  }
  
  // optional uint32 Metier = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->metier(), target);
  }
  
  // optional uint32 MinLevel = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->minlevel(), target);
  }
  
  // optional uint32 MaxLevel = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->maxlevel(), target);
  }
  
  // optional uint32 Nationality = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->nationality(), target);
  }
  
  // optional uint32 PageIndex = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->pageindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageQueryClaimRecruitRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 ActionType = 2;
    if (has_actiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->actiontype());
    }
    
    // optional uint32 RootCondition = 3;
    if (has_rootcondition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rootcondition());
    }
    
    // optional uint32 SubCondition = 4;
    if (has_subcondition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->subcondition());
    }
    
    // optional uint32 Level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
    // optional uint32 Metier = 6;
    if (has_metier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->metier());
    }
    
    // optional uint32 MinLevel = 7;
    if (has_minlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->minlevel());
    }
    
    // optional uint32 MaxLevel = 8;
    if (has_maxlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxlevel());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 Nationality = 9;
    if (has_nationality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->nationality());
    }
    
    // optional uint32 PageIndex = 10;
    if (has_pageindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pageindex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageQueryClaimRecruitRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageQueryClaimRecruitRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageQueryClaimRecruitRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageQueryClaimRecruitRequest::MergeFrom(const CMessageQueryClaimRecruitRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_actiontype(from.actiontype());
    }
    if (from._has_bit(2)) {
      set_rootcondition(from.rootcondition());
    }
    if (from._has_bit(3)) {
      set_subcondition(from.subcondition());
    }
    if (from._has_bit(4)) {
      set_level(from.level());
    }
    if (from._has_bit(5)) {
      set_metier(from.metier());
    }
    if (from._has_bit(6)) {
      set_minlevel(from.minlevel());
    }
    if (from._has_bit(7)) {
      set_maxlevel(from.maxlevel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_nationality(from.nationality());
    }
    if (from._has_bit(9)) {
      set_pageindex(from.pageindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageQueryClaimRecruitRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryClaimRecruitRequest::CopyFrom(const CMessageQueryClaimRecruitRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryClaimRecruitRequest::Swap(CMessageQueryClaimRecruitRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(actiontype_, other->actiontype_);
    std::swap(rootcondition_, other->rootcondition_);
    std::swap(subcondition_, other->subcondition_);
    std::swap(level_, other->level_);
    std::swap(metier_, other->metier_);
    std::swap(minlevel_, other->minlevel_);
    std::swap(maxlevel_, other->maxlevel_);
    std::swap(nationality_, other->nationality_);
    std::swap(pageindex_, other->pageindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageQueryClaimRecruitRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageQueryClaimRecruitRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageQueryClaimRecruitRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryClaimRecruitRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageQueryClaimRecruitResponse::kCharIDFieldNumber;
const int CMessageQueryClaimRecruitResponse::kMsgFieldNumber;
const int CMessageQueryClaimRecruitResponse::kPageIndexFieldNumber;
const int CMessageQueryClaimRecruitResponse::kTotalIndexFieldNumber;
const int CMessageQueryClaimRecruitResponse::kActionTypeFieldNumber;
#endif  // !_MSC_VER

CMessageQueryClaimRecruitResponse::CMessageQueryClaimRecruitResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageQueryClaimRecruitResponse::InitAsDefaultInstance() {}

CMessageQueryClaimRecruitResponse::CMessageQueryClaimRecruitResponse(const CMessageQueryClaimRecruitResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageQueryClaimRecruitResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  pageindex_ = 0u;
  totalindex_ = 0u;
  actiontype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageQueryClaimRecruitResponse::~CMessageQueryClaimRecruitResponse() {
  SharedDtor();
}

void CMessageQueryClaimRecruitResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageQueryClaimRecruitResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryClaimRecruitResponse_descriptor_;
}

const CMessageQueryClaimRecruitResponse& CMessageQueryClaimRecruitResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageQueryClaimRecruitResponse* CMessageQueryClaimRecruitResponse::default_instance_ = NULL;

CMessageQueryClaimRecruitResponse* CMessageQueryClaimRecruitResponse::New() const {
  return new CMessageQueryClaimRecruitResponse;
}

void CMessageQueryClaimRecruitResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    pageindex_ = 0u;
    totalindex_ = 0u;
    actiontype_ = 0u;
  }
  msg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageQueryClaimRecruitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Msg;
        break;
      }
      
      // repeated .PBMsg Msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Msg:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_msg()));
        if (input->ExpectTag(18)) goto parse_Msg;
        if (input->ExpectTag(24)) goto parse_PageIndex;
        break;
      }
      
      // optional uint32 PageIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PageIndex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pageindex_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_TotalIndex;
        break;
      }
      
      // optional uint32 TotalIndex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TotalIndex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &totalindex_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_ActionType;
        break;
      }
      
      // optional uint32 ActionType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ActionType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &actiontype_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageQueryClaimRecruitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageQueryClaimRecruitResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // repeated .PBMsg Msg = 2;
  for (int i = 0; i < this->msg_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->msg(i), output);
  }
  
  // optional uint32 PageIndex = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->pageindex(), output);
  }
  
  // optional uint32 TotalIndex = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->totalindex(), output);
  }
  
  // optional uint32 ActionType = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->actiontype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageQueryClaimRecruitResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // repeated .PBMsg Msg = 2;
  for (int i = 0; i < this->msg_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->msg(i), target);
  }
  
  // optional uint32 PageIndex = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->pageindex(), target);
  }
  
  // optional uint32 TotalIndex = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->totalindex(), target);
  }
  
  // optional uint32 ActionType = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->actiontype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageQueryClaimRecruitResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 PageIndex = 3;
    if (has_pageindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pageindex());
    }
    
    // optional uint32 TotalIndex = 4;
    if (has_totalindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->totalindex());
    }
    
    // optional uint32 ActionType = 5;
    if (has_actiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->actiontype());
    }
    
  }
  // repeated .PBMsg Msg = 2;
  total_size += 1 * this->msg_size();
  for (int i = 0; i < this->msg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->msg(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageQueryClaimRecruitResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageQueryClaimRecruitResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageQueryClaimRecruitResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageQueryClaimRecruitResponse::MergeFrom(const CMessageQueryClaimRecruitResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  msg_.MergeFrom(from.msg_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(2)) {
      set_pageindex(from.pageindex());
    }
    if (from._has_bit(3)) {
      set_totalindex(from.totalindex());
    }
    if (from._has_bit(4)) {
      set_actiontype(from.actiontype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageQueryClaimRecruitResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryClaimRecruitResponse::CopyFrom(const CMessageQueryClaimRecruitResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryClaimRecruitResponse::Swap(CMessageQueryClaimRecruitResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    msg_.Swap(&other->msg_);
    std::swap(pageindex_, other->pageindex_);
    std::swap(totalindex_, other->totalindex_);
    std::swap(actiontype_, other->actiontype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageQueryClaimRecruitResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageQueryClaimRecruitResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageQueryClaimRecruitResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryClaimRecruitResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageDeleteClaimRecruitRequest::kCharIDFieldNumber;
const int CMessageDeleteClaimRecruitRequest::kActionTypeFieldNumber;
#endif  // !_MSC_VER

CMessageDeleteClaimRecruitRequest::CMessageDeleteClaimRecruitRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageDeleteClaimRecruitRequest::InitAsDefaultInstance() {}

CMessageDeleteClaimRecruitRequest::CMessageDeleteClaimRecruitRequest(const CMessageDeleteClaimRecruitRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageDeleteClaimRecruitRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  actiontype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageDeleteClaimRecruitRequest::~CMessageDeleteClaimRecruitRequest() {
  SharedDtor();
}

void CMessageDeleteClaimRecruitRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageDeleteClaimRecruitRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageDeleteClaimRecruitRequest_descriptor_;
}

const CMessageDeleteClaimRecruitRequest& CMessageDeleteClaimRecruitRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageDeleteClaimRecruitRequest* CMessageDeleteClaimRecruitRequest::default_instance_ = NULL;

CMessageDeleteClaimRecruitRequest* CMessageDeleteClaimRecruitRequest::New() const {
  return new CMessageDeleteClaimRecruitRequest;
}

void CMessageDeleteClaimRecruitRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    actiontype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageDeleteClaimRecruitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ActionType;
        break;
      }
      
      // optional uint32 ActionType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ActionType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &actiontype_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageDeleteClaimRecruitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageDeleteClaimRecruitRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 ActionType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->actiontype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageDeleteClaimRecruitRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 ActionType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->actiontype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageDeleteClaimRecruitRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 ActionType = 2;
    if (has_actiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->actiontype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageDeleteClaimRecruitRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageDeleteClaimRecruitRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageDeleteClaimRecruitRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageDeleteClaimRecruitRequest::MergeFrom(const CMessageDeleteClaimRecruitRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_actiontype(from.actiontype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageDeleteClaimRecruitRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDeleteClaimRecruitRequest::CopyFrom(const CMessageDeleteClaimRecruitRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDeleteClaimRecruitRequest::Swap(CMessageDeleteClaimRecruitRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(actiontype_, other->actiontype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageDeleteClaimRecruitRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageDeleteClaimRecruitRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageDeleteClaimRecruitRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageDeleteClaimRecruitRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageDeleteClaimRecruitResponse::kCharIDFieldNumber;
const int CMessageDeleteClaimRecruitResponse::kActionTypeFieldNumber;
#endif  // !_MSC_VER

CMessageDeleteClaimRecruitResponse::CMessageDeleteClaimRecruitResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageDeleteClaimRecruitResponse::InitAsDefaultInstance() {}

CMessageDeleteClaimRecruitResponse::CMessageDeleteClaimRecruitResponse(const CMessageDeleteClaimRecruitResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageDeleteClaimRecruitResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  actiontype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageDeleteClaimRecruitResponse::~CMessageDeleteClaimRecruitResponse() {
  SharedDtor();
}

void CMessageDeleteClaimRecruitResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageDeleteClaimRecruitResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageDeleteClaimRecruitResponse_descriptor_;
}

const CMessageDeleteClaimRecruitResponse& CMessageDeleteClaimRecruitResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageDeleteClaimRecruitResponse* CMessageDeleteClaimRecruitResponse::default_instance_ = NULL;

CMessageDeleteClaimRecruitResponse* CMessageDeleteClaimRecruitResponse::New() const {
  return new CMessageDeleteClaimRecruitResponse;
}

void CMessageDeleteClaimRecruitResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    actiontype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageDeleteClaimRecruitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ActionType;
        break;
      }
      
      // optional uint32 ActionType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ActionType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &actiontype_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageDeleteClaimRecruitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageDeleteClaimRecruitResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 ActionType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->actiontype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageDeleteClaimRecruitResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 ActionType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->actiontype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageDeleteClaimRecruitResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 ActionType = 2;
    if (has_actiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->actiontype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageDeleteClaimRecruitResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageDeleteClaimRecruitResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageDeleteClaimRecruitResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageDeleteClaimRecruitResponse::MergeFrom(const CMessageDeleteClaimRecruitResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_actiontype(from.actiontype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageDeleteClaimRecruitResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDeleteClaimRecruitResponse::CopyFrom(const CMessageDeleteClaimRecruitResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDeleteClaimRecruitResponse::Swap(CMessageDeleteClaimRecruitResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(actiontype_, other->actiontype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageDeleteClaimRecruitResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageDeleteClaimRecruitResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageDeleteClaimRecruitResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageDeleteClaimRecruitResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageObtainGateTeamRequest::kCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageObtainGateTeamRequest::CMessageObtainGateTeamRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageObtainGateTeamRequest::InitAsDefaultInstance() {}

CMessageObtainGateTeamRequest::CMessageObtainGateTeamRequest(const CMessageObtainGateTeamRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageObtainGateTeamRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageObtainGateTeamRequest::~CMessageObtainGateTeamRequest() {
  SharedDtor();
}

void CMessageObtainGateTeamRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageObtainGateTeamRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageObtainGateTeamRequest_descriptor_;
}

const CMessageObtainGateTeamRequest& CMessageObtainGateTeamRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageObtainGateTeamRequest* CMessageObtainGateTeamRequest::default_instance_ = NULL;

CMessageObtainGateTeamRequest* CMessageObtainGateTeamRequest::New() const {
  return new CMessageObtainGateTeamRequest;
}

void CMessageObtainGateTeamRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageObtainGateTeamRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageObtainGateTeamRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageObtainGateTeamRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageObtainGateTeamRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageObtainGateTeamRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageObtainGateTeamRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageObtainGateTeamRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageObtainGateTeamRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageObtainGateTeamRequest::MergeFrom(const CMessageObtainGateTeamRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageObtainGateTeamRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageObtainGateTeamRequest::CopyFrom(const CMessageObtainGateTeamRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageObtainGateTeamRequest::Swap(CMessageObtainGateTeamRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageObtainGateTeamRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageObtainGateTeamRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageObtainGateTeamRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageObtainGateTeamRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageClearInvReqRecordRequest::kTypeFieldNumber;
const int CMessageClearInvReqRecordRequest::kCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageClearInvReqRecordRequest::CMessageClearInvReqRecordRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageClearInvReqRecordRequest::InitAsDefaultInstance() {}

CMessageClearInvReqRecordRequest::CMessageClearInvReqRecordRequest(const CMessageClearInvReqRecordRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageClearInvReqRecordRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageClearInvReqRecordRequest::~CMessageClearInvReqRecordRequest() {
  SharedDtor();
}

void CMessageClearInvReqRecordRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageClearInvReqRecordRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageClearInvReqRecordRequest_descriptor_;
}

const CMessageClearInvReqRecordRequest& CMessageClearInvReqRecordRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageClearInvReqRecordRequest* CMessageClearInvReqRecordRequest::default_instance_ = NULL;

CMessageClearInvReqRecordRequest* CMessageClearInvReqRecordRequest::New() const {
  return new CMessageClearInvReqRecordRequest;
}

void CMessageClearInvReqRecordRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageClearInvReqRecordRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageClearInvReqRecordRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageClearInvReqRecordRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->type(), output);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageClearInvReqRecordRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Type = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageClearInvReqRecordRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
    // optional uint32 CharID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageClearInvReqRecordRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageClearInvReqRecordRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageClearInvReqRecordRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageClearInvReqRecordRequest::MergeFrom(const CMessageClearInvReqRecordRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type(from.type());
    }
    if (from._has_bit(1)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageClearInvReqRecordRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageClearInvReqRecordRequest::CopyFrom(const CMessageClearInvReqRecordRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageClearInvReqRecordRequest::Swap(CMessageClearInvReqRecordRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageClearInvReqRecordRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageClearInvReqRecordRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageClearInvReqRecordRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageClearInvReqRecordRequest_reflection_;
}

// ===================================================================

const ::std::string PBMsg::_default_name_;
const ::std::string PBMsg::_default_content_;
#ifndef _MSC_VER
const int PBMsg::kTypeFieldNumber;
const int PBMsg::kCharIDFieldNumber;
const int PBMsg::kNameFieldNumber;
const int PBMsg::kMetierFieldNumber;
const int PBMsg::kLevelFieldNumber;
const int PBMsg::kMaxLevelFieldNumber;
const int PBMsg::kMinLevelFieldNumber;
const int PBMsg::kContentFieldNumber;
const int PBMsg::kCountFieldNumber;
const int PBMsg::kRootStyleFieldNumber;
const int PBMsg::kSubStyleFieldNumber;
const int PBMsg::kNationalityFieldNumber;
#endif  // !_MSC_VER

PBMsg::PBMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMsg::InitAsDefaultInstance() {}

PBMsg::PBMsg(const PBMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMsg::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  metier_ = 0u;
  level_ = 0u;
  maxlevel_ = 0u;
  minlevel_ = 0u;
  content_ = const_cast< ::std::string*>(&_default_content_);
  count_ = 0u;
  rootstyle_ = 0u;
  substyle_ = 0u;
  nationality_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMsg::~PBMsg() {
  SharedDtor();
}

void PBMsg::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (content_ != &_default_content_) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMsg_descriptor_;
}

const PBMsg& PBMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

PBMsg* PBMsg::default_instance_ = NULL;

PBMsg* PBMsg::New() const {
  return new PBMsg;
}

void PBMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    charid_ = 0u;
    if (_has_bit(2)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    metier_ = 0u;
    level_ = 0u;
    maxlevel_ = 0u;
    minlevel_ = 0u;
    if (_has_bit(7)) {
      if (content_ != &_default_content_) {
        content_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    count_ = 0u;
    rootstyle_ = 0u;
    substyle_ = 0u;
    nationality_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_Name;
        break;
      }
      
      // optional string Name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(32)) goto parse_Metier;
        break;
      }
      
      // optional uint32 Metier = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Metier:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &metier_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_MaxLevel;
        break;
      }
      
      // optional uint32 MaxLevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxlevel_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_MinLevel;
        break;
      }
      
      // optional uint32 MinLevel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MinLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &minlevel_));
        _set_bit(6);
        if (input->ExpectTag(66)) goto parse_Content;
        break;
      }
      
      // optional string Content = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Content:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_content()));
        if (input->ExpectTag(72)) goto parse_Count;
        break;
      }
      
      // optional uint32 Count = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Count:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &count_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_RootStyle;
        break;
      }
      
      // optional uint32 RootStyle = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RootStyle:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rootstyle_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_SubStyle;
        break;
      }
      
      // optional uint32 SubStyle = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SubStyle:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &substyle_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_Nationality;
        break;
      }
      
      // optional uint32 Nationality = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Nationality:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &nationality_));
        _set_bit(11);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBMsg::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->type(), output);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charid(), output);
  }
  
  // optional string Name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->name(), output);
  }
  
  // optional uint32 Metier = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->metier(), output);
  }
  
  // optional uint32 Level = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->level(), output);
  }
  
  // optional uint32 MaxLevel = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->maxlevel(), output);
  }
  
  // optional uint32 MinLevel = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->minlevel(), output);
  }
  
  // optional string Content = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteString(8, this->content(), output);
  }
  
  // optional uint32 Count = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->count(), output);
  }
  
  // optional uint32 RootStyle = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->rootstyle(), output);
  }
  
  // optional uint32 SubStyle = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->substyle(), output);
  }
  
  // optional uint32 Nationality = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->nationality(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Type = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charid(), target);
  }
  
  // optional string Name = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->name(), target);
  }
  
  // optional uint32 Metier = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->metier(), target);
  }
  
  // optional uint32 Level = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->level(), target);
  }
  
  // optional uint32 MaxLevel = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->maxlevel(), target);
  }
  
  // optional uint32 MinLevel = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->minlevel(), target);
  }
  
  // optional string Content = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(8, this->content(), target);
  }
  
  // optional uint32 Count = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->count(), target);
  }
  
  // optional uint32 RootStyle = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->rootstyle(), target);
  }
  
  // optional uint32 SubStyle = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->substyle(), target);
  }
  
  // optional uint32 Nationality = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->nationality(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
    // optional uint32 CharID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional string Name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional uint32 Metier = 4;
    if (has_metier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->metier());
    }
    
    // optional uint32 Level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
    // optional uint32 MaxLevel = 6;
    if (has_maxlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxlevel());
    }
    
    // optional uint32 MinLevel = 7;
    if (has_minlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->minlevel());
    }
    
    // optional string Content = 8;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->content());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 Count = 9;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->count());
    }
    
    // optional uint32 RootStyle = 10;
    if (has_rootstyle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rootstyle());
    }
    
    // optional uint32 SubStyle = 11;
    if (has_substyle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->substyle());
    }
    
    // optional uint32 Nationality = 12;
    if (has_nationality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->nationality());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMsg::MergeFrom(const PBMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type(from.type());
    }
    if (from._has_bit(1)) {
      set_charid(from.charid());
    }
    if (from._has_bit(2)) {
      set_name(from.name());
    }
    if (from._has_bit(3)) {
      set_metier(from.metier());
    }
    if (from._has_bit(4)) {
      set_level(from.level());
    }
    if (from._has_bit(5)) {
      set_maxlevel(from.maxlevel());
    }
    if (from._has_bit(6)) {
      set_minlevel(from.minlevel());
    }
    if (from._has_bit(7)) {
      set_content(from.content());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_count(from.count());
    }
    if (from._has_bit(9)) {
      set_rootstyle(from.rootstyle());
    }
    if (from._has_bit(10)) {
      set_substyle(from.substyle());
    }
    if (from._has_bit(11)) {
      set_nationality(from.nationality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMsg::CopyFrom(const PBMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMsg::Swap(PBMsg* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(metier_, other->metier_);
    std::swap(level_, other->level_);
    std::swap(maxlevel_, other->maxlevel_);
    std::swap(minlevel_, other->minlevel_);
    std::swap(content_, other->content_);
    std::swap(count_, other->count_);
    std::swap(rootstyle_, other->rootstyle_);
    std::swap(substyle_, other->substyle_);
    std::swap(nationality_, other->nationality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBMsg::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBMsg::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBMsg::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBMsg_reflection_;
}

// ===================================================================

const ::std::string PBTeamItem::_default_name_;
#ifndef _MSC_VER
const int PBTeamItem::kCharIDFieldNumber;
const int PBTeamItem::kNameFieldNumber;
const int PBTeamItem::kAccountIDFieldNumber;
const int PBTeamItem::kTypeFieldNumber;
const int PBTeamItem::kFaceFieldNumber;
const int PBTeamItem::kMetierFieldNumber;
const int PBTeamItem::kLevelFieldNumber;
const int PBTeamItem::kSexFieldNumber;
const int PBTeamItem::kHPFieldNumber;
const int PBTeamItem::kMPFieldNumber;
const int PBTeamItem::kAPFieldNumber;
const int PBTeamItem::kPosXFieldNumber;
const int PBTeamItem::kPosYFieldNumber;
const int PBTeamItem::kLineIDFieldNumber;
const int PBTeamItem::kMapIDFieldNumber;
const int PBTeamItem::kStatusFieldNumber;
const int PBTeamItem::kNationalityFieldNumber;
const int PBTeamItem::kBuffListFieldNumber;
const int PBTeamItem::kRepetionMapIndexFieldNumber;
const int PBTeamItem::kOrderFieldNumber;
#endif  // !_MSC_VER

PBTeamItem::PBTeamItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTeamItem::InitAsDefaultInstance() {  bufflist_ = const_cast< ::PBBuffList*>(&::PBBuffList::default_instance());
}

PBTeamItem::PBTeamItem(const PBTeamItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTeamItem::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  accountid_ = 0u;
  type_ = 0u;
  face_ = 0u;
  metier_ = 0u;
  level_ = 0u;
  sex_ = 0u;
  hp_ = 0u;
  mp_ = 0u;
  ap_ = 0u;
  posx_ = 0u;
  posy_ = 0u;
  lineid_ = 0u;
  mapid_ = 0u;
  status_ = 0u;
  nationality_ = 0u;
  bufflist_ = NULL;
  repetionmapindex_ = 0u;
  order_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTeamItem::~PBTeamItem() {
  SharedDtor();
}

void PBTeamItem::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
    delete bufflist_;
  }
}

const ::google::protobuf::Descriptor* PBTeamItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTeamItem_descriptor_;
}

const PBTeamItem& PBTeamItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

PBTeamItem* PBTeamItem::default_instance_ = NULL;

PBTeamItem* PBTeamItem::New() const {
  return new PBTeamItem;
}

void PBTeamItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    accountid_ = 0u;
    type_ = 0u;
    face_ = 0u;
    metier_ = 0u;
    level_ = 0u;
    sex_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    hp_ = 0u;
    mp_ = 0u;
    ap_ = 0u;
    posx_ = 0u;
    posy_ = 0u;
    lineid_ = 0u;
    mapid_ = 0u;
    status_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    nationality_ = 0u;
    if (_has_bit(17)) {
      if (bufflist_ != NULL) bufflist_->::PBBuffList::Clear();
    }
    repetionmapindex_ = 0u;
    order_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTeamItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }
      
      // optional string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(24)) goto parse_AccountID;
        break;
      }
      
      // optional uint32 AccountID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AccountID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Type;
        break;
      }
      
      // optional uint32 Type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Type:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Face;
        break;
      }
      
      // optional uint32 Face = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Face:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &face_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Metier;
        break;
      }
      
      // optional uint32 Metier = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Metier:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &metier_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_Sex;
        break;
      }
      
      // optional uint32 Sex = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Sex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sex_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_HP;
        break;
      }
      
      // optional uint32 HP = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HP:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &hp_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_MP;
        break;
      }
      
      // optional uint32 MP = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MP:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mp_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_AP;
        break;
      }
      
      // optional uint32 AP = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AP:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ap_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_PosX;
        break;
      }
      
      // optional uint32 PosX = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosX:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posx_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_PosY;
        break;
      }
      
      // optional uint32 PosY = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posy_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_LineID;
        break;
      }
      
      // optional uint32 LineID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lineid_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_Status;
        break;
      }
      
      // optional uint32 Status = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Status:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &status_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_Nationality;
        break;
      }
      
      // optional uint32 Nationality = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Nationality:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &nationality_));
        _set_bit(16);
        if (input->ExpectTag(146)) goto parse_BuffList;
        break;
      }
      
      // optional .PBBuffList BuffList = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_BuffList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_bufflist()));
        if (input->ExpectTag(152)) goto parse_RepetionMapIndex;
        break;
      }
      
      // optional uint32 RepetionMapIndex = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RepetionMapIndex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &repetionmapindex_));
        _set_bit(18);
        if (input->ExpectTag(160)) goto parse_Order;
        break;
      }
      
      // optional uint32 Order = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Order:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &order_));
        _set_bit(19);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTeamItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBTeamItem::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional string Name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->name(), output);
  }
  
  // optional uint32 AccountID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->accountid(), output);
  }
  
  // optional uint32 Type = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->type(), output);
  }
  
  // optional uint32 Face = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->face(), output);
  }
  
  // optional uint32 Metier = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->metier(), output);
  }
  
  // optional uint32 Level = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->level(), output);
  }
  
  // optional uint32 Sex = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->sex(), output);
  }
  
  // optional uint32 HP = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->hp(), output);
  }
  
  // optional uint32 MP = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->mp(), output);
  }
  
  // optional uint32 AP = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->ap(), output);
  }
  
  // optional uint32 PosX = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->posx(), output);
  }
  
  // optional uint32 PosY = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->posy(), output);
  }
  
  // optional uint32 LineID = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->lineid(), output);
  }
  
  // optional uint32 MapID = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(15, this->mapid(), output);
  }
  
  // optional uint32 Status = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(16, this->status(), output);
  }
  
  // optional uint32 Nationality = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(17, this->nationality(), output);
  }
  
  // optional .PBBuffList BuffList = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(18, this->bufflist(), output);
  }
  
  // optional uint32 RepetionMapIndex = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(19, this->repetionmapindex(), output);
  }
  
  // optional uint32 Order = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(20, this->order(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTeamItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional string Name = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->name(), target);
  }
  
  // optional uint32 AccountID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->accountid(), target);
  }
  
  // optional uint32 Type = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->type(), target);
  }
  
  // optional uint32 Face = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->face(), target);
  }
  
  // optional uint32 Metier = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->metier(), target);
  }
  
  // optional uint32 Level = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->level(), target);
  }
  
  // optional uint32 Sex = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->sex(), target);
  }
  
  // optional uint32 HP = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->hp(), target);
  }
  
  // optional uint32 MP = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->mp(), target);
  }
  
  // optional uint32 AP = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->ap(), target);
  }
  
  // optional uint32 PosX = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->posx(), target);
  }
  
  // optional uint32 PosY = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->posy(), target);
  }
  
  // optional uint32 LineID = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->lineid(), target);
  }
  
  // optional uint32 MapID = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(15, this->mapid(), target);
  }
  
  // optional uint32 Status = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(16, this->status(), target);
  }
  
  // optional uint32 Nationality = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(17, this->nationality(), target);
  }
  
  // optional .PBBuffList BuffList = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(18, this->bufflist(), target);
  }
  
  // optional uint32 RepetionMapIndex = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(19, this->repetionmapindex(), target);
  }
  
  // optional uint32 Order = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(20, this->order(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTeamItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional uint32 AccountID = 3;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 Type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
    // optional uint32 Face = 5;
    if (has_face()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->face());
    }
    
    // optional uint32 Metier = 6;
    if (has_metier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->metier());
    }
    
    // optional uint32 Level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
    // optional uint32 Sex = 8;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sex());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 HP = 9;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->hp());
    }
    
    // optional uint32 MP = 10;
    if (has_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mp());
    }
    
    // optional uint32 AP = 11;
    if (has_ap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ap());
    }
    
    // optional uint32 PosX = 12;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posx());
    }
    
    // optional uint32 PosY = 13;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posy());
    }
    
    // optional uint32 LineID = 14;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lineid());
    }
    
    // optional uint32 MapID = 15;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 Status = 16;
    if (has_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->status());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 Nationality = 17;
    if (has_nationality()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->nationality());
    }
    
    // optional .PBBuffList BuffList = 18;
    if (has_bufflist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->bufflist());
    }
    
    // optional uint32 RepetionMapIndex = 19;
    if (has_repetionmapindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->repetionmapindex());
    }
    
    // optional uint32 Order = 20;
    if (has_order()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->order());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBTeamItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTeamItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTeamItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTeamItem::MergeFrom(const PBTeamItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(3)) {
      set_type(from.type());
    }
    if (from._has_bit(4)) {
      set_face(from.face());
    }
    if (from._has_bit(5)) {
      set_metier(from.metier());
    }
    if (from._has_bit(6)) {
      set_level(from.level());
    }
    if (from._has_bit(7)) {
      set_sex(from.sex());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_hp(from.hp());
    }
    if (from._has_bit(9)) {
      set_mp(from.mp());
    }
    if (from._has_bit(10)) {
      set_ap(from.ap());
    }
    if (from._has_bit(11)) {
      set_posx(from.posx());
    }
    if (from._has_bit(12)) {
      set_posy(from.posy());
    }
    if (from._has_bit(13)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(14)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(15)) {
      set_status(from.status());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_nationality(from.nationality());
    }
    if (from._has_bit(17)) {
      mutable_bufflist()->::PBBuffList::MergeFrom(from.bufflist());
    }
    if (from._has_bit(18)) {
      set_repetionmapindex(from.repetionmapindex());
    }
    if (from._has_bit(19)) {
      set_order(from.order());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTeamItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTeamItem::CopyFrom(const PBTeamItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTeamItem::Swap(PBTeamItem* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(accountid_, other->accountid_);
    std::swap(type_, other->type_);
    std::swap(face_, other->face_);
    std::swap(metier_, other->metier_);
    std::swap(level_, other->level_);
    std::swap(sex_, other->sex_);
    std::swap(hp_, other->hp_);
    std::swap(mp_, other->mp_);
    std::swap(ap_, other->ap_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(lineid_, other->lineid_);
    std::swap(mapid_, other->mapid_);
    std::swap(status_, other->status_);
    std::swap(nationality_, other->nationality_);
    std::swap(bufflist_, other->bufflist_);
    std::swap(repetionmapindex_, other->repetionmapindex_);
    std::swap(order_, other->order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBTeamItem::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBTeamItem::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBTeamItem::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBTeamItem_reflection_;
}

// ===================================================================

const ::std::string PBTeamInfo::_default_headname_;
#ifndef _MSC_VER
const int PBTeamInfo::kHeaderCharIDFieldNumber;
const int PBTeamInfo::kDistributeModeFieldNumber;
const int PBTeamInfo::kHeadNameFieldNumber;
const int PBTeamInfo::kCountFieldNumber;
const int PBTeamInfo::kTeamIDFieldNumber;
const int PBTeamInfo::kMembersFieldNumber;
#endif  // !_MSC_VER

PBTeamInfo::PBTeamInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTeamInfo::InitAsDefaultInstance() {}

PBTeamInfo::PBTeamInfo(const PBTeamInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTeamInfo::SharedCtor() {
  _cached_size_ = 0;
  headercharid_ = 0u;
  distributemode_ = 0u;
  headname_ = const_cast< ::std::string*>(&_default_headname_);
  count_ = 0u;
  teamid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTeamInfo::~PBTeamInfo() {
  SharedDtor();
}

void PBTeamInfo::SharedDtor() {
  if (headname_ != &_default_headname_) {
    delete headname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBTeamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTeamInfo_descriptor_;
}

const PBTeamInfo& PBTeamInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

PBTeamInfo* PBTeamInfo::default_instance_ = NULL;

PBTeamInfo* PBTeamInfo::New() const {
  return new PBTeamInfo;
}

void PBTeamInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    headercharid_ = 0u;
    distributemode_ = 0u;
    if (_has_bit(2)) {
      if (headname_ != &_default_headname_) {
        headname_->clear();
      }
    }
    count_ = 0u;
    teamid_ = 0u;
  }
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 HeaderCharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &headercharid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_DistributeMode;
        break;
      }
      
      // optional uint32 DistributeMode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DistributeMode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &distributemode_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_HeadName;
        break;
      }
      
      // optional string HeadName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_HeadName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_headname()));
        if (input->ExpectTag(32)) goto parse_Count;
        break;
      }
      
      // optional uint32 Count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Count:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &count_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_TeamID;
        break;
      }
      
      // optional uint32 TeamID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TeamID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &teamid_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_Members;
        break;
      }
      
      // repeated .PBTeamItem Members = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Members:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_members()));
        if (input->ExpectTag(50)) goto parse_Members;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBTeamInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 HeaderCharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->headercharid(), output);
  }
  
  // optional uint32 DistributeMode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->distributemode(), output);
  }
  
  // optional string HeadName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->headname(), output);
  }
  
  // optional uint32 Count = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->count(), output);
  }
  
  // optional uint32 TeamID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->teamid(), output);
  }
  
  // repeated .PBTeamItem Members = 6;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(6, this->members(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTeamInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 HeaderCharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->headercharid(), target);
  }
  
  // optional uint32 DistributeMode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->distributemode(), target);
  }
  
  // optional string HeadName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->headname(), target);
  }
  
  // optional uint32 Count = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->count(), target);
  }
  
  // optional uint32 TeamID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->teamid(), target);
  }
  
  // repeated .PBTeamItem Members = 6;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(6, this->members(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTeamInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 HeaderCharID = 1;
    if (has_headercharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->headercharid());
    }
    
    // optional uint32 DistributeMode = 2;
    if (has_distributemode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->distributemode());
    }
    
    // optional string HeadName = 3;
    if (has_headname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->headname());
    }
    
    // optional uint32 Count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->count());
    }
    
    // optional uint32 TeamID = 5;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->teamid());
    }
    
  }
  // repeated .PBTeamItem Members = 6;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->members(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBTeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTeamInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTeamInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTeamInfo::MergeFrom(const PBTeamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_headercharid(from.headercharid());
    }
    if (from._has_bit(1)) {
      set_distributemode(from.distributemode());
    }
    if (from._has_bit(2)) {
      set_headname(from.headname());
    }
    if (from._has_bit(3)) {
      set_count(from.count());
    }
    if (from._has_bit(4)) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTeamInfo::CopyFrom(const PBTeamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTeamInfo::Swap(PBTeamInfo* other) {
  if (other != this) {
    std::swap(headercharid_, other->headercharid_);
    std::swap(distributemode_, other->distributemode_);
    std::swap(headname_, other->headname_);
    std::swap(count_, other->count_);
    std::swap(teamid_, other->teamid_);
    members_.Swap(&other->members_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBTeamInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBTeamInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBTeamInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBTeamInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGateShutDownNotice::kWorldIDFieldNumber;
#endif  // !_MSC_VER

CMessageGateShutDownNotice::CMessageGateShutDownNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGateShutDownNotice::InitAsDefaultInstance() {}

CMessageGateShutDownNotice::CMessageGateShutDownNotice(const CMessageGateShutDownNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGateShutDownNotice::SharedCtor() {
  _cached_size_ = 0;
  worldid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGateShutDownNotice::~CMessageGateShutDownNotice() {
  SharedDtor();
}

void CMessageGateShutDownNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGateShutDownNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGateShutDownNotice_descriptor_;
}

const CMessageGateShutDownNotice& CMessageGateShutDownNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGateShutDownNotice* CMessageGateShutDownNotice::default_instance_ = NULL;

CMessageGateShutDownNotice* CMessageGateShutDownNotice::New() const {
  return new CMessageGateShutDownNotice;
}

void CMessageGateShutDownNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    worldid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGateShutDownNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 WorldID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &worldid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGateShutDownNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGateShutDownNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 WorldID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->worldid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGateShutDownNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 WorldID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->worldid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGateShutDownNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 WorldID = 1;
    if (has_worldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->worldid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGateShutDownNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGateShutDownNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGateShutDownNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGateShutDownNotice::MergeFrom(const CMessageGateShutDownNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_worldid(from.worldid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGateShutDownNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGateShutDownNotice::CopyFrom(const CMessageGateShutDownNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGateShutDownNotice::Swap(CMessageGateShutDownNotice* other) {
  if (other != this) {
    std::swap(worldid_, other->worldid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGateShutDownNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGateShutDownNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGateShutDownNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGateShutDownNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageKickOffPlayerRequest::kAccountIDFieldNumber;
const int CMessageKickOffPlayerRequest::kCharIDFieldNumber;
const int CMessageKickOffPlayerRequest::kReasonFieldNumber;
const int CMessageKickOffPlayerRequest::kAnotherIPFieldNumber;
const int CMessageKickOffPlayerRequest::kRoleWorldIDFieldNumber;
#endif  // !_MSC_VER

CMessageKickOffPlayerRequest::CMessageKickOffPlayerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageKickOffPlayerRequest::InitAsDefaultInstance() {}

CMessageKickOffPlayerRequest::CMessageKickOffPlayerRequest(const CMessageKickOffPlayerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageKickOffPlayerRequest::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  charid_ = 0u;
  reason_ = 0;
  anotherip_ = 0u;
  roleworldid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageKickOffPlayerRequest::~CMessageKickOffPlayerRequest() {
  SharedDtor();
}

void CMessageKickOffPlayerRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageKickOffPlayerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageKickOffPlayerRequest_descriptor_;
}

const CMessageKickOffPlayerRequest& CMessageKickOffPlayerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageKickOffPlayerRequest* CMessageKickOffPlayerRequest::default_instance_ = NULL;

CMessageKickOffPlayerRequest* CMessageKickOffPlayerRequest::New() const {
  return new CMessageKickOffPlayerRequest;
}

void CMessageKickOffPlayerRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
    charid_ = 0u;
    reason_ = 0;
    anotherip_ = 0u;
    roleworldid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageKickOffPlayerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 AccountID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Reason;
        break;
      }
      
      // optional int32 Reason = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Reason:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &reason_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_AnotherIP;
        break;
      }
      
      // optional uint32 AnotherIP = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AnotherIP:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &anotherip_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_RoleWorldID;
        break;
      }
      
      // optional uint32 RoleWorldID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleWorldID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleworldid_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageKickOffPlayerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageKickOffPlayerRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 AccountID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->accountid(), output);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charid(), output);
  }
  
  // optional int32 Reason = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->reason(), output);
  }
  
  // optional uint32 AnotherIP = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->anotherip(), output);
  }
  
  // optional uint32 RoleWorldID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->roleworldid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageKickOffPlayerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 AccountID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->accountid(), target);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charid(), target);
  }
  
  // optional int32 Reason = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->reason(), target);
  }
  
  // optional uint32 AnotherIP = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->anotherip(), target);
  }
  
  // optional uint32 RoleWorldID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->roleworldid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageKickOffPlayerRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AccountID = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 CharID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional int32 Reason = 3;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->reason());
    }
    
    // optional uint32 AnotherIP = 4;
    if (has_anotherip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->anotherip());
    }
    
    // optional uint32 RoleWorldID = 5;
    if (has_roleworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleworldid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageKickOffPlayerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageKickOffPlayerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageKickOffPlayerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageKickOffPlayerRequest::MergeFrom(const CMessageKickOffPlayerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(1)) {
      set_charid(from.charid());
    }
    if (from._has_bit(2)) {
      set_reason(from.reason());
    }
    if (from._has_bit(3)) {
      set_anotherip(from.anotherip());
    }
    if (from._has_bit(4)) {
      set_roleworldid(from.roleworldid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageKickOffPlayerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageKickOffPlayerRequest::CopyFrom(const CMessageKickOffPlayerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageKickOffPlayerRequest::Swap(CMessageKickOffPlayerRequest* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(charid_, other->charid_);
    std::swap(reason_, other->reason_);
    std::swap(anotherip_, other->anotherip_);
    std::swap(roleworldid_, other->roleworldid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageKickOffPlayerRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageKickOffPlayerRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageKickOffPlayerRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageKickOffPlayerRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageKickOffPlayerResponse::kAccountIDFieldNumber;
const int CMessageKickOffPlayerResponse::kCharIDFieldNumber;
const int CMessageKickOffPlayerResponse::kResultFieldNumber;
const int CMessageKickOffPlayerResponse::kRoleWorldIDFieldNumber;
#endif  // !_MSC_VER

CMessageKickOffPlayerResponse::CMessageKickOffPlayerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageKickOffPlayerResponse::InitAsDefaultInstance() {}

CMessageKickOffPlayerResponse::CMessageKickOffPlayerResponse(const CMessageKickOffPlayerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageKickOffPlayerResponse::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  charid_ = 0u;
  result_ = 0;
  roleworldid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageKickOffPlayerResponse::~CMessageKickOffPlayerResponse() {
  SharedDtor();
}

void CMessageKickOffPlayerResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageKickOffPlayerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageKickOffPlayerResponse_descriptor_;
}

const CMessageKickOffPlayerResponse& CMessageKickOffPlayerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageKickOffPlayerResponse* CMessageKickOffPlayerResponse::default_instance_ = NULL;

CMessageKickOffPlayerResponse* CMessageKickOffPlayerResponse::New() const {
  return new CMessageKickOffPlayerResponse;
}

void CMessageKickOffPlayerResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
    charid_ = 0u;
    result_ = 0;
    roleworldid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageKickOffPlayerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 AccountID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Result;
        break;
      }
      
      // optional int32 Result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &result_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_RoleWorldID;
        break;
      }
      
      // optional uint32 RoleWorldID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleWorldID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleworldid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageKickOffPlayerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageKickOffPlayerResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 AccountID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->accountid(), output);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charid(), output);
  }
  
  // optional int32 Result = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->result(), output);
  }
  
  // optional uint32 RoleWorldID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->roleworldid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageKickOffPlayerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 AccountID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->accountid(), target);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charid(), target);
  }
  
  // optional int32 Result = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->result(), target);
  }
  
  // optional uint32 RoleWorldID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->roleworldid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageKickOffPlayerResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AccountID = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 CharID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional int32 Result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->result());
    }
    
    // optional uint32 RoleWorldID = 4;
    if (has_roleworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleworldid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageKickOffPlayerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageKickOffPlayerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageKickOffPlayerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageKickOffPlayerResponse::MergeFrom(const CMessageKickOffPlayerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(1)) {
      set_charid(from.charid());
    }
    if (from._has_bit(2)) {
      set_result(from.result());
    }
    if (from._has_bit(3)) {
      set_roleworldid(from.roleworldid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageKickOffPlayerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageKickOffPlayerResponse::CopyFrom(const CMessageKickOffPlayerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageKickOffPlayerResponse::Swap(CMessageKickOffPlayerResponse* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(charid_, other->charid_);
    std::swap(result_, other->result_);
    std::swap(roleworldid_, other->roleworldid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageKickOffPlayerResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageKickOffPlayerResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageKickOffPlayerResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageKickOffPlayerResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageGetPlayerMailiInfoRequest::_default_rolename_;
#ifndef _MSC_VER
const int CMessageGetPlayerMailiInfoRequest::kCharIDFieldNumber;
const int CMessageGetPlayerMailiInfoRequest::kRoleNameFieldNumber;
const int CMessageGetPlayerMailiInfoRequest::kRoleIDFieldNumber;
const int CMessageGetPlayerMailiInfoRequest::kQueryWayFieldNumber;
const int CMessageGetPlayerMailiInfoRequest::kQueryTypeFieldNumber;
const int CMessageGetPlayerMailiInfoRequest::kQueryDataFieldNumber;
#endif  // !_MSC_VER

CMessageGetPlayerMailiInfoRequest::CMessageGetPlayerMailiInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetPlayerMailiInfoRequest::InitAsDefaultInstance() {}

CMessageGetPlayerMailiInfoRequest::CMessageGetPlayerMailiInfoRequest(const CMessageGetPlayerMailiInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetPlayerMailiInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0;
  rolename_ = const_cast< ::std::string*>(&_default_rolename_);
  roleid_ = 0u;
  queryway_ = 0;
  querytype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetPlayerMailiInfoRequest::~CMessageGetPlayerMailiInfoRequest() {
  SharedDtor();
}

void CMessageGetPlayerMailiInfoRequest::SharedDtor() {
  if (rolename_ != &_default_rolename_) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGetPlayerMailiInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetPlayerMailiInfoRequest_descriptor_;
}

const CMessageGetPlayerMailiInfoRequest& CMessageGetPlayerMailiInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetPlayerMailiInfoRequest* CMessageGetPlayerMailiInfoRequest::default_instance_ = NULL;

CMessageGetPlayerMailiInfoRequest* CMessageGetPlayerMailiInfoRequest::New() const {
  return new CMessageGetPlayerMailiInfoRequest;
}

void CMessageGetPlayerMailiInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0;
    if (_has_bit(1)) {
      if (rolename_ != &_default_rolename_) {
        rolename_->clear();
      }
    }
    roleid_ = 0u;
    queryway_ = 0;
    querytype_ = 0u;
  }
  querydata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetPlayerMailiInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional int32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_RoleName;
        break;
      }
      
      // optional string RoleName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RoleName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_rolename()));
        if (input->ExpectTag(24)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_QueryWay;
        break;
      }
      
      // optional int32 QueryWay = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_QueryWay:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &queryway_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_QueryType;
        break;
      }
      
      // optional uint32 QueryType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_QueryType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &querytype_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_QueryData;
        break;
      }
      
      // repeated uint32 QueryData = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_QueryData:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_querydata(value);
        if (input->ExpectTag(48)) goto parse_QueryData;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetPlayerMailiInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetPlayerMailiInfoRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(1, this->charid(), output);
  }
  
  // optional string RoleName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->rolename(), output);
  }
  
  // optional uint32 RoleID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->roleid(), output);
  }
  
  // optional int32 QueryWay = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->queryway(), output);
  }
  
  // optional uint32 QueryType = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->querytype(), output);
  }
  
  // repeated uint32 QueryData = 6;
  for (int i = 0; i < this->querydata_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->querydata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetPlayerMailiInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(1, this->charid(), target);
  }
  
  // optional string RoleName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->rolename(), target);
  }
  
  // optional uint32 RoleID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->roleid(), target);
  }
  
  // optional int32 QueryWay = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->queryway(), target);
  }
  
  // optional uint32 QueryType = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->querytype(), target);
  }
  
  // repeated uint32 QueryData = 6;
  for (int i = 0; i < this->querydata_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->querydata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetPlayerMailiInfoRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->charid());
    }
    
    // optional string RoleName = 2;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->rolename());
    }
    
    // optional uint32 RoleID = 3;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional int32 QueryWay = 4;
    if (has_queryway()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->queryway());
    }
    
    // optional uint32 QueryType = 5;
    if (has_querytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->querytype());
    }
    
  }
  // repeated uint32 QueryData = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->querydata_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->querydata(i));
    }
    total_size += 1 * this->querydata_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetPlayerMailiInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetPlayerMailiInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetPlayerMailiInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetPlayerMailiInfoRequest::MergeFrom(const CMessageGetPlayerMailiInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  querydata_.MergeFrom(from.querydata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_rolename(from.rolename());
    }
    if (from._has_bit(2)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(3)) {
      set_queryway(from.queryway());
    }
    if (from._has_bit(4)) {
      set_querytype(from.querytype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetPlayerMailiInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetPlayerMailiInfoRequest::CopyFrom(const CMessageGetPlayerMailiInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetPlayerMailiInfoRequest::Swap(CMessageGetPlayerMailiInfoRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(rolename_, other->rolename_);
    std::swap(roleid_, other->roleid_);
    std::swap(queryway_, other->queryway_);
    std::swap(querytype_, other->querytype_);
    querydata_.Swap(&other->querydata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetPlayerMailiInfoRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetPlayerMailiInfoRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetPlayerMailiInfoRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetPlayerMailiInfoRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageGetPlayerMailInfoResponse::_default_rolename_;
#ifndef _MSC_VER
const int CMessageGetPlayerMailInfoResponse::kCharIDFieldNumber;
const int CMessageGetPlayerMailInfoResponse::kErrorCodeFieldNumber;
const int CMessageGetPlayerMailInfoResponse::kRoleIDFieldNumber;
const int CMessageGetPlayerMailInfoResponse::kRoleNameFieldNumber;
const int CMessageGetPlayerMailInfoResponse::kRoleOfCountryFieldNumber;
const int CMessageGetPlayerMailInfoResponse::kRoleInCountryFieldNumber;
const int CMessageGetPlayerMailInfoResponse::kRoleOnlineFieldNumber;
const int CMessageGetPlayerMailInfoResponse::kRoleMailCountFieldNumber;
const int CMessageGetPlayerMailInfoResponse::kQueryTypeFieldNumber;
const int CMessageGetPlayerMailInfoResponse::kQueryDataFieldNumber;
#endif  // !_MSC_VER

CMessageGetPlayerMailInfoResponse::CMessageGetPlayerMailInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetPlayerMailInfoResponse::InitAsDefaultInstance() {}

CMessageGetPlayerMailInfoResponse::CMessageGetPlayerMailInfoResponse(const CMessageGetPlayerMailInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetPlayerMailInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0;
  errorcode_ = 0;
  roleid_ = 0u;
  rolename_ = const_cast< ::std::string*>(&_default_rolename_);
  roleofcountry_ = 0;
  roleincountry_ = 0;
  roleonline_ = 0;
  rolemailcount_ = 0;
  querytype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetPlayerMailInfoResponse::~CMessageGetPlayerMailInfoResponse() {
  SharedDtor();
}

void CMessageGetPlayerMailInfoResponse::SharedDtor() {
  if (rolename_ != &_default_rolename_) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGetPlayerMailInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetPlayerMailInfoResponse_descriptor_;
}

const CMessageGetPlayerMailInfoResponse& CMessageGetPlayerMailInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetPlayerMailInfoResponse* CMessageGetPlayerMailInfoResponse::default_instance_ = NULL;

CMessageGetPlayerMailInfoResponse* CMessageGetPlayerMailInfoResponse::New() const {
  return new CMessageGetPlayerMailInfoResponse;
}

void CMessageGetPlayerMailInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0;
    errorcode_ = 0;
    roleid_ = 0u;
    if (_has_bit(3)) {
      if (rolename_ != &_default_rolename_) {
        rolename_->clear();
      }
    }
    roleofcountry_ = 0;
    roleincountry_ = 0;
    roleonline_ = 0;
    rolemailcount_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    querytype_ = 0u;
  }
  querydata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetPlayerMailInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional int32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ErrorCode;
        break;
      }
      
      // optional int32 ErrorCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ErrorCode:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &errorcode_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_RoleName;
        break;
      }
      
      // optional string RoleName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RoleName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_rolename()));
        if (input->ExpectTag(40)) goto parse_RoleOfCountry;
        break;
      }
      
      // optional int32 RoleOfCountry = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleOfCountry:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &roleofcountry_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_RoleInCountry;
        break;
      }
      
      // optional int32 RoleInCountry = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleInCountry:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &roleincountry_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_RoleOnline;
        break;
      }
      
      // optional int32 RoleOnline = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleOnline:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &roleonline_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_RoleMailCount;
        break;
      }
      
      // optional int32 RoleMailCount = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleMailCount:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &rolemailcount_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_QueryType;
        break;
      }
      
      // optional uint32 QueryType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_QueryType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &querytype_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_QueryData;
        break;
      }
      
      // repeated uint32 QueryData = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_QueryData:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_querydata(value);
        if (input->ExpectTag(80)) goto parse_QueryData;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetPlayerMailInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetPlayerMailInfoResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(1, this->charid(), output);
  }
  
  // optional int32 ErrorCode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(2, this->errorcode(), output);
  }
  
  // optional uint32 RoleID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->roleid(), output);
  }
  
  // optional string RoleName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->rolename(), output);
  }
  
  // optional int32 RoleOfCountry = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(5, this->roleofcountry(), output);
  }
  
  // optional int32 RoleInCountry = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(6, this->roleincountry(), output);
  }
  
  // optional int32 RoleOnline = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(7, this->roleonline(), output);
  }
  
  // optional int32 RoleMailCount = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(8, this->rolemailcount(), output);
  }
  
  // optional uint32 QueryType = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->querytype(), output);
  }
  
  // repeated uint32 QueryData = 10;
  for (int i = 0; i < this->querydata_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->querydata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetPlayerMailInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(1, this->charid(), target);
  }
  
  // optional int32 ErrorCode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(2, this->errorcode(), target);
  }
  
  // optional uint32 RoleID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->roleid(), target);
  }
  
  // optional string RoleName = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->rolename(), target);
  }
  
  // optional int32 RoleOfCountry = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(5, this->roleofcountry(), target);
  }
  
  // optional int32 RoleInCountry = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(6, this->roleincountry(), target);
  }
  
  // optional int32 RoleOnline = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(7, this->roleonline(), target);
  }
  
  // optional int32 RoleMailCount = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(8, this->rolemailcount(), target);
  }
  
  // optional uint32 QueryType = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->querytype(), target);
  }
  
  // repeated uint32 QueryData = 10;
  for (int i = 0; i < this->querydata_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->querydata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetPlayerMailInfoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->charid());
    }
    
    // optional int32 ErrorCode = 2;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->errorcode());
    }
    
    // optional uint32 RoleID = 3;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional string RoleName = 4;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->rolename());
    }
    
    // optional int32 RoleOfCountry = 5;
    if (has_roleofcountry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->roleofcountry());
    }
    
    // optional int32 RoleInCountry = 6;
    if (has_roleincountry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->roleincountry());
    }
    
    // optional int32 RoleOnline = 7;
    if (has_roleonline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->roleonline());
    }
    
    // optional int32 RoleMailCount = 8;
    if (has_rolemailcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->rolemailcount());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 QueryType = 9;
    if (has_querytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->querytype());
    }
    
  }
  // repeated uint32 QueryData = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->querydata_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->querydata(i));
    }
    total_size += 1 * this->querydata_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetPlayerMailInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetPlayerMailInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetPlayerMailInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetPlayerMailInfoResponse::MergeFrom(const CMessageGetPlayerMailInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  querydata_.MergeFrom(from.querydata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_errorcode(from.errorcode());
    }
    if (from._has_bit(2)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(3)) {
      set_rolename(from.rolename());
    }
    if (from._has_bit(4)) {
      set_roleofcountry(from.roleofcountry());
    }
    if (from._has_bit(5)) {
      set_roleincountry(from.roleincountry());
    }
    if (from._has_bit(6)) {
      set_roleonline(from.roleonline());
    }
    if (from._has_bit(7)) {
      set_rolemailcount(from.rolemailcount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_querytype(from.querytype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetPlayerMailInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetPlayerMailInfoResponse::CopyFrom(const CMessageGetPlayerMailInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetPlayerMailInfoResponse::Swap(CMessageGetPlayerMailInfoResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(roleid_, other->roleid_);
    std::swap(rolename_, other->rolename_);
    std::swap(roleofcountry_, other->roleofcountry_);
    std::swap(roleincountry_, other->roleincountry_);
    std::swap(roleonline_, other->roleonline_);
    std::swap(rolemailcount_, other->rolemailcount_);
    std::swap(querytype_, other->querytype_);
    querydata_.Swap(&other->querydata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetPlayerMailInfoResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetPlayerMailInfoResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetPlayerMailInfoResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetPlayerMailInfoResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageChangeMailCountNotify::_default_charname_;
#ifndef _MSC_VER
const int CMessageChangeMailCountNotify::kCharIDFieldNumber;
const int CMessageChangeMailCountNotify::kCharNameFieldNumber;
const int CMessageChangeMailCountNotify::kQueryWayFieldNumber;
const int CMessageChangeMailCountNotify::kNumChangedFieldNumber;
#endif  // !_MSC_VER

CMessageChangeMailCountNotify::CMessageChangeMailCountNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeMailCountNotify::InitAsDefaultInstance() {}

CMessageChangeMailCountNotify::CMessageChangeMailCountNotify(const CMessageChangeMailCountNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeMailCountNotify::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0;
  charname_ = const_cast< ::std::string*>(&_default_charname_);
  queryway_ = 0;
  numchanged_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeMailCountNotify::~CMessageChangeMailCountNotify() {
  SharedDtor();
}

void CMessageChangeMailCountNotify::SharedDtor() {
  if (charname_ != &_default_charname_) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageChangeMailCountNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeMailCountNotify_descriptor_;
}

const CMessageChangeMailCountNotify& CMessageChangeMailCountNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeMailCountNotify* CMessageChangeMailCountNotify::default_instance_ = NULL;

CMessageChangeMailCountNotify* CMessageChangeMailCountNotify::New() const {
  return new CMessageChangeMailCountNotify;
}

void CMessageChangeMailCountNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0;
    if (_has_bit(1)) {
      if (charname_ != &_default_charname_) {
        charname_->clear();
      }
    }
    queryway_ = 0;
    numchanged_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeMailCountNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional int32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_CharName;
        break;
      }
      
      // optional string CharName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CharName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_charname()));
        if (input->ExpectTag(24)) goto parse_QueryWay;
        break;
      }
      
      // optional int32 QueryWay = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_QueryWay:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &queryway_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_NumChanged;
        break;
      }
      
      // optional int32 NumChanged = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NumChanged:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &numchanged_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeMailCountNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeMailCountNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(1, this->charid(), output);
  }
  
  // optional string CharName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->charname(), output);
  }
  
  // optional int32 QueryWay = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->queryway(), output);
  }
  
  // optional int32 NumChanged = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->numchanged(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeMailCountNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(1, this->charid(), target);
  }
  
  // optional string CharName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->charname(), target);
  }
  
  // optional int32 QueryWay = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->queryway(), target);
  }
  
  // optional int32 NumChanged = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->numchanged(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeMailCountNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->charid());
    }
    
    // optional string CharName = 2;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->charname());
    }
    
    // optional int32 QueryWay = 3;
    if (has_queryway()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->queryway());
    }
    
    // optional int32 NumChanged = 4;
    if (has_numchanged()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->numchanged());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeMailCountNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeMailCountNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeMailCountNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeMailCountNotify::MergeFrom(const CMessageChangeMailCountNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_charname(from.charname());
    }
    if (from._has_bit(2)) {
      set_queryway(from.queryway());
    }
    if (from._has_bit(3)) {
      set_numchanged(from.numchanged());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeMailCountNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeMailCountNotify::CopyFrom(const CMessageChangeMailCountNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeMailCountNotify::Swap(CMessageChangeMailCountNotify* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(queryway_, other->queryway_);
    std::swap(numchanged_, other->numchanged_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeMailCountNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeMailCountNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeMailCountNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeMailCountNotify_reflection_;
}

// ===================================================================

const ::std::string CMessageUserIbExchangeNotice::_default_ibcode_;
#ifndef _MSC_VER
const int CMessageUserIbExchangeNotice::kPurchaseIDFieldNumber;
const int CMessageUserIbExchangeNotice::kAccountIDFieldNumber;
const int CMessageUserIbExchangeNotice::kRoleIDFieldNumber;
const int CMessageUserIbExchangeNotice::kGenderIDFieldNumber;
const int CMessageUserIbExchangeNotice::kMetierIDFieldNumber;
const int CMessageUserIbExchangeNotice::kLevelFieldNumber;
const int CMessageUserIbExchangeNotice::kRatingIDFieldNumber;
const int CMessageUserIbExchangeNotice::kIBCodeFieldNumber;
const int CMessageUserIbExchangeNotice::kPackageFlagFieldNumber;
const int CMessageUserIbExchangeNotice::kCountFieldNumber;
const int CMessageUserIbExchangeNotice::kPayTimeFieldNumber;
const int CMessageUserIbExchangeNotice::kUserIPFieldNumber;
const int CMessageUserIbExchangeNotice::kSubjectIDFieldNumber;
const int CMessageUserIbExchangeNotice::kAuditFlagFieldNumber;
const int CMessageUserIbExchangeNotice::kPriceFieldNumber;
const int CMessageUserIbExchangeNotice::kDiscountPriceFieldNumber;
#endif  // !_MSC_VER

CMessageUserIbExchangeNotice::CMessageUserIbExchangeNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUserIbExchangeNotice::InitAsDefaultInstance() {}

CMessageUserIbExchangeNotice::CMessageUserIbExchangeNotice(const CMessageUserIbExchangeNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUserIbExchangeNotice::SharedCtor() {
  _cached_size_ = 0;
  purchaseid_ = GOOGLE_ULONGLONG(0);
  accountid_ = 0u;
  roleid_ = 0u;
  genderid_ = 0u;
  metierid_ = 0u;
  level_ = 0u;
  ratingid_ = 0u;
  ibcode_ = const_cast< ::std::string*>(&_default_ibcode_);
  packageflag_ = 0u;
  count_ = 0u;
  paytime_ = 0;
  userip_ = 0u;
  subjectid_ = 0u;
  auditflag_ = 0u;
  price_ = 0;
  discountprice_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUserIbExchangeNotice::~CMessageUserIbExchangeNotice() {
  SharedDtor();
}

void CMessageUserIbExchangeNotice::SharedDtor() {
  if (ibcode_ != &_default_ibcode_) {
    delete ibcode_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageUserIbExchangeNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUserIbExchangeNotice_descriptor_;
}

const CMessageUserIbExchangeNotice& CMessageUserIbExchangeNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageUserIbExchangeNotice* CMessageUserIbExchangeNotice::default_instance_ = NULL;

CMessageUserIbExchangeNotice* CMessageUserIbExchangeNotice::New() const {
  return new CMessageUserIbExchangeNotice;
}

void CMessageUserIbExchangeNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    purchaseid_ = GOOGLE_ULONGLONG(0);
    accountid_ = 0u;
    roleid_ = 0u;
    genderid_ = 0u;
    metierid_ = 0u;
    level_ = 0u;
    ratingid_ = 0u;
    if (_has_bit(7)) {
      if (ibcode_ != &_default_ibcode_) {
        ibcode_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    packageflag_ = 0u;
    count_ = 0u;
    paytime_ = 0;
    userip_ = 0u;
    subjectid_ = 0u;
    auditflag_ = 0u;
    price_ = 0;
    discountprice_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUserIbExchangeNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint64 PurchaseID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &purchaseid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_AccountID;
        break;
      }
      
      // optional uint32 AccountID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AccountID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_GenderID;
        break;
      }
      
      // optional uint32 GenderID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GenderID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &genderid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_MetierID;
        break;
      }
      
      // optional uint32 MetierID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MetierID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &metierid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_RatingID;
        break;
      }
      
      // optional uint32 RatingID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RatingID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ratingid_));
        _set_bit(6);
        if (input->ExpectTag(66)) goto parse_IBCode;
        break;
      }
      
      // optional string IBCode = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_IBCode:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_ibcode()));
        if (input->ExpectTag(72)) goto parse_PackageFlag;
        break;
      }
      
      // optional uint32 PackageFlag = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PackageFlag:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &packageflag_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_Count;
        break;
      }
      
      // optional uint32 Count = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Count:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &count_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_PayTime;
        break;
      }
      
      // optional int32 PayTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PayTime:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &paytime_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_UserIP;
        break;
      }
      
      // optional uint32 UserIP = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UserIP:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &userip_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_SubjectID;
        break;
      }
      
      // optional uint32 SubjectID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SubjectID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &subjectid_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_AuditFlag;
        break;
      }
      
      // optional uint32 AuditFlag = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AuditFlag:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &auditflag_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_Price;
        break;
      }
      
      // optional int32 Price = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Price:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &price_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_DiscountPrice;
        break;
      }
      
      // optional int32 DiscountPrice = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DiscountPrice:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &discountprice_));
        _set_bit(15);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUserIbExchangeNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUserIbExchangeNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint64 PurchaseID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(1, this->purchaseid(), output);
  }
  
  // optional uint32 AccountID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->accountid(), output);
  }
  
  // optional uint32 RoleID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->roleid(), output);
  }
  
  // optional uint32 GenderID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->genderid(), output);
  }
  
  // optional uint32 MetierID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->metierid(), output);
  }
  
  // optional uint32 Level = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->level(), output);
  }
  
  // optional uint32 RatingID = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->ratingid(), output);
  }
  
  // optional string IBCode = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteString(8, this->ibcode(), output);
  }
  
  // optional uint32 PackageFlag = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->packageflag(), output);
  }
  
  // optional uint32 Count = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->count(), output);
  }
  
  // optional int32 PayTime = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(11, this->paytime(), output);
  }
  
  // optional uint32 UserIP = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->userip(), output);
  }
  
  // optional uint32 SubjectID = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->subjectid(), output);
  }
  
  // optional uint32 AuditFlag = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->auditflag(), output);
  }
  
  // optional int32 Price = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(15, this->price(), output);
  }
  
  // optional int32 DiscountPrice = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(16, this->discountprice(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUserIbExchangeNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 PurchaseID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(1, this->purchaseid(), target);
  }
  
  // optional uint32 AccountID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->accountid(), target);
  }
  
  // optional uint32 RoleID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->roleid(), target);
  }
  
  // optional uint32 GenderID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->genderid(), target);
  }
  
  // optional uint32 MetierID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->metierid(), target);
  }
  
  // optional uint32 Level = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->level(), target);
  }
  
  // optional uint32 RatingID = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->ratingid(), target);
  }
  
  // optional string IBCode = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(8, this->ibcode(), target);
  }
  
  // optional uint32 PackageFlag = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->packageflag(), target);
  }
  
  // optional uint32 Count = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->count(), target);
  }
  
  // optional int32 PayTime = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(11, this->paytime(), target);
  }
  
  // optional uint32 UserIP = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->userip(), target);
  }
  
  // optional uint32 SubjectID = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->subjectid(), target);
  }
  
  // optional uint32 AuditFlag = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->auditflag(), target);
  }
  
  // optional int32 Price = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(15, this->price(), target);
  }
  
  // optional int32 DiscountPrice = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(16, this->discountprice(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUserIbExchangeNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 PurchaseID = 1;
    if (has_purchaseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->purchaseid());
    }
    
    // optional uint32 AccountID = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 RoleID = 3;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 GenderID = 4;
    if (has_genderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->genderid());
    }
    
    // optional uint32 MetierID = 5;
    if (has_metierid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->metierid());
    }
    
    // optional uint32 Level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
    // optional uint32 RatingID = 7;
    if (has_ratingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ratingid());
    }
    
    // optional string IBCode = 8;
    if (has_ibcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->ibcode());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 PackageFlag = 9;
    if (has_packageflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->packageflag());
    }
    
    // optional uint32 Count = 10;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->count());
    }
    
    // optional int32 PayTime = 11;
    if (has_paytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->paytime());
    }
    
    // optional uint32 UserIP = 12;
    if (has_userip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->userip());
    }
    
    // optional uint32 SubjectID = 13;
    if (has_subjectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->subjectid());
    }
    
    // optional uint32 AuditFlag = 14;
    if (has_auditflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->auditflag());
    }
    
    // optional int32 Price = 15;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->price());
    }
    
    // optional int32 DiscountPrice = 16;
    if (has_discountprice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->discountprice());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUserIbExchangeNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUserIbExchangeNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUserIbExchangeNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUserIbExchangeNotice::MergeFrom(const CMessageUserIbExchangeNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_purchaseid(from.purchaseid());
    }
    if (from._has_bit(1)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(2)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(3)) {
      set_genderid(from.genderid());
    }
    if (from._has_bit(4)) {
      set_metierid(from.metierid());
    }
    if (from._has_bit(5)) {
      set_level(from.level());
    }
    if (from._has_bit(6)) {
      set_ratingid(from.ratingid());
    }
    if (from._has_bit(7)) {
      set_ibcode(from.ibcode());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_packageflag(from.packageflag());
    }
    if (from._has_bit(9)) {
      set_count(from.count());
    }
    if (from._has_bit(10)) {
      set_paytime(from.paytime());
    }
    if (from._has_bit(11)) {
      set_userip(from.userip());
    }
    if (from._has_bit(12)) {
      set_subjectid(from.subjectid());
    }
    if (from._has_bit(13)) {
      set_auditflag(from.auditflag());
    }
    if (from._has_bit(14)) {
      set_price(from.price());
    }
    if (from._has_bit(15)) {
      set_discountprice(from.discountprice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUserIbExchangeNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUserIbExchangeNotice::CopyFrom(const CMessageUserIbExchangeNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUserIbExchangeNotice::Swap(CMessageUserIbExchangeNotice* other) {
  if (other != this) {
    std::swap(purchaseid_, other->purchaseid_);
    std::swap(accountid_, other->accountid_);
    std::swap(roleid_, other->roleid_);
    std::swap(genderid_, other->genderid_);
    std::swap(metierid_, other->metierid_);
    std::swap(level_, other->level_);
    std::swap(ratingid_, other->ratingid_);
    std::swap(ibcode_, other->ibcode_);
    std::swap(packageflag_, other->packageflag_);
    std::swap(count_, other->count_);
    std::swap(paytime_, other->paytime_);
    std::swap(userip_, other->userip_);
    std::swap(subjectid_, other->subjectid_);
    std::swap(auditflag_, other->auditflag_);
    std::swap(price_, other->price_);
    std::swap(discountprice_, other->discountprice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUserIbExchangeNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUserIbExchangeNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUserIbExchangeNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUserIbExchangeNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageUserUseIbItemNotice::kAccountIDFieldNumber;
const int CMessageUserUseIbItemNotice::kRoleIDFieldNumber;
const int CMessageUserUseIbItemNotice::kPurchaseIDFieldNumber;
const int CMessageUserUseIbItemNotice::kGenderIDFieldNumber;
const int CMessageUserUseIbItemNotice::kMetierIDFieldNumber;
const int CMessageUserUseIbItemNotice::kLevelFieldNumber;
#endif  // !_MSC_VER

CMessageUserUseIbItemNotice::CMessageUserUseIbItemNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUserUseIbItemNotice::InitAsDefaultInstance() {}

CMessageUserUseIbItemNotice::CMessageUserUseIbItemNotice(const CMessageUserUseIbItemNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUserUseIbItemNotice::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  roleid_ = 0u;
  purchaseid_ = GOOGLE_ULONGLONG(0);
  genderid_ = 0u;
  metierid_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUserUseIbItemNotice::~CMessageUserUseIbItemNotice() {
  SharedDtor();
}

void CMessageUserUseIbItemNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageUserUseIbItemNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUserUseIbItemNotice_descriptor_;
}

const CMessageUserUseIbItemNotice& CMessageUserUseIbItemNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageUserUseIbItemNotice* CMessageUserUseIbItemNotice::default_instance_ = NULL;

CMessageUserUseIbItemNotice* CMessageUserUseIbItemNotice::New() const {
  return new CMessageUserUseIbItemNotice;
}

void CMessageUserUseIbItemNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
    roleid_ = 0u;
    purchaseid_ = GOOGLE_ULONGLONG(0);
    genderid_ = 0u;
    metierid_ = 0u;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUserUseIbItemNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 AccountID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_PurchaseID;
        break;
      }
      
      // optional uint64 PurchaseID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PurchaseID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &purchaseid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_GenderID;
        break;
      }
      
      // optional uint32 GenderID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GenderID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &genderid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_MetierID;
        break;
      }
      
      // optional uint32 MetierID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MetierID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &metierid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUserUseIbItemNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUserUseIbItemNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 AccountID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->accountid(), output);
  }
  
  // optional uint32 RoleID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->roleid(), output);
  }
  
  // optional uint64 PurchaseID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(3, this->purchaseid(), output);
  }
  
  // optional uint32 GenderID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->genderid(), output);
  }
  
  // optional uint32 MetierID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->metierid(), output);
  }
  
  // optional uint32 Level = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUserUseIbItemNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 AccountID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->accountid(), target);
  }
  
  // optional uint32 RoleID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->roleid(), target);
  }
  
  // optional uint64 PurchaseID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(3, this->purchaseid(), target);
  }
  
  // optional uint32 GenderID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->genderid(), target);
  }
  
  // optional uint32 MetierID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->metierid(), target);
  }
  
  // optional uint32 Level = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUserUseIbItemNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AccountID = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 RoleID = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint64 PurchaseID = 3;
    if (has_purchaseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->purchaseid());
    }
    
    // optional uint32 GenderID = 4;
    if (has_genderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->genderid());
    }
    
    // optional uint32 MetierID = 5;
    if (has_metierid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->metierid());
    }
    
    // optional uint32 Level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUserUseIbItemNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUserUseIbItemNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUserUseIbItemNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUserUseIbItemNotice::MergeFrom(const CMessageUserUseIbItemNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(1)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(2)) {
      set_purchaseid(from.purchaseid());
    }
    if (from._has_bit(3)) {
      set_genderid(from.genderid());
    }
    if (from._has_bit(4)) {
      set_metierid(from.metierid());
    }
    if (from._has_bit(5)) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUserUseIbItemNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUserUseIbItemNotice::CopyFrom(const CMessageUserUseIbItemNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUserUseIbItemNotice::Swap(CMessageUserUseIbItemNotice* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(roleid_, other->roleid_);
    std::swap(purchaseid_, other->purchaseid_);
    std::swap(genderid_, other->genderid_);
    std::swap(metierid_, other->metierid_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUserUseIbItemNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUserUseIbItemNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUserUseIbItemNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUserUseIbItemNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageAddFriendRequest::kSrcIDFieldNumber;
const int CMessageAddFriendRequest::kDesIDFieldNumber;
const int CMessageAddFriendRequest::kSrcLevelFieldNumber;
#endif  // !_MSC_VER

CMessageAddFriendRequest::CMessageAddFriendRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageAddFriendRequest::InitAsDefaultInstance() {}

CMessageAddFriendRequest::CMessageAddFriendRequest(const CMessageAddFriendRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageAddFriendRequest::SharedCtor() {
  _cached_size_ = 0;
  srcid_ = 0u;
  desid_ = 0u;
  srclevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageAddFriendRequest::~CMessageAddFriendRequest() {
  SharedDtor();
}

void CMessageAddFriendRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageAddFriendRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageAddFriendRequest_descriptor_;
}

const CMessageAddFriendRequest& CMessageAddFriendRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageAddFriendRequest* CMessageAddFriendRequest::default_instance_ = NULL;

CMessageAddFriendRequest* CMessageAddFriendRequest::New() const {
  return new CMessageAddFriendRequest;
}

void CMessageAddFriendRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    srcid_ = 0u;
    desid_ = 0u;
    srclevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageAddFriendRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional fixed32 SrcID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadFixed32(
              input, &srcid_));
        _set_bit(0);
        if (input->ExpectTag(21)) goto parse_DesID;
        break;
      }
      
      // optional fixed32 DesID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_DesID:
        DO_(::google::protobuf::internal::WireFormat::ReadFixed32(
              input, &desid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_SrcLevel;
        break;
      }
      
      // optional uint32 SrcLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SrcLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srclevel_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageAddFriendRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageAddFriendRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional fixed32 SrcID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteFixed32(1, this->srcid(), output);
  }
  
  // optional fixed32 DesID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteFixed32(2, this->desid(), output);
  }
  
  // optional uint32 SrcLevel = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->srclevel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageAddFriendRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 SrcID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteFixed32ToArray(1, this->srcid(), target);
  }
  
  // optional fixed32 DesID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteFixed32ToArray(2, this->desid(), target);
  }
  
  // optional uint32 SrcLevel = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->srclevel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageAddFriendRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 SrcID = 1;
    if (has_srcid()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 DesID = 2;
    if (has_desid()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 SrcLevel = 3;
    if (has_srclevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srclevel());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageAddFriendRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageAddFriendRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageAddFriendRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageAddFriendRequest::MergeFrom(const CMessageAddFriendRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_srcid(from.srcid());
    }
    if (from._has_bit(1)) {
      set_desid(from.desid());
    }
    if (from._has_bit(2)) {
      set_srclevel(from.srclevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageAddFriendRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAddFriendRequest::CopyFrom(const CMessageAddFriendRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAddFriendRequest::Swap(CMessageAddFriendRequest* other) {
  if (other != this) {
    std::swap(srcid_, other->srcid_);
    std::swap(desid_, other->desid_);
    std::swap(srclevel_, other->srclevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageAddFriendRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageAddFriendRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageAddFriendRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageAddFriendRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageAddFriendResponse::_default_srcname_;
const ::std::string CMessageAddFriendResponse::_default_desname_;
#ifndef _MSC_VER
const int CMessageAddFriendResponse::kSendBackFieldNumber;
const int CMessageAddFriendResponse::kRetCodeFieldNumber;
const int CMessageAddFriendResponse::kSrcCharIDFieldNumber;
const int CMessageAddFriendResponse::kSrcMetierFieldNumber;
const int CMessageAddFriendResponse::kSrcLevelFieldNumber;
const int CMessageAddFriendResponse::kSrcSexFieldNumber;
const int CMessageAddFriendResponse::kSrcHeadFieldNumber;
const int CMessageAddFriendResponse::kSrcNameFieldNumber;
const int CMessageAddFriendResponse::kDesCharIDFieldNumber;
const int CMessageAddFriendResponse::kDesNameFieldNumber;
#endif  // !_MSC_VER

CMessageAddFriendResponse::CMessageAddFriendResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageAddFriendResponse::InitAsDefaultInstance() {}

CMessageAddFriendResponse::CMessageAddFriendResponse(const CMessageAddFriendResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageAddFriendResponse::SharedCtor() {
  _cached_size_ = 0;
  sendback_ = 0u;
  retcode_ = 0u;
  srccharid_ = 0u;
  srcmetier_ = 0u;
  srclevel_ = 0u;
  srcsex_ = 0u;
  srchead_ = 0u;
  srcname_ = const_cast< ::std::string*>(&_default_srcname_);
  descharid_ = 0u;
  desname_ = const_cast< ::std::string*>(&_default_desname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageAddFriendResponse::~CMessageAddFriendResponse() {
  SharedDtor();
}

void CMessageAddFriendResponse::SharedDtor() {
  if (srcname_ != &_default_srcname_) {
    delete srcname_;
  }
  if (desname_ != &_default_desname_) {
    delete desname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageAddFriendResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageAddFriendResponse_descriptor_;
}

const CMessageAddFriendResponse& CMessageAddFriendResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageAddFriendResponse* CMessageAddFriendResponse::default_instance_ = NULL;

CMessageAddFriendResponse* CMessageAddFriendResponse::New() const {
  return new CMessageAddFriendResponse;
}

void CMessageAddFriendResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sendback_ = 0u;
    retcode_ = 0u;
    srccharid_ = 0u;
    srcmetier_ = 0u;
    srclevel_ = 0u;
    srcsex_ = 0u;
    srchead_ = 0u;
    if (_has_bit(7)) {
      if (srcname_ != &_default_srcname_) {
        srcname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    descharid_ = 0u;
    if (_has_bit(9)) {
      if (desname_ != &_default_desname_) {
        desname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageAddFriendResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 SendBack = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sendback_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_RetCode;
        break;
      }
      
      // optional uint32 RetCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RetCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &retcode_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_SrcCharID;
        break;
      }
      
      // optional uint32 SrcCharID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SrcCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srccharid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_SrcMetier;
        break;
      }
      
      // optional uint32 SrcMetier = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SrcMetier:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srcmetier_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_SrcLevel;
        break;
      }
      
      // optional uint32 SrcLevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SrcLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srclevel_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_SrcSex;
        break;
      }
      
      // optional uint32 SrcSex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SrcSex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srcsex_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_SrcHead;
        break;
      }
      
      // optional uint32 SrcHead = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SrcHead:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srchead_));
        _set_bit(6);
        if (input->ExpectTag(66)) goto parse_SrcName;
        break;
      }
      
      // optional string SrcName = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SrcName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_srcname()));
        if (input->ExpectTag(72)) goto parse_DesCharID;
        break;
      }
      
      // optional uint32 DesCharID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DesCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &descharid_));
        _set_bit(8);
        if (input->ExpectTag(82)) goto parse_DesName;
        break;
      }
      
      // optional string DesName = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_DesName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_desname()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageAddFriendResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageAddFriendResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 SendBack = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->sendback(), output);
  }
  
  // optional uint32 RetCode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->retcode(), output);
  }
  
  // optional uint32 SrcCharID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->srccharid(), output);
  }
  
  // optional uint32 SrcMetier = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->srcmetier(), output);
  }
  
  // optional uint32 SrcLevel = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->srclevel(), output);
  }
  
  // optional uint32 SrcSex = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->srcsex(), output);
  }
  
  // optional uint32 SrcHead = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->srchead(), output);
  }
  
  // optional string SrcName = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteString(8, this->srcname(), output);
  }
  
  // optional uint32 DesCharID = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->descharid(), output);
  }
  
  // optional string DesName = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteString(10, this->desname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageAddFriendResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 SendBack = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->sendback(), target);
  }
  
  // optional uint32 RetCode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->retcode(), target);
  }
  
  // optional uint32 SrcCharID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->srccharid(), target);
  }
  
  // optional uint32 SrcMetier = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->srcmetier(), target);
  }
  
  // optional uint32 SrcLevel = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->srclevel(), target);
  }
  
  // optional uint32 SrcSex = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->srcsex(), target);
  }
  
  // optional uint32 SrcHead = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->srchead(), target);
  }
  
  // optional string SrcName = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(8, this->srcname(), target);
  }
  
  // optional uint32 DesCharID = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->descharid(), target);
  }
  
  // optional string DesName = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(10, this->desname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageAddFriendResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SendBack = 1;
    if (has_sendback()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sendback());
    }
    
    // optional uint32 RetCode = 2;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->retcode());
    }
    
    // optional uint32 SrcCharID = 3;
    if (has_srccharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srccharid());
    }
    
    // optional uint32 SrcMetier = 4;
    if (has_srcmetier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srcmetier());
    }
    
    // optional uint32 SrcLevel = 5;
    if (has_srclevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srclevel());
    }
    
    // optional uint32 SrcSex = 6;
    if (has_srcsex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srcsex());
    }
    
    // optional uint32 SrcHead = 7;
    if (has_srchead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srchead());
    }
    
    // optional string SrcName = 8;
    if (has_srcname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->srcname());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 DesCharID = 9;
    if (has_descharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->descharid());
    }
    
    // optional string DesName = 10;
    if (has_desname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->desname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageAddFriendResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageAddFriendResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageAddFriendResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageAddFriendResponse::MergeFrom(const CMessageAddFriendResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sendback(from.sendback());
    }
    if (from._has_bit(1)) {
      set_retcode(from.retcode());
    }
    if (from._has_bit(2)) {
      set_srccharid(from.srccharid());
    }
    if (from._has_bit(3)) {
      set_srcmetier(from.srcmetier());
    }
    if (from._has_bit(4)) {
      set_srclevel(from.srclevel());
    }
    if (from._has_bit(5)) {
      set_srcsex(from.srcsex());
    }
    if (from._has_bit(6)) {
      set_srchead(from.srchead());
    }
    if (from._has_bit(7)) {
      set_srcname(from.srcname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_descharid(from.descharid());
    }
    if (from._has_bit(9)) {
      set_desname(from.desname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageAddFriendResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAddFriendResponse::CopyFrom(const CMessageAddFriendResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAddFriendResponse::Swap(CMessageAddFriendResponse* other) {
  if (other != this) {
    std::swap(sendback_, other->sendback_);
    std::swap(retcode_, other->retcode_);
    std::swap(srccharid_, other->srccharid_);
    std::swap(srcmetier_, other->srcmetier_);
    std::swap(srclevel_, other->srclevel_);
    std::swap(srcsex_, other->srcsex_);
    std::swap(srchead_, other->srchead_);
    std::swap(srcname_, other->srcname_);
    std::swap(descharid_, other->descharid_);
    std::swap(desname_, other->desname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageAddFriendResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageAddFriendResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageAddFriendResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageAddFriendResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageGetCharIDRequest::_default_name_;
#ifndef _MSC_VER
const int CMessageGetCharIDRequest::kTypeIDFieldNumber;
const int CMessageGetCharIDRequest::kNameFieldNumber;
const int CMessageGetCharIDRequest::kSrcEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageGetCharIDRequest::CMessageGetCharIDRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetCharIDRequest::InitAsDefaultInstance() {}

CMessageGetCharIDRequest::CMessageGetCharIDRequest(const CMessageGetCharIDRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetCharIDRequest::SharedCtor() {
  _cached_size_ = 0;
  typeid__ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  srcentityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetCharIDRequest::~CMessageGetCharIDRequest() {
  SharedDtor();
}

void CMessageGetCharIDRequest::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGetCharIDRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCharIDRequest_descriptor_;
}

const CMessageGetCharIDRequest& CMessageGetCharIDRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetCharIDRequest* CMessageGetCharIDRequest::default_instance_ = NULL;

CMessageGetCharIDRequest* CMessageGetCharIDRequest::New() const {
  return new CMessageGetCharIDRequest;
}

void CMessageGetCharIDRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    typeid__ = 0u;
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    srcentityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetCharIDRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TypeID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &typeid__));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }
      
      // optional string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(29)) goto parse_SrcEntityID;
        break;
      }
      
      // optional fixed32 SrcEntityID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_SrcEntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadFixed32(
              input, &srcentityid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetCharIDRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetCharIDRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TypeID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->typeid_(), output);
  }
  
  // optional string Name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->name(), output);
  }
  
  // optional fixed32 SrcEntityID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteFixed32(3, this->srcentityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetCharIDRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TypeID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->typeid_(), target);
  }
  
  // optional string Name = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->name(), target);
  }
  
  // optional fixed32 SrcEntityID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteFixed32ToArray(3, this->srcentityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetCharIDRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TypeID = 1;
    if (has_typeid_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->typeid_());
    }
    
    // optional string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional fixed32 SrcEntityID = 3;
    if (has_srcentityid()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetCharIDRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetCharIDRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetCharIDRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetCharIDRequest::MergeFrom(const CMessageGetCharIDRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_typeid_(from.typeid_());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      set_srcentityid(from.srcentityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetCharIDRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCharIDRequest::CopyFrom(const CMessageGetCharIDRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCharIDRequest::Swap(CMessageGetCharIDRequest* other) {
  if (other != this) {
    std::swap(typeid__, other->typeid__);
    std::swap(name_, other->name_);
    std::swap(srcentityid_, other->srcentityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetCharIDRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetCharIDRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetCharIDRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCharIDRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageGetCharIDResponse::_default_name_;
#ifndef _MSC_VER
const int CMessageGetCharIDResponse::kTypeIDFieldNumber;
const int CMessageGetCharIDResponse::kCharIDFieldNumber;
const int CMessageGetCharIDResponse::kSrcEntityIDFieldNumber;
const int CMessageGetCharIDResponse::kNameFieldNumber;
const int CMessageGetCharIDResponse::kHeadFieldNumber;
const int CMessageGetCharIDResponse::kSexFieldNumber;
#endif  // !_MSC_VER

CMessageGetCharIDResponse::CMessageGetCharIDResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetCharIDResponse::InitAsDefaultInstance() {}

CMessageGetCharIDResponse::CMessageGetCharIDResponse(const CMessageGetCharIDResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetCharIDResponse::SharedCtor() {
  _cached_size_ = 0;
  typeid__ = 0u;
  charid_ = 0u;
  srcentityid_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  head_ = 0u;
  sex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetCharIDResponse::~CMessageGetCharIDResponse() {
  SharedDtor();
}

void CMessageGetCharIDResponse::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGetCharIDResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCharIDResponse_descriptor_;
}

const CMessageGetCharIDResponse& CMessageGetCharIDResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetCharIDResponse* CMessageGetCharIDResponse::default_instance_ = NULL;

CMessageGetCharIDResponse* CMessageGetCharIDResponse::New() const {
  return new CMessageGetCharIDResponse;
}

void CMessageGetCharIDResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    typeid__ = 0u;
    charid_ = 0u;
    srcentityid_ = 0u;
    if (_has_bit(3)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    head_ = 0u;
    sex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetCharIDResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TypeID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &typeid__));
        _set_bit(0);
        if (input->ExpectTag(21)) goto parse_CharID;
        break;
      }
      
      // optional fixed32 CharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadFixed32(
              input, &charid_));
        _set_bit(1);
        if (input->ExpectTag(29)) goto parse_SrcEntityID;
        break;
      }
      
      // optional fixed32 SrcEntityID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_SrcEntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadFixed32(
              input, &srcentityid_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_Name;
        break;
      }
      
      // optional string Name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(40)) goto parse_Head;
        break;
      }
      
      // optional uint32 Head = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Head:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &head_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Sex;
        break;
      }
      
      // optional uint32 Sex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Sex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sex_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetCharIDResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetCharIDResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TypeID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->typeid_(), output);
  }
  
  // optional fixed32 CharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteFixed32(2, this->charid(), output);
  }
  
  // optional fixed32 SrcEntityID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteFixed32(3, this->srcentityid(), output);
  }
  
  // optional string Name = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->name(), output);
  }
  
  // optional uint32 Head = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->head(), output);
  }
  
  // optional uint32 Sex = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->sex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetCharIDResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TypeID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->typeid_(), target);
  }
  
  // optional fixed32 CharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteFixed32ToArray(2, this->charid(), target);
  }
  
  // optional fixed32 SrcEntityID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteFixed32ToArray(3, this->srcentityid(), target);
  }
  
  // optional string Name = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->name(), target);
  }
  
  // optional uint32 Head = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->head(), target);
  }
  
  // optional uint32 Sex = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->sex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetCharIDResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TypeID = 1;
    if (has_typeid_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->typeid_());
    }
    
    // optional fixed32 CharID = 2;
    if (has_charid()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 SrcEntityID = 3;
    if (has_srcentityid()) {
      total_size += 1 + 4;
    }
    
    // optional string Name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional uint32 Head = 5;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->head());
    }
    
    // optional uint32 Sex = 6;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetCharIDResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetCharIDResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetCharIDResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetCharIDResponse::MergeFrom(const CMessageGetCharIDResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_typeid_(from.typeid_());
    }
    if (from._has_bit(1)) {
      set_charid(from.charid());
    }
    if (from._has_bit(2)) {
      set_srcentityid(from.srcentityid());
    }
    if (from._has_bit(3)) {
      set_name(from.name());
    }
    if (from._has_bit(4)) {
      set_head(from.head());
    }
    if (from._has_bit(5)) {
      set_sex(from.sex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetCharIDResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCharIDResponse::CopyFrom(const CMessageGetCharIDResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCharIDResponse::Swap(CMessageGetCharIDResponse* other) {
  if (other != this) {
    std::swap(typeid__, other->typeid__);
    std::swap(charid_, other->charid_);
    std::swap(srcentityid_, other->srcentityid_);
    std::swap(name_, other->name_);
    std::swap(head_, other->head_);
    std::swap(sex_, other->sex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetCharIDResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetCharIDResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetCharIDResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCharIDResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageRoleChangeCampNotice::kRoleIDFieldNumber;
const int CMessageRoleChangeCampNotice::kCampFieldNumber;
#endif  // !_MSC_VER

CMessageRoleChangeCampNotice::CMessageRoleChangeCampNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRoleChangeCampNotice::InitAsDefaultInstance() {}

CMessageRoleChangeCampNotice::CMessageRoleChangeCampNotice(const CMessageRoleChangeCampNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRoleChangeCampNotice::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  camp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRoleChangeCampNotice::~CMessageRoleChangeCampNotice() {
  SharedDtor();
}

void CMessageRoleChangeCampNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageRoleChangeCampNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRoleChangeCampNotice_descriptor_;
}

const CMessageRoleChangeCampNotice& CMessageRoleChangeCampNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRoleChangeCampNotice* CMessageRoleChangeCampNotice::default_instance_ = NULL;

CMessageRoleChangeCampNotice* CMessageRoleChangeCampNotice::New() const {
  return new CMessageRoleChangeCampNotice;
}

void CMessageRoleChangeCampNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    camp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRoleChangeCampNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional int32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Camp;
        break;
      }
      
      // optional int32 Camp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Camp:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &camp_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageRoleChangeCampNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRoleChangeCampNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(1, this->roleid(), output);
  }
  
  // optional int32 Camp = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(2, this->camp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRoleChangeCampNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(1, this->roleid(), target);
  }
  
  // optional int32 Camp = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(2, this->camp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRoleChangeCampNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->roleid());
    }
    
    // optional int32 Camp = 2;
    if (has_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->camp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRoleChangeCampNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRoleChangeCampNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRoleChangeCampNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRoleChangeCampNotice::MergeFrom(const CMessageRoleChangeCampNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_camp(from.camp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRoleChangeCampNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRoleChangeCampNotice::CopyFrom(const CMessageRoleChangeCampNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRoleChangeCampNotice::Swap(CMessageRoleChangeCampNotice* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(camp_, other->camp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRoleChangeCampNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRoleChangeCampNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRoleChangeCampNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRoleChangeCampNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLoginSvrStartUpNotice::kStatusFieldNumber;
#endif  // !_MSC_VER

CMessageLoginSvrStartUpNotice::CMessageLoginSvrStartUpNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLoginSvrStartUpNotice::InitAsDefaultInstance() {}

CMessageLoginSvrStartUpNotice::CMessageLoginSvrStartUpNotice(const CMessageLoginSvrStartUpNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLoginSvrStartUpNotice::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLoginSvrStartUpNotice::~CMessageLoginSvrStartUpNotice() {
  SharedDtor();
}

void CMessageLoginSvrStartUpNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLoginSvrStartUpNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLoginSvrStartUpNotice_descriptor_;
}

const CMessageLoginSvrStartUpNotice& CMessageLoginSvrStartUpNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageLoginSvrStartUpNotice* CMessageLoginSvrStartUpNotice::default_instance_ = NULL;

CMessageLoginSvrStartUpNotice* CMessageLoginSvrStartUpNotice::New() const {
  return new CMessageLoginSvrStartUpNotice;
}

void CMessageLoginSvrStartUpNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLoginSvrStartUpNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional int32 Status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &status_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLoginSvrStartUpNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLoginSvrStartUpNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 Status = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(1, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLoginSvrStartUpNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Status = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(1, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLoginSvrStartUpNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLoginSvrStartUpNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLoginSvrStartUpNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLoginSvrStartUpNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLoginSvrStartUpNotice::MergeFrom(const CMessageLoginSvrStartUpNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLoginSvrStartUpNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLoginSvrStartUpNotice::CopyFrom(const CMessageLoginSvrStartUpNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLoginSvrStartUpNotice::Swap(CMessageLoginSvrStartUpNotice* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLoginSvrStartUpNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLoginSvrStartUpNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLoginSvrStartUpNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLoginSvrStartUpNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGate2LoginHeartBeatNotice::kPlayerAtGateFieldNumber;
#endif  // !_MSC_VER

CMessageGate2LoginHeartBeatNotice::CMessageGate2LoginHeartBeatNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGate2LoginHeartBeatNotice::InitAsDefaultInstance() {}

CMessageGate2LoginHeartBeatNotice::CMessageGate2LoginHeartBeatNotice(const CMessageGate2LoginHeartBeatNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGate2LoginHeartBeatNotice::SharedCtor() {
  _cached_size_ = 0;
  playeratgate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGate2LoginHeartBeatNotice::~CMessageGate2LoginHeartBeatNotice() {
  SharedDtor();
}

void CMessageGate2LoginHeartBeatNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGate2LoginHeartBeatNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGate2LoginHeartBeatNotice_descriptor_;
}

const CMessageGate2LoginHeartBeatNotice& CMessageGate2LoginHeartBeatNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGate2LoginHeartBeatNotice* CMessageGate2LoginHeartBeatNotice::default_instance_ = NULL;

CMessageGate2LoginHeartBeatNotice* CMessageGate2LoginHeartBeatNotice::New() const {
  return new CMessageGate2LoginHeartBeatNotice;
}

void CMessageGate2LoginHeartBeatNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playeratgate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGate2LoginHeartBeatNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 PlayerAtGate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playeratgate_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGate2LoginHeartBeatNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGate2LoginHeartBeatNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 PlayerAtGate = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->playeratgate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGate2LoginHeartBeatNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 PlayerAtGate = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->playeratgate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGate2LoginHeartBeatNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 PlayerAtGate = 1;
    if (has_playeratgate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playeratgate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGate2LoginHeartBeatNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGate2LoginHeartBeatNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGate2LoginHeartBeatNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGate2LoginHeartBeatNotice::MergeFrom(const CMessageGate2LoginHeartBeatNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_playeratgate(from.playeratgate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGate2LoginHeartBeatNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGate2LoginHeartBeatNotice::CopyFrom(const CMessageGate2LoginHeartBeatNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGate2LoginHeartBeatNotice::Swap(CMessageGate2LoginHeartBeatNotice* other) {
  if (other != this) {
    std::swap(playeratgate_, other->playeratgate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGate2LoginHeartBeatNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGate2LoginHeartBeatNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGate2LoginHeartBeatNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGate2LoginHeartBeatNotice_reflection_;
}

// ===================================================================

const ::std::string PBPersonalRankInfo::_default_charname_;
#ifndef _MSC_VER
const int PBPersonalRankInfo::kCharIDFieldNumber;
const int PBPersonalRankInfo::kCharNameFieldNumber;
const int PBPersonalRankInfo::kLevelFieldNumber;
const int PBPersonalRankInfo::kMoneyFieldNumber;
const int PBPersonalRankInfo::kBoundedMoneyFieldNumber;
const int PBPersonalRankInfo::kKillEnemyNumInFieldNumber;
const int PBPersonalRankInfo::kKillEnemyNumOutFieldNumber;
const int PBPersonalRankInfo::kHonorFieldNumber;
const int PBPersonalRankInfo::kComprehensiveFieldNumber;
const int PBPersonalRankInfo::kDieNumFieldNumber;
const int PBPersonalRankInfo::kCompletedTasksFieldNumber;
const int PBPersonalRankInfo::kCountryFieldNumber;
const int PBPersonalRankInfo::kMetierFieldNumber;
const int PBPersonalRankInfo::kTitleFieldNumber;
const int PBPersonalRankInfo::kOnLineTimeFieldNumber;
const int PBPersonalRankInfo::kPantaoMarkFieldNumber;
const int PBPersonalRankInfo::kLonggongMarkFieldNumber;
const int PBPersonalRankInfo::kExpFieldNumber;
const int PBPersonalRankInfo::kOriginReliveTimesFieldNumber;
const int PBPersonalRankInfo::kKillSameNationNumFieldNumber;
const int PBPersonalRankInfo::kKillOgreNumFieldNumber;
const int PBPersonalRankInfo::kUpFailNumFieldNumber;
const int PBPersonalRankInfo::kTodayKillEnemyNumInFieldNumber;
const int PBPersonalRankInfo::kTodayKillEnemyNumOutFieldNumber;
const int PBPersonalRankInfo::kTodayHonorFieldNumber;
const int PBPersonalRankInfo::kDayantaFieldNumber;
const int PBPersonalRankInfo::kLianhuadongFieldNumber;
const int PBPersonalRankInfo::kHuangfengdongFieldNumber;
const int PBPersonalRankInfo::kAchivePointFieldNumber;
const int PBPersonalRankInfo::kCharmValueFieldNumber;
const int PBPersonalRankInfo::kFlyDungMarkFieldNumber;
const int PBPersonalRankInfo::kZhangongFieldNumber;
const int PBPersonalRankInfo::kZhiguoFieldNumber;
const int PBPersonalRankInfo::kTongshuaiFieldNumber;
const int PBPersonalRankInfo::kWisallFieldNumber;
const int PBPersonalRankInfo::kYunXiaoFieldNumber;
const int PBPersonalRankInfo::kWeekIncCharmFieldNumber;
const int PBPersonalRankInfo::kShideFieldNumber;
const int PBPersonalRankInfo::kXianYuanMarkFieldNumber;
const int PBPersonalRankInfo::kChushituFieldNumber;
const int PBPersonalRankInfo::kYunxiaoLevelFieldNumber;
const int PBPersonalRankInfo::kWudidongMarkFieldNumber;
const int PBPersonalRankInfo::kDaLuanDouFieldNumber;
const int PBPersonalRankInfo::kDaLuanDouTotalFieldNumber;
const int PBPersonalRankInfo::kGlobalWarFieldNumber;
const int PBPersonalRankInfo::kSpiritScoreFieldNumber;
#endif  // !_MSC_VER

PBPersonalRankInfo::PBPersonalRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPersonalRankInfo::InitAsDefaultInstance() {}

PBPersonalRankInfo::PBPersonalRankInfo(const PBPersonalRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPersonalRankInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  charname_ = const_cast< ::std::string*>(&_default_charname_);
  level_ = 0u;
  money_ = 0u;
  boundedmoney_ = 0u;
  killenemynumin_ = 0u;
  killenemynumout_ = 0u;
  honor_ = 0u;
  comprehensive_ = 0u;
  dienum_ = 0u;
  completedtasks_ = 0u;
  country_ = 0u;
  metier_ = 0u;
  title_ = 0u;
  onlinetime_ = 0u;
  pantaomark_ = 0u;
  longgongmark_ = 0u;
  exp_ = GOOGLE_ULONGLONG(0);
  originrelivetimes_ = 0u;
  killsamenationnum_ = 0u;
  killogrenum_ = 0u;
  upfailnum_ = 0u;
  todaykillenemynumin_ = 0u;
  todaykillenemynumout_ = 0u;
  todayhonor_ = 0u;
  dayanta_ = 0u;
  lianhuadong_ = 0u;
  huangfengdong_ = 0u;
  achivepoint_ = 0u;
  charmvalue_ = 0u;
  flydungmark_ = 0u;
  zhangong_ = 0u;
  zhiguo_ = 0u;
  tongshuai_ = 0u;
  wisall_ = 0u;
  yunxiao_ = 0u;
  weekinccharm_ = 0u;
  shide_ = 0u;
  xianyuanmark_ = 0u;
  chushitu_ = 0u;
  yunxiaolevel_ = 0u;
  wudidongmark_ = 0u;
  daluandou_ = 0u;
  daluandoutotal_ = 0u;
  globalwar_ = 0u;
  spiritscore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPersonalRankInfo::~PBPersonalRankInfo() {
  SharedDtor();
}

void PBPersonalRankInfo::SharedDtor() {
  if (charname_ != &_default_charname_) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBPersonalRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPersonalRankInfo_descriptor_;
}

const PBPersonalRankInfo& PBPersonalRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

PBPersonalRankInfo* PBPersonalRankInfo::default_instance_ = NULL;

PBPersonalRankInfo* PBPersonalRankInfo::New() const {
  return new PBPersonalRankInfo;
}

void PBPersonalRankInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (_has_bit(1)) {
      if (charname_ != &_default_charname_) {
        charname_->clear();
      }
    }
    level_ = 0u;
    money_ = 0u;
    boundedmoney_ = 0u;
    killenemynumin_ = 0u;
    killenemynumout_ = 0u;
    honor_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    comprehensive_ = 0u;
    dienum_ = 0u;
    completedtasks_ = 0u;
    country_ = 0u;
    metier_ = 0u;
    title_ = 0u;
    onlinetime_ = 0u;
    pantaomark_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    longgongmark_ = 0u;
    exp_ = GOOGLE_ULONGLONG(0);
    originrelivetimes_ = 0u;
    killsamenationnum_ = 0u;
    killogrenum_ = 0u;
    upfailnum_ = 0u;
    todaykillenemynumin_ = 0u;
    todaykillenemynumout_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    todayhonor_ = 0u;
    dayanta_ = 0u;
    lianhuadong_ = 0u;
    huangfengdong_ = 0u;
    achivepoint_ = 0u;
    charmvalue_ = 0u;
    flydungmark_ = 0u;
    zhangong_ = 0u;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    zhiguo_ = 0u;
    tongshuai_ = 0u;
    wisall_ = 0u;
    yunxiao_ = 0u;
    weekinccharm_ = 0u;
    shide_ = 0u;
    xianyuanmark_ = 0u;
    chushitu_ = 0u;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    yunxiaolevel_ = 0u;
    wudidongmark_ = 0u;
    daluandou_ = 0u;
    daluandoutotal_ = 0u;
    globalwar_ = 0u;
    spiritscore_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPersonalRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_CharName;
        break;
      }
      
      // optional string CharName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CharName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_charname()));
        if (input->ExpectTag(24)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Money;
        break;
      }
      
      // optional uint32 Money = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_BoundedMoney;
        break;
      }
      
      // optional uint32 BoundedMoney = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BoundedMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &boundedmoney_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_KillEnemyNumIn;
        break;
      }
      
      // optional uint32 KillEnemyNumIn = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_KillEnemyNumIn:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &killenemynumin_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_KillEnemyNumOut;
        break;
      }
      
      // optional uint32 KillEnemyNumOut = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_KillEnemyNumOut:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &killenemynumout_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_Honor;
        break;
      }
      
      // optional uint32 Honor = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Honor:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &honor_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_Comprehensive;
        break;
      }
      
      // optional uint32 Comprehensive = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Comprehensive:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &comprehensive_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_DieNum;
        break;
      }
      
      // optional uint32 DieNum = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DieNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &dienum_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_CompletedTasks;
        break;
      }
      
      // optional uint32 CompletedTasks = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CompletedTasks:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &completedtasks_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_Country;
        break;
      }
      
      // optional uint32 Country = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Country:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &country_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_Metier;
        break;
      }
      
      // optional uint32 Metier = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Metier:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &metier_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_Title;
        break;
      }
      
      // optional uint32 Title = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Title:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &title_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_OnLineTime;
        break;
      }
      
      // optional uint32 OnLineTime = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OnLineTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &onlinetime_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_PantaoMark;
        break;
      }
      
      // optional uint32 PantaoMark = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PantaoMark:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pantaomark_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_LonggongMark;
        break;
      }
      
      // optional uint32 LonggongMark = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LonggongMark:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &longgongmark_));
        _set_bit(16);
        if (input->ExpectTag(144)) goto parse_Exp;
        break;
      }
      
      // optional uint64 Exp = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Exp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &exp_));
        _set_bit(17);
        if (input->ExpectTag(152)) goto parse_OriginReliveTimes;
        break;
      }
      
      // optional uint32 OriginReliveTimes = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OriginReliveTimes:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &originrelivetimes_));
        _set_bit(18);
        if (input->ExpectTag(160)) goto parse_KillSameNationNum;
        break;
      }
      
      // optional uint32 KillSameNationNum = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_KillSameNationNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &killsamenationnum_));
        _set_bit(19);
        if (input->ExpectTag(168)) goto parse_KillOgreNum;
        break;
      }
      
      // optional uint32 KillOgreNum = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_KillOgreNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &killogrenum_));
        _set_bit(20);
        if (input->ExpectTag(176)) goto parse_UpFailNum;
        break;
      }
      
      // optional uint32 UpFailNum = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UpFailNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &upfailnum_));
        _set_bit(21);
        if (input->ExpectTag(184)) goto parse_TodayKillEnemyNumIn;
        break;
      }
      
      // optional uint32 TodayKillEnemyNumIn = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TodayKillEnemyNumIn:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &todaykillenemynumin_));
        _set_bit(22);
        if (input->ExpectTag(192)) goto parse_TodayKillEnemyNumOut;
        break;
      }
      
      // optional uint32 TodayKillEnemyNumOut = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TodayKillEnemyNumOut:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &todaykillenemynumout_));
        _set_bit(23);
        if (input->ExpectTag(200)) goto parse_TodayHonor;
        break;
      }
      
      // optional uint32 TodayHonor = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TodayHonor:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &todayhonor_));
        _set_bit(24);
        if (input->ExpectTag(208)) goto parse_Dayanta;
        break;
      }
      
      // optional uint32 Dayanta = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Dayanta:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &dayanta_));
        _set_bit(25);
        if (input->ExpectTag(216)) goto parse_Lianhuadong;
        break;
      }
      
      // optional uint32 Lianhuadong = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Lianhuadong:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lianhuadong_));
        _set_bit(26);
        if (input->ExpectTag(224)) goto parse_Huangfengdong;
        break;
      }
      
      // optional uint32 Huangfengdong = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Huangfengdong:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &huangfengdong_));
        _set_bit(27);
        if (input->ExpectTag(232)) goto parse_AchivePoint;
        break;
      }
      
      // optional uint32 AchivePoint = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AchivePoint:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &achivepoint_));
        _set_bit(28);
        if (input->ExpectTag(240)) goto parse_CharmValue;
        break;
      }
      
      // optional uint32 CharmValue = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharmValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charmvalue_));
        _set_bit(29);
        if (input->ExpectTag(248)) goto parse_FlyDungMark;
        break;
      }
      
      // optional uint32 FlyDungMark = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FlyDungMark:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &flydungmark_));
        _set_bit(30);
        if (input->ExpectTag(256)) goto parse_Zhangong;
        break;
      }
      
      // optional uint32 Zhangong = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Zhangong:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &zhangong_));
        _set_bit(31);
        if (input->ExpectTag(264)) goto parse_Zhiguo;
        break;
      }
      
      // optional uint32 Zhiguo = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Zhiguo:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &zhiguo_));
        _set_bit(32);
        if (input->ExpectTag(272)) goto parse_Tongshuai;
        break;
      }
      
      // optional uint32 Tongshuai = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Tongshuai:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tongshuai_));
        _set_bit(33);
        if (input->ExpectTag(280)) goto parse_Wisall;
        break;
      }
      
      // optional uint32 Wisall = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Wisall:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &wisall_));
        _set_bit(34);
        if (input->ExpectTag(288)) goto parse_YunXiao;
        break;
      }
      
      // optional uint32 YunXiao = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_YunXiao:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &yunxiao_));
        _set_bit(35);
        if (input->ExpectTag(296)) goto parse_WeekIncCharm;
        break;
      }
      
      // optional uint32 WeekIncCharm = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WeekIncCharm:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &weekinccharm_));
        _set_bit(36);
        if (input->ExpectTag(304)) goto parse_Shide;
        break;
      }
      
      // optional uint32 Shide = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Shide:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &shide_));
        _set_bit(37);
        if (input->ExpectTag(312)) goto parse_XianYuanMark;
        break;
      }
      
      // optional uint32 XianYuanMark = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_XianYuanMark:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &xianyuanmark_));
        _set_bit(38);
        if (input->ExpectTag(320)) goto parse_Chushitu;
        break;
      }
      
      // optional uint32 Chushitu = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Chushitu:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &chushitu_));
        _set_bit(39);
        if (input->ExpectTag(328)) goto parse_YunxiaoLevel;
        break;
      }
      
      // optional uint32 YunxiaoLevel = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_YunxiaoLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &yunxiaolevel_));
        _set_bit(40);
        if (input->ExpectTag(336)) goto parse_WudidongMark;
        break;
      }
      
      // optional uint32 WudidongMark = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WudidongMark:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &wudidongmark_));
        _set_bit(41);
        if (input->ExpectTag(344)) goto parse_DaLuanDou;
        break;
      }
      
      // optional uint32 DaLuanDou = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DaLuanDou:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &daluandou_));
        _set_bit(42);
        if (input->ExpectTag(352)) goto parse_DaLuanDouTotal;
        break;
      }
      
      // optional uint32 DaLuanDouTotal = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DaLuanDouTotal:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &daluandoutotal_));
        _set_bit(43);
        if (input->ExpectTag(360)) goto parse_GlobalWar;
        break;
      }
      
      // optional uint32 GlobalWar = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GlobalWar:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &globalwar_));
        _set_bit(44);
        if (input->ExpectTag(368)) goto parse_SpiritScore;
        break;
      }
      
      // optional uint32 SpiritScore = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SpiritScore:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &spiritscore_));
        _set_bit(45);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPersonalRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBPersonalRankInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional string CharName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->charname(), output);
  }
  
  // optional uint32 Level = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->level(), output);
  }
  
  // optional uint32 Money = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->money(), output);
  }
  
  // optional uint32 BoundedMoney = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->boundedmoney(), output);
  }
  
  // optional uint32 KillEnemyNumIn = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->killenemynumin(), output);
  }
  
  // optional uint32 KillEnemyNumOut = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->killenemynumout(), output);
  }
  
  // optional uint32 Honor = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->honor(), output);
  }
  
  // optional uint32 Comprehensive = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->comprehensive(), output);
  }
  
  // optional uint32 DieNum = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->dienum(), output);
  }
  
  // optional uint32 CompletedTasks = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->completedtasks(), output);
  }
  
  // optional uint32 Country = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->country(), output);
  }
  
  // optional uint32 Metier = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->metier(), output);
  }
  
  // optional uint32 Title = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->title(), output);
  }
  
  // optional uint32 OnLineTime = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(15, this->onlinetime(), output);
  }
  
  // optional uint32 PantaoMark = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(16, this->pantaomark(), output);
  }
  
  // optional uint32 LonggongMark = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(17, this->longgongmark(), output);
  }
  
  // optional uint64 Exp = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(18, this->exp(), output);
  }
  
  // optional uint32 OriginReliveTimes = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(19, this->originrelivetimes(), output);
  }
  
  // optional uint32 KillSameNationNum = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(20, this->killsamenationnum(), output);
  }
  
  // optional uint32 KillOgreNum = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(21, this->killogrenum(), output);
  }
  
  // optional uint32 UpFailNum = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(22, this->upfailnum(), output);
  }
  
  // optional uint32 TodayKillEnemyNumIn = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(23, this->todaykillenemynumin(), output);
  }
  
  // optional uint32 TodayKillEnemyNumOut = 24;
  if (_has_bit(23)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(24, this->todaykillenemynumout(), output);
  }
  
  // optional uint32 TodayHonor = 25;
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(25, this->todayhonor(), output);
  }
  
  // optional uint32 Dayanta = 26;
  if (_has_bit(25)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(26, this->dayanta(), output);
  }
  
  // optional uint32 Lianhuadong = 27;
  if (_has_bit(26)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(27, this->lianhuadong(), output);
  }
  
  // optional uint32 Huangfengdong = 28;
  if (_has_bit(27)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(28, this->huangfengdong(), output);
  }
  
  // optional uint32 AchivePoint = 29;
  if (_has_bit(28)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(29, this->achivepoint(), output);
  }
  
  // optional uint32 CharmValue = 30;
  if (_has_bit(29)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(30, this->charmvalue(), output);
  }
  
  // optional uint32 FlyDungMark = 31;
  if (_has_bit(30)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(31, this->flydungmark(), output);
  }
  
  // optional uint32 Zhangong = 32;
  if (_has_bit(31)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(32, this->zhangong(), output);
  }
  
  // optional uint32 Zhiguo = 33;
  if (_has_bit(32)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(33, this->zhiguo(), output);
  }
  
  // optional uint32 Tongshuai = 34;
  if (_has_bit(33)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(34, this->tongshuai(), output);
  }
  
  // optional uint32 Wisall = 35;
  if (_has_bit(34)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(35, this->wisall(), output);
  }
  
  // optional uint32 YunXiao = 36;
  if (_has_bit(35)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(36, this->yunxiao(), output);
  }
  
  // optional uint32 WeekIncCharm = 37;
  if (_has_bit(36)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(37, this->weekinccharm(), output);
  }
  
  // optional uint32 Shide = 38;
  if (_has_bit(37)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(38, this->shide(), output);
  }
  
  // optional uint32 XianYuanMark = 39;
  if (_has_bit(38)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(39, this->xianyuanmark(), output);
  }
  
  // optional uint32 Chushitu = 40;
  if (_has_bit(39)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(40, this->chushitu(), output);
  }
  
  // optional uint32 YunxiaoLevel = 41;
  if (_has_bit(40)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(41, this->yunxiaolevel(), output);
  }
  
  // optional uint32 WudidongMark = 42;
  if (_has_bit(41)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(42, this->wudidongmark(), output);
  }
  
  // optional uint32 DaLuanDou = 43;
  if (_has_bit(42)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(43, this->daluandou(), output);
  }
  
  // optional uint32 DaLuanDouTotal = 44;
  if (_has_bit(43)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(44, this->daluandoutotal(), output);
  }
  
  // optional uint32 GlobalWar = 45;
  if (_has_bit(44)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(45, this->globalwar(), output);
  }
  
  // optional uint32 SpiritScore = 46;
  if (_has_bit(45)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(46, this->spiritscore(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPersonalRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional string CharName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->charname(), target);
  }
  
  // optional uint32 Level = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->level(), target);
  }
  
  // optional uint32 Money = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->money(), target);
  }
  
  // optional uint32 BoundedMoney = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->boundedmoney(), target);
  }
  
  // optional uint32 KillEnemyNumIn = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->killenemynumin(), target);
  }
  
  // optional uint32 KillEnemyNumOut = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->killenemynumout(), target);
  }
  
  // optional uint32 Honor = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->honor(), target);
  }
  
  // optional uint32 Comprehensive = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->comprehensive(), target);
  }
  
  // optional uint32 DieNum = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->dienum(), target);
  }
  
  // optional uint32 CompletedTasks = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->completedtasks(), target);
  }
  
  // optional uint32 Country = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->country(), target);
  }
  
  // optional uint32 Metier = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->metier(), target);
  }
  
  // optional uint32 Title = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->title(), target);
  }
  
  // optional uint32 OnLineTime = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(15, this->onlinetime(), target);
  }
  
  // optional uint32 PantaoMark = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(16, this->pantaomark(), target);
  }
  
  // optional uint32 LonggongMark = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(17, this->longgongmark(), target);
  }
  
  // optional uint64 Exp = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(18, this->exp(), target);
  }
  
  // optional uint32 OriginReliveTimes = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(19, this->originrelivetimes(), target);
  }
  
  // optional uint32 KillSameNationNum = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(20, this->killsamenationnum(), target);
  }
  
  // optional uint32 KillOgreNum = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(21, this->killogrenum(), target);
  }
  
  // optional uint32 UpFailNum = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(22, this->upfailnum(), target);
  }
  
  // optional uint32 TodayKillEnemyNumIn = 23;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(23, this->todaykillenemynumin(), target);
  }
  
  // optional uint32 TodayKillEnemyNumOut = 24;
  if (_has_bit(23)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(24, this->todaykillenemynumout(), target);
  }
  
  // optional uint32 TodayHonor = 25;
  if (_has_bit(24)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(25, this->todayhonor(), target);
  }
  
  // optional uint32 Dayanta = 26;
  if (_has_bit(25)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(26, this->dayanta(), target);
  }
  
  // optional uint32 Lianhuadong = 27;
  if (_has_bit(26)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(27, this->lianhuadong(), target);
  }
  
  // optional uint32 Huangfengdong = 28;
  if (_has_bit(27)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(28, this->huangfengdong(), target);
  }
  
  // optional uint32 AchivePoint = 29;
  if (_has_bit(28)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(29, this->achivepoint(), target);
  }
  
  // optional uint32 CharmValue = 30;
  if (_has_bit(29)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(30, this->charmvalue(), target);
  }
  
  // optional uint32 FlyDungMark = 31;
  if (_has_bit(30)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(31, this->flydungmark(), target);
  }
  
  // optional uint32 Zhangong = 32;
  if (_has_bit(31)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(32, this->zhangong(), target);
  }
  
  // optional uint32 Zhiguo = 33;
  if (_has_bit(32)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(33, this->zhiguo(), target);
  }
  
  // optional uint32 Tongshuai = 34;
  if (_has_bit(33)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(34, this->tongshuai(), target);
  }
  
  // optional uint32 Wisall = 35;
  if (_has_bit(34)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(35, this->wisall(), target);
  }
  
  // optional uint32 YunXiao = 36;
  if (_has_bit(35)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(36, this->yunxiao(), target);
  }
  
  // optional uint32 WeekIncCharm = 37;
  if (_has_bit(36)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(37, this->weekinccharm(), target);
  }
  
  // optional uint32 Shide = 38;
  if (_has_bit(37)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(38, this->shide(), target);
  }
  
  // optional uint32 XianYuanMark = 39;
  if (_has_bit(38)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(39, this->xianyuanmark(), target);
  }
  
  // optional uint32 Chushitu = 40;
  if (_has_bit(39)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(40, this->chushitu(), target);
  }
  
  // optional uint32 YunxiaoLevel = 41;
  if (_has_bit(40)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(41, this->yunxiaolevel(), target);
  }
  
  // optional uint32 WudidongMark = 42;
  if (_has_bit(41)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(42, this->wudidongmark(), target);
  }
  
  // optional uint32 DaLuanDou = 43;
  if (_has_bit(42)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(43, this->daluandou(), target);
  }
  
  // optional uint32 DaLuanDouTotal = 44;
  if (_has_bit(43)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(44, this->daluandoutotal(), target);
  }
  
  // optional uint32 GlobalWar = 45;
  if (_has_bit(44)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(45, this->globalwar(), target);
  }
  
  // optional uint32 SpiritScore = 46;
  if (_has_bit(45)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(46, this->spiritscore(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPersonalRankInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional string CharName = 2;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->charname());
    }
    
    // optional uint32 Level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
    // optional uint32 Money = 4;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
    // optional uint32 BoundedMoney = 5;
    if (has_boundedmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->boundedmoney());
    }
    
    // optional uint32 KillEnemyNumIn = 6;
    if (has_killenemynumin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->killenemynumin());
    }
    
    // optional uint32 KillEnemyNumOut = 7;
    if (has_killenemynumout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->killenemynumout());
    }
    
    // optional uint32 Honor = 8;
    if (has_honor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->honor());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 Comprehensive = 9;
    if (has_comprehensive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->comprehensive());
    }
    
    // optional uint32 DieNum = 10;
    if (has_dienum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->dienum());
    }
    
    // optional uint32 CompletedTasks = 11;
    if (has_completedtasks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->completedtasks());
    }
    
    // optional uint32 Country = 12;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->country());
    }
    
    // optional uint32 Metier = 13;
    if (has_metier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->metier());
    }
    
    // optional uint32 Title = 14;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->title());
    }
    
    // optional uint32 OnLineTime = 15;
    if (has_onlinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->onlinetime());
    }
    
    // optional uint32 PantaoMark = 16;
    if (has_pantaomark()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pantaomark());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 LonggongMark = 17;
    if (has_longgongmark()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->longgongmark());
    }
    
    // optional uint64 Exp = 18;
    if (has_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->exp());
    }
    
    // optional uint32 OriginReliveTimes = 19;
    if (has_originrelivetimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->originrelivetimes());
    }
    
    // optional uint32 KillSameNationNum = 20;
    if (has_killsamenationnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->killsamenationnum());
    }
    
    // optional uint32 KillOgreNum = 21;
    if (has_killogrenum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->killogrenum());
    }
    
    // optional uint32 UpFailNum = 22;
    if (has_upfailnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->upfailnum());
    }
    
    // optional uint32 TodayKillEnemyNumIn = 23;
    if (has_todaykillenemynumin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->todaykillenemynumin());
    }
    
    // optional uint32 TodayKillEnemyNumOut = 24;
    if (has_todaykillenemynumout()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->todaykillenemynumout());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 TodayHonor = 25;
    if (has_todayhonor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->todayhonor());
    }
    
    // optional uint32 Dayanta = 26;
    if (has_dayanta()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->dayanta());
    }
    
    // optional uint32 Lianhuadong = 27;
    if (has_lianhuadong()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lianhuadong());
    }
    
    // optional uint32 Huangfengdong = 28;
    if (has_huangfengdong()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->huangfengdong());
    }
    
    // optional uint32 AchivePoint = 29;
    if (has_achivepoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->achivepoint());
    }
    
    // optional uint32 CharmValue = 30;
    if (has_charmvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charmvalue());
    }
    
    // optional uint32 FlyDungMark = 31;
    if (has_flydungmark()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->flydungmark());
    }
    
    // optional uint32 Zhangong = 32;
    if (has_zhangong()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->zhangong());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 Zhiguo = 33;
    if (has_zhiguo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->zhiguo());
    }
    
    // optional uint32 Tongshuai = 34;
    if (has_tongshuai()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tongshuai());
    }
    
    // optional uint32 Wisall = 35;
    if (has_wisall()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->wisall());
    }
    
    // optional uint32 YunXiao = 36;
    if (has_yunxiao()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->yunxiao());
    }
    
    // optional uint32 WeekIncCharm = 37;
    if (has_weekinccharm()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->weekinccharm());
    }
    
    // optional uint32 Shide = 38;
    if (has_shide()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->shide());
    }
    
    // optional uint32 XianYuanMark = 39;
    if (has_xianyuanmark()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->xianyuanmark());
    }
    
    // optional uint32 Chushitu = 40;
    if (has_chushitu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->chushitu());
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional uint32 YunxiaoLevel = 41;
    if (has_yunxiaolevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->yunxiaolevel());
    }
    
    // optional uint32 WudidongMark = 42;
    if (has_wudidongmark()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->wudidongmark());
    }
    
    // optional uint32 DaLuanDou = 43;
    if (has_daluandou()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->daluandou());
    }
    
    // optional uint32 DaLuanDouTotal = 44;
    if (has_daluandoutotal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->daluandoutotal());
    }
    
    // optional uint32 GlobalWar = 45;
    if (has_globalwar()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->globalwar());
    }
    
    // optional uint32 SpiritScore = 46;
    if (has_spiritscore()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->spiritscore());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBPersonalRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPersonalRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPersonalRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPersonalRankInfo::MergeFrom(const PBPersonalRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_charname(from.charname());
    }
    if (from._has_bit(2)) {
      set_level(from.level());
    }
    if (from._has_bit(3)) {
      set_money(from.money());
    }
    if (from._has_bit(4)) {
      set_boundedmoney(from.boundedmoney());
    }
    if (from._has_bit(5)) {
      set_killenemynumin(from.killenemynumin());
    }
    if (from._has_bit(6)) {
      set_killenemynumout(from.killenemynumout());
    }
    if (from._has_bit(7)) {
      set_honor(from.honor());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_comprehensive(from.comprehensive());
    }
    if (from._has_bit(9)) {
      set_dienum(from.dienum());
    }
    if (from._has_bit(10)) {
      set_completedtasks(from.completedtasks());
    }
    if (from._has_bit(11)) {
      set_country(from.country());
    }
    if (from._has_bit(12)) {
      set_metier(from.metier());
    }
    if (from._has_bit(13)) {
      set_title(from.title());
    }
    if (from._has_bit(14)) {
      set_onlinetime(from.onlinetime());
    }
    if (from._has_bit(15)) {
      set_pantaomark(from.pantaomark());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_longgongmark(from.longgongmark());
    }
    if (from._has_bit(17)) {
      set_exp(from.exp());
    }
    if (from._has_bit(18)) {
      set_originrelivetimes(from.originrelivetimes());
    }
    if (from._has_bit(19)) {
      set_killsamenationnum(from.killsamenationnum());
    }
    if (from._has_bit(20)) {
      set_killogrenum(from.killogrenum());
    }
    if (from._has_bit(21)) {
      set_upfailnum(from.upfailnum());
    }
    if (from._has_bit(22)) {
      set_todaykillenemynumin(from.todaykillenemynumin());
    }
    if (from._has_bit(23)) {
      set_todaykillenemynumout(from.todaykillenemynumout());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from._has_bit(24)) {
      set_todayhonor(from.todayhonor());
    }
    if (from._has_bit(25)) {
      set_dayanta(from.dayanta());
    }
    if (from._has_bit(26)) {
      set_lianhuadong(from.lianhuadong());
    }
    if (from._has_bit(27)) {
      set_huangfengdong(from.huangfengdong());
    }
    if (from._has_bit(28)) {
      set_achivepoint(from.achivepoint());
    }
    if (from._has_bit(29)) {
      set_charmvalue(from.charmvalue());
    }
    if (from._has_bit(30)) {
      set_flydungmark(from.flydungmark());
    }
    if (from._has_bit(31)) {
      set_zhangong(from.zhangong());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from._has_bit(32)) {
      set_zhiguo(from.zhiguo());
    }
    if (from._has_bit(33)) {
      set_tongshuai(from.tongshuai());
    }
    if (from._has_bit(34)) {
      set_wisall(from.wisall());
    }
    if (from._has_bit(35)) {
      set_yunxiao(from.yunxiao());
    }
    if (from._has_bit(36)) {
      set_weekinccharm(from.weekinccharm());
    }
    if (from._has_bit(37)) {
      set_shide(from.shide());
    }
    if (from._has_bit(38)) {
      set_xianyuanmark(from.xianyuanmark());
    }
    if (from._has_bit(39)) {
      set_chushitu(from.chushitu());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from._has_bit(40)) {
      set_yunxiaolevel(from.yunxiaolevel());
    }
    if (from._has_bit(41)) {
      set_wudidongmark(from.wudidongmark());
    }
    if (from._has_bit(42)) {
      set_daluandou(from.daluandou());
    }
    if (from._has_bit(43)) {
      set_daluandoutotal(from.daluandoutotal());
    }
    if (from._has_bit(44)) {
      set_globalwar(from.globalwar());
    }
    if (from._has_bit(45)) {
      set_spiritscore(from.spiritscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPersonalRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPersonalRankInfo::CopyFrom(const PBPersonalRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPersonalRankInfo::Swap(PBPersonalRankInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(level_, other->level_);
    std::swap(money_, other->money_);
    std::swap(boundedmoney_, other->boundedmoney_);
    std::swap(killenemynumin_, other->killenemynumin_);
    std::swap(killenemynumout_, other->killenemynumout_);
    std::swap(honor_, other->honor_);
    std::swap(comprehensive_, other->comprehensive_);
    std::swap(dienum_, other->dienum_);
    std::swap(completedtasks_, other->completedtasks_);
    std::swap(country_, other->country_);
    std::swap(metier_, other->metier_);
    std::swap(title_, other->title_);
    std::swap(onlinetime_, other->onlinetime_);
    std::swap(pantaomark_, other->pantaomark_);
    std::swap(longgongmark_, other->longgongmark_);
    std::swap(exp_, other->exp_);
    std::swap(originrelivetimes_, other->originrelivetimes_);
    std::swap(killsamenationnum_, other->killsamenationnum_);
    std::swap(killogrenum_, other->killogrenum_);
    std::swap(upfailnum_, other->upfailnum_);
    std::swap(todaykillenemynumin_, other->todaykillenemynumin_);
    std::swap(todaykillenemynumout_, other->todaykillenemynumout_);
    std::swap(todayhonor_, other->todayhonor_);
    std::swap(dayanta_, other->dayanta_);
    std::swap(lianhuadong_, other->lianhuadong_);
    std::swap(huangfengdong_, other->huangfengdong_);
    std::swap(achivepoint_, other->achivepoint_);
    std::swap(charmvalue_, other->charmvalue_);
    std::swap(flydungmark_, other->flydungmark_);
    std::swap(zhangong_, other->zhangong_);
    std::swap(zhiguo_, other->zhiguo_);
    std::swap(tongshuai_, other->tongshuai_);
    std::swap(wisall_, other->wisall_);
    std::swap(yunxiao_, other->yunxiao_);
    std::swap(weekinccharm_, other->weekinccharm_);
    std::swap(shide_, other->shide_);
    std::swap(xianyuanmark_, other->xianyuanmark_);
    std::swap(chushitu_, other->chushitu_);
    std::swap(yunxiaolevel_, other->yunxiaolevel_);
    std::swap(wudidongmark_, other->wudidongmark_);
    std::swap(daluandou_, other->daluandou_);
    std::swap(daluandoutotal_, other->daluandoutotal_);
    std::swap(globalwar_, other->globalwar_);
    std::swap(spiritscore_, other->spiritscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBPersonalRankInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBPersonalRankInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBPersonalRankInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBPersonalRankInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessagePersonalRankInfoNotify::kPersonalRanksFieldNumber;
const int CMessagePersonalRankInfoNotify::kFlagFieldNumber;
const int CMessagePersonalRankInfoNotify::kRTypeFieldNumber;
const int CMessagePersonalRankInfoNotify::kIsOverFieldNumber;
#endif  // !_MSC_VER

CMessagePersonalRankInfoNotify::CMessagePersonalRankInfoNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePersonalRankInfoNotify::InitAsDefaultInstance() {}

CMessagePersonalRankInfoNotify::CMessagePersonalRankInfoNotify(const CMessagePersonalRankInfoNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePersonalRankInfoNotify::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0u;
  rtype_ = 0u;
  isover_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePersonalRankInfoNotify::~CMessagePersonalRankInfoNotify() {
  SharedDtor();
}

void CMessagePersonalRankInfoNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessagePersonalRankInfoNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePersonalRankInfoNotify_descriptor_;
}

const CMessagePersonalRankInfoNotify& CMessagePersonalRankInfoNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePersonalRankInfoNotify* CMessagePersonalRankInfoNotify::default_instance_ = NULL;

CMessagePersonalRankInfoNotify* CMessagePersonalRankInfoNotify::New() const {
  return new CMessagePersonalRankInfoNotify;
}

void CMessagePersonalRankInfoNotify::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    flag_ = 0u;
    rtype_ = 0u;
    isover_ = 0u;
  }
  personalranks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePersonalRankInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .PBPersonalRankInfo PersonalRanks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_PersonalRanks:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_personalranks()));
        if (input->ExpectTag(10)) goto parse_PersonalRanks;
        if (input->ExpectTag(16)) goto parse_Flag;
        break;
      }
      
      // optional uint32 Flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Flag:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &flag_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_RType;
        break;
      }
      
      // optional uint32 RType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rtype_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_IsOver;
        break;
      }
      
      // optional uint32 IsOver = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IsOver:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &isover_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePersonalRankInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePersonalRankInfoNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .PBPersonalRankInfo PersonalRanks = 1;
  for (int i = 0; i < this->personalranks_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->personalranks(i), output);
  }
  
  // optional uint32 Flag = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->flag(), output);
  }
  
  // optional uint32 RType = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->rtype(), output);
  }
  
  // optional uint32 IsOver = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->isover(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePersonalRankInfoNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBPersonalRankInfo PersonalRanks = 1;
  for (int i = 0; i < this->personalranks_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->personalranks(i), target);
  }
  
  // optional uint32 Flag = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->flag(), target);
  }
  
  // optional uint32 RType = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->rtype(), target);
  }
  
  // optional uint32 IsOver = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->isover(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePersonalRankInfoNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 Flag = 2;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->flag());
    }
    
    // optional uint32 RType = 3;
    if (has_rtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rtype());
    }
    
    // optional uint32 IsOver = 4;
    if (has_isover()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->isover());
    }
    
  }
  // repeated .PBPersonalRankInfo PersonalRanks = 1;
  total_size += 1 * this->personalranks_size();
  for (int i = 0; i < this->personalranks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->personalranks(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePersonalRankInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePersonalRankInfoNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePersonalRankInfoNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePersonalRankInfoNotify::MergeFrom(const CMessagePersonalRankInfoNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  personalranks_.MergeFrom(from.personalranks_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_flag(from.flag());
    }
    if (from._has_bit(2)) {
      set_rtype(from.rtype());
    }
    if (from._has_bit(3)) {
      set_isover(from.isover());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePersonalRankInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePersonalRankInfoNotify::CopyFrom(const CMessagePersonalRankInfoNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePersonalRankInfoNotify::Swap(CMessagePersonalRankInfoNotify* other) {
  if (other != this) {
    personalranks_.Swap(&other->personalranks_);
    std::swap(flag_, other->flag_);
    std::swap(rtype_, other->rtype_);
    std::swap(isover_, other->isover_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePersonalRankInfoNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePersonalRankInfoNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePersonalRankInfoNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePersonalRankInfoNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBRankTopTen::kRankTypeFieldNumber;
const int PBRankTopTen::kCharListFieldNumber;
#endif  // !_MSC_VER

PBRankTopTen::PBRankTopTen()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBRankTopTen::InitAsDefaultInstance() {}

PBRankTopTen::PBRankTopTen(const PBRankTopTen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBRankTopTen::SharedCtor() {
  _cached_size_ = 0;
  ranktype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBRankTopTen::~PBRankTopTen() {
  SharedDtor();
}

void PBRankTopTen::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBRankTopTen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBRankTopTen_descriptor_;
}

const PBRankTopTen& PBRankTopTen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

PBRankTopTen* PBRankTopTen::default_instance_ = NULL;

PBRankTopTen* PBRankTopTen::New() const {
  return new PBRankTopTen;
}

void PBRankTopTen::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ranktype_ = 0u;
  }
  charlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBRankTopTen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RankType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ranktype_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CharList;
        break;
      }
      
      // repeated uint32 CharList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharList:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_charlist(value);
        if (input->ExpectTag(16)) goto parse_CharList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBRankTopTen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBRankTopTen::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RankType = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->ranktype(), output);
  }
  
  // repeated uint32 CharList = 2;
  for (int i = 0; i < this->charlist_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBRankTopTen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RankType = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->ranktype(), target);
  }
  
  // repeated uint32 CharList = 2;
  for (int i = 0; i < this->charlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBRankTopTen::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RankType = 1;
    if (has_ranktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ranktype());
    }
    
  }
  // repeated uint32 CharList = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->charlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->charlist(i));
    }
    total_size += 1 * this->charlist_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBRankTopTen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBRankTopTen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBRankTopTen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBRankTopTen::MergeFrom(const PBRankTopTen& from) {
  GOOGLE_CHECK_NE(&from, this);
  charlist_.MergeFrom(from.charlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_ranktype(from.ranktype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBRankTopTen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRankTopTen::CopyFrom(const PBRankTopTen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRankTopTen::Swap(PBRankTopTen* other) {
  if (other != this) {
    std::swap(ranktype_, other->ranktype_);
    charlist_.Swap(&other->charlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBRankTopTen::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBRankTopTen::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBRankTopTen::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBRankTopTen_reflection_;
}

// ===================================================================

const ::std::string CMessageRankRemove::_default_charname_;
#ifndef _MSC_VER
const int CMessageRankRemove::kCharNameFieldNumber;
const int CMessageRankRemove::kRankTypeFieldNumber;
const int CMessageRankRemove::kRefreshFieldNumber;
#endif  // !_MSC_VER

CMessageRankRemove::CMessageRankRemove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRankRemove::InitAsDefaultInstance() {}

CMessageRankRemove::CMessageRankRemove(const CMessageRankRemove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRankRemove::SharedCtor() {
  _cached_size_ = 0;
  charname_ = const_cast< ::std::string*>(&_default_charname_);
  ranktype_ = 0u;
  refresh_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRankRemove::~CMessageRankRemove() {
  SharedDtor();
}

void CMessageRankRemove::SharedDtor() {
  if (charname_ != &_default_charname_) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageRankRemove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRankRemove_descriptor_;
}

const CMessageRankRemove& CMessageRankRemove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRankRemove* CMessageRankRemove::default_instance_ = NULL;

CMessageRankRemove* CMessageRankRemove::New() const {
  return new CMessageRankRemove;
}

void CMessageRankRemove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (charname_ != &_default_charname_) {
        charname_->clear();
      }
    }
    ranktype_ = 0u;
    refresh_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRankRemove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string CharName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_charname()));
        if (input->ExpectTag(16)) goto parse_RankType;
        break;
      }
      
      // optional uint32 RankType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RankType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ranktype_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Refresh;
        break;
      }
      
      // optional uint32 Refresh = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Refresh:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &refresh_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageRankRemove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRankRemove::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string CharName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->charname(), output);
  }
  
  // optional uint32 RankType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->ranktype(), output);
  }
  
  // optional uint32 Refresh = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->refresh(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRankRemove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string CharName = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->charname(), target);
  }
  
  // optional uint32 RankType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->ranktype(), target);
  }
  
  // optional uint32 Refresh = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->refresh(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRankRemove::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string CharName = 1;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->charname());
    }
    
    // optional uint32 RankType = 2;
    if (has_ranktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ranktype());
    }
    
    // optional uint32 Refresh = 3;
    if (has_refresh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->refresh());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRankRemove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRankRemove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRankRemove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRankRemove::MergeFrom(const CMessageRankRemove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charname(from.charname());
    }
    if (from._has_bit(1)) {
      set_ranktype(from.ranktype());
    }
    if (from._has_bit(2)) {
      set_refresh(from.refresh());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRankRemove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRankRemove::CopyFrom(const CMessageRankRemove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRankRemove::Swap(CMessageRankRemove* other) {
  if (other != this) {
    std::swap(charname_, other->charname_);
    std::swap(ranktype_, other->ranktype_);
    std::swap(refresh_, other->refresh_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRankRemove::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRankRemove::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRankRemove::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRankRemove_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessagePersonalRankInfoRequest::kTopTenListFieldNumber;
const int CMessagePersonalRankInfoRequest::kRTypeFieldNumber;
#endif  // !_MSC_VER

CMessagePersonalRankInfoRequest::CMessagePersonalRankInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePersonalRankInfoRequest::InitAsDefaultInstance() {}

CMessagePersonalRankInfoRequest::CMessagePersonalRankInfoRequest(const CMessagePersonalRankInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePersonalRankInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  rtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePersonalRankInfoRequest::~CMessagePersonalRankInfoRequest() {
  SharedDtor();
}

void CMessagePersonalRankInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessagePersonalRankInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePersonalRankInfoRequest_descriptor_;
}

const CMessagePersonalRankInfoRequest& CMessagePersonalRankInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePersonalRankInfoRequest* CMessagePersonalRankInfoRequest::default_instance_ = NULL;

CMessagePersonalRankInfoRequest* CMessagePersonalRankInfoRequest::New() const {
  return new CMessagePersonalRankInfoRequest;
}

void CMessagePersonalRankInfoRequest::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    rtype_ = 0u;
  }
  toptenlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePersonalRankInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .PBRankTopTen TopTenList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_TopTenList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_toptenlist()));
        if (input->ExpectTag(10)) goto parse_TopTenList;
        if (input->ExpectTag(16)) goto parse_RType;
        break;
      }
      
      // optional uint32 RType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rtype_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePersonalRankInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePersonalRankInfoRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .PBRankTopTen TopTenList = 1;
  for (int i = 0; i < this->toptenlist_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->toptenlist(i), output);
  }
  
  // optional uint32 RType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->rtype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePersonalRankInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBRankTopTen TopTenList = 1;
  for (int i = 0; i < this->toptenlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->toptenlist(i), target);
  }
  
  // optional uint32 RType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->rtype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePersonalRankInfoRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 RType = 2;
    if (has_rtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rtype());
    }
    
  }
  // repeated .PBRankTopTen TopTenList = 1;
  total_size += 1 * this->toptenlist_size();
  for (int i = 0; i < this->toptenlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->toptenlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePersonalRankInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePersonalRankInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePersonalRankInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePersonalRankInfoRequest::MergeFrom(const CMessagePersonalRankInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  toptenlist_.MergeFrom(from.toptenlist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_rtype(from.rtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePersonalRankInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePersonalRankInfoRequest::CopyFrom(const CMessagePersonalRankInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePersonalRankInfoRequest::Swap(CMessagePersonalRankInfoRequest* other) {
  if (other != this) {
    toptenlist_.Swap(&other->toptenlist_);
    std::swap(rtype_, other->rtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePersonalRankInfoRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePersonalRankInfoRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePersonalRankInfoRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePersonalRankInfoRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageNewRankTopTenNotify::kTopTenListFieldNumber;
#endif  // !_MSC_VER

CMessageNewRankTopTenNotify::CMessageNewRankTopTenNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageNewRankTopTenNotify::InitAsDefaultInstance() {}

CMessageNewRankTopTenNotify::CMessageNewRankTopTenNotify(const CMessageNewRankTopTenNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageNewRankTopTenNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageNewRankTopTenNotify::~CMessageNewRankTopTenNotify() {
  SharedDtor();
}

void CMessageNewRankTopTenNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageNewRankTopTenNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageNewRankTopTenNotify_descriptor_;
}

const CMessageNewRankTopTenNotify& CMessageNewRankTopTenNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageNewRankTopTenNotify* CMessageNewRankTopTenNotify::default_instance_ = NULL;

CMessageNewRankTopTenNotify* CMessageNewRankTopTenNotify::New() const {
  return new CMessageNewRankTopTenNotify;
}

void CMessageNewRankTopTenNotify::Clear() {
  toptenlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageNewRankTopTenNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .PBRankTopTen TopTenList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_TopTenList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_toptenlist()));
        if (input->ExpectTag(10)) goto parse_TopTenList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageNewRankTopTenNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageNewRankTopTenNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .PBRankTopTen TopTenList = 1;
  for (int i = 0; i < this->toptenlist_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->toptenlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageNewRankTopTenNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBRankTopTen TopTenList = 1;
  for (int i = 0; i < this->toptenlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->toptenlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageNewRankTopTenNotify::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBRankTopTen TopTenList = 1;
  total_size += 1 * this->toptenlist_size();
  for (int i = 0; i < this->toptenlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->toptenlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageNewRankTopTenNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageNewRankTopTenNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageNewRankTopTenNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageNewRankTopTenNotify::MergeFrom(const CMessageNewRankTopTenNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  toptenlist_.MergeFrom(from.toptenlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageNewRankTopTenNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageNewRankTopTenNotify::CopyFrom(const CMessageNewRankTopTenNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageNewRankTopTenNotify::Swap(CMessageNewRankTopTenNotify* other) {
  if (other != this) {
    toptenlist_.Swap(&other->toptenlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageNewRankTopTenNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageNewRankTopTenNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageNewRankTopTenNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageNewRankTopTenNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageRoleGameInfoReportToGateNotify::kCharIDFieldNumber;
const int CMessageRoleGameInfoReportToGateNotify::kLevelFieldNumber;
const int CMessageRoleGameInfoReportToGateNotify::kMapIDFieldNumber;
const int CMessageRoleGameInfoReportToGateNotify::kLineIDFieldNumber;
const int CMessageRoleGameInfoReportToGateNotify::kMetierFieldNumber;
const int CMessageRoleGameInfoReportToGateNotify::kCountryFieldNumber;
const int CMessageRoleGameInfoReportToGateNotify::kMasterIDFieldNumber;
const int CMessageRoleGameInfoReportToGateNotify::kPKValueFieldNumber;
#endif  // !_MSC_VER

CMessageRoleGameInfoReportToGateNotify::CMessageRoleGameInfoReportToGateNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRoleGameInfoReportToGateNotify::InitAsDefaultInstance() {}

CMessageRoleGameInfoReportToGateNotify::CMessageRoleGameInfoReportToGateNotify(const CMessageRoleGameInfoReportToGateNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRoleGameInfoReportToGateNotify::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  level_ = 0u;
  mapid_ = 0u;
  lineid_ = 0u;
  metier_ = 0u;
  country_ = 0u;
  pkvalue_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRoleGameInfoReportToGateNotify::~CMessageRoleGameInfoReportToGateNotify() {
  SharedDtor();
}

void CMessageRoleGameInfoReportToGateNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageRoleGameInfoReportToGateNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRoleGameInfoReportToGateNotify_descriptor_;
}

const CMessageRoleGameInfoReportToGateNotify& CMessageRoleGameInfoReportToGateNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRoleGameInfoReportToGateNotify* CMessageRoleGameInfoReportToGateNotify::default_instance_ = NULL;

CMessageRoleGameInfoReportToGateNotify* CMessageRoleGameInfoReportToGateNotify::New() const {
  return new CMessageRoleGameInfoReportToGateNotify;
}

void CMessageRoleGameInfoReportToGateNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    level_ = 0u;
    mapid_ = 0u;
    lineid_ = 0u;
    metier_ = 0u;
    country_ = 0u;
    pkvalue_ = 0u;
  }
  masterid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRoleGameInfoReportToGateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_LineID;
        break;
      }
      
      // optional uint32 LineID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lineid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Metier;
        break;
      }
      
      // optional uint32 Metier = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Metier:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &metier_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Country;
        break;
      }
      
      // optional uint32 Country = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Country:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &country_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_MasterID;
        break;
      }
      
      // repeated uint32 MasterID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MasterID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_masterid(value);
        if (input->ExpectTag(56)) goto parse_MasterID;
        if (input->ExpectTag(64)) goto parse_PKValue;
        break;
      }
      
      // optional uint32 PKValue = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PKValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pkvalue_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageRoleGameInfoReportToGateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRoleGameInfoReportToGateNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 Level = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->level(), output);
  }
  
  // optional uint32 MapID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->mapid(), output);
  }
  
  // optional uint32 LineID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->lineid(), output);
  }
  
  // optional uint32 Metier = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->metier(), output);
  }
  
  // optional uint32 Country = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->country(), output);
  }
  
  // repeated uint32 MasterID = 7;
  for (int i = 0; i < this->masterid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->masterid(i), output);
  }
  
  // optional uint32 PKValue = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->pkvalue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRoleGameInfoReportToGateNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 Level = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->level(), target);
  }
  
  // optional uint32 MapID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->mapid(), target);
  }
  
  // optional uint32 LineID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->lineid(), target);
  }
  
  // optional uint32 Metier = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->metier(), target);
  }
  
  // optional uint32 Country = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->country(), target);
  }
  
  // repeated uint32 MasterID = 7;
  for (int i = 0; i < this->masterid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->masterid(i), target);
  }
  
  // optional uint32 PKValue = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->pkvalue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRoleGameInfoReportToGateNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 Level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
    // optional uint32 MapID = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 LineID = 4;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lineid());
    }
    
    // optional uint32 Metier = 5;
    if (has_metier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->metier());
    }
    
    // optional uint32 Country = 6;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->country());
    }
    
    // optional uint32 PKValue = 8;
    if (has_pkvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pkvalue());
    }
    
  }
  // repeated uint32 MasterID = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->masterid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->masterid(i));
    }
    total_size += 1 * this->masterid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRoleGameInfoReportToGateNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRoleGameInfoReportToGateNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRoleGameInfoReportToGateNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRoleGameInfoReportToGateNotify::MergeFrom(const CMessageRoleGameInfoReportToGateNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  masterid_.MergeFrom(from.masterid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_level(from.level());
    }
    if (from._has_bit(2)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(3)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(4)) {
      set_metier(from.metier());
    }
    if (from._has_bit(5)) {
      set_country(from.country());
    }
    if (from._has_bit(7)) {
      set_pkvalue(from.pkvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRoleGameInfoReportToGateNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRoleGameInfoReportToGateNotify::CopyFrom(const CMessageRoleGameInfoReportToGateNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRoleGameInfoReportToGateNotify::Swap(CMessageRoleGameInfoReportToGateNotify* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(level_, other->level_);
    std::swap(mapid_, other->mapid_);
    std::swap(lineid_, other->lineid_);
    std::swap(metier_, other->metier_);
    std::swap(country_, other->country_);
    masterid_.Swap(&other->masterid_);
    std::swap(pkvalue_, other->pkvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRoleGameInfoReportToGateNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRoleGameInfoReportToGateNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRoleGameInfoReportToGateNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRoleGameInfoReportToGateNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBattleTeamWait::kCharIDFieldNumber;
const int CMessageBattleTeamWait::kLevelFieldNumber;
const int CMessageBattleTeamWait::kBattleIDFieldNumber;
const int CMessageBattleTeamWait::kMapIDFieldNumber;
#endif  // !_MSC_VER

CMessageBattleTeamWait::CMessageBattleTeamWait()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBattleTeamWait::InitAsDefaultInstance() {}

CMessageBattleTeamWait::CMessageBattleTeamWait(const CMessageBattleTeamWait& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBattleTeamWait::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  level_ = 0u;
  battleid_ = 0u;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBattleTeamWait::~CMessageBattleTeamWait() {
  SharedDtor();
}

void CMessageBattleTeamWait::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageBattleTeamWait::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBattleTeamWait_descriptor_;
}

const CMessageBattleTeamWait& CMessageBattleTeamWait::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageBattleTeamWait* CMessageBattleTeamWait::default_instance_ = NULL;

CMessageBattleTeamWait* CMessageBattleTeamWait::New() const {
  return new CMessageBattleTeamWait;
}

void CMessageBattleTeamWait::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    level_ = 0u;
    battleid_ = 0u;
    mapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBattleTeamWait::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_BattleID;
        break;
      }
      
      // optional uint32 BattleID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BattleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &battleid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBattleTeamWait::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBattleTeamWait::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 Level = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->level(), output);
  }
  
  // optional uint32 BattleID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->battleid(), output);
  }
  
  // optional uint32 MapID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->mapid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBattleTeamWait::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 Level = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->level(), target);
  }
  
  // optional uint32 BattleID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->battleid(), target);
  }
  
  // optional uint32 MapID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->mapid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBattleTeamWait::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 Level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
    // optional uint32 BattleID = 3;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->battleid());
    }
    
    // optional uint32 MapID = 4;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBattleTeamWait::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBattleTeamWait* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBattleTeamWait*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBattleTeamWait::MergeFrom(const CMessageBattleTeamWait& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_level(from.level());
    }
    if (from._has_bit(2)) {
      set_battleid(from.battleid());
    }
    if (from._has_bit(3)) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBattleTeamWait::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBattleTeamWait::CopyFrom(const CMessageBattleTeamWait& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBattleTeamWait::Swap(CMessageBattleTeamWait* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(level_, other->level_);
    std::swap(battleid_, other->battleid_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBattleTeamWait::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBattleTeamWait::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBattleTeamWait::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBattleTeamWait_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBattleWaitLeaveRequest::kCharIDFieldNumber;
const int CMessageBattleWaitLeaveRequest::kBattleIDFieldNumber;
const int CMessageBattleWaitLeaveRequest::kMapIDFieldNumber;
#endif  // !_MSC_VER

CMessageBattleWaitLeaveRequest::CMessageBattleWaitLeaveRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBattleWaitLeaveRequest::InitAsDefaultInstance() {}

CMessageBattleWaitLeaveRequest::CMessageBattleWaitLeaveRequest(const CMessageBattleWaitLeaveRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBattleWaitLeaveRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  battleid_ = 0u;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBattleWaitLeaveRequest::~CMessageBattleWaitLeaveRequest() {
  SharedDtor();
}

void CMessageBattleWaitLeaveRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageBattleWaitLeaveRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBattleWaitLeaveRequest_descriptor_;
}

const CMessageBattleWaitLeaveRequest& CMessageBattleWaitLeaveRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageBattleWaitLeaveRequest* CMessageBattleWaitLeaveRequest::default_instance_ = NULL;

CMessageBattleWaitLeaveRequest* CMessageBattleWaitLeaveRequest::New() const {
  return new CMessageBattleWaitLeaveRequest;
}

void CMessageBattleWaitLeaveRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    battleid_ = 0u;
    mapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBattleWaitLeaveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_BattleID;
        break;
      }
      
      // optional uint32 BattleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BattleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &battleid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBattleWaitLeaveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBattleWaitLeaveRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 BattleID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->battleid(), output);
  }
  
  // optional uint32 MapID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->mapid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBattleWaitLeaveRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 BattleID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->battleid(), target);
  }
  
  // optional uint32 MapID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->mapid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBattleWaitLeaveRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 BattleID = 2;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->battleid());
    }
    
    // optional uint32 MapID = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBattleWaitLeaveRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBattleWaitLeaveRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBattleWaitLeaveRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBattleWaitLeaveRequest::MergeFrom(const CMessageBattleWaitLeaveRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_battleid(from.battleid());
    }
    if (from._has_bit(2)) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBattleWaitLeaveRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBattleWaitLeaveRequest::CopyFrom(const CMessageBattleWaitLeaveRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBattleWaitLeaveRequest::Swap(CMessageBattleWaitLeaveRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(battleid_, other->battleid_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBattleWaitLeaveRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBattleWaitLeaveRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBattleWaitLeaveRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBattleWaitLeaveRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBattleJoinNotice::kCharIDFieldNumber;
const int CMessageBattleJoinNotice::kBattleIDFieldNumber;
const int CMessageBattleJoinNotice::kMapIDFieldNumber;
const int CMessageBattleJoinNotice::kTypeFieldNumber;
const int CMessageBattleJoinNotice::kBattleTimeFieldNumber;
const int CMessageBattleJoinNotice::kKeyFieldNumber;
const int CMessageBattleJoinNotice::kIntoLastRepetionFieldNumber;
#endif  // !_MSC_VER

CMessageBattleJoinNotice::CMessageBattleJoinNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBattleJoinNotice::InitAsDefaultInstance() {}

CMessageBattleJoinNotice::CMessageBattleJoinNotice(const CMessageBattleJoinNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBattleJoinNotice::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  battleid_ = 0u;
  mapid_ = 0u;
  type_ = 0u;
  battletime_ = 0u;
  key_ = 0u;
  intolastrepetion_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBattleJoinNotice::~CMessageBattleJoinNotice() {
  SharedDtor();
}

void CMessageBattleJoinNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageBattleJoinNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBattleJoinNotice_descriptor_;
}

const CMessageBattleJoinNotice& CMessageBattleJoinNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageBattleJoinNotice* CMessageBattleJoinNotice::default_instance_ = NULL;

CMessageBattleJoinNotice* CMessageBattleJoinNotice::New() const {
  return new CMessageBattleJoinNotice;
}

void CMessageBattleJoinNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    battleid_ = 0u;
    mapid_ = 0u;
    type_ = 0u;
    battletime_ = 0u;
    key_ = 0u;
    intolastrepetion_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBattleJoinNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_BattleID;
        break;
      }
      
      // optional uint32 BattleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BattleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &battleid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Type;
        break;
      }
      
      // optional uint32 Type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Type:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_BattleTime;
        break;
      }
      
      // optional uint32 BattleTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BattleTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &battletime_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Key;
        break;
      }
      
      // optional uint32 Key = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Key:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &key_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_IntoLastRepetion;
        break;
      }
      
      // optional uint32 IntoLastRepetion = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IntoLastRepetion:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &intolastrepetion_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBattleJoinNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBattleJoinNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 BattleID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->battleid(), output);
  }
  
  // optional uint32 MapID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->mapid(), output);
  }
  
  // optional uint32 Type = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->type(), output);
  }
  
  // optional uint32 BattleTime = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->battletime(), output);
  }
  
  // optional uint32 Key = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->key(), output);
  }
  
  // optional uint32 IntoLastRepetion = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->intolastrepetion(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBattleJoinNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 BattleID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->battleid(), target);
  }
  
  // optional uint32 MapID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->mapid(), target);
  }
  
  // optional uint32 Type = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->type(), target);
  }
  
  // optional uint32 BattleTime = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->battletime(), target);
  }
  
  // optional uint32 Key = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->key(), target);
  }
  
  // optional uint32 IntoLastRepetion = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->intolastrepetion(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBattleJoinNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 BattleID = 2;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->battleid());
    }
    
    // optional uint32 MapID = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 Type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
    // optional uint32 BattleTime = 5;
    if (has_battletime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->battletime());
    }
    
    // optional uint32 Key = 6;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->key());
    }
    
    // optional uint32 IntoLastRepetion = 7;
    if (has_intolastrepetion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->intolastrepetion());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBattleJoinNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBattleJoinNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBattleJoinNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBattleJoinNotice::MergeFrom(const CMessageBattleJoinNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_battleid(from.battleid());
    }
    if (from._has_bit(2)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(3)) {
      set_type(from.type());
    }
    if (from._has_bit(4)) {
      set_battletime(from.battletime());
    }
    if (from._has_bit(5)) {
      set_key(from.key());
    }
    if (from._has_bit(6)) {
      set_intolastrepetion(from.intolastrepetion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBattleJoinNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBattleJoinNotice::CopyFrom(const CMessageBattleJoinNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBattleJoinNotice::Swap(CMessageBattleJoinNotice* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(battleid_, other->battleid_);
    std::swap(mapid_, other->mapid_);
    std::swap(type_, other->type_);
    std::swap(battletime_, other->battletime_);
    std::swap(key_, other->key_);
    std::swap(intolastrepetion_, other->intolastrepetion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBattleJoinNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBattleJoinNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBattleJoinNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBattleJoinNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBattlePlayerJoin::kCharIDFieldNumber;
const int CMessageBattlePlayerJoin::kBattleIDFieldNumber;
const int CMessageBattlePlayerJoin::kKeyFieldNumber;
const int CMessageBattlePlayerJoin::kCampIDFieldNumber;
const int CMessageBattlePlayerJoin::kMapIDFieldNumber;
#endif  // !_MSC_VER

CMessageBattlePlayerJoin::CMessageBattlePlayerJoin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBattlePlayerJoin::InitAsDefaultInstance() {}

CMessageBattlePlayerJoin::CMessageBattlePlayerJoin(const CMessageBattlePlayerJoin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBattlePlayerJoin::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  battleid_ = 0u;
  key_ = GOOGLE_ULONGLONG(0);
  campid_ = 0u;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBattlePlayerJoin::~CMessageBattlePlayerJoin() {
  SharedDtor();
}

void CMessageBattlePlayerJoin::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageBattlePlayerJoin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBattlePlayerJoin_descriptor_;
}

const CMessageBattlePlayerJoin& CMessageBattlePlayerJoin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageBattlePlayerJoin* CMessageBattlePlayerJoin::default_instance_ = NULL;

CMessageBattlePlayerJoin* CMessageBattlePlayerJoin::New() const {
  return new CMessageBattlePlayerJoin;
}

void CMessageBattlePlayerJoin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    battleid_ = 0u;
    key_ = GOOGLE_ULONGLONG(0);
    campid_ = 0u;
    mapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBattlePlayerJoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_BattleID;
        break;
      }
      
      // optional uint32 BattleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BattleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &battleid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Key;
        break;
      }
      
      // optional uint64 Key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Key:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &key_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_CampID;
        break;
      }
      
      // optional uint32 CampID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CampID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &campid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBattlePlayerJoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBattlePlayerJoin::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 BattleID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->battleid(), output);
  }
  
  // optional uint64 Key = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(3, this->key(), output);
  }
  
  // optional uint32 CampID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->campid(), output);
  }
  
  // optional uint32 MapID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->mapid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBattlePlayerJoin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 BattleID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->battleid(), target);
  }
  
  // optional uint64 Key = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(3, this->key(), target);
  }
  
  // optional uint32 CampID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->campid(), target);
  }
  
  // optional uint32 MapID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->mapid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBattlePlayerJoin::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 BattleID = 2;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->battleid());
    }
    
    // optional uint64 Key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->key());
    }
    
    // optional uint32 CampID = 4;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->campid());
    }
    
    // optional uint32 MapID = 5;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBattlePlayerJoin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBattlePlayerJoin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBattlePlayerJoin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBattlePlayerJoin::MergeFrom(const CMessageBattlePlayerJoin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_battleid(from.battleid());
    }
    if (from._has_bit(2)) {
      set_key(from.key());
    }
    if (from._has_bit(3)) {
      set_campid(from.campid());
    }
    if (from._has_bit(4)) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBattlePlayerJoin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBattlePlayerJoin::CopyFrom(const CMessageBattlePlayerJoin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBattlePlayerJoin::Swap(CMessageBattlePlayerJoin* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(battleid_, other->battleid_);
    std::swap(key_, other->key_);
    std::swap(campid_, other->campid_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBattlePlayerJoin::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBattlePlayerJoin::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBattlePlayerJoin::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBattlePlayerJoin_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBattleWaitNotice::kCharIDFieldNumber;
const int CMessageBattleWaitNotice::kBattleIDFieldNumber;
const int CMessageBattleWaitNotice::kMapIDFieldNumber;
#endif  // !_MSC_VER

CMessageBattleWaitNotice::CMessageBattleWaitNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBattleWaitNotice::InitAsDefaultInstance() {}

CMessageBattleWaitNotice::CMessageBattleWaitNotice(const CMessageBattleWaitNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBattleWaitNotice::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  battleid_ = 0u;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBattleWaitNotice::~CMessageBattleWaitNotice() {
  SharedDtor();
}

void CMessageBattleWaitNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageBattleWaitNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBattleWaitNotice_descriptor_;
}

const CMessageBattleWaitNotice& CMessageBattleWaitNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageBattleWaitNotice* CMessageBattleWaitNotice::default_instance_ = NULL;

CMessageBattleWaitNotice* CMessageBattleWaitNotice::New() const {
  return new CMessageBattleWaitNotice;
}

void CMessageBattleWaitNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    battleid_ = 0u;
    mapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBattleWaitNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_BattleID;
        break;
      }
      
      // optional uint32 BattleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BattleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &battleid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBattleWaitNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBattleWaitNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 BattleID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->battleid(), output);
  }
  
  // optional uint32 MapID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->mapid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBattleWaitNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 BattleID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->battleid(), target);
  }
  
  // optional uint32 MapID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->mapid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBattleWaitNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 BattleID = 2;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->battleid());
    }
    
    // optional uint32 MapID = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBattleWaitNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBattleWaitNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBattleWaitNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBattleWaitNotice::MergeFrom(const CMessageBattleWaitNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_battleid(from.battleid());
    }
    if (from._has_bit(2)) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBattleWaitNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBattleWaitNotice::CopyFrom(const CMessageBattleWaitNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBattleWaitNotice::Swap(CMessageBattleWaitNotice* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(battleid_, other->battleid_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBattleWaitNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBattleWaitNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBattleWaitNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBattleWaitNotice_reflection_;
}

// ===================================================================

const ::std::string CMessageServerValidateRequest::_default_macaddr_;
const ::std::string CMessageServerValidateRequest::_default_ipaddr_;
#ifndef _MSC_VER
const int CMessageServerValidateRequest::kMacAddrFieldNumber;
const int CMessageServerValidateRequest::kIPAddrFieldNumber;
#endif  // !_MSC_VER

CMessageServerValidateRequest::CMessageServerValidateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageServerValidateRequest::InitAsDefaultInstance() {}

CMessageServerValidateRequest::CMessageServerValidateRequest(const CMessageServerValidateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageServerValidateRequest::SharedCtor() {
  _cached_size_ = 0;
  macaddr_ = const_cast< ::std::string*>(&_default_macaddr_);
  ipaddr_ = const_cast< ::std::string*>(&_default_ipaddr_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageServerValidateRequest::~CMessageServerValidateRequest() {
  SharedDtor();
}

void CMessageServerValidateRequest::SharedDtor() {
  if (macaddr_ != &_default_macaddr_) {
    delete macaddr_;
  }
  if (ipaddr_ != &_default_ipaddr_) {
    delete ipaddr_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageServerValidateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageServerValidateRequest_descriptor_;
}

const CMessageServerValidateRequest& CMessageServerValidateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageServerValidateRequest* CMessageServerValidateRequest::default_instance_ = NULL;

CMessageServerValidateRequest* CMessageServerValidateRequest::New() const {
  return new CMessageServerValidateRequest;
}

void CMessageServerValidateRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (macaddr_ != &_default_macaddr_) {
        macaddr_->clear();
      }
    }
    if (_has_bit(1)) {
      if (ipaddr_ != &_default_ipaddr_) {
        ipaddr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageServerValidateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string MacAddr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_macaddr()));
        if (input->ExpectTag(18)) goto parse_IPAddr;
        break;
      }
      
      // optional string IPAddr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_IPAddr:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_ipaddr()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageServerValidateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageServerValidateRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string MacAddr = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->macaddr(), output);
  }
  
  // optional string IPAddr = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->ipaddr(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageServerValidateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string MacAddr = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->macaddr(), target);
  }
  
  // optional string IPAddr = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->ipaddr(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageServerValidateRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string MacAddr = 1;
    if (has_macaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->macaddr());
    }
    
    // optional string IPAddr = 2;
    if (has_ipaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->ipaddr());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageServerValidateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageServerValidateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageServerValidateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageServerValidateRequest::MergeFrom(const CMessageServerValidateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_macaddr(from.macaddr());
    }
    if (from._has_bit(1)) {
      set_ipaddr(from.ipaddr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageServerValidateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageServerValidateRequest::CopyFrom(const CMessageServerValidateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageServerValidateRequest::Swap(CMessageServerValidateRequest* other) {
  if (other != this) {
    std::swap(macaddr_, other->macaddr_);
    std::swap(ipaddr_, other->ipaddr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageServerValidateRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageServerValidateRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageServerValidateRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageServerValidateRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBattleWaitLeaveResponse::kCharIDFieldNumber;
const int CMessageBattleWaitLeaveResponse::kBattleIDFieldNumber;
const int CMessageBattleWaitLeaveResponse::kMapIDFieldNumber;
#endif  // !_MSC_VER

CMessageBattleWaitLeaveResponse::CMessageBattleWaitLeaveResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBattleWaitLeaveResponse::InitAsDefaultInstance() {}

CMessageBattleWaitLeaveResponse::CMessageBattleWaitLeaveResponse(const CMessageBattleWaitLeaveResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBattleWaitLeaveResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  battleid_ = 0u;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBattleWaitLeaveResponse::~CMessageBattleWaitLeaveResponse() {
  SharedDtor();
}

void CMessageBattleWaitLeaveResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageBattleWaitLeaveResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBattleWaitLeaveResponse_descriptor_;
}

const CMessageBattleWaitLeaveResponse& CMessageBattleWaitLeaveResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageBattleWaitLeaveResponse* CMessageBattleWaitLeaveResponse::default_instance_ = NULL;

CMessageBattleWaitLeaveResponse* CMessageBattleWaitLeaveResponse::New() const {
  return new CMessageBattleWaitLeaveResponse;
}

void CMessageBattleWaitLeaveResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    battleid_ = 0u;
    mapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBattleWaitLeaveResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_BattleID;
        break;
      }
      
      // optional uint32 BattleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BattleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &battleid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBattleWaitLeaveResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBattleWaitLeaveResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 BattleID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->battleid(), output);
  }
  
  // optional uint32 MapID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->mapid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBattleWaitLeaveResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 BattleID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->battleid(), target);
  }
  
  // optional uint32 MapID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->mapid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBattleWaitLeaveResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 BattleID = 2;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->battleid());
    }
    
    // optional uint32 MapID = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBattleWaitLeaveResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBattleWaitLeaveResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBattleWaitLeaveResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBattleWaitLeaveResponse::MergeFrom(const CMessageBattleWaitLeaveResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_battleid(from.battleid());
    }
    if (from._has_bit(2)) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBattleWaitLeaveResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBattleWaitLeaveResponse::CopyFrom(const CMessageBattleWaitLeaveResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBattleWaitLeaveResponse::Swap(CMessageBattleWaitLeaveResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(battleid_, other->battleid_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBattleWaitLeaveResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBattleWaitLeaveResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBattleWaitLeaveResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBattleWaitLeaveResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageServerValidateResponse::kCheckResultFieldNumber;
#endif  // !_MSC_VER

CMessageServerValidateResponse::CMessageServerValidateResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageServerValidateResponse::InitAsDefaultInstance() {}

CMessageServerValidateResponse::CMessageServerValidateResponse(const CMessageServerValidateResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageServerValidateResponse::SharedCtor() {
  _cached_size_ = 0;
  checkresult_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageServerValidateResponse::~CMessageServerValidateResponse() {
  SharedDtor();
}

void CMessageServerValidateResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageServerValidateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageServerValidateResponse_descriptor_;
}

const CMessageServerValidateResponse& CMessageServerValidateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageServerValidateResponse* CMessageServerValidateResponse::default_instance_ = NULL;

CMessageServerValidateResponse* CMessageServerValidateResponse::New() const {
  return new CMessageServerValidateResponse;
}

void CMessageServerValidateResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    checkresult_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageServerValidateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CheckResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &checkresult_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageServerValidateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageServerValidateResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CheckResult = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->checkresult(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageServerValidateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CheckResult = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->checkresult(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageServerValidateResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CheckResult = 1;
    if (has_checkresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->checkresult());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageServerValidateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageServerValidateResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageServerValidateResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageServerValidateResponse::MergeFrom(const CMessageServerValidateResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_checkresult(from.checkresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageServerValidateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageServerValidateResponse::CopyFrom(const CMessageServerValidateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageServerValidateResponse::Swap(CMessageServerValidateResponse* other) {
  if (other != this) {
    std::swap(checkresult_, other->checkresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageServerValidateResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageServerValidateResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageServerValidateResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageServerValidateResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CTracedPlayerInfo::kAccountIDFieldNumber;
const int CTracedPlayerInfo::kRoleIDFieldNumber;
#endif  // !_MSC_VER

CTracedPlayerInfo::CTracedPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CTracedPlayerInfo::InitAsDefaultInstance() {}

CTracedPlayerInfo::CTracedPlayerInfo(const CTracedPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CTracedPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CTracedPlayerInfo::~CTracedPlayerInfo() {
  SharedDtor();
}

void CTracedPlayerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CTracedPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CTracedPlayerInfo_descriptor_;
}

const CTracedPlayerInfo& CTracedPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CTracedPlayerInfo* CTracedPlayerInfo::default_instance_ = NULL;

CTracedPlayerInfo* CTracedPlayerInfo::New() const {
  return new CTracedPlayerInfo;
}

void CTracedPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
  }
  roleid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CTracedPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 AccountID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_RoleID;
        break;
      }
      
      // repeated uint32 RoleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_roleid(value);
        if (input->ExpectTag(16)) goto parse_RoleID;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CTracedPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CTracedPlayerInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 AccountID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->accountid(), output);
  }
  
  // repeated uint32 RoleID = 2;
  for (int i = 0; i < this->roleid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->roleid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CTracedPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 AccountID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->accountid(), target);
  }
  
  // repeated uint32 RoleID = 2;
  for (int i = 0; i < this->roleid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->roleid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CTracedPlayerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AccountID = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
  }
  // repeated uint32 RoleID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->roleid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->roleid(i));
    }
    total_size += 1 * this->roleid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CTracedPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CTracedPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CTracedPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CTracedPlayerInfo::MergeFrom(const CTracedPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  roleid_.MergeFrom(from.roleid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_accountid(from.accountid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CTracedPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTracedPlayerInfo::CopyFrom(const CTracedPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTracedPlayerInfo::Swap(CTracedPlayerInfo* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    roleid_.Swap(&other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CTracedPlayerInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CTracedPlayerInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CTracedPlayerInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CTracedPlayerInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageNotifyTracedPlayer::kPlayerListFieldNumber;
#endif  // !_MSC_VER

CMessageNotifyTracedPlayer::CMessageNotifyTracedPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageNotifyTracedPlayer::InitAsDefaultInstance() {}

CMessageNotifyTracedPlayer::CMessageNotifyTracedPlayer(const CMessageNotifyTracedPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageNotifyTracedPlayer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageNotifyTracedPlayer::~CMessageNotifyTracedPlayer() {
  SharedDtor();
}

void CMessageNotifyTracedPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageNotifyTracedPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageNotifyTracedPlayer_descriptor_;
}

const CMessageNotifyTracedPlayer& CMessageNotifyTracedPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageNotifyTracedPlayer* CMessageNotifyTracedPlayer::default_instance_ = NULL;

CMessageNotifyTracedPlayer* CMessageNotifyTracedPlayer::New() const {
  return new CMessageNotifyTracedPlayer;
}

void CMessageNotifyTracedPlayer::Clear() {
  playerlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageNotifyTracedPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .CTracedPlayerInfo PlayerList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_PlayerList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_playerlist()));
        if (input->ExpectTag(10)) goto parse_PlayerList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageNotifyTracedPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageNotifyTracedPlayer::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .CTracedPlayerInfo PlayerList = 1;
  for (int i = 0; i < this->playerlist_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->playerlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageNotifyTracedPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CTracedPlayerInfo PlayerList = 1;
  for (int i = 0; i < this->playerlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->playerlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageNotifyTracedPlayer::ByteSize() const {
  int total_size = 0;
  
  // repeated .CTracedPlayerInfo PlayerList = 1;
  total_size += 1 * this->playerlist_size();
  for (int i = 0; i < this->playerlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->playerlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageNotifyTracedPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageNotifyTracedPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageNotifyTracedPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageNotifyTracedPlayer::MergeFrom(const CMessageNotifyTracedPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerlist_.MergeFrom(from.playerlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageNotifyTracedPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageNotifyTracedPlayer::CopyFrom(const CMessageNotifyTracedPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageNotifyTracedPlayer::Swap(CMessageNotifyTracedPlayer* other) {
  if (other != this) {
    playerlist_.Swap(&other->playerlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageNotifyTracedPlayer::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageNotifyTracedPlayer::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageNotifyTracedPlayer::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageNotifyTracedPlayer_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBattleCreateRequest::kBattleIDFieldNumber;
const int CMessageBattleCreateRequest::kLevelFieldNumber;
const int CMessageBattleCreateRequest::kMapIDFieldNumber;
#endif  // !_MSC_VER

CMessageBattleCreateRequest::CMessageBattleCreateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBattleCreateRequest::InitAsDefaultInstance() {}

CMessageBattleCreateRequest::CMessageBattleCreateRequest(const CMessageBattleCreateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBattleCreateRequest::SharedCtor() {
  _cached_size_ = 0;
  battleid_ = 0u;
  level_ = 0u;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBattleCreateRequest::~CMessageBattleCreateRequest() {
  SharedDtor();
}

void CMessageBattleCreateRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageBattleCreateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBattleCreateRequest_descriptor_;
}

const CMessageBattleCreateRequest& CMessageBattleCreateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageBattleCreateRequest* CMessageBattleCreateRequest::default_instance_ = NULL;

CMessageBattleCreateRequest* CMessageBattleCreateRequest::New() const {
  return new CMessageBattleCreateRequest;
}

void CMessageBattleCreateRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battleid_ = 0u;
    level_ = 0u;
    mapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBattleCreateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 BattleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &battleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBattleCreateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBattleCreateRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 BattleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->battleid(), output);
  }
  
  // optional uint32 Level = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->level(), output);
  }
  
  // optional uint32 MapID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->mapid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBattleCreateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 BattleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->battleid(), target);
  }
  
  // optional uint32 Level = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->level(), target);
  }
  
  // optional uint32 MapID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->mapid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBattleCreateRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BattleID = 1;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->battleid());
    }
    
    // optional uint32 Level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
    // optional uint32 MapID = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBattleCreateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBattleCreateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBattleCreateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBattleCreateRequest::MergeFrom(const CMessageBattleCreateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_battleid(from.battleid());
    }
    if (from._has_bit(1)) {
      set_level(from.level());
    }
    if (from._has_bit(2)) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBattleCreateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBattleCreateRequest::CopyFrom(const CMessageBattleCreateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBattleCreateRequest::Swap(CMessageBattleCreateRequest* other) {
  if (other != this) {
    std::swap(battleid_, other->battleid_);
    std::swap(level_, other->level_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBattleCreateRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBattleCreateRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBattleCreateRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBattleCreateRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBattleCreateResponse::kBattleIDFieldNumber;
const int CMessageBattleCreateResponse::kKeyFieldNumber;
const int CMessageBattleCreateResponse::kMapIDFieldNumber;
#endif  // !_MSC_VER

CMessageBattleCreateResponse::CMessageBattleCreateResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBattleCreateResponse::InitAsDefaultInstance() {}

CMessageBattleCreateResponse::CMessageBattleCreateResponse(const CMessageBattleCreateResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBattleCreateResponse::SharedCtor() {
  _cached_size_ = 0;
  battleid_ = 0u;
  key_ = GOOGLE_ULONGLONG(0);
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBattleCreateResponse::~CMessageBattleCreateResponse() {
  SharedDtor();
}

void CMessageBattleCreateResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageBattleCreateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBattleCreateResponse_descriptor_;
}

const CMessageBattleCreateResponse& CMessageBattleCreateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageBattleCreateResponse* CMessageBattleCreateResponse::default_instance_ = NULL;

CMessageBattleCreateResponse* CMessageBattleCreateResponse::New() const {
  return new CMessageBattleCreateResponse;
}

void CMessageBattleCreateResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battleid_ = 0u;
    key_ = GOOGLE_ULONGLONG(0);
    mapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBattleCreateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 BattleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &battleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Key;
        break;
      }
      
      // optional uint64 Key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Key:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &key_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBattleCreateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBattleCreateResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 BattleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->battleid(), output);
  }
  
  // optional uint64 Key = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(2, this->key(), output);
  }
  
  // optional uint32 MapID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->mapid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBattleCreateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 BattleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->battleid(), target);
  }
  
  // optional uint64 Key = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(2, this->key(), target);
  }
  
  // optional uint32 MapID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->mapid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBattleCreateResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BattleID = 1;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->battleid());
    }
    
    // optional uint64 Key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->key());
    }
    
    // optional uint32 MapID = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBattleCreateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBattleCreateResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBattleCreateResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBattleCreateResponse::MergeFrom(const CMessageBattleCreateResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_battleid(from.battleid());
    }
    if (from._has_bit(1)) {
      set_key(from.key());
    }
    if (from._has_bit(2)) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBattleCreateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBattleCreateResponse::CopyFrom(const CMessageBattleCreateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBattleCreateResponse::Swap(CMessageBattleCreateResponse* other) {
  if (other != this) {
    std::swap(battleid_, other->battleid_);
    std::swap(key_, other->key_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBattleCreateResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBattleCreateResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBattleCreateResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBattleCreateResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageFamilyIDNameNotify::kFamilyIDFieldNumber;
const int CMessageFamilyIDNameNotify::kFamilyNameFieldNumber;
#endif  // !_MSC_VER

CMessageFamilyIDNameNotify::CMessageFamilyIDNameNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFamilyIDNameNotify::InitAsDefaultInstance() {}

CMessageFamilyIDNameNotify::CMessageFamilyIDNameNotify(const CMessageFamilyIDNameNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFamilyIDNameNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFamilyIDNameNotify::~CMessageFamilyIDNameNotify() {
  SharedDtor();
}

void CMessageFamilyIDNameNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageFamilyIDNameNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFamilyIDNameNotify_descriptor_;
}

const CMessageFamilyIDNameNotify& CMessageFamilyIDNameNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFamilyIDNameNotify* CMessageFamilyIDNameNotify::default_instance_ = NULL;

CMessageFamilyIDNameNotify* CMessageFamilyIDNameNotify::New() const {
  return new CMessageFamilyIDNameNotify;
}

void CMessageFamilyIDNameNotify::Clear() {
  familyid_.Clear();
  familyname_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFamilyIDNameNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated uint32 FamilyID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_familyid(value);
        if (input->ExpectTag(8)) goto parse_FamilyID;
        if (input->ExpectTag(18)) goto parse_FamilyName;
        break;
      }
      
      // repeated string FamilyName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FamilyName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(
             input, add_familyname()));
        if (input->ExpectTag(18)) goto parse_FamilyName;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageFamilyIDNameNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFamilyIDNameNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated uint32 FamilyID = 1;
  for (int i = 0; i < this->familyid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->familyid(i), output);
  }
  
  // repeated string FamilyName = 2;
  for (int i = 0; i < this->familyname_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->familyname(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFamilyIDNameNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 FamilyID = 1;
  for (int i = 0; i < this->familyid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->familyid(i), target);
  }
  
  // repeated string FamilyName = 2;
  for (int i = 0; i < this->familyname_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->familyname(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFamilyIDNameNotify::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 FamilyID = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->familyid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->familyid(i));
    }
    total_size += 1 * this->familyid_size() + data_size;
  }
  
  // repeated string FamilyName = 2;
  total_size += 1 * this->familyname_size();
  for (int i = 0; i < this->familyname_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormat::StringSize(
      this->familyname(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFamilyIDNameNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFamilyIDNameNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFamilyIDNameNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFamilyIDNameNotify::MergeFrom(const CMessageFamilyIDNameNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  familyid_.MergeFrom(from.familyid_);
  familyname_.MergeFrom(from.familyname_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFamilyIDNameNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFamilyIDNameNotify::CopyFrom(const CMessageFamilyIDNameNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFamilyIDNameNotify::Swap(CMessageFamilyIDNameNotify* other) {
  if (other != this) {
    familyid_.Swap(&other->familyid_);
    familyname_.Swap(&other->familyname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFamilyIDNameNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFamilyIDNameNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFamilyIDNameNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFamilyIDNameNotify_reflection_;
}

// ===================================================================

const ::std::string PBCorpsNpc::_default_corpsname_;
#ifndef _MSC_VER
const int PBCorpsNpc::kNpcIDFieldNumber;
const int PBCorpsNpc::kCorpsIDFieldNumber;
const int PBCorpsNpc::kCorpsNameFieldNumber;
const int PBCorpsNpc::kTypeFieldNumber;
#endif  // !_MSC_VER

PBCorpsNpc::PBCorpsNpc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCorpsNpc::InitAsDefaultInstance() {}

PBCorpsNpc::PBCorpsNpc(const PBCorpsNpc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCorpsNpc::SharedCtor() {
  _cached_size_ = 0;
  npcid_ = 0u;
  corpsid_ = 0u;
  corpsname_ = const_cast< ::std::string*>(&_default_corpsname_);
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCorpsNpc::~PBCorpsNpc() {
  SharedDtor();
}

void PBCorpsNpc::SharedDtor() {
  if (corpsname_ != &_default_corpsname_) {
    delete corpsname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBCorpsNpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCorpsNpc_descriptor_;
}

const PBCorpsNpc& PBCorpsNpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

PBCorpsNpc* PBCorpsNpc::default_instance_ = NULL;

PBCorpsNpc* PBCorpsNpc::New() const {
  return new PBCorpsNpc;
}

void PBCorpsNpc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npcid_ = 0u;
    corpsid_ = 0u;
    if (_has_bit(2)) {
      if (corpsname_ != &_default_corpsname_) {
        corpsname_->clear();
      }
    }
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCorpsNpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 NpcID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CorpsID;
        break;
      }
      
      // optional uint32 CorpsID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_CorpsName;
        break;
      }
      
      // optional string CorpsName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_corpsname()));
        if (input->ExpectTag(32)) goto parse_Type;
        break;
      }
      
      // optional uint32 Type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Type:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCorpsNpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBCorpsNpc::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 NpcID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->npcid(), output);
  }
  
  // optional uint32 CorpsID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->corpsid(), output);
  }
  
  // optional string CorpsName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->corpsname(), output);
  }
  
  // optional uint32 Type = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCorpsNpc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 NpcID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->npcid(), target);
  }
  
  // optional uint32 CorpsID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->corpsid(), target);
  }
  
  // optional string CorpsName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->corpsname(), target);
  }
  
  // optional uint32 Type = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCorpsNpc::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 NpcID = 1;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
    // optional uint32 CorpsID = 2;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
    // optional string CorpsName = 3;
    if (has_corpsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->corpsname());
    }
    
    // optional uint32 Type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBCorpsNpc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCorpsNpc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCorpsNpc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCorpsNpc::MergeFrom(const PBCorpsNpc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_npcid(from.npcid());
    }
    if (from._has_bit(1)) {
      set_corpsid(from.corpsid());
    }
    if (from._has_bit(2)) {
      set_corpsname(from.corpsname());
    }
    if (from._has_bit(3)) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCorpsNpc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCorpsNpc::CopyFrom(const PBCorpsNpc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCorpsNpc::Swap(PBCorpsNpc* other) {
  if (other != this) {
    std::swap(npcid_, other->npcid_);
    std::swap(corpsid_, other->corpsid_);
    std::swap(corpsname_, other->corpsname_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBCorpsNpc::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBCorpsNpc::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBCorpsNpc::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBCorpsNpc_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageNpcListNotify::kNpcIDFieldNumber;
const int CMessageNpcListNotify::kFamilyIDFieldNumber;
const int CMessageNpcListNotify::kTypeFieldNumber;
const int CMessageNpcListNotify::kCorpsNpcFieldNumber;
#endif  // !_MSC_VER

CMessageNpcListNotify::CMessageNpcListNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageNpcListNotify::InitAsDefaultInstance() {}

CMessageNpcListNotify::CMessageNpcListNotify(const CMessageNpcListNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageNpcListNotify::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageNpcListNotify::~CMessageNpcListNotify() {
  SharedDtor();
}

void CMessageNpcListNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageNpcListNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageNpcListNotify_descriptor_;
}

const CMessageNpcListNotify& CMessageNpcListNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageNpcListNotify* CMessageNpcListNotify::default_instance_ = NULL;

CMessageNpcListNotify* CMessageNpcListNotify::New() const {
  return new CMessageNpcListNotify;
}

void CMessageNpcListNotify::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    type_ = 0u;
  }
  npcid_.Clear();
  familyid_.Clear();
  corpsnpc_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageNpcListNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated uint32 NpcID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_npcid(value);
        if (input->ExpectTag(8)) goto parse_NpcID;
        if (input->ExpectTag(16)) goto parse_FamilyID;
        break;
      }
      
      // repeated uint32 FamilyID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_familyid(value);
        if (input->ExpectTag(16)) goto parse_FamilyID;
        if (input->ExpectTag(24)) goto parse_Type;
        break;
      }
      
      // optional uint32 Type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Type:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_CorpsNpc;
        break;
      }
      
      // repeated .PBCorpsNpc CorpsNpc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsNpc:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_corpsnpc()));
        if (input->ExpectTag(34)) goto parse_CorpsNpc;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageNpcListNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageNpcListNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated uint32 NpcID = 1;
  for (int i = 0; i < this->npcid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->npcid(i), output);
  }
  
  // repeated uint32 FamilyID = 2;
  for (int i = 0; i < this->familyid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->familyid(i), output);
  }
  
  // optional uint32 Type = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->type(), output);
  }
  
  // repeated .PBCorpsNpc CorpsNpc = 4;
  for (int i = 0; i < this->corpsnpc_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->corpsnpc(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageNpcListNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 NpcID = 1;
  for (int i = 0; i < this->npcid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->npcid(i), target);
  }
  
  // repeated uint32 FamilyID = 2;
  for (int i = 0; i < this->familyid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->familyid(i), target);
  }
  
  // optional uint32 Type = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->type(), target);
  }
  
  // repeated .PBCorpsNpc CorpsNpc = 4;
  for (int i = 0; i < this->corpsnpc_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(4, this->corpsnpc(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageNpcListNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 Type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
  }
  // repeated uint32 NpcID = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->npcid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->npcid(i));
    }
    total_size += 1 * this->npcid_size() + data_size;
  }
  
  // repeated uint32 FamilyID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->familyid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->familyid(i));
    }
    total_size += 1 * this->familyid_size() + data_size;
  }
  
  // repeated .PBCorpsNpc CorpsNpc = 4;
  total_size += 1 * this->corpsnpc_size();
  for (int i = 0; i < this->corpsnpc_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->corpsnpc(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageNpcListNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageNpcListNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageNpcListNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageNpcListNotify::MergeFrom(const CMessageNpcListNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  npcid_.MergeFrom(from.npcid_);
  familyid_.MergeFrom(from.familyid_);
  corpsnpc_.MergeFrom(from.corpsnpc_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from._has_bit(2)) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageNpcListNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageNpcListNotify::CopyFrom(const CMessageNpcListNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageNpcListNotify::Swap(CMessageNpcListNotify* other) {
  if (other != this) {
    npcid_.Swap(&other->npcid_);
    familyid_.Swap(&other->familyid_);
    std::swap(type_, other->type_);
    corpsnpc_.Swap(&other->corpsnpc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageNpcListNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageNpcListNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageNpcListNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageNpcListNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBidTimeOutNotify::kNpcIDFieldNumber;
const int CMessageBidTimeOutNotify::kFirstFieldNumber;
#endif  // !_MSC_VER

CMessageBidTimeOutNotify::CMessageBidTimeOutNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBidTimeOutNotify::InitAsDefaultInstance() {}

CMessageBidTimeOutNotify::CMessageBidTimeOutNotify(const CMessageBidTimeOutNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBidTimeOutNotify::SharedCtor() {
  _cached_size_ = 0;
  npcid_ = 0u;
  first_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBidTimeOutNotify::~CMessageBidTimeOutNotify() {
  SharedDtor();
}

void CMessageBidTimeOutNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageBidTimeOutNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBidTimeOutNotify_descriptor_;
}

const CMessageBidTimeOutNotify& CMessageBidTimeOutNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageBidTimeOutNotify* CMessageBidTimeOutNotify::default_instance_ = NULL;

CMessageBidTimeOutNotify* CMessageBidTimeOutNotify::New() const {
  return new CMessageBidTimeOutNotify;
}

void CMessageBidTimeOutNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npcid_ = 0u;
    first_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBidTimeOutNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 NpcID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_First;
        break;
      }
      
      // optional uint32 First = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_First:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &first_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBidTimeOutNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBidTimeOutNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 NpcID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->npcid(), output);
  }
  
  // optional uint32 First = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->first(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBidTimeOutNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 NpcID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->npcid(), target);
  }
  
  // optional uint32 First = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->first(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBidTimeOutNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 NpcID = 1;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
    // optional uint32 First = 2;
    if (has_first()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->first());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBidTimeOutNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBidTimeOutNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBidTimeOutNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBidTimeOutNotify::MergeFrom(const CMessageBidTimeOutNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_npcid(from.npcid());
    }
    if (from._has_bit(1)) {
      set_first(from.first());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBidTimeOutNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBidTimeOutNotify::CopyFrom(const CMessageBidTimeOutNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBidTimeOutNotify::Swap(CMessageBidTimeOutNotify* other) {
  if (other != this) {
    std::swap(npcid_, other->npcid_);
    std::swap(first_, other->first_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBidTimeOutNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBidTimeOutNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBidTimeOutNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBidTimeOutNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBattleStartRequest::kNpcIDFieldNumber;
#endif  // !_MSC_VER

CMessageBattleStartRequest::CMessageBattleStartRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBattleStartRequest::InitAsDefaultInstance() {}

CMessageBattleStartRequest::CMessageBattleStartRequest(const CMessageBattleStartRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBattleStartRequest::SharedCtor() {
  _cached_size_ = 0;
  npcid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBattleStartRequest::~CMessageBattleStartRequest() {
  SharedDtor();
}

void CMessageBattleStartRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageBattleStartRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBattleStartRequest_descriptor_;
}

const CMessageBattleStartRequest& CMessageBattleStartRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageBattleStartRequest* CMessageBattleStartRequest::default_instance_ = NULL;

CMessageBattleStartRequest* CMessageBattleStartRequest::New() const {
  return new CMessageBattleStartRequest;
}

void CMessageBattleStartRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npcid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBattleStartRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 NpcID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBattleStartRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBattleStartRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 NpcID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->npcid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBattleStartRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 NpcID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->npcid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBattleStartRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 NpcID = 1;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBattleStartRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBattleStartRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBattleStartRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBattleStartRequest::MergeFrom(const CMessageBattleStartRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_npcid(from.npcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBattleStartRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBattleStartRequest::CopyFrom(const CMessageBattleStartRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBattleStartRequest::Swap(CMessageBattleStartRequest* other) {
  if (other != this) {
    std::swap(npcid_, other->npcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBattleStartRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBattleStartRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBattleStartRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBattleStartRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBattleStartResponse::kNpcIDFieldNumber;
const int CMessageBattleStartResponse::kCharIDFieldNumber;
const int CMessageBattleStartResponse::kCharNameFieldNumber;
const int CMessageBattleStartResponse::kMoneyFieldNumber;
#endif  // !_MSC_VER

CMessageBattleStartResponse::CMessageBattleStartResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBattleStartResponse::InitAsDefaultInstance() {}

CMessageBattleStartResponse::CMessageBattleStartResponse(const CMessageBattleStartResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBattleStartResponse::SharedCtor() {
  _cached_size_ = 0;
  npcid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBattleStartResponse::~CMessageBattleStartResponse() {
  SharedDtor();
}

void CMessageBattleStartResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageBattleStartResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBattleStartResponse_descriptor_;
}

const CMessageBattleStartResponse& CMessageBattleStartResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageBattleStartResponse* CMessageBattleStartResponse::default_instance_ = NULL;

CMessageBattleStartResponse* CMessageBattleStartResponse::New() const {
  return new CMessageBattleStartResponse;
}

void CMessageBattleStartResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npcid_ = 0u;
  }
  charid_.Clear();
  charname_.Clear();
  money_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBattleStartResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 NpcID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CharID;
        break;
      }
      
      // repeated uint32 CharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_charid(value);
        if (input->ExpectTag(16)) goto parse_CharID;
        if (input->ExpectTag(26)) goto parse_CharName;
        break;
      }
      
      // repeated string CharName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CharName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(
             input, add_charname()));
        if (input->ExpectTag(26)) goto parse_CharName;
        if (input->ExpectTag(32)) goto parse_Money;
        break;
      }
      
      // repeated uint32 Money = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_money(value);
        if (input->ExpectTag(32)) goto parse_Money;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBattleStartResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBattleStartResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 NpcID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->npcid(), output);
  }
  
  // repeated uint32 CharID = 2;
  for (int i = 0; i < this->charid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charid(i), output);
  }
  
  // repeated string CharName = 3;
  for (int i = 0; i < this->charname_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->charname(i), output);
  }
  
  // repeated uint32 Money = 4;
  for (int i = 0; i < this->money_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->money(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBattleStartResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 NpcID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->npcid(), target);
  }
  
  // repeated uint32 CharID = 2;
  for (int i = 0; i < this->charid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charid(i), target);
  }
  
  // repeated string CharName = 3;
  for (int i = 0; i < this->charname_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->charname(i), target);
  }
  
  // repeated uint32 Money = 4;
  for (int i = 0; i < this->money_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->money(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBattleStartResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 NpcID = 1;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
  }
  // repeated uint32 CharID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->charid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->charid(i));
    }
    total_size += 1 * this->charid_size() + data_size;
  }
  
  // repeated string CharName = 3;
  total_size += 1 * this->charname_size();
  for (int i = 0; i < this->charname_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormat::StringSize(
      this->charname(i));
  }
  
  // repeated uint32 Money = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->money_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->money(i));
    }
    total_size += 1 * this->money_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBattleStartResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBattleStartResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBattleStartResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBattleStartResponse::MergeFrom(const CMessageBattleStartResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  charid_.MergeFrom(from.charid_);
  charname_.MergeFrom(from.charname_);
  money_.MergeFrom(from.money_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_npcid(from.npcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBattleStartResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBattleStartResponse::CopyFrom(const CMessageBattleStartResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBattleStartResponse::Swap(CMessageBattleStartResponse* other) {
  if (other != this) {
    std::swap(npcid_, other->npcid_);
    charid_.Swap(&other->charid_);
    charname_.Swap(&other->charname_);
    money_.Swap(&other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBattleStartResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBattleStartResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBattleStartResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBattleStartResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBattleEndNotify::kKeyFieldNumber;
const int CMessageBattleEndNotify::kWinSideFieldNumber;
#endif  // !_MSC_VER

CMessageBattleEndNotify::CMessageBattleEndNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBattleEndNotify::InitAsDefaultInstance() {}

CMessageBattleEndNotify::CMessageBattleEndNotify(const CMessageBattleEndNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBattleEndNotify::SharedCtor() {
  _cached_size_ = 0;
  key_ = GOOGLE_ULONGLONG(0);
  winside_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBattleEndNotify::~CMessageBattleEndNotify() {
  SharedDtor();
}

void CMessageBattleEndNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageBattleEndNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBattleEndNotify_descriptor_;
}

const CMessageBattleEndNotify& CMessageBattleEndNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageBattleEndNotify* CMessageBattleEndNotify::default_instance_ = NULL;

CMessageBattleEndNotify* CMessageBattleEndNotify::New() const {
  return new CMessageBattleEndNotify;
}

void CMessageBattleEndNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = GOOGLE_ULONGLONG(0);
    winside_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBattleEndNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint64 Key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &key_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_WinSide;
        break;
      }
      
      // optional uint32 WinSide = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WinSide:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &winside_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBattleEndNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBattleEndNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint64 Key = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(1, this->key(), output);
  }
  
  // optional uint32 WinSide = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->winside(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBattleEndNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 Key = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(1, this->key(), target);
  }
  
  // optional uint32 WinSide = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->winside(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBattleEndNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->key());
    }
    
    // optional uint32 WinSide = 2;
    if (has_winside()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->winside());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBattleEndNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBattleEndNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBattleEndNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBattleEndNotify::MergeFrom(const CMessageBattleEndNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_key(from.key());
    }
    if (from._has_bit(1)) {
      set_winside(from.winside());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBattleEndNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBattleEndNotify::CopyFrom(const CMessageBattleEndNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBattleEndNotify::Swap(CMessageBattleEndNotify* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(winside_, other->winside_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBattleEndNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBattleEndNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBattleEndNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBattleEndNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBidRestartNotify::kNpcIDFieldNumber;
#endif  // !_MSC_VER

CMessageBidRestartNotify::CMessageBidRestartNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBidRestartNotify::InitAsDefaultInstance() {}

CMessageBidRestartNotify::CMessageBidRestartNotify(const CMessageBidRestartNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBidRestartNotify::SharedCtor() {
  _cached_size_ = 0;
  npcid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBidRestartNotify::~CMessageBidRestartNotify() {
  SharedDtor();
}

void CMessageBidRestartNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageBidRestartNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBidRestartNotify_descriptor_;
}

const CMessageBidRestartNotify& CMessageBidRestartNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageBidRestartNotify* CMessageBidRestartNotify::default_instance_ = NULL;

CMessageBidRestartNotify* CMessageBidRestartNotify::New() const {
  return new CMessageBidRestartNotify;
}

void CMessageBidRestartNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npcid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBidRestartNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 NpcID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBidRestartNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBidRestartNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 NpcID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->npcid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBidRestartNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 NpcID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->npcid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBidRestartNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 NpcID = 1;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBidRestartNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBidRestartNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBidRestartNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBidRestartNotify::MergeFrom(const CMessageBidRestartNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_npcid(from.npcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBidRestartNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBidRestartNotify::CopyFrom(const CMessageBidRestartNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBidRestartNotify::Swap(CMessageBidRestartNotify* other) {
  if (other != this) {
    std::swap(npcid_, other->npcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBidRestartNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBidRestartNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBidRestartNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBidRestartNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageObtainTopTenRequest::kCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageObtainTopTenRequest::CMessageObtainTopTenRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageObtainTopTenRequest::InitAsDefaultInstance() {}

CMessageObtainTopTenRequest::CMessageObtainTopTenRequest(const CMessageObtainTopTenRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageObtainTopTenRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageObtainTopTenRequest::~CMessageObtainTopTenRequest() {
  SharedDtor();
}

void CMessageObtainTopTenRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageObtainTopTenRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageObtainTopTenRequest_descriptor_;
}

const CMessageObtainTopTenRequest& CMessageObtainTopTenRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageObtainTopTenRequest* CMessageObtainTopTenRequest::default_instance_ = NULL;

CMessageObtainTopTenRequest* CMessageObtainTopTenRequest::New() const {
  return new CMessageObtainTopTenRequest;
}

void CMessageObtainTopTenRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageObtainTopTenRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageObtainTopTenRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageObtainTopTenRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageObtainTopTenRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageObtainTopTenRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageObtainTopTenRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageObtainTopTenRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageObtainTopTenRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageObtainTopTenRequest::MergeFrom(const CMessageObtainTopTenRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageObtainTopTenRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageObtainTopTenRequest::CopyFrom(const CMessageObtainTopTenRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageObtainTopTenRequest::Swap(CMessageObtainTopTenRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageObtainTopTenRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageObtainTopTenRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageObtainTopTenRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageObtainTopTenRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBRankTitle::kIndexFieldNumber;
const int PBRankTitle::kRankTypeFieldNumber;
#endif  // !_MSC_VER

PBRankTitle::PBRankTitle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBRankTitle::InitAsDefaultInstance() {}

PBRankTitle::PBRankTitle(const PBRankTitle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBRankTitle::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  ranktype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBRankTitle::~PBRankTitle() {
  SharedDtor();
}

void PBRankTitle::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBRankTitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBRankTitle_descriptor_;
}

const PBRankTitle& PBRankTitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

PBRankTitle* PBRankTitle::default_instance_ = NULL;

PBRankTitle* PBRankTitle::New() const {
  return new PBRankTitle;
}

void PBRankTitle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    ranktype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBRankTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &index_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_RankType;
        break;
      }
      
      // optional uint32 RankType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RankType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ranktype_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBRankTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBRankTitle::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Index = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->index(), output);
  }
  
  // optional uint32 RankType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->ranktype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBRankTitle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Index = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->index(), target);
  }
  
  // optional uint32 RankType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->ranktype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBRankTitle::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->index());
    }
    
    // optional uint32 RankType = 2;
    if (has_ranktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ranktype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBRankTitle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBRankTitle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBRankTitle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBRankTitle::MergeFrom(const PBRankTitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_index(from.index());
    }
    if (from._has_bit(1)) {
      set_ranktype(from.ranktype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBRankTitle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRankTitle::CopyFrom(const PBRankTitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRankTitle::Swap(PBRankTitle* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(ranktype_, other->ranktype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBRankTitle::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBRankTitle::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBRankTitle::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBRankTitle_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageObtainTopTenResponse::kCharIDFieldNumber;
const int CMessageObtainTopTenResponse::kRankTitleFieldNumber;
#endif  // !_MSC_VER

CMessageObtainTopTenResponse::CMessageObtainTopTenResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageObtainTopTenResponse::InitAsDefaultInstance() {}

CMessageObtainTopTenResponse::CMessageObtainTopTenResponse(const CMessageObtainTopTenResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageObtainTopTenResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageObtainTopTenResponse::~CMessageObtainTopTenResponse() {
  SharedDtor();
}

void CMessageObtainTopTenResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageObtainTopTenResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageObtainTopTenResponse_descriptor_;
}

const CMessageObtainTopTenResponse& CMessageObtainTopTenResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageObtainTopTenResponse* CMessageObtainTopTenResponse::default_instance_ = NULL;

CMessageObtainTopTenResponse* CMessageObtainTopTenResponse::New() const {
  return new CMessageObtainTopTenResponse;
}

void CMessageObtainTopTenResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ranktitle_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageObtainTopTenResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_RankTitle;
        break;
      }
      
      // repeated .PBRankTitle RankTitle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RankTitle:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_ranktitle()));
        if (input->ExpectTag(18)) goto parse_RankTitle;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageObtainTopTenResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageObtainTopTenResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // repeated .PBRankTitle RankTitle = 2;
  for (int i = 0; i < this->ranktitle_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->ranktitle(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageObtainTopTenResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // repeated .PBRankTitle RankTitle = 2;
  for (int i = 0; i < this->ranktitle_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->ranktitle(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageObtainTopTenResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  // repeated .PBRankTitle RankTitle = 2;
  total_size += 1 * this->ranktitle_size();
  for (int i = 0; i < this->ranktitle_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->ranktitle(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageObtainTopTenResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageObtainTopTenResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageObtainTopTenResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageObtainTopTenResponse::MergeFrom(const CMessageObtainTopTenResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  ranktitle_.MergeFrom(from.ranktitle_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageObtainTopTenResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageObtainTopTenResponse::CopyFrom(const CMessageObtainTopTenResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageObtainTopTenResponse::Swap(CMessageObtainTopTenResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    ranktitle_.Swap(&other->ranktitle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageObtainTopTenResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageObtainTopTenResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageObtainTopTenResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageObtainTopTenResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCorpsBidTimerStopRequest::kNpcIDFieldNumber;
const int CMessageCorpsBidTimerStopRequest::kBattleIdFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsBidTimerStopRequest::CMessageCorpsBidTimerStopRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsBidTimerStopRequest::InitAsDefaultInstance() {}

CMessageCorpsBidTimerStopRequest::CMessageCorpsBidTimerStopRequest(const CMessageCorpsBidTimerStopRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsBidTimerStopRequest::SharedCtor() {
  _cached_size_ = 0;
  npcid_ = 0u;
  battleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsBidTimerStopRequest::~CMessageCorpsBidTimerStopRequest() {
  SharedDtor();
}

void CMessageCorpsBidTimerStopRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsBidTimerStopRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsBidTimerStopRequest_descriptor_;
}

const CMessageCorpsBidTimerStopRequest& CMessageCorpsBidTimerStopRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsBidTimerStopRequest* CMessageCorpsBidTimerStopRequest::default_instance_ = NULL;

CMessageCorpsBidTimerStopRequest* CMessageCorpsBidTimerStopRequest::New() const {
  return new CMessageCorpsBidTimerStopRequest;
}

void CMessageCorpsBidTimerStopRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npcid_ = 0u;
    battleid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsBidTimerStopRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 NpcID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_BattleId;
        break;
      }
      
      // optional uint32 BattleId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BattleId:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &battleid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsBidTimerStopRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsBidTimerStopRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 NpcID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->npcid(), output);
  }
  
  // optional uint32 BattleId = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->battleid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsBidTimerStopRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 NpcID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->npcid(), target);
  }
  
  // optional uint32 BattleId = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->battleid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsBidTimerStopRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 NpcID = 1;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
    // optional uint32 BattleId = 2;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->battleid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsBidTimerStopRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsBidTimerStopRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsBidTimerStopRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsBidTimerStopRequest::MergeFrom(const CMessageCorpsBidTimerStopRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_npcid(from.npcid());
    }
    if (from._has_bit(1)) {
      set_battleid(from.battleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsBidTimerStopRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsBidTimerStopRequest::CopyFrom(const CMessageCorpsBidTimerStopRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsBidTimerStopRequest::Swap(CMessageCorpsBidTimerStopRequest* other) {
  if (other != this) {
    std::swap(npcid_, other->npcid_);
    std::swap(battleid_, other->battleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsBidTimerStopRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsBidTimerStopRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsBidTimerStopRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsBidTimerStopRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCorpsJoinBattleNotice::kCharIDFieldNumber;
const int CMessageCorpsJoinBattleNotice::kNpcIDFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsJoinBattleNotice::CMessageCorpsJoinBattleNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsJoinBattleNotice::InitAsDefaultInstance() {}

CMessageCorpsJoinBattleNotice::CMessageCorpsJoinBattleNotice(const CMessageCorpsJoinBattleNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsJoinBattleNotice::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  npcid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsJoinBattleNotice::~CMessageCorpsJoinBattleNotice() {
  SharedDtor();
}

void CMessageCorpsJoinBattleNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsJoinBattleNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsJoinBattleNotice_descriptor_;
}

const CMessageCorpsJoinBattleNotice& CMessageCorpsJoinBattleNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsJoinBattleNotice* CMessageCorpsJoinBattleNotice::default_instance_ = NULL;

CMessageCorpsJoinBattleNotice* CMessageCorpsJoinBattleNotice::New() const {
  return new CMessageCorpsJoinBattleNotice;
}

void CMessageCorpsJoinBattleNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    npcid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsJoinBattleNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_NpcID;
        break;
      }
      
      // optional uint32 NpcID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsJoinBattleNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsJoinBattleNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 NpcID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->npcid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsJoinBattleNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 NpcID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->npcid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsJoinBattleNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 NpcID = 2;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsJoinBattleNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsJoinBattleNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsJoinBattleNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsJoinBattleNotice::MergeFrom(const CMessageCorpsJoinBattleNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_npcid(from.npcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsJoinBattleNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsJoinBattleNotice::CopyFrom(const CMessageCorpsJoinBattleNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsJoinBattleNotice::Swap(CMessageCorpsJoinBattleNotice* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(npcid_, other->npcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsJoinBattleNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsJoinBattleNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsJoinBattleNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsJoinBattleNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageNotifyBattleResult2Gate::kBattleIDFieldNumber;
const int CMessageNotifyBattleResult2Gate::kWinCampFieldNumber;
const int CMessageNotifyBattleResult2Gate::kBattleKeyFieldNumber;
#endif  // !_MSC_VER

CMessageNotifyBattleResult2Gate::CMessageNotifyBattleResult2Gate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageNotifyBattleResult2Gate::InitAsDefaultInstance() {}

CMessageNotifyBattleResult2Gate::CMessageNotifyBattleResult2Gate(const CMessageNotifyBattleResult2Gate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageNotifyBattleResult2Gate::SharedCtor() {
  _cached_size_ = 0;
  battleid_ = 0u;
  wincamp_ = 0u;
  battlekey_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageNotifyBattleResult2Gate::~CMessageNotifyBattleResult2Gate() {
  SharedDtor();
}

void CMessageNotifyBattleResult2Gate::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageNotifyBattleResult2Gate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageNotifyBattleResult2Gate_descriptor_;
}

const CMessageNotifyBattleResult2Gate& CMessageNotifyBattleResult2Gate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageNotifyBattleResult2Gate* CMessageNotifyBattleResult2Gate::default_instance_ = NULL;

CMessageNotifyBattleResult2Gate* CMessageNotifyBattleResult2Gate::New() const {
  return new CMessageNotifyBattleResult2Gate;
}

void CMessageNotifyBattleResult2Gate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battleid_ = 0u;
    wincamp_ = 0u;
    battlekey_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageNotifyBattleResult2Gate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 BattleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &battleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_WinCamp;
        break;
      }
      
      // optional uint32 WinCamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WinCamp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &wincamp_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_BattleKey;
        break;
      }
      
      // optional uint64 BattleKey = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BattleKey:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &battlekey_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageNotifyBattleResult2Gate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageNotifyBattleResult2Gate::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 BattleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->battleid(), output);
  }
  
  // optional uint32 WinCamp = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->wincamp(), output);
  }
  
  // optional uint64 BattleKey = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(3, this->battlekey(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageNotifyBattleResult2Gate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 BattleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->battleid(), target);
  }
  
  // optional uint32 WinCamp = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->wincamp(), target);
  }
  
  // optional uint64 BattleKey = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(3, this->battlekey(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageNotifyBattleResult2Gate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BattleID = 1;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->battleid());
    }
    
    // optional uint32 WinCamp = 2;
    if (has_wincamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->wincamp());
    }
    
    // optional uint64 BattleKey = 3;
    if (has_battlekey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->battlekey());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageNotifyBattleResult2Gate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageNotifyBattleResult2Gate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageNotifyBattleResult2Gate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageNotifyBattleResult2Gate::MergeFrom(const CMessageNotifyBattleResult2Gate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_battleid(from.battleid());
    }
    if (from._has_bit(1)) {
      set_wincamp(from.wincamp());
    }
    if (from._has_bit(2)) {
      set_battlekey(from.battlekey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageNotifyBattleResult2Gate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageNotifyBattleResult2Gate::CopyFrom(const CMessageNotifyBattleResult2Gate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageNotifyBattleResult2Gate::Swap(CMessageNotifyBattleResult2Gate* other) {
  if (other != this) {
    std::swap(battleid_, other->battleid_);
    std::swap(wincamp_, other->wincamp_);
    std::swap(battlekey_, other->battlekey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageNotifyBattleResult2Gate::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageNotifyBattleResult2Gate::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageNotifyBattleResult2Gate::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageNotifyBattleResult2Gate_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCorpsBattleFlagRequest::kCharIDFieldNumber;
const int CMessageCorpsBattleFlagRequest::kCorpsIDFieldNumber;
const int CMessageCorpsBattleFlagRequest::kCampIDFieldNumber;
const int CMessageCorpsBattleFlagRequest::kBattleIDFieldNumber;
const int CMessageCorpsBattleFlagRequest::kIsAllFieldNumber;
const int CMessageCorpsBattleFlagRequest::kBattleKeyFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsBattleFlagRequest::CMessageCorpsBattleFlagRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsBattleFlagRequest::InitAsDefaultInstance() {}

CMessageCorpsBattleFlagRequest::CMessageCorpsBattleFlagRequest(const CMessageCorpsBattleFlagRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsBattleFlagRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  corpsid_ = 0u;
  campid_ = 0u;
  battleid_ = 0u;
  isall_ = 0u;
  battlekey_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsBattleFlagRequest::~CMessageCorpsBattleFlagRequest() {
  SharedDtor();
}

void CMessageCorpsBattleFlagRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsBattleFlagRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsBattleFlagRequest_descriptor_;
}

const CMessageCorpsBattleFlagRequest& CMessageCorpsBattleFlagRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsBattleFlagRequest* CMessageCorpsBattleFlagRequest::default_instance_ = NULL;

CMessageCorpsBattleFlagRequest* CMessageCorpsBattleFlagRequest::New() const {
  return new CMessageCorpsBattleFlagRequest;
}

void CMessageCorpsBattleFlagRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    corpsid_ = 0u;
    campid_ = 0u;
    battleid_ = 0u;
    isall_ = 0u;
    battlekey_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsBattleFlagRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CorpsID;
        break;
      }
      
      // optional uint32 CorpsID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_CampID;
        break;
      }
      
      // optional uint32 CampID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CampID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &campid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_BattleID;
        break;
      }
      
      // optional uint32 BattleID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BattleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &battleid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_IsAll;
        break;
      }
      
      // optional uint32 IsAll = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IsAll:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &isall_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_BattleKey;
        break;
      }
      
      // optional uint64 BattleKey = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BattleKey:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &battlekey_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsBattleFlagRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsBattleFlagRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 CorpsID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->corpsid(), output);
  }
  
  // optional uint32 CampID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->campid(), output);
  }
  
  // optional uint32 BattleID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->battleid(), output);
  }
  
  // optional uint32 IsAll = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->isall(), output);
  }
  
  // optional uint64 BattleKey = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(6, this->battlekey(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsBattleFlagRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 CorpsID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->corpsid(), target);
  }
  
  // optional uint32 CampID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->campid(), target);
  }
  
  // optional uint32 BattleID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->battleid(), target);
  }
  
  // optional uint32 IsAll = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->isall(), target);
  }
  
  // optional uint64 BattleKey = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(6, this->battlekey(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsBattleFlagRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 CorpsID = 2;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
    // optional uint32 CampID = 3;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->campid());
    }
    
    // optional uint32 BattleID = 4;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->battleid());
    }
    
    // optional uint32 IsAll = 5;
    if (has_isall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->isall());
    }
    
    // optional uint64 BattleKey = 6;
    if (has_battlekey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->battlekey());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsBattleFlagRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsBattleFlagRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsBattleFlagRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsBattleFlagRequest::MergeFrom(const CMessageCorpsBattleFlagRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_corpsid(from.corpsid());
    }
    if (from._has_bit(2)) {
      set_campid(from.campid());
    }
    if (from._has_bit(3)) {
      set_battleid(from.battleid());
    }
    if (from._has_bit(4)) {
      set_isall(from.isall());
    }
    if (from._has_bit(5)) {
      set_battlekey(from.battlekey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsBattleFlagRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsBattleFlagRequest::CopyFrom(const CMessageCorpsBattleFlagRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsBattleFlagRequest::Swap(CMessageCorpsBattleFlagRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(corpsid_, other->corpsid_);
    std::swap(campid_, other->campid_);
    std::swap(battleid_, other->battleid_);
    std::swap(isall_, other->isall_);
    std::swap(battlekey_, other->battlekey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsBattleFlagRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsBattleFlagRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsBattleFlagRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsBattleFlagRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageCorpsBattleFlagResponse::_default_corpsname_;
#ifndef _MSC_VER
const int CMessageCorpsBattleFlagResponse::kCharIDFieldNumber;
const int CMessageCorpsBattleFlagResponse::kCorpsNameFieldNumber;
const int CMessageCorpsBattleFlagResponse::kBattleIDFieldNumber;
const int CMessageCorpsBattleFlagResponse::kCampIDFieldNumber;
const int CMessageCorpsBattleFlagResponse::kIsAllFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsBattleFlagResponse::CMessageCorpsBattleFlagResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsBattleFlagResponse::InitAsDefaultInstance() {}

CMessageCorpsBattleFlagResponse::CMessageCorpsBattleFlagResponse(const CMessageCorpsBattleFlagResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsBattleFlagResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  corpsname_ = const_cast< ::std::string*>(&_default_corpsname_);
  battleid_ = 0u;
  campid_ = 0u;
  isall_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsBattleFlagResponse::~CMessageCorpsBattleFlagResponse() {
  SharedDtor();
}

void CMessageCorpsBattleFlagResponse::SharedDtor() {
  if (corpsname_ != &_default_corpsname_) {
    delete corpsname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsBattleFlagResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsBattleFlagResponse_descriptor_;
}

const CMessageCorpsBattleFlagResponse& CMessageCorpsBattleFlagResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsBattleFlagResponse* CMessageCorpsBattleFlagResponse::default_instance_ = NULL;

CMessageCorpsBattleFlagResponse* CMessageCorpsBattleFlagResponse::New() const {
  return new CMessageCorpsBattleFlagResponse;
}

void CMessageCorpsBattleFlagResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (_has_bit(1)) {
      if (corpsname_ != &_default_corpsname_) {
        corpsname_->clear();
      }
    }
    battleid_ = 0u;
    campid_ = 0u;
    isall_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsBattleFlagResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_CorpsName;
        break;
      }
      
      // optional string CorpsName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_corpsname()));
        if (input->ExpectTag(24)) goto parse_BattleID;
        break;
      }
      
      // optional uint32 BattleID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BattleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &battleid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_CampID;
        break;
      }
      
      // optional uint32 CampID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CampID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &campid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_IsAll;
        break;
      }
      
      // optional uint32 IsAll = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IsAll:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &isall_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsBattleFlagResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsBattleFlagResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional string CorpsName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->corpsname(), output);
  }
  
  // optional uint32 BattleID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->battleid(), output);
  }
  
  // optional uint32 CampID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->campid(), output);
  }
  
  // optional uint32 IsAll = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->isall(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsBattleFlagResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional string CorpsName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->corpsname(), target);
  }
  
  // optional uint32 BattleID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->battleid(), target);
  }
  
  // optional uint32 CampID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->campid(), target);
  }
  
  // optional uint32 IsAll = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->isall(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsBattleFlagResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional string CorpsName = 2;
    if (has_corpsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->corpsname());
    }
    
    // optional uint32 BattleID = 3;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->battleid());
    }
    
    // optional uint32 CampID = 4;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->campid());
    }
    
    // optional uint32 IsAll = 5;
    if (has_isall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->isall());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsBattleFlagResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsBattleFlagResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsBattleFlagResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsBattleFlagResponse::MergeFrom(const CMessageCorpsBattleFlagResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_corpsname(from.corpsname());
    }
    if (from._has_bit(2)) {
      set_battleid(from.battleid());
    }
    if (from._has_bit(3)) {
      set_campid(from.campid());
    }
    if (from._has_bit(4)) {
      set_isall(from.isall());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsBattleFlagResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsBattleFlagResponse::CopyFrom(const CMessageCorpsBattleFlagResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsBattleFlagResponse::Swap(CMessageCorpsBattleFlagResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(corpsname_, other->corpsname_);
    std::swap(battleid_, other->battleid_);
    std::swap(campid_, other->campid_);
    std::swap(isall_, other->isall_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsBattleFlagResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsBattleFlagResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsBattleFlagResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsBattleFlagResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCreateRepetionNotify::kRepetionIndexFieldNumber;
const int CMessageCreateRepetionNotify::kKeyFieldNumber;
const int CMessageCreateRepetionNotify::kParame1FieldNumber;
const int CMessageCreateRepetionNotify::kParame2FieldNumber;
const int CMessageCreateRepetionNotify::kLineIDFieldNumber;
const int CMessageCreateRepetionNotify::kCreatorFieldNumber;
const int CMessageCreateRepetionNotify::kRemoveItemFieldNumber;
#endif  // !_MSC_VER

CMessageCreateRepetionNotify::CMessageCreateRepetionNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCreateRepetionNotify::InitAsDefaultInstance() {}

CMessageCreateRepetionNotify::CMessageCreateRepetionNotify(const CMessageCreateRepetionNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCreateRepetionNotify::SharedCtor() {
  _cached_size_ = 0;
  repetionindex_ = 0u;
  key_ = GOOGLE_ULONGLONG(0);
  parame1_ = 0u;
  parame2_ = 0u;
  lineid_ = 0u;
  creator_ = 0u;
  removeitem_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCreateRepetionNotify::~CMessageCreateRepetionNotify() {
  SharedDtor();
}

void CMessageCreateRepetionNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCreateRepetionNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCreateRepetionNotify_descriptor_;
}

const CMessageCreateRepetionNotify& CMessageCreateRepetionNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCreateRepetionNotify* CMessageCreateRepetionNotify::default_instance_ = NULL;

CMessageCreateRepetionNotify* CMessageCreateRepetionNotify::New() const {
  return new CMessageCreateRepetionNotify;
}

void CMessageCreateRepetionNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    repetionindex_ = 0u;
    key_ = GOOGLE_ULONGLONG(0);
    parame1_ = 0u;
    parame2_ = 0u;
    lineid_ = 0u;
    creator_ = 0u;
    removeitem_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCreateRepetionNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RepetionIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &repetionindex_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Key;
        break;
      }
      
      // optional uint64 Key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Key:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &key_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Parame1;
        break;
      }
      
      // optional uint32 Parame1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Parame1:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &parame1_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Parame2;
        break;
      }
      
      // optional uint32 Parame2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Parame2:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &parame2_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_LineID;
        break;
      }
      
      // optional uint32 LineID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lineid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Creator;
        break;
      }
      
      // optional uint32 Creator = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Creator:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &creator_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_RemoveItem;
        break;
      }
      
      // optional uint32 RemoveItem = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RemoveItem:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &removeitem_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCreateRepetionNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCreateRepetionNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RepetionIndex = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->repetionindex(), output);
  }
  
  // optional uint64 Key = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(2, this->key(), output);
  }
  
  // optional uint32 Parame1 = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->parame1(), output);
  }
  
  // optional uint32 Parame2 = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->parame2(), output);
  }
  
  // optional uint32 LineID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->lineid(), output);
  }
  
  // optional uint32 Creator = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->creator(), output);
  }
  
  // optional uint32 RemoveItem = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->removeitem(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCreateRepetionNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RepetionIndex = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->repetionindex(), target);
  }
  
  // optional uint64 Key = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(2, this->key(), target);
  }
  
  // optional uint32 Parame1 = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->parame1(), target);
  }
  
  // optional uint32 Parame2 = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->parame2(), target);
  }
  
  // optional uint32 LineID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->lineid(), target);
  }
  
  // optional uint32 Creator = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->creator(), target);
  }
  
  // optional uint32 RemoveItem = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->removeitem(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCreateRepetionNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RepetionIndex = 1;
    if (has_repetionindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->repetionindex());
    }
    
    // optional uint64 Key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->key());
    }
    
    // optional uint32 Parame1 = 3;
    if (has_parame1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->parame1());
    }
    
    // optional uint32 Parame2 = 4;
    if (has_parame2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->parame2());
    }
    
    // optional uint32 LineID = 5;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lineid());
    }
    
    // optional uint32 Creator = 6;
    if (has_creator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->creator());
    }
    
    // optional uint32 RemoveItem = 7;
    if (has_removeitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->removeitem());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCreateRepetionNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCreateRepetionNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCreateRepetionNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCreateRepetionNotify::MergeFrom(const CMessageCreateRepetionNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_repetionindex(from.repetionindex());
    }
    if (from._has_bit(1)) {
      set_key(from.key());
    }
    if (from._has_bit(2)) {
      set_parame1(from.parame1());
    }
    if (from._has_bit(3)) {
      set_parame2(from.parame2());
    }
    if (from._has_bit(4)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(5)) {
      set_creator(from.creator());
    }
    if (from._has_bit(6)) {
      set_removeitem(from.removeitem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCreateRepetionNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCreateRepetionNotify::CopyFrom(const CMessageCreateRepetionNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCreateRepetionNotify::Swap(CMessageCreateRepetionNotify* other) {
  if (other != this) {
    std::swap(repetionindex_, other->repetionindex_);
    std::swap(key_, other->key_);
    std::swap(parame1_, other->parame1_);
    std::swap(parame2_, other->parame2_);
    std::swap(lineid_, other->lineid_);
    std::swap(creator_, other->creator_);
    std::swap(removeitem_, other->removeitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCreateRepetionNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCreateRepetionNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCreateRepetionNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCreateRepetionNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCreateRepetionErr::kRepetionIndexFieldNumber;
const int CMessageCreateRepetionErr::kKeyFieldNumber;
const int CMessageCreateRepetionErr::kErrCodeFieldNumber;
#endif  // !_MSC_VER

CMessageCreateRepetionErr::CMessageCreateRepetionErr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCreateRepetionErr::InitAsDefaultInstance() {}

CMessageCreateRepetionErr::CMessageCreateRepetionErr(const CMessageCreateRepetionErr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCreateRepetionErr::SharedCtor() {
  _cached_size_ = 0;
  repetionindex_ = 0u;
  key_ = GOOGLE_ULONGLONG(0);
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCreateRepetionErr::~CMessageCreateRepetionErr() {
  SharedDtor();
}

void CMessageCreateRepetionErr::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCreateRepetionErr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCreateRepetionErr_descriptor_;
}

const CMessageCreateRepetionErr& CMessageCreateRepetionErr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCreateRepetionErr* CMessageCreateRepetionErr::default_instance_ = NULL;

CMessageCreateRepetionErr* CMessageCreateRepetionErr::New() const {
  return new CMessageCreateRepetionErr;
}

void CMessageCreateRepetionErr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    repetionindex_ = 0u;
    key_ = GOOGLE_ULONGLONG(0);
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCreateRepetionErr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RepetionIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &repetionindex_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Key;
        break;
      }
      
      // optional uint64 Key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Key:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &key_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_ErrCode;
        break;
      }
      
      // optional uint32 ErrCode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ErrCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCreateRepetionErr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCreateRepetionErr::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RepetionIndex = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->repetionindex(), output);
  }
  
  // optional uint64 Key = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(2, this->key(), output);
  }
  
  // optional uint32 ErrCode = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCreateRepetionErr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RepetionIndex = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->repetionindex(), target);
  }
  
  // optional uint64 Key = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(2, this->key(), target);
  }
  
  // optional uint32 ErrCode = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCreateRepetionErr::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RepetionIndex = 1;
    if (has_repetionindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->repetionindex());
    }
    
    // optional uint64 Key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->key());
    }
    
    // optional uint32 ErrCode = 3;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCreateRepetionErr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCreateRepetionErr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCreateRepetionErr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCreateRepetionErr::MergeFrom(const CMessageCreateRepetionErr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_repetionindex(from.repetionindex());
    }
    if (from._has_bit(1)) {
      set_key(from.key());
    }
    if (from._has_bit(2)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCreateRepetionErr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCreateRepetionErr::CopyFrom(const CMessageCreateRepetionErr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCreateRepetionErr::Swap(CMessageCreateRepetionErr* other) {
  if (other != this) {
    std::swap(repetionindex_, other->repetionindex_);
    std::swap(key_, other->key_);
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCreateRepetionErr::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCreateRepetionErr::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCreateRepetionErr::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCreateRepetionErr_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageTeamIntoRepetion::kMapIDFieldNumber;
const int CMessageTeamIntoRepetion::kCharIDFieldNumber;
const int CMessageTeamIntoRepetion::kPosXFieldNumber;
const int CMessageTeamIntoRepetion::kPosYFieldNumber;
const int CMessageTeamIntoRepetion::kParame1FieldNumber;
const int CMessageTeamIntoRepetion::kParame2FieldNumber;
const int CMessageTeamIntoRepetion::kLevelFieldNumber;
const int CMessageTeamIntoRepetion::kRemoveItemFieldNumber;
#endif  // !_MSC_VER

CMessageTeamIntoRepetion::CMessageTeamIntoRepetion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTeamIntoRepetion::InitAsDefaultInstance() {}

CMessageTeamIntoRepetion::CMessageTeamIntoRepetion(const CMessageTeamIntoRepetion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTeamIntoRepetion::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  charid_ = 0u;
  posx_ = 0u;
  posy_ = 0u;
  parame1_ = 0u;
  parame2_ = 0u;
  level_ = 0u;
  removeitem_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTeamIntoRepetion::~CMessageTeamIntoRepetion() {
  SharedDtor();
}

void CMessageTeamIntoRepetion::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTeamIntoRepetion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamIntoRepetion_descriptor_;
}

const CMessageTeamIntoRepetion& CMessageTeamIntoRepetion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTeamIntoRepetion* CMessageTeamIntoRepetion::default_instance_ = NULL;

CMessageTeamIntoRepetion* CMessageTeamIntoRepetion::New() const {
  return new CMessageTeamIntoRepetion;
}

void CMessageTeamIntoRepetion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0u;
    charid_ = 0u;
    posx_ = 0u;
    posy_ = 0u;
    parame1_ = 0u;
    parame2_ = 0u;
    level_ = 0u;
    removeitem_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTeamIntoRepetion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 MapID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_PosX;
        break;
      }
      
      // optional uint32 PosX = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosX:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posx_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_PosY;
        break;
      }
      
      // optional uint32 PosY = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posy_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Parame1;
        break;
      }
      
      // optional uint32 Parame1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Parame1:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &parame1_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Parame2;
        break;
      }
      
      // optional uint32 Parame2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Parame2:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &parame2_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_RemoveItem;
        break;
      }
      
      // optional uint32 RemoveItem = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RemoveItem:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &removeitem_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTeamIntoRepetion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTeamIntoRepetion::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 MapID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->mapid(), output);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charid(), output);
  }
  
  // optional uint32 PosX = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->posx(), output);
  }
  
  // optional uint32 PosY = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->posy(), output);
  }
  
  // optional uint32 Parame1 = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->parame1(), output);
  }
  
  // optional uint32 Parame2 = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->parame2(), output);
  }
  
  // optional uint32 Level = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->level(), output);
  }
  
  // optional uint32 RemoveItem = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->removeitem(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTeamIntoRepetion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 MapID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->mapid(), target);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charid(), target);
  }
  
  // optional uint32 PosX = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->posx(), target);
  }
  
  // optional uint32 PosY = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->posy(), target);
  }
  
  // optional uint32 Parame1 = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->parame1(), target);
  }
  
  // optional uint32 Parame2 = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->parame2(), target);
  }
  
  // optional uint32 Level = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->level(), target);
  }
  
  // optional uint32 RemoveItem = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->removeitem(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTeamIntoRepetion::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MapID = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 CharID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 PosX = 3;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posx());
    }
    
    // optional uint32 PosY = 4;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posy());
    }
    
    // optional uint32 Parame1 = 5;
    if (has_parame1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->parame1());
    }
    
    // optional uint32 Parame2 = 6;
    if (has_parame2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->parame2());
    }
    
    // optional uint32 Level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
    // optional uint32 RemoveItem = 8;
    if (has_removeitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->removeitem());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTeamIntoRepetion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTeamIntoRepetion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTeamIntoRepetion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTeamIntoRepetion::MergeFrom(const CMessageTeamIntoRepetion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(1)) {
      set_charid(from.charid());
    }
    if (from._has_bit(2)) {
      set_posx(from.posx());
    }
    if (from._has_bit(3)) {
      set_posy(from.posy());
    }
    if (from._has_bit(4)) {
      set_parame1(from.parame1());
    }
    if (from._has_bit(5)) {
      set_parame2(from.parame2());
    }
    if (from._has_bit(6)) {
      set_level(from.level());
    }
    if (from._has_bit(7)) {
      set_removeitem(from.removeitem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTeamIntoRepetion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamIntoRepetion::CopyFrom(const CMessageTeamIntoRepetion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeamIntoRepetion::Swap(CMessageTeamIntoRepetion* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(charid_, other->charid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(parame1_, other->parame1_);
    std::swap(parame2_, other->parame2_);
    std::swap(level_, other->level_);
    std::swap(removeitem_, other->removeitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTeamIntoRepetion::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTeamIntoRepetion::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTeamIntoRepetion::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeamIntoRepetion_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageSingleIntoRepetion::kMapIDFieldNumber;
const int CMessageSingleIntoRepetion::kCharIDFieldNumber;
const int CMessageSingleIntoRepetion::kPosXFieldNumber;
const int CMessageSingleIntoRepetion::kPosYFieldNumber;
const int CMessageSingleIntoRepetion::kParame1FieldNumber;
const int CMessageSingleIntoRepetion::kParame2FieldNumber;
const int CMessageSingleIntoRepetion::kLevelFieldNumber;
const int CMessageSingleIntoRepetion::kRemoveItemFieldNumber;
#endif  // !_MSC_VER

CMessageSingleIntoRepetion::CMessageSingleIntoRepetion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageSingleIntoRepetion::InitAsDefaultInstance() {}

CMessageSingleIntoRepetion::CMessageSingleIntoRepetion(const CMessageSingleIntoRepetion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageSingleIntoRepetion::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  charid_ = 0u;
  posx_ = 0u;
  posy_ = 0u;
  parame1_ = 0u;
  parame2_ = 0u;
  level_ = 0u;
  removeitem_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageSingleIntoRepetion::~CMessageSingleIntoRepetion() {
  SharedDtor();
}

void CMessageSingleIntoRepetion::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageSingleIntoRepetion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageSingleIntoRepetion_descriptor_;
}

const CMessageSingleIntoRepetion& CMessageSingleIntoRepetion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageSingleIntoRepetion* CMessageSingleIntoRepetion::default_instance_ = NULL;

CMessageSingleIntoRepetion* CMessageSingleIntoRepetion::New() const {
  return new CMessageSingleIntoRepetion;
}

void CMessageSingleIntoRepetion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0u;
    charid_ = 0u;
    posx_ = 0u;
    posy_ = 0u;
    parame1_ = 0u;
    parame2_ = 0u;
    level_ = 0u;
    removeitem_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageSingleIntoRepetion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 MapID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_PosX;
        break;
      }
      
      // optional uint32 PosX = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosX:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posx_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_PosY;
        break;
      }
      
      // optional uint32 PosY = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posy_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Parame1;
        break;
      }
      
      // optional uint32 Parame1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Parame1:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &parame1_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Parame2;
        break;
      }
      
      // optional uint32 Parame2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Parame2:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &parame2_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_RemoveItem;
        break;
      }
      
      // optional uint32 RemoveItem = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RemoveItem:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &removeitem_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageSingleIntoRepetion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageSingleIntoRepetion::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 MapID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->mapid(), output);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charid(), output);
  }
  
  // optional uint32 PosX = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->posx(), output);
  }
  
  // optional uint32 PosY = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->posy(), output);
  }
  
  // optional uint32 Parame1 = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->parame1(), output);
  }
  
  // optional uint32 Parame2 = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->parame2(), output);
  }
  
  // optional uint32 Level = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->level(), output);
  }
  
  // optional uint32 RemoveItem = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->removeitem(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageSingleIntoRepetion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 MapID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->mapid(), target);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charid(), target);
  }
  
  // optional uint32 PosX = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->posx(), target);
  }
  
  // optional uint32 PosY = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->posy(), target);
  }
  
  // optional uint32 Parame1 = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->parame1(), target);
  }
  
  // optional uint32 Parame2 = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->parame2(), target);
  }
  
  // optional uint32 Level = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->level(), target);
  }
  
  // optional uint32 RemoveItem = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->removeitem(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageSingleIntoRepetion::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MapID = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 CharID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 PosX = 3;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posx());
    }
    
    // optional uint32 PosY = 4;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posy());
    }
    
    // optional uint32 Parame1 = 5;
    if (has_parame1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->parame1());
    }
    
    // optional uint32 Parame2 = 6;
    if (has_parame2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->parame2());
    }
    
    // optional uint32 Level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
    // optional uint32 RemoveItem = 8;
    if (has_removeitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->removeitem());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageSingleIntoRepetion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageSingleIntoRepetion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageSingleIntoRepetion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageSingleIntoRepetion::MergeFrom(const CMessageSingleIntoRepetion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(1)) {
      set_charid(from.charid());
    }
    if (from._has_bit(2)) {
      set_posx(from.posx());
    }
    if (from._has_bit(3)) {
      set_posy(from.posy());
    }
    if (from._has_bit(4)) {
      set_parame1(from.parame1());
    }
    if (from._has_bit(5)) {
      set_parame2(from.parame2());
    }
    if (from._has_bit(6)) {
      set_level(from.level());
    }
    if (from._has_bit(7)) {
      set_removeitem(from.removeitem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageSingleIntoRepetion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSingleIntoRepetion::CopyFrom(const CMessageSingleIntoRepetion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSingleIntoRepetion::Swap(CMessageSingleIntoRepetion* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(charid_, other->charid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(parame1_, other->parame1_);
    std::swap(parame2_, other->parame2_);
    std::swap(level_, other->level_);
    std::swap(removeitem_, other->removeitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageSingleIntoRepetion::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageSingleIntoRepetion::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageSingleIntoRepetion::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageSingleIntoRepetion_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCorpsStartBattleRequest::kNpcIDFieldNumber;
const int CMessageCorpsStartBattleRequest::kBattleIDFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsStartBattleRequest::CMessageCorpsStartBattleRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsStartBattleRequest::InitAsDefaultInstance() {}

CMessageCorpsStartBattleRequest::CMessageCorpsStartBattleRequest(const CMessageCorpsStartBattleRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsStartBattleRequest::SharedCtor() {
  _cached_size_ = 0;
  npcid_ = 0u;
  battleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsStartBattleRequest::~CMessageCorpsStartBattleRequest() {
  SharedDtor();
}

void CMessageCorpsStartBattleRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsStartBattleRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsStartBattleRequest_descriptor_;
}

const CMessageCorpsStartBattleRequest& CMessageCorpsStartBattleRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsStartBattleRequest* CMessageCorpsStartBattleRequest::default_instance_ = NULL;

CMessageCorpsStartBattleRequest* CMessageCorpsStartBattleRequest::New() const {
  return new CMessageCorpsStartBattleRequest;
}

void CMessageCorpsStartBattleRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npcid_ = 0u;
    battleid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsStartBattleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 NpcID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_BattleID;
        break;
      }
      
      // optional uint32 BattleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BattleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &battleid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsStartBattleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsStartBattleRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 NpcID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->npcid(), output);
  }
  
  // optional uint32 BattleID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->battleid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsStartBattleRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 NpcID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->npcid(), target);
  }
  
  // optional uint32 BattleID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->battleid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsStartBattleRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 NpcID = 1;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
    // optional uint32 BattleID = 2;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->battleid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsStartBattleRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsStartBattleRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsStartBattleRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsStartBattleRequest::MergeFrom(const CMessageCorpsStartBattleRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_npcid(from.npcid());
    }
    if (from._has_bit(1)) {
      set_battleid(from.battleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsStartBattleRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsStartBattleRequest::CopyFrom(const CMessageCorpsStartBattleRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsStartBattleRequest::Swap(CMessageCorpsStartBattleRequest* other) {
  if (other != this) {
    std::swap(npcid_, other->npcid_);
    std::swap(battleid_, other->battleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsStartBattleRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsStartBattleRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsStartBattleRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsStartBattleRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageIntoRepetionNotify::kLineIDFieldNumber;
const int CMessageIntoRepetionNotify::kMapIDFieldNumber;
const int CMessageIntoRepetionNotify::kKeyFieldNumber;
const int CMessageIntoRepetionNotify::kPosXFieldNumber;
const int CMessageIntoRepetionNotify::kPosYFieldNumber;
const int CMessageIntoRepetionNotify::kCharIDFieldNumber;
const int CMessageIntoRepetionNotify::kRepetionIndexFieldNumber;
#endif  // !_MSC_VER

CMessageIntoRepetionNotify::CMessageIntoRepetionNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageIntoRepetionNotify::InitAsDefaultInstance() {}

CMessageIntoRepetionNotify::CMessageIntoRepetionNotify(const CMessageIntoRepetionNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageIntoRepetionNotify::SharedCtor() {
  _cached_size_ = 0;
  lineid_ = 0u;
  mapid_ = 0u;
  key_ = GOOGLE_ULONGLONG(0);
  posx_ = 0u;
  posy_ = 0u;
  charid_ = 0u;
  repetionindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageIntoRepetionNotify::~CMessageIntoRepetionNotify() {
  SharedDtor();
}

void CMessageIntoRepetionNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageIntoRepetionNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageIntoRepetionNotify_descriptor_;
}

const CMessageIntoRepetionNotify& CMessageIntoRepetionNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageIntoRepetionNotify* CMessageIntoRepetionNotify::default_instance_ = NULL;

CMessageIntoRepetionNotify* CMessageIntoRepetionNotify::New() const {
  return new CMessageIntoRepetionNotify;
}

void CMessageIntoRepetionNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lineid_ = 0u;
    mapid_ = 0u;
    key_ = GOOGLE_ULONGLONG(0);
    posx_ = 0u;
    posy_ = 0u;
    charid_ = 0u;
    repetionindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageIntoRepetionNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 LineID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lineid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Key;
        break;
      }
      
      // optional uint64 Key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Key:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &key_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_PosX;
        break;
      }
      
      // optional uint32 PosX = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosX:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posx_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_PosY;
        break;
      }
      
      // optional uint32 PosY = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posy_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_RepetionIndex;
        break;
      }
      
      // optional uint32 RepetionIndex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RepetionIndex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &repetionindex_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageIntoRepetionNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageIntoRepetionNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 LineID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->lineid(), output);
  }
  
  // optional uint32 MapID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->mapid(), output);
  }
  
  // optional uint64 Key = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(3, this->key(), output);
  }
  
  // optional uint32 PosX = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->posx(), output);
  }
  
  // optional uint32 PosY = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->posy(), output);
  }
  
  // optional uint32 CharID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->charid(), output);
  }
  
  // optional uint32 RepetionIndex = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->repetionindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageIntoRepetionNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 LineID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->lineid(), target);
  }
  
  // optional uint32 MapID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->mapid(), target);
  }
  
  // optional uint64 Key = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(3, this->key(), target);
  }
  
  // optional uint32 PosX = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->posx(), target);
  }
  
  // optional uint32 PosY = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->posy(), target);
  }
  
  // optional uint32 CharID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->charid(), target);
  }
  
  // optional uint32 RepetionIndex = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->repetionindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageIntoRepetionNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 LineID = 1;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lineid());
    }
    
    // optional uint32 MapID = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint64 Key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->key());
    }
    
    // optional uint32 PosX = 4;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posx());
    }
    
    // optional uint32 PosY = 5;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posy());
    }
    
    // optional uint32 CharID = 6;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 RepetionIndex = 7;
    if (has_repetionindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->repetionindex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageIntoRepetionNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageIntoRepetionNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageIntoRepetionNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageIntoRepetionNotify::MergeFrom(const CMessageIntoRepetionNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(1)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(2)) {
      set_key(from.key());
    }
    if (from._has_bit(3)) {
      set_posx(from.posx());
    }
    if (from._has_bit(4)) {
      set_posy(from.posy());
    }
    if (from._has_bit(5)) {
      set_charid(from.charid());
    }
    if (from._has_bit(6)) {
      set_repetionindex(from.repetionindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageIntoRepetionNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageIntoRepetionNotify::CopyFrom(const CMessageIntoRepetionNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageIntoRepetionNotify::Swap(CMessageIntoRepetionNotify* other) {
  if (other != this) {
    std::swap(lineid_, other->lineid_);
    std::swap(mapid_, other->mapid_);
    std::swap(key_, other->key_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(charid_, other->charid_);
    std::swap(repetionindex_, other->repetionindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageIntoRepetionNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageIntoRepetionNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageIntoRepetionNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageIntoRepetionNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageChangeFamilyContributeNotify::kRoleIDFieldNumber;
const int CMessageChangeFamilyContributeNotify::kContributeFieldNumber;
const int CMessageChangeFamilyContributeNotify::kChangeTypeFieldNumber;
#endif  // !_MSC_VER

CMessageChangeFamilyContributeNotify::CMessageChangeFamilyContributeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeFamilyContributeNotify::InitAsDefaultInstance() {}

CMessageChangeFamilyContributeNotify::CMessageChangeFamilyContributeNotify(const CMessageChangeFamilyContributeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeFamilyContributeNotify::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  contribute_ = 0u;
  changetype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeFamilyContributeNotify::~CMessageChangeFamilyContributeNotify() {
  SharedDtor();
}

void CMessageChangeFamilyContributeNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageChangeFamilyContributeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeFamilyContributeNotify_descriptor_;
}

const CMessageChangeFamilyContributeNotify& CMessageChangeFamilyContributeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeFamilyContributeNotify* CMessageChangeFamilyContributeNotify::default_instance_ = NULL;

CMessageChangeFamilyContributeNotify* CMessageChangeFamilyContributeNotify::New() const {
  return new CMessageChangeFamilyContributeNotify;
}

void CMessageChangeFamilyContributeNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    contribute_ = 0u;
    changetype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeFamilyContributeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Contribute;
        break;
      }
      
      // optional uint32 Contribute = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Contribute:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &contribute_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_ChangeType;
        break;
      }
      
      // optional uint32 ChangeType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ChangeType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &changetype_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeFamilyContributeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeFamilyContributeNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional uint32 Contribute = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->contribute(), output);
  }
  
  // optional uint32 ChangeType = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->changetype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeFamilyContributeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional uint32 Contribute = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->contribute(), target);
  }
  
  // optional uint32 ChangeType = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->changetype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeFamilyContributeNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 Contribute = 2;
    if (has_contribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->contribute());
    }
    
    // optional uint32 ChangeType = 3;
    if (has_changetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->changetype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeFamilyContributeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeFamilyContributeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeFamilyContributeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeFamilyContributeNotify::MergeFrom(const CMessageChangeFamilyContributeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_contribute(from.contribute());
    }
    if (from._has_bit(2)) {
      set_changetype(from.changetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeFamilyContributeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeFamilyContributeNotify::CopyFrom(const CMessageChangeFamilyContributeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeFamilyContributeNotify::Swap(CMessageChangeFamilyContributeNotify* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(contribute_, other->contribute_);
    std::swap(changetype_, other->changetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeFamilyContributeNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeFamilyContributeNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeFamilyContributeNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeFamilyContributeNotify_reflection_;
}

// ===================================================================

const ::std::string CMessageChangeFamilyGloryNotify::_default_rolename_;
#ifndef _MSC_VER
const int CMessageChangeFamilyGloryNotify::kFamilyIDFieldNumber;
const int CMessageChangeFamilyGloryNotify::kGloryFieldNumber;
const int CMessageChangeFamilyGloryNotify::kIfReducedFieldNumber;
const int CMessageChangeFamilyGloryNotify::kRoleIDFieldNumber;
const int CMessageChangeFamilyGloryNotify::kReasonFieldNumber;
const int CMessageChangeFamilyGloryNotify::kRoleNameFieldNumber;
#endif  // !_MSC_VER

CMessageChangeFamilyGloryNotify::CMessageChangeFamilyGloryNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeFamilyGloryNotify::InitAsDefaultInstance() {}

CMessageChangeFamilyGloryNotify::CMessageChangeFamilyGloryNotify(const CMessageChangeFamilyGloryNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeFamilyGloryNotify::SharedCtor() {
  _cached_size_ = 0;
  familyid_ = 0u;
  glory_ = 0u;
  ifreduced_ = 0u;
  roleid_ = 0u;
  reason_ = 0u;
  rolename_ = const_cast< ::std::string*>(&_default_rolename_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeFamilyGloryNotify::~CMessageChangeFamilyGloryNotify() {
  SharedDtor();
}

void CMessageChangeFamilyGloryNotify::SharedDtor() {
  if (rolename_ != &_default_rolename_) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageChangeFamilyGloryNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeFamilyGloryNotify_descriptor_;
}

const CMessageChangeFamilyGloryNotify& CMessageChangeFamilyGloryNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeFamilyGloryNotify* CMessageChangeFamilyGloryNotify::default_instance_ = NULL;

CMessageChangeFamilyGloryNotify* CMessageChangeFamilyGloryNotify::New() const {
  return new CMessageChangeFamilyGloryNotify;
}

void CMessageChangeFamilyGloryNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    familyid_ = 0u;
    glory_ = 0u;
    ifreduced_ = 0u;
    roleid_ = 0u;
    reason_ = 0u;
    if (_has_bit(5)) {
      if (rolename_ != &_default_rolename_) {
        rolename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeFamilyGloryNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 FamilyID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Glory;
        break;
      }
      
      // optional uint32 Glory = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Glory:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &glory_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_IfReduced;
        break;
      }
      
      // optional uint32 IfReduced = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IfReduced:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ifreduced_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Reason;
        break;
      }
      
      // optional uint32 Reason = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Reason:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &reason_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_RoleName;
        break;
      }
      
      // optional string RoleName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RoleName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_rolename()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeFamilyGloryNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeFamilyGloryNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 FamilyID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->familyid(), output);
  }
  
  // optional uint32 Glory = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->glory(), output);
  }
  
  // optional uint32 IfReduced = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->ifreduced(), output);
  }
  
  // optional uint32 RoleID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->roleid(), output);
  }
  
  // optional uint32 Reason = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->reason(), output);
  }
  
  // optional string RoleName = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteString(6, this->rolename(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeFamilyGloryNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 FamilyID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->familyid(), target);
  }
  
  // optional uint32 Glory = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->glory(), target);
  }
  
  // optional uint32 IfReduced = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->ifreduced(), target);
  }
  
  // optional uint32 RoleID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->roleid(), target);
  }
  
  // optional uint32 Reason = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->reason(), target);
  }
  
  // optional string RoleName = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(6, this->rolename(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeFamilyGloryNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 FamilyID = 1;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
    // optional uint32 Glory = 2;
    if (has_glory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->glory());
    }
    
    // optional uint32 IfReduced = 3;
    if (has_ifreduced()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ifreduced());
    }
    
    // optional uint32 RoleID = 4;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 Reason = 5;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->reason());
    }
    
    // optional string RoleName = 6;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->rolename());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeFamilyGloryNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeFamilyGloryNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeFamilyGloryNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeFamilyGloryNotify::MergeFrom(const CMessageChangeFamilyGloryNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_familyid(from.familyid());
    }
    if (from._has_bit(1)) {
      set_glory(from.glory());
    }
    if (from._has_bit(2)) {
      set_ifreduced(from.ifreduced());
    }
    if (from._has_bit(3)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(4)) {
      set_reason(from.reason());
    }
    if (from._has_bit(5)) {
      set_rolename(from.rolename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeFamilyGloryNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeFamilyGloryNotify::CopyFrom(const CMessageChangeFamilyGloryNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeFamilyGloryNotify::Swap(CMessageChangeFamilyGloryNotify* other) {
  if (other != this) {
    std::swap(familyid_, other->familyid_);
    std::swap(glory_, other->glory_);
    std::swap(ifreduced_, other->ifreduced_);
    std::swap(roleid_, other->roleid_);
    std::swap(reason_, other->reason_);
    std::swap(rolename_, other->rolename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeFamilyGloryNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeFamilyGloryNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeFamilyGloryNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeFamilyGloryNotify_reflection_;
}

// ===================================================================

const ::std::string CMessageChangeFamilyMoneyNotify::_default_rolename_;
#ifndef _MSC_VER
const int CMessageChangeFamilyMoneyNotify::kMoneyFieldNumber;
const int CMessageChangeFamilyMoneyNotify::kIfPayoutFieldNumber;
const int CMessageChangeFamilyMoneyNotify::kFamilyIDFieldNumber;
const int CMessageChangeFamilyMoneyNotify::kRoleIDFieldNumber;
const int CMessageChangeFamilyMoneyNotify::kReasonFieldNumber;
const int CMessageChangeFamilyMoneyNotify::kRoleNameFieldNumber;
#endif  // !_MSC_VER

CMessageChangeFamilyMoneyNotify::CMessageChangeFamilyMoneyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeFamilyMoneyNotify::InitAsDefaultInstance() {}

CMessageChangeFamilyMoneyNotify::CMessageChangeFamilyMoneyNotify(const CMessageChangeFamilyMoneyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeFamilyMoneyNotify::SharedCtor() {
  _cached_size_ = 0;
  money_ = 0u;
  ifpayout_ = 0u;
  familyid_ = 0u;
  roleid_ = 0u;
  reason_ = 0u;
  rolename_ = const_cast< ::std::string*>(&_default_rolename_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeFamilyMoneyNotify::~CMessageChangeFamilyMoneyNotify() {
  SharedDtor();
}

void CMessageChangeFamilyMoneyNotify::SharedDtor() {
  if (rolename_ != &_default_rolename_) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageChangeFamilyMoneyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeFamilyMoneyNotify_descriptor_;
}

const CMessageChangeFamilyMoneyNotify& CMessageChangeFamilyMoneyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeFamilyMoneyNotify* CMessageChangeFamilyMoneyNotify::default_instance_ = NULL;

CMessageChangeFamilyMoneyNotify* CMessageChangeFamilyMoneyNotify::New() const {
  return new CMessageChangeFamilyMoneyNotify;
}

void CMessageChangeFamilyMoneyNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    money_ = 0u;
    ifpayout_ = 0u;
    familyid_ = 0u;
    roleid_ = 0u;
    reason_ = 0u;
    if (_has_bit(5)) {
      if (rolename_ != &_default_rolename_) {
        rolename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeFamilyMoneyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Money = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_IfPayout;
        break;
      }
      
      // optional uint32 IfPayout = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IfPayout:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ifpayout_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_FamilyID;
        break;
      }
      
      // optional uint32 FamilyID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Reason;
        break;
      }
      
      // optional uint32 Reason = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Reason:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &reason_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_RoleName;
        break;
      }
      
      // optional string RoleName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RoleName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_rolename()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeFamilyMoneyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeFamilyMoneyNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Money = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->money(), output);
  }
  
  // optional uint32 IfPayout = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->ifpayout(), output);
  }
  
  // optional uint32 FamilyID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->familyid(), output);
  }
  
  // optional uint32 RoleID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->roleid(), output);
  }
  
  // optional uint32 Reason = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->reason(), output);
  }
  
  // optional string RoleName = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteString(6, this->rolename(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeFamilyMoneyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Money = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->money(), target);
  }
  
  // optional uint32 IfPayout = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->ifpayout(), target);
  }
  
  // optional uint32 FamilyID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->familyid(), target);
  }
  
  // optional uint32 RoleID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->roleid(), target);
  }
  
  // optional uint32 Reason = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->reason(), target);
  }
  
  // optional string RoleName = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(6, this->rolename(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeFamilyMoneyNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Money = 1;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
    // optional uint32 IfPayout = 2;
    if (has_ifpayout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ifpayout());
    }
    
    // optional uint32 FamilyID = 3;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
    // optional uint32 RoleID = 4;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 Reason = 5;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->reason());
    }
    
    // optional string RoleName = 6;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->rolename());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeFamilyMoneyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeFamilyMoneyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeFamilyMoneyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeFamilyMoneyNotify::MergeFrom(const CMessageChangeFamilyMoneyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_money(from.money());
    }
    if (from._has_bit(1)) {
      set_ifpayout(from.ifpayout());
    }
    if (from._has_bit(2)) {
      set_familyid(from.familyid());
    }
    if (from._has_bit(3)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(4)) {
      set_reason(from.reason());
    }
    if (from._has_bit(5)) {
      set_rolename(from.rolename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeFamilyMoneyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeFamilyMoneyNotify::CopyFrom(const CMessageChangeFamilyMoneyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeFamilyMoneyNotify::Swap(CMessageChangeFamilyMoneyNotify* other) {
  if (other != this) {
    std::swap(money_, other->money_);
    std::swap(ifpayout_, other->ifpayout_);
    std::swap(familyid_, other->familyid_);
    std::swap(roleid_, other->roleid_);
    std::swap(reason_, other->reason_);
    std::swap(rolename_, other->rolename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeFamilyMoneyNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeFamilyMoneyNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeFamilyMoneyNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeFamilyMoneyNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMessageSynIbStoreRequest::CMessageSynIbStoreRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageSynIbStoreRequest::InitAsDefaultInstance() {}

CMessageSynIbStoreRequest::CMessageSynIbStoreRequest(const CMessageSynIbStoreRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageSynIbStoreRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageSynIbStoreRequest::~CMessageSynIbStoreRequest() {
  SharedDtor();
}

void CMessageSynIbStoreRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageSynIbStoreRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageSynIbStoreRequest_descriptor_;
}

const CMessageSynIbStoreRequest& CMessageSynIbStoreRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageSynIbStoreRequest* CMessageSynIbStoreRequest::default_instance_ = NULL;

CMessageSynIbStoreRequest* CMessageSynIbStoreRequest::New() const {
  return new CMessageSynIbStoreRequest;
}

void CMessageSynIbStoreRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageSynIbStoreRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMessageSynIbStoreRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageSynIbStoreRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageSynIbStoreRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageSynIbStoreRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageSynIbStoreRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageSynIbStoreRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageSynIbStoreRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageSynIbStoreRequest::MergeFrom(const CMessageSynIbStoreRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageSynIbStoreRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSynIbStoreRequest::CopyFrom(const CMessageSynIbStoreRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSynIbStoreRequest::Swap(CMessageSynIbStoreRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageSynIbStoreRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageSynIbStoreRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageSynIbStoreRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageSynIbStoreRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageSynIbStoreResponse::_default_bulletin_;
#ifndef _MSC_VER
const int CMessageSynIbStoreResponse::kGoodsFieldNumber;
const int CMessageSynIbStoreResponse::kIbStoreFieldNumber;
const int CMessageSynIbStoreResponse::kVersionFieldNumber;
const int CMessageSynIbStoreResponse::kFocusTabFieldNumber;
const int CMessageSynIbStoreResponse::kBulletinFieldNumber;
#endif  // !_MSC_VER

CMessageSynIbStoreResponse::CMessageSynIbStoreResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageSynIbStoreResponse::InitAsDefaultInstance() {}

CMessageSynIbStoreResponse::CMessageSynIbStoreResponse(const CMessageSynIbStoreResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageSynIbStoreResponse::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  bulletin_ = const_cast< ::std::string*>(&_default_bulletin_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageSynIbStoreResponse::~CMessageSynIbStoreResponse() {
  SharedDtor();
}

void CMessageSynIbStoreResponse::SharedDtor() {
  if (bulletin_ != &_default_bulletin_) {
    delete bulletin_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageSynIbStoreResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageSynIbStoreResponse_descriptor_;
}

const CMessageSynIbStoreResponse& CMessageSynIbStoreResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageSynIbStoreResponse* CMessageSynIbStoreResponse::default_instance_ = NULL;

CMessageSynIbStoreResponse* CMessageSynIbStoreResponse::New() const {
  return new CMessageSynIbStoreResponse;
}

void CMessageSynIbStoreResponse::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    version_ = 0;
    if (_has_bit(4)) {
      if (bulletin_ != &_default_bulletin_) {
        bulletin_->clear();
      }
    }
  }
  goods_.Clear();
  ibstore_.Clear();
  focustab_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageSynIbStoreResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .PBIbItemOnSale Goods = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Goods:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_goods()));
        if (input->ExpectTag(10)) goto parse_Goods;
        if (input->ExpectTag(18)) goto parse_IbStore;
        break;
      }
      
      // repeated .PBIbStore IbStore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_IbStore:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_ibstore()));
        if (input->ExpectTag(18)) goto parse_IbStore;
        if (input->ExpectTag(24)) goto parse_Version;
        break;
      }
      
      // optional int32 Version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Version:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &version_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_FocusTab;
        break;
      }
      
      // repeated .PBIbSubTab FocusTab = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FocusTab:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_focustab()));
        if (input->ExpectTag(34)) goto parse_FocusTab;
        if (input->ExpectTag(42)) goto parse_Bulletin;
        break;
      }
      
      // optional string Bulletin = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Bulletin:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_bulletin()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageSynIbStoreResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageSynIbStoreResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .PBIbItemOnSale Goods = 1;
  for (int i = 0; i < this->goods_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->goods(i), output);
  }
  
  // repeated .PBIbStore IbStore = 2;
  for (int i = 0; i < this->ibstore_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->ibstore(i), output);
  }
  
  // optional int32 Version = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->version(), output);
  }
  
  // repeated .PBIbSubTab FocusTab = 4;
  for (int i = 0; i < this->focustab_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->focustab(i), output);
  }
  
  // optional string Bulletin = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->bulletin(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageSynIbStoreResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBIbItemOnSale Goods = 1;
  for (int i = 0; i < this->goods_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->goods(i), target);
  }
  
  // repeated .PBIbStore IbStore = 2;
  for (int i = 0; i < this->ibstore_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->ibstore(i), target);
  }
  
  // optional int32 Version = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->version(), target);
  }
  
  // repeated .PBIbSubTab FocusTab = 4;
  for (int i = 0; i < this->focustab_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(4, this->focustab(i), target);
  }
  
  // optional string Bulletin = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->bulletin(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageSynIbStoreResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 Version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->version());
    }
    
    // optional string Bulletin = 5;
    if (has_bulletin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->bulletin());
    }
    
  }
  // repeated .PBIbItemOnSale Goods = 1;
  total_size += 1 * this->goods_size();
  for (int i = 0; i < this->goods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->goods(i));
  }
  
  // repeated .PBIbStore IbStore = 2;
  total_size += 1 * this->ibstore_size();
  for (int i = 0; i < this->ibstore_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->ibstore(i));
  }
  
  // repeated .PBIbSubTab FocusTab = 4;
  total_size += 1 * this->focustab_size();
  for (int i = 0; i < this->focustab_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->focustab(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageSynIbStoreResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageSynIbStoreResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageSynIbStoreResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageSynIbStoreResponse::MergeFrom(const CMessageSynIbStoreResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  goods_.MergeFrom(from.goods_);
  ibstore_.MergeFrom(from.ibstore_);
  focustab_.MergeFrom(from.focustab_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from._has_bit(2)) {
      set_version(from.version());
    }
    if (from._has_bit(4)) {
      set_bulletin(from.bulletin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageSynIbStoreResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSynIbStoreResponse::CopyFrom(const CMessageSynIbStoreResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSynIbStoreResponse::Swap(CMessageSynIbStoreResponse* other) {
  if (other != this) {
    goods_.Swap(&other->goods_);
    ibstore_.Swap(&other->ibstore_);
    std::swap(version_, other->version_);
    focustab_.Swap(&other->focustab_);
    std::swap(bulletin_, other->bulletin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageSynIbStoreResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageSynIbStoreResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageSynIbStoreResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageSynIbStoreResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMessageSynFuncStoreRequest::CMessageSynFuncStoreRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageSynFuncStoreRequest::InitAsDefaultInstance() {}

CMessageSynFuncStoreRequest::CMessageSynFuncStoreRequest(const CMessageSynFuncStoreRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageSynFuncStoreRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageSynFuncStoreRequest::~CMessageSynFuncStoreRequest() {
  SharedDtor();
}

void CMessageSynFuncStoreRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageSynFuncStoreRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageSynFuncStoreRequest_descriptor_;
}

const CMessageSynFuncStoreRequest& CMessageSynFuncStoreRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageSynFuncStoreRequest* CMessageSynFuncStoreRequest::default_instance_ = NULL;

CMessageSynFuncStoreRequest* CMessageSynFuncStoreRequest::New() const {
  return new CMessageSynFuncStoreRequest;
}

void CMessageSynFuncStoreRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageSynFuncStoreRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMessageSynFuncStoreRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageSynFuncStoreRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageSynFuncStoreRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageSynFuncStoreRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageSynFuncStoreRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageSynFuncStoreRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageSynFuncStoreRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageSynFuncStoreRequest::MergeFrom(const CMessageSynFuncStoreRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageSynFuncStoreRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSynFuncStoreRequest::CopyFrom(const CMessageSynFuncStoreRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSynFuncStoreRequest::Swap(CMessageSynFuncStoreRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageSynFuncStoreRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageSynFuncStoreRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageSynFuncStoreRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageSynFuncStoreRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageSynFuncStoreResponse::kVersionFieldNumber;
const int CMessageSynFuncStoreResponse::kFuncStoreFieldNumber;
#endif  // !_MSC_VER

CMessageSynFuncStoreResponse::CMessageSynFuncStoreResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageSynFuncStoreResponse::InitAsDefaultInstance() {}

CMessageSynFuncStoreResponse::CMessageSynFuncStoreResponse(const CMessageSynFuncStoreResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageSynFuncStoreResponse::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageSynFuncStoreResponse::~CMessageSynFuncStoreResponse() {
  SharedDtor();
}

void CMessageSynFuncStoreResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageSynFuncStoreResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageSynFuncStoreResponse_descriptor_;
}

const CMessageSynFuncStoreResponse& CMessageSynFuncStoreResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageSynFuncStoreResponse* CMessageSynFuncStoreResponse::default_instance_ = NULL;

CMessageSynFuncStoreResponse* CMessageSynFuncStoreResponse::New() const {
  return new CMessageSynFuncStoreResponse;
}

void CMessageSynFuncStoreResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0;
  }
  funcstore_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageSynFuncStoreResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional int32 Version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &version_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_FuncStore;
        break;
      }
      
      // repeated .PBFuncStore FuncStore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FuncStore:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_funcstore()));
        if (input->ExpectTag(18)) goto parse_FuncStore;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageSynFuncStoreResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageSynFuncStoreResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 Version = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(1, this->version(), output);
  }
  
  // repeated .PBFuncStore FuncStore = 2;
  for (int i = 0; i < this->funcstore_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->funcstore(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageSynFuncStoreResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Version = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(1, this->version(), target);
  }
  
  // repeated .PBFuncStore FuncStore = 2;
  for (int i = 0; i < this->funcstore_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->funcstore(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageSynFuncStoreResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->version());
    }
    
  }
  // repeated .PBFuncStore FuncStore = 2;
  total_size += 1 * this->funcstore_size();
  for (int i = 0; i < this->funcstore_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->funcstore(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageSynFuncStoreResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageSynFuncStoreResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageSynFuncStoreResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageSynFuncStoreResponse::MergeFrom(const CMessageSynFuncStoreResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  funcstore_.MergeFrom(from.funcstore_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageSynFuncStoreResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSynFuncStoreResponse::CopyFrom(const CMessageSynFuncStoreResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSynFuncStoreResponse::Swap(CMessageSynFuncStoreResponse* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    funcstore_.Swap(&other->funcstore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageSynFuncStoreResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageSynFuncStoreResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageSynFuncStoreResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageSynFuncStoreResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageChangeCorpsContributeNotify::kRoleIDFieldNumber;
const int CMessageChangeCorpsContributeNotify::kContributeFieldNumber;
const int CMessageChangeCorpsContributeNotify::kChangeTypeFieldNumber;
#endif  // !_MSC_VER

CMessageChangeCorpsContributeNotify::CMessageChangeCorpsContributeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeCorpsContributeNotify::InitAsDefaultInstance() {}

CMessageChangeCorpsContributeNotify::CMessageChangeCorpsContributeNotify(const CMessageChangeCorpsContributeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeCorpsContributeNotify::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  contribute_ = 0u;
  changetype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeCorpsContributeNotify::~CMessageChangeCorpsContributeNotify() {
  SharedDtor();
}

void CMessageChangeCorpsContributeNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageChangeCorpsContributeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeCorpsContributeNotify_descriptor_;
}

const CMessageChangeCorpsContributeNotify& CMessageChangeCorpsContributeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeCorpsContributeNotify* CMessageChangeCorpsContributeNotify::default_instance_ = NULL;

CMessageChangeCorpsContributeNotify* CMessageChangeCorpsContributeNotify::New() const {
  return new CMessageChangeCorpsContributeNotify;
}

void CMessageChangeCorpsContributeNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    contribute_ = 0u;
    changetype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeCorpsContributeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Contribute;
        break;
      }
      
      // optional uint32 Contribute = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Contribute:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &contribute_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_ChangeType;
        break;
      }
      
      // optional uint32 ChangeType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ChangeType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &changetype_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeCorpsContributeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeCorpsContributeNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional uint32 Contribute = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->contribute(), output);
  }
  
  // optional uint32 ChangeType = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->changetype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeCorpsContributeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional uint32 Contribute = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->contribute(), target);
  }
  
  // optional uint32 ChangeType = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->changetype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeCorpsContributeNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 Contribute = 2;
    if (has_contribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->contribute());
    }
    
    // optional uint32 ChangeType = 3;
    if (has_changetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->changetype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeCorpsContributeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeCorpsContributeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeCorpsContributeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeCorpsContributeNotify::MergeFrom(const CMessageChangeCorpsContributeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_contribute(from.contribute());
    }
    if (from._has_bit(2)) {
      set_changetype(from.changetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeCorpsContributeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeCorpsContributeNotify::CopyFrom(const CMessageChangeCorpsContributeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeCorpsContributeNotify::Swap(CMessageChangeCorpsContributeNotify* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(contribute_, other->contribute_);
    std::swap(changetype_, other->changetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeCorpsContributeNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeCorpsContributeNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeCorpsContributeNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeCorpsContributeNotify_reflection_;
}

// ===================================================================

const ::std::string CMessageChangeCorpsGloryNotify::_default_rolename_;
#ifndef _MSC_VER
const int CMessageChangeCorpsGloryNotify::kCorpsIDFieldNumber;
const int CMessageChangeCorpsGloryNotify::kGloryFieldNumber;
const int CMessageChangeCorpsGloryNotify::kIfReducedFieldNumber;
const int CMessageChangeCorpsGloryNotify::kRoleIDFieldNumber;
const int CMessageChangeCorpsGloryNotify::kReasonFieldNumber;
const int CMessageChangeCorpsGloryNotify::kRoleNameFieldNumber;
#endif  // !_MSC_VER

CMessageChangeCorpsGloryNotify::CMessageChangeCorpsGloryNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeCorpsGloryNotify::InitAsDefaultInstance() {}

CMessageChangeCorpsGloryNotify::CMessageChangeCorpsGloryNotify(const CMessageChangeCorpsGloryNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeCorpsGloryNotify::SharedCtor() {
  _cached_size_ = 0;
  corpsid_ = 0u;
  glory_ = 0u;
  ifreduced_ = 0u;
  roleid_ = 0u;
  reason_ = 0u;
  rolename_ = const_cast< ::std::string*>(&_default_rolename_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeCorpsGloryNotify::~CMessageChangeCorpsGloryNotify() {
  SharedDtor();
}

void CMessageChangeCorpsGloryNotify::SharedDtor() {
  if (rolename_ != &_default_rolename_) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageChangeCorpsGloryNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeCorpsGloryNotify_descriptor_;
}

const CMessageChangeCorpsGloryNotify& CMessageChangeCorpsGloryNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeCorpsGloryNotify* CMessageChangeCorpsGloryNotify::default_instance_ = NULL;

CMessageChangeCorpsGloryNotify* CMessageChangeCorpsGloryNotify::New() const {
  return new CMessageChangeCorpsGloryNotify;
}

void CMessageChangeCorpsGloryNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    corpsid_ = 0u;
    glory_ = 0u;
    ifreduced_ = 0u;
    roleid_ = 0u;
    reason_ = 0u;
    if (_has_bit(5)) {
      if (rolename_ != &_default_rolename_) {
        rolename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeCorpsGloryNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CorpsID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Glory;
        break;
      }
      
      // optional uint32 Glory = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Glory:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &glory_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_IfReduced;
        break;
      }
      
      // optional uint32 IfReduced = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IfReduced:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ifreduced_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Reason;
        break;
      }
      
      // optional uint32 Reason = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Reason:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &reason_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_RoleName;
        break;
      }
      
      // optional string RoleName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RoleName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_rolename()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeCorpsGloryNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeCorpsGloryNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CorpsID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->corpsid(), output);
  }
  
  // optional uint32 Glory = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->glory(), output);
  }
  
  // optional uint32 IfReduced = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->ifreduced(), output);
  }
  
  // optional uint32 RoleID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->roleid(), output);
  }
  
  // optional uint32 Reason = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->reason(), output);
  }
  
  // optional string RoleName = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteString(6, this->rolename(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeCorpsGloryNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CorpsID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->corpsid(), target);
  }
  
  // optional uint32 Glory = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->glory(), target);
  }
  
  // optional uint32 IfReduced = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->ifreduced(), target);
  }
  
  // optional uint32 RoleID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->roleid(), target);
  }
  
  // optional uint32 Reason = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->reason(), target);
  }
  
  // optional string RoleName = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(6, this->rolename(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeCorpsGloryNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CorpsID = 1;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
    // optional uint32 Glory = 2;
    if (has_glory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->glory());
    }
    
    // optional uint32 IfReduced = 3;
    if (has_ifreduced()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ifreduced());
    }
    
    // optional uint32 RoleID = 4;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 Reason = 5;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->reason());
    }
    
    // optional string RoleName = 6;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->rolename());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeCorpsGloryNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeCorpsGloryNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeCorpsGloryNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeCorpsGloryNotify::MergeFrom(const CMessageChangeCorpsGloryNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_corpsid(from.corpsid());
    }
    if (from._has_bit(1)) {
      set_glory(from.glory());
    }
    if (from._has_bit(2)) {
      set_ifreduced(from.ifreduced());
    }
    if (from._has_bit(3)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(4)) {
      set_reason(from.reason());
    }
    if (from._has_bit(5)) {
      set_rolename(from.rolename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeCorpsGloryNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeCorpsGloryNotify::CopyFrom(const CMessageChangeCorpsGloryNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeCorpsGloryNotify::Swap(CMessageChangeCorpsGloryNotify* other) {
  if (other != this) {
    std::swap(corpsid_, other->corpsid_);
    std::swap(glory_, other->glory_);
    std::swap(ifreduced_, other->ifreduced_);
    std::swap(roleid_, other->roleid_);
    std::swap(reason_, other->reason_);
    std::swap(rolename_, other->rolename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeCorpsGloryNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeCorpsGloryNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeCorpsGloryNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeCorpsGloryNotify_reflection_;
}

// ===================================================================

const ::std::string CMessageChangeCorpsMoneyNotify::_default_rolename_;
#ifndef _MSC_VER
const int CMessageChangeCorpsMoneyNotify::kCorpsIDFieldNumber;
const int CMessageChangeCorpsMoneyNotify::kMoneyFieldNumber;
const int CMessageChangeCorpsMoneyNotify::kIfPayoutFieldNumber;
const int CMessageChangeCorpsMoneyNotify::kRoleIDFieldNumber;
const int CMessageChangeCorpsMoneyNotify::kReasonFieldNumber;
const int CMessageChangeCorpsMoneyNotify::kRoleNameFieldNumber;
#endif  // !_MSC_VER

CMessageChangeCorpsMoneyNotify::CMessageChangeCorpsMoneyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeCorpsMoneyNotify::InitAsDefaultInstance() {}

CMessageChangeCorpsMoneyNotify::CMessageChangeCorpsMoneyNotify(const CMessageChangeCorpsMoneyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeCorpsMoneyNotify::SharedCtor() {
  _cached_size_ = 0;
  corpsid_ = 0u;
  money_ = 0u;
  ifpayout_ = 0u;
  roleid_ = 0u;
  reason_ = 0u;
  rolename_ = const_cast< ::std::string*>(&_default_rolename_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeCorpsMoneyNotify::~CMessageChangeCorpsMoneyNotify() {
  SharedDtor();
}

void CMessageChangeCorpsMoneyNotify::SharedDtor() {
  if (rolename_ != &_default_rolename_) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageChangeCorpsMoneyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeCorpsMoneyNotify_descriptor_;
}

const CMessageChangeCorpsMoneyNotify& CMessageChangeCorpsMoneyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeCorpsMoneyNotify* CMessageChangeCorpsMoneyNotify::default_instance_ = NULL;

CMessageChangeCorpsMoneyNotify* CMessageChangeCorpsMoneyNotify::New() const {
  return new CMessageChangeCorpsMoneyNotify;
}

void CMessageChangeCorpsMoneyNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    corpsid_ = 0u;
    money_ = 0u;
    ifpayout_ = 0u;
    roleid_ = 0u;
    reason_ = 0u;
    if (_has_bit(5)) {
      if (rolename_ != &_default_rolename_) {
        rolename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeCorpsMoneyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CorpsID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Money;
        break;
      }
      
      // optional uint32 Money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_IfPayout;
        break;
      }
      
      // optional uint32 IfPayout = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IfPayout:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ifpayout_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Reason;
        break;
      }
      
      // optional uint32 Reason = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Reason:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &reason_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_RoleName;
        break;
      }
      
      // optional string RoleName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RoleName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_rolename()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeCorpsMoneyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeCorpsMoneyNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CorpsID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->corpsid(), output);
  }
  
  // optional uint32 Money = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->money(), output);
  }
  
  // optional uint32 IfPayout = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->ifpayout(), output);
  }
  
  // optional uint32 RoleID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->roleid(), output);
  }
  
  // optional uint32 Reason = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->reason(), output);
  }
  
  // optional string RoleName = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteString(6, this->rolename(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeCorpsMoneyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CorpsID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->corpsid(), target);
  }
  
  // optional uint32 Money = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->money(), target);
  }
  
  // optional uint32 IfPayout = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->ifpayout(), target);
  }
  
  // optional uint32 RoleID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->roleid(), target);
  }
  
  // optional uint32 Reason = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->reason(), target);
  }
  
  // optional string RoleName = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(6, this->rolename(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeCorpsMoneyNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CorpsID = 1;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
    // optional uint32 Money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
    // optional uint32 IfPayout = 3;
    if (has_ifpayout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ifpayout());
    }
    
    // optional uint32 RoleID = 4;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 Reason = 5;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->reason());
    }
    
    // optional string RoleName = 6;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->rolename());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeCorpsMoneyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeCorpsMoneyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeCorpsMoneyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeCorpsMoneyNotify::MergeFrom(const CMessageChangeCorpsMoneyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_corpsid(from.corpsid());
    }
    if (from._has_bit(1)) {
      set_money(from.money());
    }
    if (from._has_bit(2)) {
      set_ifpayout(from.ifpayout());
    }
    if (from._has_bit(3)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(4)) {
      set_reason(from.reason());
    }
    if (from._has_bit(5)) {
      set_rolename(from.rolename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeCorpsMoneyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeCorpsMoneyNotify::CopyFrom(const CMessageChangeCorpsMoneyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeCorpsMoneyNotify::Swap(CMessageChangeCorpsMoneyNotify* other) {
  if (other != this) {
    std::swap(corpsid_, other->corpsid_);
    std::swap(money_, other->money_);
    std::swap(ifpayout_, other->ifpayout_);
    std::swap(roleid_, other->roleid_);
    std::swap(reason_, other->reason_);
    std::swap(rolename_, other->rolename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeCorpsMoneyNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeCorpsMoneyNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeCorpsMoneyNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeCorpsMoneyNotify_reflection_;
}

// ===================================================================

const ::std::string CMessageChangeCorpsBossTimes::_default_rolename_;
#ifndef _MSC_VER
const int CMessageChangeCorpsBossTimes::kCorpsIDFieldNumber;
const int CMessageChangeCorpsBossTimes::kTimesFieldNumber;
const int CMessageChangeCorpsBossTimes::kRoleIDFieldNumber;
const int CMessageChangeCorpsBossTimes::kBossIDFieldNumber;
const int CMessageChangeCorpsBossTimes::kRoleNameFieldNumber;
const int CMessageChangeCorpsBossTimes::kReasonFieldNumber;
#endif  // !_MSC_VER

CMessageChangeCorpsBossTimes::CMessageChangeCorpsBossTimes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeCorpsBossTimes::InitAsDefaultInstance() {}

CMessageChangeCorpsBossTimes::CMessageChangeCorpsBossTimes(const CMessageChangeCorpsBossTimes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeCorpsBossTimes::SharedCtor() {
  _cached_size_ = 0;
  corpsid_ = 0u;
  times_ = 0u;
  roleid_ = 0u;
  bossid_ = 0u;
  rolename_ = const_cast< ::std::string*>(&_default_rolename_);
  reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeCorpsBossTimes::~CMessageChangeCorpsBossTimes() {
  SharedDtor();
}

void CMessageChangeCorpsBossTimes::SharedDtor() {
  if (rolename_ != &_default_rolename_) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageChangeCorpsBossTimes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeCorpsBossTimes_descriptor_;
}

const CMessageChangeCorpsBossTimes& CMessageChangeCorpsBossTimes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeCorpsBossTimes* CMessageChangeCorpsBossTimes::default_instance_ = NULL;

CMessageChangeCorpsBossTimes* CMessageChangeCorpsBossTimes::New() const {
  return new CMessageChangeCorpsBossTimes;
}

void CMessageChangeCorpsBossTimes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    corpsid_ = 0u;
    times_ = 0u;
    roleid_ = 0u;
    bossid_ = 0u;
    if (_has_bit(4)) {
      if (rolename_ != &_default_rolename_) {
        rolename_->clear();
      }
    }
    reason_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeCorpsBossTimes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CorpsID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Times;
        break;
      }
      
      // optional uint32 Times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Times:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &times_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_BossID;
        break;
      }
      
      // optional uint32 BossID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BossID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &bossid_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_RoleName;
        break;
      }
      
      // optional string RoleName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RoleName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_rolename()));
        if (input->ExpectTag(48)) goto parse_Reason;
        break;
      }
      
      // optional uint32 Reason = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Reason:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &reason_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeCorpsBossTimes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeCorpsBossTimes::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CorpsID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->corpsid(), output);
  }
  
  // optional uint32 Times = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->times(), output);
  }
  
  // optional uint32 RoleID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->roleid(), output);
  }
  
  // optional uint32 BossID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->bossid(), output);
  }
  
  // optional string RoleName = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->rolename(), output);
  }
  
  // optional uint32 Reason = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->reason(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeCorpsBossTimes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CorpsID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->corpsid(), target);
  }
  
  // optional uint32 Times = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->times(), target);
  }
  
  // optional uint32 RoleID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->roleid(), target);
  }
  
  // optional uint32 BossID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->bossid(), target);
  }
  
  // optional string RoleName = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->rolename(), target);
  }
  
  // optional uint32 Reason = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->reason(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeCorpsBossTimes::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CorpsID = 1;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
    // optional uint32 Times = 2;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->times());
    }
    
    // optional uint32 RoleID = 3;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 BossID = 4;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->bossid());
    }
    
    // optional string RoleName = 5;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->rolename());
    }
    
    // optional uint32 Reason = 6;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->reason());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeCorpsBossTimes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeCorpsBossTimes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeCorpsBossTimes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeCorpsBossTimes::MergeFrom(const CMessageChangeCorpsBossTimes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_corpsid(from.corpsid());
    }
    if (from._has_bit(1)) {
      set_times(from.times());
    }
    if (from._has_bit(2)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(3)) {
      set_bossid(from.bossid());
    }
    if (from._has_bit(4)) {
      set_rolename(from.rolename());
    }
    if (from._has_bit(5)) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeCorpsBossTimes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeCorpsBossTimes::CopyFrom(const CMessageChangeCorpsBossTimes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeCorpsBossTimes::Swap(CMessageChangeCorpsBossTimes* other) {
  if (other != this) {
    std::swap(corpsid_, other->corpsid_);
    std::swap(times_, other->times_);
    std::swap(roleid_, other->roleid_);
    std::swap(bossid_, other->bossid_);
    std::swap(rolename_, other->rolename_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeCorpsBossTimes::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeCorpsBossTimes::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeCorpsBossTimes::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeCorpsBossTimes_reflection_;
}

// ===================================================================

const ::std::string CMessageChangeCorpsBossRefineValue::_default_rolename_;
#ifndef _MSC_VER
const int CMessageChangeCorpsBossRefineValue::kCorpsIDFieldNumber;
const int CMessageChangeCorpsBossRefineValue::kRefineValueFieldNumber;
const int CMessageChangeCorpsBossRefineValue::kReasonFieldNumber;
const int CMessageChangeCorpsBossRefineValue::kRoleIDFieldNumber;
const int CMessageChangeCorpsBossRefineValue::kRoleNameFieldNumber;
#endif  // !_MSC_VER

CMessageChangeCorpsBossRefineValue::CMessageChangeCorpsBossRefineValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeCorpsBossRefineValue::InitAsDefaultInstance() {}

CMessageChangeCorpsBossRefineValue::CMessageChangeCorpsBossRefineValue(const CMessageChangeCorpsBossRefineValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeCorpsBossRefineValue::SharedCtor() {
  _cached_size_ = 0;
  corpsid_ = 0u;
  refinevalue_ = 0u;
  reason_ = 0u;
  roleid_ = 0u;
  rolename_ = const_cast< ::std::string*>(&_default_rolename_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeCorpsBossRefineValue::~CMessageChangeCorpsBossRefineValue() {
  SharedDtor();
}

void CMessageChangeCorpsBossRefineValue::SharedDtor() {
  if (rolename_ != &_default_rolename_) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageChangeCorpsBossRefineValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeCorpsBossRefineValue_descriptor_;
}

const CMessageChangeCorpsBossRefineValue& CMessageChangeCorpsBossRefineValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeCorpsBossRefineValue* CMessageChangeCorpsBossRefineValue::default_instance_ = NULL;

CMessageChangeCorpsBossRefineValue* CMessageChangeCorpsBossRefineValue::New() const {
  return new CMessageChangeCorpsBossRefineValue;
}

void CMessageChangeCorpsBossRefineValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    corpsid_ = 0u;
    refinevalue_ = 0u;
    reason_ = 0u;
    roleid_ = 0u;
    if (_has_bit(4)) {
      if (rolename_ != &_default_rolename_) {
        rolename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeCorpsBossRefineValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CorpsID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_RefineValue;
        break;
      }
      
      // optional uint32 RefineValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RefineValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &refinevalue_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Reason;
        break;
      }
      
      // optional uint32 Reason = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Reason:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &reason_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_RoleName;
        break;
      }
      
      // optional string RoleName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RoleName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_rolename()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeCorpsBossRefineValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeCorpsBossRefineValue::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CorpsID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->corpsid(), output);
  }
  
  // optional uint32 RefineValue = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->refinevalue(), output);
  }
  
  // optional uint32 Reason = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->reason(), output);
  }
  
  // optional uint32 RoleID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->roleid(), output);
  }
  
  // optional string RoleName = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->rolename(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeCorpsBossRefineValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CorpsID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->corpsid(), target);
  }
  
  // optional uint32 RefineValue = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->refinevalue(), target);
  }
  
  // optional uint32 Reason = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->reason(), target);
  }
  
  // optional uint32 RoleID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->roleid(), target);
  }
  
  // optional string RoleName = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->rolename(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeCorpsBossRefineValue::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CorpsID = 1;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
    // optional uint32 RefineValue = 2;
    if (has_refinevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->refinevalue());
    }
    
    // optional uint32 Reason = 3;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->reason());
    }
    
    // optional uint32 RoleID = 4;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional string RoleName = 5;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->rolename());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeCorpsBossRefineValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeCorpsBossRefineValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeCorpsBossRefineValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeCorpsBossRefineValue::MergeFrom(const CMessageChangeCorpsBossRefineValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_corpsid(from.corpsid());
    }
    if (from._has_bit(1)) {
      set_refinevalue(from.refinevalue());
    }
    if (from._has_bit(2)) {
      set_reason(from.reason());
    }
    if (from._has_bit(3)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(4)) {
      set_rolename(from.rolename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeCorpsBossRefineValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeCorpsBossRefineValue::CopyFrom(const CMessageChangeCorpsBossRefineValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeCorpsBossRefineValue::Swap(CMessageChangeCorpsBossRefineValue* other) {
  if (other != this) {
    std::swap(corpsid_, other->corpsid_);
    std::swap(refinevalue_, other->refinevalue_);
    std::swap(reason_, other->reason_);
    std::swap(roleid_, other->roleid_);
    std::swap(rolename_, other->rolename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeCorpsBossRefineValue::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeCorpsBossRefineValue::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeCorpsBossRefineValue::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeCorpsBossRefineValue_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageChangeCorpsCollectActive::kRoleIDFieldNumber;
const int CMessageChangeCorpsCollectActive::kActiveValueFieldNumber;
const int CMessageChangeCorpsCollectActive::kChangeTypeFieldNumber;
#endif  // !_MSC_VER

CMessageChangeCorpsCollectActive::CMessageChangeCorpsCollectActive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeCorpsCollectActive::InitAsDefaultInstance() {}

CMessageChangeCorpsCollectActive::CMessageChangeCorpsCollectActive(const CMessageChangeCorpsCollectActive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeCorpsCollectActive::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  activevalue_ = 0u;
  changetype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeCorpsCollectActive::~CMessageChangeCorpsCollectActive() {
  SharedDtor();
}

void CMessageChangeCorpsCollectActive::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageChangeCorpsCollectActive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeCorpsCollectActive_descriptor_;
}

const CMessageChangeCorpsCollectActive& CMessageChangeCorpsCollectActive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeCorpsCollectActive* CMessageChangeCorpsCollectActive::default_instance_ = NULL;

CMessageChangeCorpsCollectActive* CMessageChangeCorpsCollectActive::New() const {
  return new CMessageChangeCorpsCollectActive;
}

void CMessageChangeCorpsCollectActive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    activevalue_ = 0u;
    changetype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeCorpsCollectActive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ActiveValue;
        break;
      }
      
      // optional uint32 ActiveValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ActiveValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &activevalue_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_ChangeType;
        break;
      }
      
      // optional uint32 ChangeType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ChangeType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &changetype_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeCorpsCollectActive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeCorpsCollectActive::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional uint32 ActiveValue = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->activevalue(), output);
  }
  
  // optional uint32 ChangeType = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->changetype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeCorpsCollectActive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional uint32 ActiveValue = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->activevalue(), target);
  }
  
  // optional uint32 ChangeType = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->changetype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeCorpsCollectActive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 ActiveValue = 2;
    if (has_activevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->activevalue());
    }
    
    // optional uint32 ChangeType = 3;
    if (has_changetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->changetype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeCorpsCollectActive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeCorpsCollectActive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeCorpsCollectActive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeCorpsCollectActive::MergeFrom(const CMessageChangeCorpsCollectActive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_activevalue(from.activevalue());
    }
    if (from._has_bit(2)) {
      set_changetype(from.changetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeCorpsCollectActive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeCorpsCollectActive::CopyFrom(const CMessageChangeCorpsCollectActive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeCorpsCollectActive::Swap(CMessageChangeCorpsCollectActive* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(activevalue_, other->activevalue_);
    std::swap(changetype_, other->changetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeCorpsCollectActive::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeCorpsCollectActive::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeCorpsCollectActive::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeCorpsCollectActive_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageFamilyApExpChangedNotify::kRoleIDFieldNumber;
const int CMessageFamilyApExpChangedNotify::kFamiyIDFieldNumber;
const int CMessageFamilyApExpChangedNotify::kAPFieldNumber;
const int CMessageFamilyApExpChangedNotify::kExpFieldNumber;
#endif  // !_MSC_VER

CMessageFamilyApExpChangedNotify::CMessageFamilyApExpChangedNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFamilyApExpChangedNotify::InitAsDefaultInstance() {}

CMessageFamilyApExpChangedNotify::CMessageFamilyApExpChangedNotify(const CMessageFamilyApExpChangedNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFamilyApExpChangedNotify::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  famiyid_ = 0u;
  ap_ = 0u;
  exp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFamilyApExpChangedNotify::~CMessageFamilyApExpChangedNotify() {
  SharedDtor();
}

void CMessageFamilyApExpChangedNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageFamilyApExpChangedNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFamilyApExpChangedNotify_descriptor_;
}

const CMessageFamilyApExpChangedNotify& CMessageFamilyApExpChangedNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFamilyApExpChangedNotify* CMessageFamilyApExpChangedNotify::default_instance_ = NULL;

CMessageFamilyApExpChangedNotify* CMessageFamilyApExpChangedNotify::New() const {
  return new CMessageFamilyApExpChangedNotify;
}

void CMessageFamilyApExpChangedNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    famiyid_ = 0u;
    ap_ = 0u;
    exp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFamilyApExpChangedNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_FamiyID;
        break;
      }
      
      // optional uint32 FamiyID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamiyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &famiyid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_AP;
        break;
      }
      
      // optional uint32 AP = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AP:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ap_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Exp;
        break;
      }
      
      // optional uint32 Exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Exp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &exp_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageFamilyApExpChangedNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFamilyApExpChangedNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional uint32 FamiyID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->famiyid(), output);
  }
  
  // optional uint32 AP = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->ap(), output);
  }
  
  // optional uint32 Exp = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->exp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFamilyApExpChangedNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional uint32 FamiyID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->famiyid(), target);
  }
  
  // optional uint32 AP = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->ap(), target);
  }
  
  // optional uint32 Exp = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->exp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFamilyApExpChangedNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 FamiyID = 2;
    if (has_famiyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->famiyid());
    }
    
    // optional uint32 AP = 3;
    if (has_ap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ap());
    }
    
    // optional uint32 Exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->exp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFamilyApExpChangedNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFamilyApExpChangedNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFamilyApExpChangedNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFamilyApExpChangedNotify::MergeFrom(const CMessageFamilyApExpChangedNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_famiyid(from.famiyid());
    }
    if (from._has_bit(2)) {
      set_ap(from.ap());
    }
    if (from._has_bit(3)) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFamilyApExpChangedNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFamilyApExpChangedNotify::CopyFrom(const CMessageFamilyApExpChangedNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFamilyApExpChangedNotify::Swap(CMessageFamilyApExpChangedNotify* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(famiyid_, other->famiyid_);
    std::swap(ap_, other->ap_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFamilyApExpChangedNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFamilyApExpChangedNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFamilyApExpChangedNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFamilyApExpChangedNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCorpsApExpChangedNotify::kRoleIDFieldNumber;
const int CMessageCorpsApExpChangedNotify::kCorpsIDFieldNumber;
const int CMessageCorpsApExpChangedNotify::kAPFieldNumber;
const int CMessageCorpsApExpChangedNotify::kExpFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsApExpChangedNotify::CMessageCorpsApExpChangedNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsApExpChangedNotify::InitAsDefaultInstance() {}

CMessageCorpsApExpChangedNotify::CMessageCorpsApExpChangedNotify(const CMessageCorpsApExpChangedNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsApExpChangedNotify::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  corpsid_ = 0u;
  ap_ = 0u;
  exp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsApExpChangedNotify::~CMessageCorpsApExpChangedNotify() {
  SharedDtor();
}

void CMessageCorpsApExpChangedNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsApExpChangedNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsApExpChangedNotify_descriptor_;
}

const CMessageCorpsApExpChangedNotify& CMessageCorpsApExpChangedNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsApExpChangedNotify* CMessageCorpsApExpChangedNotify::default_instance_ = NULL;

CMessageCorpsApExpChangedNotify* CMessageCorpsApExpChangedNotify::New() const {
  return new CMessageCorpsApExpChangedNotify;
}

void CMessageCorpsApExpChangedNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    corpsid_ = 0u;
    ap_ = 0u;
    exp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsApExpChangedNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CorpsID;
        break;
      }
      
      // optional uint32 CorpsID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_AP;
        break;
      }
      
      // optional uint32 AP = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AP:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ap_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Exp;
        break;
      }
      
      // optional uint32 Exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Exp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &exp_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsApExpChangedNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsApExpChangedNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional uint32 CorpsID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->corpsid(), output);
  }
  
  // optional uint32 AP = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->ap(), output);
  }
  
  // optional uint32 Exp = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->exp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsApExpChangedNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional uint32 CorpsID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->corpsid(), target);
  }
  
  // optional uint32 AP = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->ap(), target);
  }
  
  // optional uint32 Exp = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->exp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsApExpChangedNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 CorpsID = 2;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
    // optional uint32 AP = 3;
    if (has_ap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ap());
    }
    
    // optional uint32 Exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->exp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsApExpChangedNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsApExpChangedNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsApExpChangedNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsApExpChangedNotify::MergeFrom(const CMessageCorpsApExpChangedNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_corpsid(from.corpsid());
    }
    if (from._has_bit(2)) {
      set_ap(from.ap());
    }
    if (from._has_bit(3)) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsApExpChangedNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsApExpChangedNotify::CopyFrom(const CMessageCorpsApExpChangedNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsApExpChangedNotify::Swap(CMessageCorpsApExpChangedNotify* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(corpsid_, other->corpsid_);
    std::swap(ap_, other->ap_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsApExpChangedNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsApExpChangedNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsApExpChangedNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsApExpChangedNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageChangeJudgeScoreReuqest::kRoleIDFieldNumber;
const int CMessageChangeJudgeScoreReuqest::kTotalFieldNumber;
#endif  // !_MSC_VER

CMessageChangeJudgeScoreReuqest::CMessageChangeJudgeScoreReuqest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeJudgeScoreReuqest::InitAsDefaultInstance() {}

CMessageChangeJudgeScoreReuqest::CMessageChangeJudgeScoreReuqest(const CMessageChangeJudgeScoreReuqest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeJudgeScoreReuqest::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  total_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeJudgeScoreReuqest::~CMessageChangeJudgeScoreReuqest() {
  SharedDtor();
}

void CMessageChangeJudgeScoreReuqest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageChangeJudgeScoreReuqest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeJudgeScoreReuqest_descriptor_;
}

const CMessageChangeJudgeScoreReuqest& CMessageChangeJudgeScoreReuqest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeJudgeScoreReuqest* CMessageChangeJudgeScoreReuqest::default_instance_ = NULL;

CMessageChangeJudgeScoreReuqest* CMessageChangeJudgeScoreReuqest::New() const {
  return new CMessageChangeJudgeScoreReuqest;
}

void CMessageChangeJudgeScoreReuqest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    total_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeJudgeScoreReuqest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Total;
        break;
      }
      
      // optional uint32 Total = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Total:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &total_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeJudgeScoreReuqest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeJudgeScoreReuqest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional uint32 Total = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->total(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeJudgeScoreReuqest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional uint32 Total = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->total(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeJudgeScoreReuqest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 Total = 2;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->total());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeJudgeScoreReuqest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeJudgeScoreReuqest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeJudgeScoreReuqest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeJudgeScoreReuqest::MergeFrom(const CMessageChangeJudgeScoreReuqest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_total(from.total());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeJudgeScoreReuqest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeJudgeScoreReuqest::CopyFrom(const CMessageChangeJudgeScoreReuqest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeJudgeScoreReuqest::Swap(CMessageChangeJudgeScoreReuqest* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(total_, other->total_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeJudgeScoreReuqest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeJudgeScoreReuqest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeJudgeScoreReuqest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeJudgeScoreReuqest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageChangeWizardRequest::kCharIDFieldNumber;
const int CMessageChangeWizardRequest::kLineIDFieldNumber;
const int CMessageChangeWizardRequest::kCountryIDFieldNumber;
const int CMessageChangeWizardRequest::kChangeTypeFieldNumber;
const int CMessageChangeWizardRequest::kWizardValueFieldNumber;
#endif  // !_MSC_VER

CMessageChangeWizardRequest::CMessageChangeWizardRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeWizardRequest::InitAsDefaultInstance() {}

CMessageChangeWizardRequest::CMessageChangeWizardRequest(const CMessageChangeWizardRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeWizardRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  lineid_ = 0u;
  countryid_ = 0u;
  changetype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeWizardRequest::~CMessageChangeWizardRequest() {
  SharedDtor();
}

void CMessageChangeWizardRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageChangeWizardRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeWizardRequest_descriptor_;
}

const CMessageChangeWizardRequest& CMessageChangeWizardRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeWizardRequest* CMessageChangeWizardRequest::default_instance_ = NULL;

CMessageChangeWizardRequest* CMessageChangeWizardRequest::New() const {
  return new CMessageChangeWizardRequest;
}

void CMessageChangeWizardRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    lineid_ = 0u;
    countryid_ = 0u;
    changetype_ = 0u;
  }
  wizardvalue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeWizardRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_LineID;
        break;
      }
      
      // optional uint32 LineID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lineid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_CountryID;
        break;
      }
      
      // optional uint32 CountryID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CountryID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &countryid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_ChangeType;
        break;
      }
      
      // optional uint32 ChangeType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ChangeType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &changetype_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_WizardValue;
        break;
      }
      
      // repeated uint32 WizardValue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WizardValue:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_wizardvalue(value);
        if (input->ExpectTag(40)) goto parse_WizardValue;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeWizardRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeWizardRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 LineID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->lineid(), output);
  }
  
  // optional uint32 CountryID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->countryid(), output);
  }
  
  // optional uint32 ChangeType = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->changetype(), output);
  }
  
  // repeated uint32 WizardValue = 5;
  for (int i = 0; i < this->wizardvalue_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->wizardvalue(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeWizardRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 LineID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->lineid(), target);
  }
  
  // optional uint32 CountryID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->countryid(), target);
  }
  
  // optional uint32 ChangeType = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->changetype(), target);
  }
  
  // repeated uint32 WizardValue = 5;
  for (int i = 0; i < this->wizardvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->wizardvalue(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeWizardRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 LineID = 2;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lineid());
    }
    
    // optional uint32 CountryID = 3;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->countryid());
    }
    
    // optional uint32 ChangeType = 4;
    if (has_changetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->changetype());
    }
    
  }
  // repeated uint32 WizardValue = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->wizardvalue_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->wizardvalue(i));
    }
    total_size += 1 * this->wizardvalue_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeWizardRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeWizardRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeWizardRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeWizardRequest::MergeFrom(const CMessageChangeWizardRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  wizardvalue_.MergeFrom(from.wizardvalue_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(2)) {
      set_countryid(from.countryid());
    }
    if (from._has_bit(3)) {
      set_changetype(from.changetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeWizardRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeWizardRequest::CopyFrom(const CMessageChangeWizardRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeWizardRequest::Swap(CMessageChangeWizardRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(lineid_, other->lineid_);
    std::swap(countryid_, other->countryid_);
    std::swap(changetype_, other->changetype_);
    wizardvalue_.Swap(&other->wizardvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeWizardRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeWizardRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeWizardRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeWizardRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageChangeWizardResponse::kCharIDFieldNumber;
const int CMessageChangeWizardResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMessageChangeWizardResponse::CMessageChangeWizardResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeWizardResponse::InitAsDefaultInstance() {}

CMessageChangeWizardResponse::CMessageChangeWizardResponse(const CMessageChangeWizardResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeWizardResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeWizardResponse::~CMessageChangeWizardResponse() {
  SharedDtor();
}

void CMessageChangeWizardResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageChangeWizardResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeWizardResponse_descriptor_;
}

const CMessageChangeWizardResponse& CMessageChangeWizardResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeWizardResponse* CMessageChangeWizardResponse::default_instance_ = NULL;

CMessageChangeWizardResponse* CMessageChangeWizardResponse::New() const {
  return new CMessageChangeWizardResponse;
}

void CMessageChangeWizardResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeWizardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeWizardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeWizardResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeWizardResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeWizardResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeWizardResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeWizardResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeWizardResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeWizardResponse::MergeFrom(const CMessageChangeWizardResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeWizardResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeWizardResponse::CopyFrom(const CMessageChangeWizardResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeWizardResponse::Swap(CMessageChangeWizardResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeWizardResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeWizardResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeWizardResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeWizardResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageChangeConstructRequest::kCharIDFieldNumber;
const int CMessageChangeConstructRequest::kLineIDFieldNumber;
const int CMessageChangeConstructRequest::kCountryIDFieldNumber;
const int CMessageChangeConstructRequest::kChangeTypeFieldNumber;
const int CMessageChangeConstructRequest::kConstructTypeFieldNumber;
const int CMessageChangeConstructRequest::kConstructValueFieldNumber;
#endif  // !_MSC_VER

CMessageChangeConstructRequest::CMessageChangeConstructRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeConstructRequest::InitAsDefaultInstance() {}

CMessageChangeConstructRequest::CMessageChangeConstructRequest(const CMessageChangeConstructRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeConstructRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  lineid_ = 0u;
  countryid_ = 0u;
  changetype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeConstructRequest::~CMessageChangeConstructRequest() {
  SharedDtor();
}

void CMessageChangeConstructRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageChangeConstructRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeConstructRequest_descriptor_;
}

const CMessageChangeConstructRequest& CMessageChangeConstructRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeConstructRequest* CMessageChangeConstructRequest::default_instance_ = NULL;

CMessageChangeConstructRequest* CMessageChangeConstructRequest::New() const {
  return new CMessageChangeConstructRequest;
}

void CMessageChangeConstructRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    lineid_ = 0u;
    countryid_ = 0u;
    changetype_ = 0u;
  }
  constructtype_.Clear();
  constructvalue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeConstructRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_LineID;
        break;
      }
      
      // optional uint32 LineID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lineid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_CountryID;
        break;
      }
      
      // optional uint32 CountryID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CountryID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &countryid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_ChangeType;
        break;
      }
      
      // optional uint32 ChangeType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ChangeType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &changetype_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_ConstructType;
        break;
      }
      
      // repeated uint32 ConstructType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ConstructType:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_constructtype(value);
        if (input->ExpectTag(40)) goto parse_ConstructType;
        if (input->ExpectTag(48)) goto parse_ConstructValue;
        break;
      }
      
      // repeated uint32 ConstructValue = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ConstructValue:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_constructvalue(value);
        if (input->ExpectTag(48)) goto parse_ConstructValue;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeConstructRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeConstructRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 LineID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->lineid(), output);
  }
  
  // optional uint32 CountryID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->countryid(), output);
  }
  
  // optional uint32 ChangeType = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->changetype(), output);
  }
  
  // repeated uint32 ConstructType = 5;
  for (int i = 0; i < this->constructtype_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->constructtype(i), output);
  }
  
  // repeated uint32 ConstructValue = 6;
  for (int i = 0; i < this->constructvalue_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->constructvalue(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeConstructRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 LineID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->lineid(), target);
  }
  
  // optional uint32 CountryID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->countryid(), target);
  }
  
  // optional uint32 ChangeType = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->changetype(), target);
  }
  
  // repeated uint32 ConstructType = 5;
  for (int i = 0; i < this->constructtype_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->constructtype(i), target);
  }
  
  // repeated uint32 ConstructValue = 6;
  for (int i = 0; i < this->constructvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->constructvalue(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeConstructRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 LineID = 2;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lineid());
    }
    
    // optional uint32 CountryID = 3;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->countryid());
    }
    
    // optional uint32 ChangeType = 4;
    if (has_changetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->changetype());
    }
    
  }
  // repeated uint32 ConstructType = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->constructtype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->constructtype(i));
    }
    total_size += 1 * this->constructtype_size() + data_size;
  }
  
  // repeated uint32 ConstructValue = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->constructvalue_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->constructvalue(i));
    }
    total_size += 1 * this->constructvalue_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeConstructRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeConstructRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeConstructRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeConstructRequest::MergeFrom(const CMessageChangeConstructRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  constructtype_.MergeFrom(from.constructtype_);
  constructvalue_.MergeFrom(from.constructvalue_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(2)) {
      set_countryid(from.countryid());
    }
    if (from._has_bit(3)) {
      set_changetype(from.changetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeConstructRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeConstructRequest::CopyFrom(const CMessageChangeConstructRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeConstructRequest::Swap(CMessageChangeConstructRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(lineid_, other->lineid_);
    std::swap(countryid_, other->countryid_);
    std::swap(changetype_, other->changetype_);
    constructtype_.Swap(&other->constructtype_);
    constructvalue_.Swap(&other->constructvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeConstructRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeConstructRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeConstructRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeConstructRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageChangeConstructResponse::kCharIDFieldNumber;
const int CMessageChangeConstructResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMessageChangeConstructResponse::CMessageChangeConstructResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeConstructResponse::InitAsDefaultInstance() {}

CMessageChangeConstructResponse::CMessageChangeConstructResponse(const CMessageChangeConstructResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeConstructResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeConstructResponse::~CMessageChangeConstructResponse() {
  SharedDtor();
}

void CMessageChangeConstructResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageChangeConstructResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeConstructResponse_descriptor_;
}

const CMessageChangeConstructResponse& CMessageChangeConstructResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeConstructResponse* CMessageChangeConstructResponse::default_instance_ = NULL;

CMessageChangeConstructResponse* CMessageChangeConstructResponse::New() const {
  return new CMessageChangeConstructResponse;
}

void CMessageChangeConstructResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeConstructResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeConstructResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeConstructResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeConstructResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeConstructResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeConstructResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeConstructResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeConstructResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeConstructResponse::MergeFrom(const CMessageChangeConstructResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeConstructResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeConstructResponse::CopyFrom(const CMessageChangeConstructResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeConstructResponse::Swap(CMessageChangeConstructResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeConstructResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeConstructResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeConstructResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeConstructResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageChangePowerRequest::kCharIDFieldNumber;
const int CMessageChangePowerRequest::kLineIDFieldNumber;
const int CMessageChangePowerRequest::kCountryIDFieldNumber;
const int CMessageChangePowerRequest::kChangeTypeFieldNumber;
const int CMessageChangePowerRequest::kPowerValueFieldNumber;
#endif  // !_MSC_VER

CMessageChangePowerRequest::CMessageChangePowerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangePowerRequest::InitAsDefaultInstance() {}

CMessageChangePowerRequest::CMessageChangePowerRequest(const CMessageChangePowerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangePowerRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  lineid_ = 0u;
  countryid_ = 0u;
  changetype_ = 0u;
  powervalue_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangePowerRequest::~CMessageChangePowerRequest() {
  SharedDtor();
}

void CMessageChangePowerRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageChangePowerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangePowerRequest_descriptor_;
}

const CMessageChangePowerRequest& CMessageChangePowerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangePowerRequest* CMessageChangePowerRequest::default_instance_ = NULL;

CMessageChangePowerRequest* CMessageChangePowerRequest::New() const {
  return new CMessageChangePowerRequest;
}

void CMessageChangePowerRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    lineid_ = 0u;
    countryid_ = 0u;
    changetype_ = 0u;
    powervalue_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangePowerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_LineID;
        break;
      }
      
      // optional uint32 LineID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lineid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_CountryID;
        break;
      }
      
      // optional uint32 CountryID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CountryID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &countryid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_ChangeType;
        break;
      }
      
      // optional uint32 ChangeType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ChangeType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &changetype_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_PowerValue;
        break;
      }
      
      // optional uint32 PowerValue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PowerValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &powervalue_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangePowerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangePowerRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 LineID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->lineid(), output);
  }
  
  // optional uint32 CountryID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->countryid(), output);
  }
  
  // optional uint32 ChangeType = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->changetype(), output);
  }
  
  // optional uint32 PowerValue = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->powervalue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangePowerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 LineID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->lineid(), target);
  }
  
  // optional uint32 CountryID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->countryid(), target);
  }
  
  // optional uint32 ChangeType = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->changetype(), target);
  }
  
  // optional uint32 PowerValue = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->powervalue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangePowerRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 LineID = 2;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lineid());
    }
    
    // optional uint32 CountryID = 3;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->countryid());
    }
    
    // optional uint32 ChangeType = 4;
    if (has_changetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->changetype());
    }
    
    // optional uint32 PowerValue = 5;
    if (has_powervalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->powervalue());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangePowerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangePowerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangePowerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangePowerRequest::MergeFrom(const CMessageChangePowerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(2)) {
      set_countryid(from.countryid());
    }
    if (from._has_bit(3)) {
      set_changetype(from.changetype());
    }
    if (from._has_bit(4)) {
      set_powervalue(from.powervalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangePowerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangePowerRequest::CopyFrom(const CMessageChangePowerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangePowerRequest::Swap(CMessageChangePowerRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(lineid_, other->lineid_);
    std::swap(countryid_, other->countryid_);
    std::swap(changetype_, other->changetype_);
    std::swap(powervalue_, other->powervalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangePowerRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangePowerRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangePowerRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangePowerRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageChangePowerResponse::kCharIDFieldNumber;
const int CMessageChangePowerResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMessageChangePowerResponse::CMessageChangePowerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangePowerResponse::InitAsDefaultInstance() {}

CMessageChangePowerResponse::CMessageChangePowerResponse(const CMessageChangePowerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangePowerResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangePowerResponse::~CMessageChangePowerResponse() {
  SharedDtor();
}

void CMessageChangePowerResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageChangePowerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangePowerResponse_descriptor_;
}

const CMessageChangePowerResponse& CMessageChangePowerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangePowerResponse* CMessageChangePowerResponse::default_instance_ = NULL;

CMessageChangePowerResponse* CMessageChangePowerResponse::New() const {
  return new CMessageChangePowerResponse;
}

void CMessageChangePowerResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangePowerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangePowerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangePowerResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangePowerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangePowerResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangePowerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangePowerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangePowerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangePowerResponse::MergeFrom(const CMessageChangePowerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangePowerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangePowerResponse::CopyFrom(const CMessageChangePowerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangePowerResponse::Swap(CMessageChangePowerResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangePowerResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangePowerResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangePowerResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangePowerResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageUseFunctionNotify::_default_srcname_;
#ifndef _MSC_VER
const int CMessageUseFunctionNotify::kCharIDFieldNumber;
const int CMessageUseFunctionNotify::kFunctionTypeFieldNumber;
const int CMessageUseFunctionNotify::kFunctionOrderFieldNumber;
const int CMessageUseFunctionNotify::kTargetIDFieldNumber;
const int CMessageUseFunctionNotify::kWorldIDFieldNumber;
const int CMessageUseFunctionNotify::kCountryIDFieldNumber;
const int CMessageUseFunctionNotify::kSrcNameFieldNumber;
const int CMessageUseFunctionNotify::kTeleportFieldNumber;
const int CMessageUseFunctionNotify::kCorpsIDFieldNumber;
const int CMessageUseFunctionNotify::kFamilyIDFieldNumber;
const int CMessageUseFunctionNotify::kTokenIDFieldNumber;
#endif  // !_MSC_VER

CMessageUseFunctionNotify::CMessageUseFunctionNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUseFunctionNotify::InitAsDefaultInstance() {  teleport_ = const_cast< ::TeleportData*>(&::TeleportData::default_instance());
}

CMessageUseFunctionNotify::CMessageUseFunctionNotify(const CMessageUseFunctionNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUseFunctionNotify::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  functiontype_ = 0u;
  functionorder_ = 0u;
  targetid_ = 0u;
  worldid_ = 0u;
  countryid_ = 0u;
  srcname_ = const_cast< ::std::string*>(&_default_srcname_);
  teleport_ = NULL;
  corpsid_ = 0u;
  familyid_ = 0u;
  tokenid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUseFunctionNotify::~CMessageUseFunctionNotify() {
  SharedDtor();
}

void CMessageUseFunctionNotify::SharedDtor() {
  if (srcname_ != &_default_srcname_) {
    delete srcname_;
  }
  if (this != default_instance_) {
    delete teleport_;
  }
}

const ::google::protobuf::Descriptor* CMessageUseFunctionNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUseFunctionNotify_descriptor_;
}

const CMessageUseFunctionNotify& CMessageUseFunctionNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageUseFunctionNotify* CMessageUseFunctionNotify::default_instance_ = NULL;

CMessageUseFunctionNotify* CMessageUseFunctionNotify::New() const {
  return new CMessageUseFunctionNotify;
}

void CMessageUseFunctionNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    functiontype_ = 0u;
    functionorder_ = 0u;
    targetid_ = 0u;
    worldid_ = 0u;
    countryid_ = 0u;
    if (_has_bit(6)) {
      if (srcname_ != &_default_srcname_) {
        srcname_->clear();
      }
    }
    if (_has_bit(7)) {
      if (teleport_ != NULL) teleport_->::TeleportData::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    corpsid_ = 0u;
    familyid_ = 0u;
    tokenid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUseFunctionNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_FunctionType;
        break;
      }
      
      // optional uint32 FunctionType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FunctionType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &functiontype_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_FunctionOrder;
        break;
      }
      
      // optional uint32 FunctionOrder = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FunctionOrder:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &functionorder_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_TargetID;
        break;
      }
      
      // optional uint32 TargetID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TargetID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &targetid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_WorldID;
        break;
      }
      
      // optional uint32 WorldID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WorldID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &worldid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_CountryID;
        break;
      }
      
      // optional uint32 CountryID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CountryID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &countryid_));
        _set_bit(5);
        if (input->ExpectTag(58)) goto parse_SrcName;
        break;
      }
      
      // optional string SrcName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SrcName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_srcname()));
        if (input->ExpectTag(66)) goto parse_Teleport;
        break;
      }
      
      // optional .TeleportData Teleport = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Teleport:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_teleport()));
        if (input->ExpectTag(72)) goto parse_CorpsID;
        break;
      }
      
      // optional uint32 CorpsID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_FamilyID;
        break;
      }
      
      // optional uint32 FamilyID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_TokenID;
        break;
      }
      
      // optional uint32 TokenID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TokenID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tokenid_));
        _set_bit(10);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUseFunctionNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUseFunctionNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 FunctionType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->functiontype(), output);
  }
  
  // optional uint32 FunctionOrder = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->functionorder(), output);
  }
  
  // optional uint32 TargetID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->targetid(), output);
  }
  
  // optional uint32 WorldID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->worldid(), output);
  }
  
  // optional uint32 CountryID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->countryid(), output);
  }
  
  // optional string SrcName = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteString(7, this->srcname(), output);
  }
  
  // optional .TeleportData Teleport = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(8, this->teleport(), output);
  }
  
  // optional uint32 CorpsID = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->corpsid(), output);
  }
  
  // optional uint32 FamilyID = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->familyid(), output);
  }
  
  // optional uint32 TokenID = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->tokenid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUseFunctionNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 FunctionType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->functiontype(), target);
  }
  
  // optional uint32 FunctionOrder = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->functionorder(), target);
  }
  
  // optional uint32 TargetID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->targetid(), target);
  }
  
  // optional uint32 WorldID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->worldid(), target);
  }
  
  // optional uint32 CountryID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->countryid(), target);
  }
  
  // optional string SrcName = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(7, this->srcname(), target);
  }
  
  // optional .TeleportData Teleport = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(8, this->teleport(), target);
  }
  
  // optional uint32 CorpsID = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->corpsid(), target);
  }
  
  // optional uint32 FamilyID = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->familyid(), target);
  }
  
  // optional uint32 TokenID = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->tokenid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUseFunctionNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 FunctionType = 2;
    if (has_functiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->functiontype());
    }
    
    // optional uint32 FunctionOrder = 3;
    if (has_functionorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->functionorder());
    }
    
    // optional uint32 TargetID = 4;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->targetid());
    }
    
    // optional uint32 WorldID = 5;
    if (has_worldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->worldid());
    }
    
    // optional uint32 CountryID = 6;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->countryid());
    }
    
    // optional string SrcName = 7;
    if (has_srcname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->srcname());
    }
    
    // optional .TeleportData Teleport = 8;
    if (has_teleport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->teleport());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 CorpsID = 9;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
    // optional uint32 FamilyID = 10;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
    // optional uint32 TokenID = 11;
    if (has_tokenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tokenid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUseFunctionNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUseFunctionNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUseFunctionNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUseFunctionNotify::MergeFrom(const CMessageUseFunctionNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_functiontype(from.functiontype());
    }
    if (from._has_bit(2)) {
      set_functionorder(from.functionorder());
    }
    if (from._has_bit(3)) {
      set_targetid(from.targetid());
    }
    if (from._has_bit(4)) {
      set_worldid(from.worldid());
    }
    if (from._has_bit(5)) {
      set_countryid(from.countryid());
    }
    if (from._has_bit(6)) {
      set_srcname(from.srcname());
    }
    if (from._has_bit(7)) {
      mutable_teleport()->::TeleportData::MergeFrom(from.teleport());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_corpsid(from.corpsid());
    }
    if (from._has_bit(9)) {
      set_familyid(from.familyid());
    }
    if (from._has_bit(10)) {
      set_tokenid(from.tokenid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUseFunctionNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUseFunctionNotify::CopyFrom(const CMessageUseFunctionNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUseFunctionNotify::Swap(CMessageUseFunctionNotify* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(functiontype_, other->functiontype_);
    std::swap(functionorder_, other->functionorder_);
    std::swap(targetid_, other->targetid_);
    std::swap(worldid_, other->worldid_);
    std::swap(countryid_, other->countryid_);
    std::swap(srcname_, other->srcname_);
    std::swap(teleport_, other->teleport_);
    std::swap(corpsid_, other->corpsid_);
    std::swap(familyid_, other->familyid_);
    std::swap(tokenid_, other->tokenid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUseFunctionNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUseFunctionNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUseFunctionNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUseFunctionNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageSetOfficialNotify::kCharIDFieldNumber;
const int CMessageSetOfficialNotify::kOfficialLevelFieldNumber;
const int CMessageSetOfficialNotify::kOfficialOrderFieldNumber;
const int CMessageSetOfficialNotify::kTargetIDFieldNumber;
#endif  // !_MSC_VER

CMessageSetOfficialNotify::CMessageSetOfficialNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageSetOfficialNotify::InitAsDefaultInstance() {}

CMessageSetOfficialNotify::CMessageSetOfficialNotify(const CMessageSetOfficialNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageSetOfficialNotify::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  officiallevel_ = 0u;
  officialorder_ = 0u;
  targetid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageSetOfficialNotify::~CMessageSetOfficialNotify() {
  SharedDtor();
}

void CMessageSetOfficialNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageSetOfficialNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageSetOfficialNotify_descriptor_;
}

const CMessageSetOfficialNotify& CMessageSetOfficialNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageSetOfficialNotify* CMessageSetOfficialNotify::default_instance_ = NULL;

CMessageSetOfficialNotify* CMessageSetOfficialNotify::New() const {
  return new CMessageSetOfficialNotify;
}

void CMessageSetOfficialNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    officiallevel_ = 0u;
    officialorder_ = 0u;
    targetid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageSetOfficialNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_OfficialLevel;
        break;
      }
      
      // optional uint32 OfficialLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OfficialLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &officiallevel_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_OfficialOrder;
        break;
      }
      
      // optional uint32 OfficialOrder = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OfficialOrder:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &officialorder_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_TargetID;
        break;
      }
      
      // optional uint32 TargetID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TargetID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &targetid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageSetOfficialNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageSetOfficialNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 OfficialLevel = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->officiallevel(), output);
  }
  
  // optional uint32 OfficialOrder = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->officialorder(), output);
  }
  
  // optional uint32 TargetID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->targetid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageSetOfficialNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 OfficialLevel = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->officiallevel(), target);
  }
  
  // optional uint32 OfficialOrder = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->officialorder(), target);
  }
  
  // optional uint32 TargetID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->targetid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageSetOfficialNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 OfficialLevel = 2;
    if (has_officiallevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->officiallevel());
    }
    
    // optional uint32 OfficialOrder = 3;
    if (has_officialorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->officialorder());
    }
    
    // optional uint32 TargetID = 4;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->targetid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageSetOfficialNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageSetOfficialNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageSetOfficialNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageSetOfficialNotify::MergeFrom(const CMessageSetOfficialNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_officiallevel(from.officiallevel());
    }
    if (from._has_bit(2)) {
      set_officialorder(from.officialorder());
    }
    if (from._has_bit(3)) {
      set_targetid(from.targetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageSetOfficialNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSetOfficialNotify::CopyFrom(const CMessageSetOfficialNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSetOfficialNotify::Swap(CMessageSetOfficialNotify* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(officiallevel_, other->officiallevel_);
    std::swap(officialorder_, other->officialorder_);
    std::swap(targetid_, other->targetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageSetOfficialNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageSetOfficialNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageSetOfficialNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageSetOfficialNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageChangeFriendNotify::kCharIDFieldNumber;
const int CMessageChangeFriendNotify::kChangeTypeFieldNumber;
const int CMessageChangeFriendNotify::kSrcWorldFieldNumber;
const int CMessageChangeFriendNotify::kDesWorldFieldNumber;
const int CMessageChangeFriendNotify::kChangeValueFieldNumber;
#endif  // !_MSC_VER

CMessageChangeFriendNotify::CMessageChangeFriendNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeFriendNotify::InitAsDefaultInstance() {}

CMessageChangeFriendNotify::CMessageChangeFriendNotify(const CMessageChangeFriendNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeFriendNotify::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  changetype_ = 0u;
  srcworld_ = 0u;
  desworld_ = 0u;
  changevalue_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeFriendNotify::~CMessageChangeFriendNotify() {
  SharedDtor();
}

void CMessageChangeFriendNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageChangeFriendNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeFriendNotify_descriptor_;
}

const CMessageChangeFriendNotify& CMessageChangeFriendNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeFriendNotify* CMessageChangeFriendNotify::default_instance_ = NULL;

CMessageChangeFriendNotify* CMessageChangeFriendNotify::New() const {
  return new CMessageChangeFriendNotify;
}

void CMessageChangeFriendNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    changetype_ = 0u;
    srcworld_ = 0u;
    desworld_ = 0u;
    changevalue_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeFriendNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ChangeType;
        break;
      }
      
      // optional uint32 ChangeType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ChangeType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &changetype_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_SrcWorld;
        break;
      }
      
      // optional uint32 SrcWorld = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SrcWorld:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srcworld_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_DesWorld;
        break;
      }
      
      // optional uint32 DesWorld = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DesWorld:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &desworld_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_ChangeValue;
        break;
      }
      
      // optional uint32 ChangeValue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ChangeValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &changevalue_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeFriendNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeFriendNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 ChangeType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->changetype(), output);
  }
  
  // optional uint32 SrcWorld = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->srcworld(), output);
  }
  
  // optional uint32 DesWorld = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->desworld(), output);
  }
  
  // optional uint32 ChangeValue = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->changevalue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeFriendNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 ChangeType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->changetype(), target);
  }
  
  // optional uint32 SrcWorld = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->srcworld(), target);
  }
  
  // optional uint32 DesWorld = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->desworld(), target);
  }
  
  // optional uint32 ChangeValue = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->changevalue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeFriendNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 ChangeType = 2;
    if (has_changetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->changetype());
    }
    
    // optional uint32 SrcWorld = 3;
    if (has_srcworld()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srcworld());
    }
    
    // optional uint32 DesWorld = 4;
    if (has_desworld()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->desworld());
    }
    
    // optional uint32 ChangeValue = 5;
    if (has_changevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->changevalue());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeFriendNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeFriendNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeFriendNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeFriendNotify::MergeFrom(const CMessageChangeFriendNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_changetype(from.changetype());
    }
    if (from._has_bit(2)) {
      set_srcworld(from.srcworld());
    }
    if (from._has_bit(3)) {
      set_desworld(from.desworld());
    }
    if (from._has_bit(4)) {
      set_changevalue(from.changevalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeFriendNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeFriendNotify::CopyFrom(const CMessageChangeFriendNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeFriendNotify::Swap(CMessageChangeFriendNotify* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(changetype_, other->changetype_);
    std::swap(srcworld_, other->srcworld_);
    std::swap(desworld_, other->desworld_);
    std::swap(changevalue_, other->changevalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeFriendNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeFriendNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeFriendNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeFriendNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageKillPersonRequest::kSrcCharIDFieldNumber;
const int CMessageKillPersonRequest::kDesCharIDFieldNumber;
const int CMessageKillPersonRequest::kHonorFieldNumber;
#endif  // !_MSC_VER

CMessageKillPersonRequest::CMessageKillPersonRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageKillPersonRequest::InitAsDefaultInstance() {}

CMessageKillPersonRequest::CMessageKillPersonRequest(const CMessageKillPersonRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageKillPersonRequest::SharedCtor() {
  _cached_size_ = 0;
  srccharid_ = 0u;
  descharid_ = 0u;
  honor_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageKillPersonRequest::~CMessageKillPersonRequest() {
  SharedDtor();
}

void CMessageKillPersonRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageKillPersonRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageKillPersonRequest_descriptor_;
}

const CMessageKillPersonRequest& CMessageKillPersonRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageKillPersonRequest* CMessageKillPersonRequest::default_instance_ = NULL;

CMessageKillPersonRequest* CMessageKillPersonRequest::New() const {
  return new CMessageKillPersonRequest;
}

void CMessageKillPersonRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    srccharid_ = 0u;
    descharid_ = 0u;
    honor_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageKillPersonRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 SrcCharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srccharid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_DesCharID;
        break;
      }
      
      // optional uint32 DesCharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DesCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &descharid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Honor;
        break;
      }
      
      // optional uint32 Honor = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Honor:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &honor_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageKillPersonRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageKillPersonRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 SrcCharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->srccharid(), output);
  }
  
  // optional uint32 DesCharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->descharid(), output);
  }
  
  // optional uint32 Honor = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->honor(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageKillPersonRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 SrcCharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->srccharid(), target);
  }
  
  // optional uint32 DesCharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->descharid(), target);
  }
  
  // optional uint32 Honor = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->honor(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageKillPersonRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SrcCharID = 1;
    if (has_srccharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srccharid());
    }
    
    // optional uint32 DesCharID = 2;
    if (has_descharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->descharid());
    }
    
    // optional uint32 Honor = 3;
    if (has_honor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->honor());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageKillPersonRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageKillPersonRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageKillPersonRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageKillPersonRequest::MergeFrom(const CMessageKillPersonRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_srccharid(from.srccharid());
    }
    if (from._has_bit(1)) {
      set_descharid(from.descharid());
    }
    if (from._has_bit(2)) {
      set_honor(from.honor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageKillPersonRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageKillPersonRequest::CopyFrom(const CMessageKillPersonRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageKillPersonRequest::Swap(CMessageKillPersonRequest* other) {
  if (other != this) {
    std::swap(srccharid_, other->srccharid_);
    std::swap(descharid_, other->descharid_);
    std::swap(honor_, other->honor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageKillPersonRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageKillPersonRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageKillPersonRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageKillPersonRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageKillPersonResponse::kSrcCharIDFieldNumber;
const int CMessageKillPersonResponse::kDesCharIDFieldNumber;
const int CMessageKillPersonResponse::kPKValueFieldNumber;
#endif  // !_MSC_VER

CMessageKillPersonResponse::CMessageKillPersonResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageKillPersonResponse::InitAsDefaultInstance() {}

CMessageKillPersonResponse::CMessageKillPersonResponse(const CMessageKillPersonResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageKillPersonResponse::SharedCtor() {
  _cached_size_ = 0;
  srccharid_ = 0u;
  descharid_ = 0u;
  pkvalue_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageKillPersonResponse::~CMessageKillPersonResponse() {
  SharedDtor();
}

void CMessageKillPersonResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageKillPersonResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageKillPersonResponse_descriptor_;
}

const CMessageKillPersonResponse& CMessageKillPersonResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageKillPersonResponse* CMessageKillPersonResponse::default_instance_ = NULL;

CMessageKillPersonResponse* CMessageKillPersonResponse::New() const {
  return new CMessageKillPersonResponse;
}

void CMessageKillPersonResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    srccharid_ = 0u;
    descharid_ = 0u;
    pkvalue_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageKillPersonResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 SrcCharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srccharid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_DesCharID;
        break;
      }
      
      // optional uint32 DesCharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DesCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &descharid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_PKValue;
        break;
      }
      
      // optional uint32 PKValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PKValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pkvalue_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageKillPersonResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageKillPersonResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 SrcCharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->srccharid(), output);
  }
  
  // optional uint32 DesCharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->descharid(), output);
  }
  
  // optional uint32 PKValue = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->pkvalue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageKillPersonResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 SrcCharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->srccharid(), target);
  }
  
  // optional uint32 DesCharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->descharid(), target);
  }
  
  // optional uint32 PKValue = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->pkvalue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageKillPersonResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SrcCharID = 1;
    if (has_srccharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srccharid());
    }
    
    // optional uint32 DesCharID = 2;
    if (has_descharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->descharid());
    }
    
    // optional uint32 PKValue = 3;
    if (has_pkvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pkvalue());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageKillPersonResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageKillPersonResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageKillPersonResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageKillPersonResponse::MergeFrom(const CMessageKillPersonResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_srccharid(from.srccharid());
    }
    if (from._has_bit(1)) {
      set_descharid(from.descharid());
    }
    if (from._has_bit(2)) {
      set_pkvalue(from.pkvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageKillPersonResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageKillPersonResponse::CopyFrom(const CMessageKillPersonResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageKillPersonResponse::Swap(CMessageKillPersonResponse* other) {
  if (other != this) {
    std::swap(srccharid_, other->srccharid_);
    std::swap(descharid_, other->descharid_);
    std::swap(pkvalue_, other->pkvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageKillPersonResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageKillPersonResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageKillPersonResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageKillPersonResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageSyncNationNotify::kNationStatusFieldNumber;
#endif  // !_MSC_VER

CMessageSyncNationNotify::CMessageSyncNationNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageSyncNationNotify::InitAsDefaultInstance() {}

CMessageSyncNationNotify::CMessageSyncNationNotify(const CMessageSyncNationNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageSyncNationNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageSyncNationNotify::~CMessageSyncNationNotify() {
  SharedDtor();
}

void CMessageSyncNationNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageSyncNationNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageSyncNationNotify_descriptor_;
}

const CMessageSyncNationNotify& CMessageSyncNationNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageSyncNationNotify* CMessageSyncNationNotify::default_instance_ = NULL;

CMessageSyncNationNotify* CMessageSyncNationNotify::New() const {
  return new CMessageSyncNationNotify;
}

void CMessageSyncNationNotify::Clear() {
  nationstatus_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageSyncNationNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated uint32 NationStatus = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NationStatus:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_nationstatus(value);
        if (input->ExpectTag(8)) goto parse_NationStatus;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageSyncNationNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageSyncNationNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated uint32 NationStatus = 1;
  for (int i = 0; i < this->nationstatus_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->nationstatus(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageSyncNationNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 NationStatus = 1;
  for (int i = 0; i < this->nationstatus_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->nationstatus(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageSyncNationNotify::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 NationStatus = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->nationstatus_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->nationstatus(i));
    }
    total_size += 1 * this->nationstatus_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageSyncNationNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageSyncNationNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageSyncNationNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageSyncNationNotify::MergeFrom(const CMessageSyncNationNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  nationstatus_.MergeFrom(from.nationstatus_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageSyncNationNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSyncNationNotify::CopyFrom(const CMessageSyncNationNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSyncNationNotify::Swap(CMessageSyncNationNotify* other) {
  if (other != this) {
    nationstatus_.Swap(&other->nationstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageSyncNationNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageSyncNationNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageSyncNationNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageSyncNationNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBuyFamilyItemRequest::kRoleIDFieldNumber;
const int CMessageBuyFamilyItemRequest::kEntityIDFieldNumber;
const int CMessageBuyFamilyItemRequest::kFamilyIDFieldNumber;
const int CMessageBuyFamilyItemRequest::kItemIDFieldNumber;
const int CMessageBuyFamilyItemRequest::kItemNumFieldNumber;
const int CMessageBuyFamilyItemRequest::kTotalCostFieldNumber;
const int CMessageBuyFamilyItemRequest::kNpcTmpIDFieldNumber;
#endif  // !_MSC_VER

CMessageBuyFamilyItemRequest::CMessageBuyFamilyItemRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBuyFamilyItemRequest::InitAsDefaultInstance() {}

CMessageBuyFamilyItemRequest::CMessageBuyFamilyItemRequest(const CMessageBuyFamilyItemRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBuyFamilyItemRequest::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  entityid_ = 0u;
  familyid_ = 0u;
  itemid_ = 0u;
  itemnum_ = 0u;
  totalcost_ = 0u;
  npctmpid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBuyFamilyItemRequest::~CMessageBuyFamilyItemRequest() {
  SharedDtor();
}

void CMessageBuyFamilyItemRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageBuyFamilyItemRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBuyFamilyItemRequest_descriptor_;
}

const CMessageBuyFamilyItemRequest& CMessageBuyFamilyItemRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageBuyFamilyItemRequest* CMessageBuyFamilyItemRequest::default_instance_ = NULL;

CMessageBuyFamilyItemRequest* CMessageBuyFamilyItemRequest::New() const {
  return new CMessageBuyFamilyItemRequest;
}

void CMessageBuyFamilyItemRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    entityid_ = 0u;
    familyid_ = 0u;
    itemid_ = 0u;
    itemnum_ = 0u;
    totalcost_ = 0u;
    npctmpid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBuyFamilyItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_EntityID;
        break;
      }
      
      // optional uint32 EntityID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_FamilyID;
        break;
      }
      
      // optional uint32 FamilyID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_ItemID;
        break;
      }
      
      // optional uint32 ItemID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_ItemNum;
        break;
      }
      
      // optional uint32 ItemNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemnum_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_TotalCost;
        break;
      }
      
      // optional uint32 TotalCost = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TotalCost:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &totalcost_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_NpcTmpID;
        break;
      }
      
      // optional uint32 NpcTmpID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcTmpID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npctmpid_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBuyFamilyItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBuyFamilyItemRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional uint32 EntityID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->entityid(), output);
  }
  
  // optional uint32 FamilyID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->familyid(), output);
  }
  
  // optional uint32 ItemID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->itemid(), output);
  }
  
  // optional uint32 ItemNum = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->itemnum(), output);
  }
  
  // optional uint32 TotalCost = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->totalcost(), output);
  }
  
  // optional uint32 NpcTmpID = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->npctmpid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBuyFamilyItemRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional uint32 EntityID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->entityid(), target);
  }
  
  // optional uint32 FamilyID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->familyid(), target);
  }
  
  // optional uint32 ItemID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->itemid(), target);
  }
  
  // optional uint32 ItemNum = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->itemnum(), target);
  }
  
  // optional uint32 TotalCost = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->totalcost(), target);
  }
  
  // optional uint32 NpcTmpID = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->npctmpid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBuyFamilyItemRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 EntityID = 2;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
    // optional uint32 FamilyID = 3;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
    // optional uint32 ItemID = 4;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemid());
    }
    
    // optional uint32 ItemNum = 5;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemnum());
    }
    
    // optional uint32 TotalCost = 6;
    if (has_totalcost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->totalcost());
    }
    
    // optional uint32 NpcTmpID = 7;
    if (has_npctmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npctmpid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBuyFamilyItemRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBuyFamilyItemRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBuyFamilyItemRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBuyFamilyItemRequest::MergeFrom(const CMessageBuyFamilyItemRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_entityid(from.entityid());
    }
    if (from._has_bit(2)) {
      set_familyid(from.familyid());
    }
    if (from._has_bit(3)) {
      set_itemid(from.itemid());
    }
    if (from._has_bit(4)) {
      set_itemnum(from.itemnum());
    }
    if (from._has_bit(5)) {
      set_totalcost(from.totalcost());
    }
    if (from._has_bit(6)) {
      set_npctmpid(from.npctmpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBuyFamilyItemRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBuyFamilyItemRequest::CopyFrom(const CMessageBuyFamilyItemRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBuyFamilyItemRequest::Swap(CMessageBuyFamilyItemRequest* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(entityid_, other->entityid_);
    std::swap(familyid_, other->familyid_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(totalcost_, other->totalcost_);
    std::swap(npctmpid_, other->npctmpid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBuyFamilyItemRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBuyFamilyItemRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBuyFamilyItemRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBuyFamilyItemRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBuyFamilyItemResponse::kErrcodeFieldNumber;
const int CMessageBuyFamilyItemResponse::kRoleIDFieldNumber;
const int CMessageBuyFamilyItemResponse::kEntityIDFieldNumber;
const int CMessageBuyFamilyItemResponse::kItemIDFieldNumber;
const int CMessageBuyFamilyItemResponse::kItemNumFieldNumber;
#endif  // !_MSC_VER

CMessageBuyFamilyItemResponse::CMessageBuyFamilyItemResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBuyFamilyItemResponse::InitAsDefaultInstance() {}

CMessageBuyFamilyItemResponse::CMessageBuyFamilyItemResponse(const CMessageBuyFamilyItemResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBuyFamilyItemResponse::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  roleid_ = 0u;
  entityid_ = 0u;
  itemid_ = 0u;
  itemnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBuyFamilyItemResponse::~CMessageBuyFamilyItemResponse() {
  SharedDtor();
}

void CMessageBuyFamilyItemResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageBuyFamilyItemResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBuyFamilyItemResponse_descriptor_;
}

const CMessageBuyFamilyItemResponse& CMessageBuyFamilyItemResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageBuyFamilyItemResponse* CMessageBuyFamilyItemResponse::default_instance_ = NULL;

CMessageBuyFamilyItemResponse* CMessageBuyFamilyItemResponse::New() const {
  return new CMessageBuyFamilyItemResponse;
}

void CMessageBuyFamilyItemResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
    roleid_ = 0u;
    entityid_ = 0u;
    itemid_ = 0u;
    itemnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBuyFamilyItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Errcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_EntityID;
        break;
      }
      
      // optional uint32 EntityID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_ItemID;
        break;
      }
      
      // optional uint32 ItemID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_ItemNum;
        break;
      }
      
      // optional uint32 ItemNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemnum_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBuyFamilyItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBuyFamilyItemResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->errcode(), output);
  }
  
  // optional uint32 RoleID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->roleid(), output);
  }
  
  // optional uint32 EntityID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->entityid(), output);
  }
  
  // optional uint32 ItemID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->itemid(), output);
  }
  
  // optional uint32 ItemNum = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->itemnum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBuyFamilyItemResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  // optional uint32 RoleID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->roleid(), target);
  }
  
  // optional uint32 EntityID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->entityid(), target);
  }
  
  // optional uint32 ItemID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->itemid(), target);
  }
  
  // optional uint32 ItemNum = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->itemnum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBuyFamilyItemResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional uint32 RoleID = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 EntityID = 3;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
    // optional uint32 ItemID = 4;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemid());
    }
    
    // optional uint32 ItemNum = 5;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemnum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBuyFamilyItemResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBuyFamilyItemResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBuyFamilyItemResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBuyFamilyItemResponse::MergeFrom(const CMessageBuyFamilyItemResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(1)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(2)) {
      set_entityid(from.entityid());
    }
    if (from._has_bit(3)) {
      set_itemid(from.itemid());
    }
    if (from._has_bit(4)) {
      set_itemnum(from.itemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBuyFamilyItemResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBuyFamilyItemResponse::CopyFrom(const CMessageBuyFamilyItemResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBuyFamilyItemResponse::Swap(CMessageBuyFamilyItemResponse* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(roleid_, other->roleid_);
    std::swap(entityid_, other->entityid_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBuyFamilyItemResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBuyFamilyItemResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBuyFamilyItemResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBuyFamilyItemResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBuyCorpsItemRequest::kRoleIDFieldNumber;
const int CMessageBuyCorpsItemRequest::kEntityIDFieldNumber;
const int CMessageBuyCorpsItemRequest::kCorpsIDFieldNumber;
const int CMessageBuyCorpsItemRequest::kItemIDFieldNumber;
const int CMessageBuyCorpsItemRequest::kItemNumFieldNumber;
const int CMessageBuyCorpsItemRequest::kTotalCostFieldNumber;
const int CMessageBuyCorpsItemRequest::kNpcTmpIDFieldNumber;
const int CMessageBuyCorpsItemRequest::kCityMapIDFieldNumber;
#endif  // !_MSC_VER

CMessageBuyCorpsItemRequest::CMessageBuyCorpsItemRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBuyCorpsItemRequest::InitAsDefaultInstance() {}

CMessageBuyCorpsItemRequest::CMessageBuyCorpsItemRequest(const CMessageBuyCorpsItemRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBuyCorpsItemRequest::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  entityid_ = 0u;
  corpsid_ = 0u;
  itemid_ = 0u;
  itemnum_ = 0u;
  totalcost_ = 0u;
  npctmpid_ = 0u;
  citymapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBuyCorpsItemRequest::~CMessageBuyCorpsItemRequest() {
  SharedDtor();
}

void CMessageBuyCorpsItemRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageBuyCorpsItemRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBuyCorpsItemRequest_descriptor_;
}

const CMessageBuyCorpsItemRequest& CMessageBuyCorpsItemRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageBuyCorpsItemRequest* CMessageBuyCorpsItemRequest::default_instance_ = NULL;

CMessageBuyCorpsItemRequest* CMessageBuyCorpsItemRequest::New() const {
  return new CMessageBuyCorpsItemRequest;
}

void CMessageBuyCorpsItemRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    entityid_ = 0u;
    corpsid_ = 0u;
    itemid_ = 0u;
    itemnum_ = 0u;
    totalcost_ = 0u;
    npctmpid_ = 0u;
    citymapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBuyCorpsItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_EntityID;
        break;
      }
      
      // optional uint32 EntityID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_CorpsID;
        break;
      }
      
      // optional uint32 CorpsID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_ItemID;
        break;
      }
      
      // optional uint32 ItemID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_ItemNum;
        break;
      }
      
      // optional uint32 ItemNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemnum_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_TotalCost;
        break;
      }
      
      // optional uint32 TotalCost = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TotalCost:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &totalcost_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_NpcTmpID;
        break;
      }
      
      // optional uint32 NpcTmpID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcTmpID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npctmpid_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_CityMapID;
        break;
      }
      
      // optional uint32 CityMapID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CityMapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &citymapid_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBuyCorpsItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBuyCorpsItemRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional uint32 EntityID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->entityid(), output);
  }
  
  // optional uint32 CorpsID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->corpsid(), output);
  }
  
  // optional uint32 ItemID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->itemid(), output);
  }
  
  // optional uint32 ItemNum = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->itemnum(), output);
  }
  
  // optional uint32 TotalCost = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->totalcost(), output);
  }
  
  // optional uint32 NpcTmpID = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->npctmpid(), output);
  }
  
  // optional uint32 CityMapID = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->citymapid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBuyCorpsItemRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional uint32 EntityID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->entityid(), target);
  }
  
  // optional uint32 CorpsID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->corpsid(), target);
  }
  
  // optional uint32 ItemID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->itemid(), target);
  }
  
  // optional uint32 ItemNum = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->itemnum(), target);
  }
  
  // optional uint32 TotalCost = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->totalcost(), target);
  }
  
  // optional uint32 NpcTmpID = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->npctmpid(), target);
  }
  
  // optional uint32 CityMapID = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->citymapid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBuyCorpsItemRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 EntityID = 2;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
    // optional uint32 CorpsID = 3;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
    // optional uint32 ItemID = 4;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemid());
    }
    
    // optional uint32 ItemNum = 5;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemnum());
    }
    
    // optional uint32 TotalCost = 6;
    if (has_totalcost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->totalcost());
    }
    
    // optional uint32 NpcTmpID = 7;
    if (has_npctmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npctmpid());
    }
    
    // optional uint32 CityMapID = 8;
    if (has_citymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->citymapid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBuyCorpsItemRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBuyCorpsItemRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBuyCorpsItemRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBuyCorpsItemRequest::MergeFrom(const CMessageBuyCorpsItemRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_entityid(from.entityid());
    }
    if (from._has_bit(2)) {
      set_corpsid(from.corpsid());
    }
    if (from._has_bit(3)) {
      set_itemid(from.itemid());
    }
    if (from._has_bit(4)) {
      set_itemnum(from.itemnum());
    }
    if (from._has_bit(5)) {
      set_totalcost(from.totalcost());
    }
    if (from._has_bit(6)) {
      set_npctmpid(from.npctmpid());
    }
    if (from._has_bit(7)) {
      set_citymapid(from.citymapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBuyCorpsItemRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBuyCorpsItemRequest::CopyFrom(const CMessageBuyCorpsItemRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBuyCorpsItemRequest::Swap(CMessageBuyCorpsItemRequest* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(entityid_, other->entityid_);
    std::swap(corpsid_, other->corpsid_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(totalcost_, other->totalcost_);
    std::swap(npctmpid_, other->npctmpid_);
    std::swap(citymapid_, other->citymapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBuyCorpsItemRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBuyCorpsItemRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBuyCorpsItemRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBuyCorpsItemRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBuyCorpsItemResponse::kErrcodeFieldNumber;
const int CMessageBuyCorpsItemResponse::kRoleIDFieldNumber;
const int CMessageBuyCorpsItemResponse::kEntityIDFieldNumber;
const int CMessageBuyCorpsItemResponse::kItemIDFieldNumber;
const int CMessageBuyCorpsItemResponse::kItemNumFieldNumber;
#endif  // !_MSC_VER

CMessageBuyCorpsItemResponse::CMessageBuyCorpsItemResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBuyCorpsItemResponse::InitAsDefaultInstance() {}

CMessageBuyCorpsItemResponse::CMessageBuyCorpsItemResponse(const CMessageBuyCorpsItemResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBuyCorpsItemResponse::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  roleid_ = 0u;
  entityid_ = 0u;
  itemid_ = 0u;
  itemnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBuyCorpsItemResponse::~CMessageBuyCorpsItemResponse() {
  SharedDtor();
}

void CMessageBuyCorpsItemResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageBuyCorpsItemResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBuyCorpsItemResponse_descriptor_;
}

const CMessageBuyCorpsItemResponse& CMessageBuyCorpsItemResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageBuyCorpsItemResponse* CMessageBuyCorpsItemResponse::default_instance_ = NULL;

CMessageBuyCorpsItemResponse* CMessageBuyCorpsItemResponse::New() const {
  return new CMessageBuyCorpsItemResponse;
}

void CMessageBuyCorpsItemResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
    roleid_ = 0u;
    entityid_ = 0u;
    itemid_ = 0u;
    itemnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBuyCorpsItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Errcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_EntityID;
        break;
      }
      
      // optional uint32 EntityID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_ItemID;
        break;
      }
      
      // optional uint32 ItemID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_ItemNum;
        break;
      }
      
      // optional uint32 ItemNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemnum_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBuyCorpsItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBuyCorpsItemResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->errcode(), output);
  }
  
  // optional uint32 RoleID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->roleid(), output);
  }
  
  // optional uint32 EntityID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->entityid(), output);
  }
  
  // optional uint32 ItemID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->itemid(), output);
  }
  
  // optional uint32 ItemNum = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->itemnum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBuyCorpsItemResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  // optional uint32 RoleID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->roleid(), target);
  }
  
  // optional uint32 EntityID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->entityid(), target);
  }
  
  // optional uint32 ItemID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->itemid(), target);
  }
  
  // optional uint32 ItemNum = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->itemnum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBuyCorpsItemResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional uint32 RoleID = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 EntityID = 3;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
    // optional uint32 ItemID = 4;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemid());
    }
    
    // optional uint32 ItemNum = 5;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemnum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBuyCorpsItemResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBuyCorpsItemResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBuyCorpsItemResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBuyCorpsItemResponse::MergeFrom(const CMessageBuyCorpsItemResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(1)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(2)) {
      set_entityid(from.entityid());
    }
    if (from._has_bit(3)) {
      set_itemid(from.itemid());
    }
    if (from._has_bit(4)) {
      set_itemnum(from.itemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBuyCorpsItemResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBuyCorpsItemResponse::CopyFrom(const CMessageBuyCorpsItemResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBuyCorpsItemResponse::Swap(CMessageBuyCorpsItemResponse* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(roleid_, other->roleid_);
    std::swap(entityid_, other->entityid_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBuyCorpsItemResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBuyCorpsItemResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBuyCorpsItemResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBuyCorpsItemResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageClearFamilyRepetionInfoNotify::kFamilyIDFieldNumber;
const int CMessageClearFamilyRepetionInfoNotify::kRepetionScoreFieldNumber;
#endif  // !_MSC_VER

CMessageClearFamilyRepetionInfoNotify::CMessageClearFamilyRepetionInfoNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageClearFamilyRepetionInfoNotify::InitAsDefaultInstance() {}

CMessageClearFamilyRepetionInfoNotify::CMessageClearFamilyRepetionInfoNotify(const CMessageClearFamilyRepetionInfoNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageClearFamilyRepetionInfoNotify::SharedCtor() {
  _cached_size_ = 0;
  familyid_ = 0u;
  repetionscore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageClearFamilyRepetionInfoNotify::~CMessageClearFamilyRepetionInfoNotify() {
  SharedDtor();
}

void CMessageClearFamilyRepetionInfoNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageClearFamilyRepetionInfoNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageClearFamilyRepetionInfoNotify_descriptor_;
}

const CMessageClearFamilyRepetionInfoNotify& CMessageClearFamilyRepetionInfoNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageClearFamilyRepetionInfoNotify* CMessageClearFamilyRepetionInfoNotify::default_instance_ = NULL;

CMessageClearFamilyRepetionInfoNotify* CMessageClearFamilyRepetionInfoNotify::New() const {
  return new CMessageClearFamilyRepetionInfoNotify;
}

void CMessageClearFamilyRepetionInfoNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    familyid_ = 0u;
    repetionscore_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageClearFamilyRepetionInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 FamilyID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_RepetionScore;
        break;
      }
      
      // optional uint32 RepetionScore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RepetionScore:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &repetionscore_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageClearFamilyRepetionInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageClearFamilyRepetionInfoNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 FamilyID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->familyid(), output);
  }
  
  // optional uint32 RepetionScore = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->repetionscore(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageClearFamilyRepetionInfoNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 FamilyID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->familyid(), target);
  }
  
  // optional uint32 RepetionScore = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->repetionscore(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageClearFamilyRepetionInfoNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 FamilyID = 1;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
    // optional uint32 RepetionScore = 2;
    if (has_repetionscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->repetionscore());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageClearFamilyRepetionInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageClearFamilyRepetionInfoNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageClearFamilyRepetionInfoNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageClearFamilyRepetionInfoNotify::MergeFrom(const CMessageClearFamilyRepetionInfoNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_familyid(from.familyid());
    }
    if (from._has_bit(1)) {
      set_repetionscore(from.repetionscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageClearFamilyRepetionInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageClearFamilyRepetionInfoNotify::CopyFrom(const CMessageClearFamilyRepetionInfoNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageClearFamilyRepetionInfoNotify::Swap(CMessageClearFamilyRepetionInfoNotify* other) {
  if (other != this) {
    std::swap(familyid_, other->familyid_);
    std::swap(repetionscore_, other->repetionscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageClearFamilyRepetionInfoNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageClearFamilyRepetionInfoNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageClearFamilyRepetionInfoNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageClearFamilyRepetionInfoNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageJudgeModifySuccessNotice::kCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageJudgeModifySuccessNotice::CMessageJudgeModifySuccessNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageJudgeModifySuccessNotice::InitAsDefaultInstance() {}

CMessageJudgeModifySuccessNotice::CMessageJudgeModifySuccessNotice(const CMessageJudgeModifySuccessNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageJudgeModifySuccessNotice::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageJudgeModifySuccessNotice::~CMessageJudgeModifySuccessNotice() {
  SharedDtor();
}

void CMessageJudgeModifySuccessNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageJudgeModifySuccessNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageJudgeModifySuccessNotice_descriptor_;
}

const CMessageJudgeModifySuccessNotice& CMessageJudgeModifySuccessNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageJudgeModifySuccessNotice* CMessageJudgeModifySuccessNotice::default_instance_ = NULL;

CMessageJudgeModifySuccessNotice* CMessageJudgeModifySuccessNotice::New() const {
  return new CMessageJudgeModifySuccessNotice;
}

void CMessageJudgeModifySuccessNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageJudgeModifySuccessNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageJudgeModifySuccessNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageJudgeModifySuccessNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageJudgeModifySuccessNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageJudgeModifySuccessNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageJudgeModifySuccessNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageJudgeModifySuccessNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageJudgeModifySuccessNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageJudgeModifySuccessNotice::MergeFrom(const CMessageJudgeModifySuccessNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageJudgeModifySuccessNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageJudgeModifySuccessNotice::CopyFrom(const CMessageJudgeModifySuccessNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageJudgeModifySuccessNotice::Swap(CMessageJudgeModifySuccessNotice* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageJudgeModifySuccessNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageJudgeModifySuccessNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageJudgeModifySuccessNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageJudgeModifySuccessNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessage4EQueryYuanBaoRequest::kRoleIDFieldNumber;
#endif  // !_MSC_VER

CMessage4EQueryYuanBaoRequest::CMessage4EQueryYuanBaoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessage4EQueryYuanBaoRequest::InitAsDefaultInstance() {}

CMessage4EQueryYuanBaoRequest::CMessage4EQueryYuanBaoRequest(const CMessage4EQueryYuanBaoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessage4EQueryYuanBaoRequest::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessage4EQueryYuanBaoRequest::~CMessage4EQueryYuanBaoRequest() {
  SharedDtor();
}

void CMessage4EQueryYuanBaoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessage4EQueryYuanBaoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessage4EQueryYuanBaoRequest_descriptor_;
}

const CMessage4EQueryYuanBaoRequest& CMessage4EQueryYuanBaoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessage4EQueryYuanBaoRequest* CMessage4EQueryYuanBaoRequest::default_instance_ = NULL;

CMessage4EQueryYuanBaoRequest* CMessage4EQueryYuanBaoRequest::New() const {
  return new CMessage4EQueryYuanBaoRequest;
}

void CMessage4EQueryYuanBaoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessage4EQueryYuanBaoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessage4EQueryYuanBaoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessage4EQueryYuanBaoRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessage4EQueryYuanBaoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessage4EQueryYuanBaoRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessage4EQueryYuanBaoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessage4EQueryYuanBaoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessage4EQueryYuanBaoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessage4EQueryYuanBaoRequest::MergeFrom(const CMessage4EQueryYuanBaoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessage4EQueryYuanBaoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessage4EQueryYuanBaoRequest::CopyFrom(const CMessage4EQueryYuanBaoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessage4EQueryYuanBaoRequest::Swap(CMessage4EQueryYuanBaoRequest* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessage4EQueryYuanBaoRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessage4EQueryYuanBaoRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessage4EQueryYuanBaoRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessage4EQueryYuanBaoRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessage4EQueryYuanBaoResponse::kResultCodeFieldNumber;
const int CMessage4EQueryYuanBaoResponse::kRoleIDFieldNumber;
const int CMessage4EQueryYuanBaoResponse::kRemainFieldNumber;
#endif  // !_MSC_VER

CMessage4EQueryYuanBaoResponse::CMessage4EQueryYuanBaoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessage4EQueryYuanBaoResponse::InitAsDefaultInstance() {}

CMessage4EQueryYuanBaoResponse::CMessage4EQueryYuanBaoResponse(const CMessage4EQueryYuanBaoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessage4EQueryYuanBaoResponse::SharedCtor() {
  _cached_size_ = 0;
  resultcode_ = 0;
  roleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessage4EQueryYuanBaoResponse::~CMessage4EQueryYuanBaoResponse() {
  SharedDtor();
}

void CMessage4EQueryYuanBaoResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessage4EQueryYuanBaoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessage4EQueryYuanBaoResponse_descriptor_;
}

const CMessage4EQueryYuanBaoResponse& CMessage4EQueryYuanBaoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessage4EQueryYuanBaoResponse* CMessage4EQueryYuanBaoResponse::default_instance_ = NULL;

CMessage4EQueryYuanBaoResponse* CMessage4EQueryYuanBaoResponse::New() const {
  return new CMessage4EQueryYuanBaoResponse;
}

void CMessage4EQueryYuanBaoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    resultcode_ = 0;
    roleid_ = 0u;
  }
  remain_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessage4EQueryYuanBaoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional int32 ResultCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &resultcode_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_Remain;
        break;
      }
      
      // repeated .PBIbMoney Remain = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Remain:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_remain()));
        if (input->ExpectTag(26)) goto parse_Remain;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessage4EQueryYuanBaoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessage4EQueryYuanBaoResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 ResultCode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(1, this->resultcode(), output);
  }
  
  // optional uint32 RoleID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->roleid(), output);
  }
  
  // repeated .PBIbMoney Remain = 3;
  for (int i = 0; i < this->remain_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->remain(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessage4EQueryYuanBaoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ResultCode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(1, this->resultcode(), target);
  }
  
  // optional uint32 RoleID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->roleid(), target);
  }
  
  // repeated .PBIbMoney Remain = 3;
  for (int i = 0; i < this->remain_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->remain(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessage4EQueryYuanBaoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ResultCode = 1;
    if (has_resultcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->resultcode());
    }
    
    // optional uint32 RoleID = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
  }
  // repeated .PBIbMoney Remain = 3;
  total_size += 1 * this->remain_size();
  for (int i = 0; i < this->remain_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->remain(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessage4EQueryYuanBaoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessage4EQueryYuanBaoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessage4EQueryYuanBaoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessage4EQueryYuanBaoResponse::MergeFrom(const CMessage4EQueryYuanBaoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  remain_.MergeFrom(from.remain_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_resultcode(from.resultcode());
    }
    if (from._has_bit(1)) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessage4EQueryYuanBaoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessage4EQueryYuanBaoResponse::CopyFrom(const CMessage4EQueryYuanBaoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessage4EQueryYuanBaoResponse::Swap(CMessage4EQueryYuanBaoResponse* other) {
  if (other != this) {
    std::swap(resultcode_, other->resultcode_);
    std::swap(roleid_, other->roleid_);
    remain_.Swap(&other->remain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessage4EQueryYuanBaoResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessage4EQueryYuanBaoResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessage4EQueryYuanBaoResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessage4EQueryYuanBaoResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessage4EDrawYuanBaoRequest::kRoleIDFieldNumber;
const int CMessage4EDrawYuanBaoRequest::kDrawFieldNumber;
#endif  // !_MSC_VER

CMessage4EDrawYuanBaoRequest::CMessage4EDrawYuanBaoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessage4EDrawYuanBaoRequest::InitAsDefaultInstance() {  draw_ = const_cast< ::PBIbMoney*>(&::PBIbMoney::default_instance());
}

CMessage4EDrawYuanBaoRequest::CMessage4EDrawYuanBaoRequest(const CMessage4EDrawYuanBaoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessage4EDrawYuanBaoRequest::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  draw_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessage4EDrawYuanBaoRequest::~CMessage4EDrawYuanBaoRequest() {
  SharedDtor();
}

void CMessage4EDrawYuanBaoRequest::SharedDtor() {
  if (this != default_instance_) {
    delete draw_;
  }
}

const ::google::protobuf::Descriptor* CMessage4EDrawYuanBaoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessage4EDrawYuanBaoRequest_descriptor_;
}

const CMessage4EDrawYuanBaoRequest& CMessage4EDrawYuanBaoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessage4EDrawYuanBaoRequest* CMessage4EDrawYuanBaoRequest::default_instance_ = NULL;

CMessage4EDrawYuanBaoRequest* CMessage4EDrawYuanBaoRequest::New() const {
  return new CMessage4EDrawYuanBaoRequest;
}

void CMessage4EDrawYuanBaoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    if (_has_bit(1)) {
      if (draw_ != NULL) draw_->::PBIbMoney::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessage4EDrawYuanBaoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Draw;
        break;
      }
      
      // optional .PBIbMoney Draw = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Draw:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_draw()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessage4EDrawYuanBaoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessage4EDrawYuanBaoRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional .PBIbMoney Draw = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->draw(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessage4EDrawYuanBaoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional .PBIbMoney Draw = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->draw(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessage4EDrawYuanBaoRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional .PBIbMoney Draw = 2;
    if (has_draw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->draw());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessage4EDrawYuanBaoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessage4EDrawYuanBaoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessage4EDrawYuanBaoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessage4EDrawYuanBaoRequest::MergeFrom(const CMessage4EDrawYuanBaoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      mutable_draw()->::PBIbMoney::MergeFrom(from.draw());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessage4EDrawYuanBaoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessage4EDrawYuanBaoRequest::CopyFrom(const CMessage4EDrawYuanBaoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessage4EDrawYuanBaoRequest::Swap(CMessage4EDrawYuanBaoRequest* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(draw_, other->draw_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessage4EDrawYuanBaoRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessage4EDrawYuanBaoRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessage4EDrawYuanBaoRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessage4EDrawYuanBaoRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessage4EDrawYuanBaoResponse::kRoleIDFieldNumber;
const int CMessage4EDrawYuanBaoResponse::kResultCodeFieldNumber;
const int CMessage4EDrawYuanBaoResponse::kAmountFieldNumber;
const int CMessage4EDrawYuanBaoResponse::kLeftAmountFieldNumber;
#endif  // !_MSC_VER

CMessage4EDrawYuanBaoResponse::CMessage4EDrawYuanBaoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessage4EDrawYuanBaoResponse::InitAsDefaultInstance() {}

CMessage4EDrawYuanBaoResponse::CMessage4EDrawYuanBaoResponse(const CMessage4EDrawYuanBaoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessage4EDrawYuanBaoResponse::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  resultcode_ = 0;
  amount_ = 0;
  leftamount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessage4EDrawYuanBaoResponse::~CMessage4EDrawYuanBaoResponse() {
  SharedDtor();
}

void CMessage4EDrawYuanBaoResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessage4EDrawYuanBaoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessage4EDrawYuanBaoResponse_descriptor_;
}

const CMessage4EDrawYuanBaoResponse& CMessage4EDrawYuanBaoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessage4EDrawYuanBaoResponse* CMessage4EDrawYuanBaoResponse::default_instance_ = NULL;

CMessage4EDrawYuanBaoResponse* CMessage4EDrawYuanBaoResponse::New() const {
  return new CMessage4EDrawYuanBaoResponse;
}

void CMessage4EDrawYuanBaoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    resultcode_ = 0;
    amount_ = 0;
    leftamount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessage4EDrawYuanBaoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ResultCode;
        break;
      }
      
      // optional int32 ResultCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ResultCode:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &resultcode_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Amount;
        break;
      }
      
      // optional int32 Amount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Amount:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &amount_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_LeftAmount;
        break;
      }
      
      // optional int32 LeftAmount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LeftAmount:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &leftamount_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessage4EDrawYuanBaoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessage4EDrawYuanBaoResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional int32 ResultCode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(2, this->resultcode(), output);
  }
  
  // optional int32 Amount = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->amount(), output);
  }
  
  // optional int32 LeftAmount = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->leftamount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessage4EDrawYuanBaoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional int32 ResultCode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(2, this->resultcode(), target);
  }
  
  // optional int32 Amount = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->amount(), target);
  }
  
  // optional int32 LeftAmount = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->leftamount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessage4EDrawYuanBaoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional int32 ResultCode = 2;
    if (has_resultcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->resultcode());
    }
    
    // optional int32 Amount = 3;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->amount());
    }
    
    // optional int32 LeftAmount = 4;
    if (has_leftamount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->leftamount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessage4EDrawYuanBaoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessage4EDrawYuanBaoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessage4EDrawYuanBaoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessage4EDrawYuanBaoResponse::MergeFrom(const CMessage4EDrawYuanBaoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_resultcode(from.resultcode());
    }
    if (from._has_bit(2)) {
      set_amount(from.amount());
    }
    if (from._has_bit(3)) {
      set_leftamount(from.leftamount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessage4EDrawYuanBaoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessage4EDrawYuanBaoResponse::CopyFrom(const CMessage4EDrawYuanBaoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessage4EDrawYuanBaoResponse::Swap(CMessage4EDrawYuanBaoResponse* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(resultcode_, other->resultcode_);
    std::swap(amount_, other->amount_);
    std::swap(leftamount_, other->leftamount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessage4EDrawYuanBaoResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessage4EDrawYuanBaoResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessage4EDrawYuanBaoResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessage4EDrawYuanBaoResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageFamilyExchangeRequest::kRoleIDFieldNumber;
const int CMessageFamilyExchangeRequest::kNpcTmpIDFieldNumber;
const int CMessageFamilyExchangeRequest::kComposeIDFieldNumber;
const int CMessageFamilyExchangeRequest::kFamilyIDFieldNumber;
const int CMessageFamilyExchangeRequest::kItemNumFieldNumber;
#endif  // !_MSC_VER

CMessageFamilyExchangeRequest::CMessageFamilyExchangeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFamilyExchangeRequest::InitAsDefaultInstance() {}

CMessageFamilyExchangeRequest::CMessageFamilyExchangeRequest(const CMessageFamilyExchangeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFamilyExchangeRequest::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  npctmpid_ = 0u;
  composeid_ = 0u;
  familyid_ = 0u;
  itemnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFamilyExchangeRequest::~CMessageFamilyExchangeRequest() {
  SharedDtor();
}

void CMessageFamilyExchangeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageFamilyExchangeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFamilyExchangeRequest_descriptor_;
}

const CMessageFamilyExchangeRequest& CMessageFamilyExchangeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFamilyExchangeRequest* CMessageFamilyExchangeRequest::default_instance_ = NULL;

CMessageFamilyExchangeRequest* CMessageFamilyExchangeRequest::New() const {
  return new CMessageFamilyExchangeRequest;
}

void CMessageFamilyExchangeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    npctmpid_ = 0u;
    composeid_ = 0u;
    familyid_ = 0u;
    itemnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFamilyExchangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_NpcTmpID;
        break;
      }
      
      // optional uint32 NpcTmpID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcTmpID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npctmpid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_ComposeID;
        break;
      }
      
      // optional uint32 ComposeID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ComposeID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &composeid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_FamilyID;
        break;
      }
      
      // optional uint32 FamilyID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_ItemNum;
        break;
      }
      
      // optional uint32 ItemNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemnum_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageFamilyExchangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFamilyExchangeRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional uint32 NpcTmpID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->npctmpid(), output);
  }
  
  // optional uint32 ComposeID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->composeid(), output);
  }
  
  // optional uint32 FamilyID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->familyid(), output);
  }
  
  // optional uint32 ItemNum = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->itemnum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFamilyExchangeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional uint32 NpcTmpID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->npctmpid(), target);
  }
  
  // optional uint32 ComposeID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->composeid(), target);
  }
  
  // optional uint32 FamilyID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->familyid(), target);
  }
  
  // optional uint32 ItemNum = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->itemnum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFamilyExchangeRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 NpcTmpID = 2;
    if (has_npctmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npctmpid());
    }
    
    // optional uint32 ComposeID = 3;
    if (has_composeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->composeid());
    }
    
    // optional uint32 FamilyID = 4;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
    // optional uint32 ItemNum = 5;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemnum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFamilyExchangeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFamilyExchangeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFamilyExchangeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFamilyExchangeRequest::MergeFrom(const CMessageFamilyExchangeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_npctmpid(from.npctmpid());
    }
    if (from._has_bit(2)) {
      set_composeid(from.composeid());
    }
    if (from._has_bit(3)) {
      set_familyid(from.familyid());
    }
    if (from._has_bit(4)) {
      set_itemnum(from.itemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFamilyExchangeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFamilyExchangeRequest::CopyFrom(const CMessageFamilyExchangeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFamilyExchangeRequest::Swap(CMessageFamilyExchangeRequest* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(npctmpid_, other->npctmpid_);
    std::swap(composeid_, other->composeid_);
    std::swap(familyid_, other->familyid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFamilyExchangeRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFamilyExchangeRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFamilyExchangeRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFamilyExchangeRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageFamilyExchangeResponse::kErrcodeFieldNumber;
const int CMessageFamilyExchangeResponse::kRoleIDFieldNumber;
const int CMessageFamilyExchangeResponse::kNpcTmpIDFieldNumber;
const int CMessageFamilyExchangeResponse::kComposeIDFieldNumber;
const int CMessageFamilyExchangeResponse::kItemNumFieldNumber;
#endif  // !_MSC_VER

CMessageFamilyExchangeResponse::CMessageFamilyExchangeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFamilyExchangeResponse::InitAsDefaultInstance() {}

CMessageFamilyExchangeResponse::CMessageFamilyExchangeResponse(const CMessageFamilyExchangeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFamilyExchangeResponse::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  roleid_ = 0u;
  npctmpid_ = 0u;
  composeid_ = 0u;
  itemnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFamilyExchangeResponse::~CMessageFamilyExchangeResponse() {
  SharedDtor();
}

void CMessageFamilyExchangeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageFamilyExchangeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFamilyExchangeResponse_descriptor_;
}

const CMessageFamilyExchangeResponse& CMessageFamilyExchangeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFamilyExchangeResponse* CMessageFamilyExchangeResponse::default_instance_ = NULL;

CMessageFamilyExchangeResponse* CMessageFamilyExchangeResponse::New() const {
  return new CMessageFamilyExchangeResponse;
}

void CMessageFamilyExchangeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
    roleid_ = 0u;
    npctmpid_ = 0u;
    composeid_ = 0u;
    itemnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFamilyExchangeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Errcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_NpcTmpID;
        break;
      }
      
      // optional uint32 NpcTmpID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcTmpID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npctmpid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_ComposeID;
        break;
      }
      
      // optional uint32 ComposeID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ComposeID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &composeid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_ItemNum;
        break;
      }
      
      // optional uint32 ItemNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemnum_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageFamilyExchangeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFamilyExchangeResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->errcode(), output);
  }
  
  // optional uint32 RoleID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->roleid(), output);
  }
  
  // optional uint32 NpcTmpID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->npctmpid(), output);
  }
  
  // optional uint32 ComposeID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->composeid(), output);
  }
  
  // optional uint32 ItemNum = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->itemnum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFamilyExchangeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  // optional uint32 RoleID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->roleid(), target);
  }
  
  // optional uint32 NpcTmpID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->npctmpid(), target);
  }
  
  // optional uint32 ComposeID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->composeid(), target);
  }
  
  // optional uint32 ItemNum = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->itemnum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFamilyExchangeResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional uint32 RoleID = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 NpcTmpID = 3;
    if (has_npctmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npctmpid());
    }
    
    // optional uint32 ComposeID = 4;
    if (has_composeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->composeid());
    }
    
    // optional uint32 ItemNum = 5;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemnum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFamilyExchangeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFamilyExchangeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFamilyExchangeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFamilyExchangeResponse::MergeFrom(const CMessageFamilyExchangeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(1)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(2)) {
      set_npctmpid(from.npctmpid());
    }
    if (from._has_bit(3)) {
      set_composeid(from.composeid());
    }
    if (from._has_bit(4)) {
      set_itemnum(from.itemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFamilyExchangeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFamilyExchangeResponse::CopyFrom(const CMessageFamilyExchangeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFamilyExchangeResponse::Swap(CMessageFamilyExchangeResponse* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(roleid_, other->roleid_);
    std::swap(npctmpid_, other->npctmpid_);
    std::swap(composeid_, other->composeid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFamilyExchangeResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFamilyExchangeResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFamilyExchangeResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFamilyExchangeResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCorpsExchangeRequest::kRoleIDFieldNumber;
const int CMessageCorpsExchangeRequest::kNpcTmpIDFieldNumber;
const int CMessageCorpsExchangeRequest::kComposeIDFieldNumber;
const int CMessageCorpsExchangeRequest::kCorpsIDFieldNumber;
const int CMessageCorpsExchangeRequest::kItemNumFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsExchangeRequest::CMessageCorpsExchangeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsExchangeRequest::InitAsDefaultInstance() {}

CMessageCorpsExchangeRequest::CMessageCorpsExchangeRequest(const CMessageCorpsExchangeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsExchangeRequest::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  npctmpid_ = 0u;
  composeid_ = 0u;
  corpsid_ = 0u;
  itemnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsExchangeRequest::~CMessageCorpsExchangeRequest() {
  SharedDtor();
}

void CMessageCorpsExchangeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsExchangeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsExchangeRequest_descriptor_;
}

const CMessageCorpsExchangeRequest& CMessageCorpsExchangeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsExchangeRequest* CMessageCorpsExchangeRequest::default_instance_ = NULL;

CMessageCorpsExchangeRequest* CMessageCorpsExchangeRequest::New() const {
  return new CMessageCorpsExchangeRequest;
}

void CMessageCorpsExchangeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    npctmpid_ = 0u;
    composeid_ = 0u;
    corpsid_ = 0u;
    itemnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsExchangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_NpcTmpID;
        break;
      }
      
      // optional uint32 NpcTmpID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcTmpID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npctmpid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_ComposeID;
        break;
      }
      
      // optional uint32 ComposeID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ComposeID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &composeid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_CorpsID;
        break;
      }
      
      // optional uint32 CorpsID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_ItemNum;
        break;
      }
      
      // optional uint32 ItemNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemnum_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsExchangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsExchangeRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional uint32 NpcTmpID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->npctmpid(), output);
  }
  
  // optional uint32 ComposeID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->composeid(), output);
  }
  
  // optional uint32 CorpsID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->corpsid(), output);
  }
  
  // optional uint32 ItemNum = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->itemnum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsExchangeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional uint32 NpcTmpID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->npctmpid(), target);
  }
  
  // optional uint32 ComposeID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->composeid(), target);
  }
  
  // optional uint32 CorpsID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->corpsid(), target);
  }
  
  // optional uint32 ItemNum = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->itemnum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsExchangeRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 NpcTmpID = 2;
    if (has_npctmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npctmpid());
    }
    
    // optional uint32 ComposeID = 3;
    if (has_composeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->composeid());
    }
    
    // optional uint32 CorpsID = 4;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
    // optional uint32 ItemNum = 5;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemnum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsExchangeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsExchangeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsExchangeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsExchangeRequest::MergeFrom(const CMessageCorpsExchangeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_npctmpid(from.npctmpid());
    }
    if (from._has_bit(2)) {
      set_composeid(from.composeid());
    }
    if (from._has_bit(3)) {
      set_corpsid(from.corpsid());
    }
    if (from._has_bit(4)) {
      set_itemnum(from.itemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsExchangeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsExchangeRequest::CopyFrom(const CMessageCorpsExchangeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsExchangeRequest::Swap(CMessageCorpsExchangeRequest* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(npctmpid_, other->npctmpid_);
    std::swap(composeid_, other->composeid_);
    std::swap(corpsid_, other->corpsid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsExchangeRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsExchangeRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsExchangeRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsExchangeRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCorpsExchangeResponse::kErrcodeFieldNumber;
const int CMessageCorpsExchangeResponse::kRoleIDFieldNumber;
const int CMessageCorpsExchangeResponse::kNpcTmpIDFieldNumber;
const int CMessageCorpsExchangeResponse::kComposeIDFieldNumber;
const int CMessageCorpsExchangeResponse::kItemNumFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsExchangeResponse::CMessageCorpsExchangeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsExchangeResponse::InitAsDefaultInstance() {}

CMessageCorpsExchangeResponse::CMessageCorpsExchangeResponse(const CMessageCorpsExchangeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsExchangeResponse::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  roleid_ = 0u;
  npctmpid_ = 0u;
  composeid_ = 0u;
  itemnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsExchangeResponse::~CMessageCorpsExchangeResponse() {
  SharedDtor();
}

void CMessageCorpsExchangeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsExchangeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsExchangeResponse_descriptor_;
}

const CMessageCorpsExchangeResponse& CMessageCorpsExchangeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsExchangeResponse* CMessageCorpsExchangeResponse::default_instance_ = NULL;

CMessageCorpsExchangeResponse* CMessageCorpsExchangeResponse::New() const {
  return new CMessageCorpsExchangeResponse;
}

void CMessageCorpsExchangeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
    roleid_ = 0u;
    npctmpid_ = 0u;
    composeid_ = 0u;
    itemnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsExchangeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Errcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_NpcTmpID;
        break;
      }
      
      // optional uint32 NpcTmpID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcTmpID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npctmpid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_ComposeID;
        break;
      }
      
      // optional uint32 ComposeID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ComposeID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &composeid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_ItemNum;
        break;
      }
      
      // optional uint32 ItemNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemnum_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsExchangeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsExchangeResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->errcode(), output);
  }
  
  // optional uint32 RoleID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->roleid(), output);
  }
  
  // optional uint32 NpcTmpID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->npctmpid(), output);
  }
  
  // optional uint32 ComposeID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->composeid(), output);
  }
  
  // optional uint32 ItemNum = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->itemnum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsExchangeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  // optional uint32 RoleID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->roleid(), target);
  }
  
  // optional uint32 NpcTmpID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->npctmpid(), target);
  }
  
  // optional uint32 ComposeID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->composeid(), target);
  }
  
  // optional uint32 ItemNum = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->itemnum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsExchangeResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional uint32 RoleID = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 NpcTmpID = 3;
    if (has_npctmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npctmpid());
    }
    
    // optional uint32 ComposeID = 4;
    if (has_composeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->composeid());
    }
    
    // optional uint32 ItemNum = 5;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemnum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsExchangeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsExchangeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsExchangeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsExchangeResponse::MergeFrom(const CMessageCorpsExchangeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(1)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(2)) {
      set_npctmpid(from.npctmpid());
    }
    if (from._has_bit(3)) {
      set_composeid(from.composeid());
    }
    if (from._has_bit(4)) {
      set_itemnum(from.itemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsExchangeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsExchangeResponse::CopyFrom(const CMessageCorpsExchangeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsExchangeResponse::Swap(CMessageCorpsExchangeResponse* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(roleid_, other->roleid_);
    std::swap(npctmpid_, other->npctmpid_);
    std::swap(composeid_, other->composeid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsExchangeResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsExchangeResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsExchangeResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsExchangeResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageAddFamilyExchangeItemNotify::kRoleIDFieldNumber;
const int CMessageAddFamilyExchangeItemNotify::kFamilyIDFieldNumber;
const int CMessageAddFamilyExchangeItemNotify::kLeagueBagTmpIDFieldNumber;
#endif  // !_MSC_VER

CMessageAddFamilyExchangeItemNotify::CMessageAddFamilyExchangeItemNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageAddFamilyExchangeItemNotify::InitAsDefaultInstance() {}

CMessageAddFamilyExchangeItemNotify::CMessageAddFamilyExchangeItemNotify(const CMessageAddFamilyExchangeItemNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageAddFamilyExchangeItemNotify::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  familyid_ = 0u;
  leaguebagtmpid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageAddFamilyExchangeItemNotify::~CMessageAddFamilyExchangeItemNotify() {
  SharedDtor();
}

void CMessageAddFamilyExchangeItemNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageAddFamilyExchangeItemNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageAddFamilyExchangeItemNotify_descriptor_;
}

const CMessageAddFamilyExchangeItemNotify& CMessageAddFamilyExchangeItemNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageAddFamilyExchangeItemNotify* CMessageAddFamilyExchangeItemNotify::default_instance_ = NULL;

CMessageAddFamilyExchangeItemNotify* CMessageAddFamilyExchangeItemNotify::New() const {
  return new CMessageAddFamilyExchangeItemNotify;
}

void CMessageAddFamilyExchangeItemNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    familyid_ = 0u;
    leaguebagtmpid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageAddFamilyExchangeItemNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_FamilyID;
        break;
      }
      
      // optional uint32 FamilyID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_LeagueBagTmpID;
        break;
      }
      
      // optional uint32 LeagueBagTmpID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LeagueBagTmpID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &leaguebagtmpid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageAddFamilyExchangeItemNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageAddFamilyExchangeItemNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional uint32 FamilyID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->familyid(), output);
  }
  
  // optional uint32 LeagueBagTmpID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->leaguebagtmpid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageAddFamilyExchangeItemNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional uint32 FamilyID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->familyid(), target);
  }
  
  // optional uint32 LeagueBagTmpID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->leaguebagtmpid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageAddFamilyExchangeItemNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 FamilyID = 2;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
    // optional uint32 LeagueBagTmpID = 3;
    if (has_leaguebagtmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->leaguebagtmpid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageAddFamilyExchangeItemNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageAddFamilyExchangeItemNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageAddFamilyExchangeItemNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageAddFamilyExchangeItemNotify::MergeFrom(const CMessageAddFamilyExchangeItemNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_familyid(from.familyid());
    }
    if (from._has_bit(2)) {
      set_leaguebagtmpid(from.leaguebagtmpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageAddFamilyExchangeItemNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAddFamilyExchangeItemNotify::CopyFrom(const CMessageAddFamilyExchangeItemNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAddFamilyExchangeItemNotify::Swap(CMessageAddFamilyExchangeItemNotify* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(familyid_, other->familyid_);
    std::swap(leaguebagtmpid_, other->leaguebagtmpid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageAddFamilyExchangeItemNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageAddFamilyExchangeItemNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageAddFamilyExchangeItemNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageAddFamilyExchangeItemNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageAddCorpsExchangeItemNotify::kRoleIDFieldNumber;
const int CMessageAddCorpsExchangeItemNotify::kCorpsIDFieldNumber;
const int CMessageAddCorpsExchangeItemNotify::kLeagueBagTmpIDFieldNumber;
#endif  // !_MSC_VER

CMessageAddCorpsExchangeItemNotify::CMessageAddCorpsExchangeItemNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageAddCorpsExchangeItemNotify::InitAsDefaultInstance() {}

CMessageAddCorpsExchangeItemNotify::CMessageAddCorpsExchangeItemNotify(const CMessageAddCorpsExchangeItemNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageAddCorpsExchangeItemNotify::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  corpsid_ = 0u;
  leaguebagtmpid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageAddCorpsExchangeItemNotify::~CMessageAddCorpsExchangeItemNotify() {
  SharedDtor();
}

void CMessageAddCorpsExchangeItemNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageAddCorpsExchangeItemNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageAddCorpsExchangeItemNotify_descriptor_;
}

const CMessageAddCorpsExchangeItemNotify& CMessageAddCorpsExchangeItemNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageAddCorpsExchangeItemNotify* CMessageAddCorpsExchangeItemNotify::default_instance_ = NULL;

CMessageAddCorpsExchangeItemNotify* CMessageAddCorpsExchangeItemNotify::New() const {
  return new CMessageAddCorpsExchangeItemNotify;
}

void CMessageAddCorpsExchangeItemNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    corpsid_ = 0u;
    leaguebagtmpid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageAddCorpsExchangeItemNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CorpsID;
        break;
      }
      
      // optional uint32 CorpsID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_LeagueBagTmpID;
        break;
      }
      
      // optional uint32 LeagueBagTmpID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LeagueBagTmpID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &leaguebagtmpid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageAddCorpsExchangeItemNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageAddCorpsExchangeItemNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional uint32 CorpsID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->corpsid(), output);
  }
  
  // optional uint32 LeagueBagTmpID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->leaguebagtmpid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageAddCorpsExchangeItemNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional uint32 CorpsID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->corpsid(), target);
  }
  
  // optional uint32 LeagueBagTmpID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->leaguebagtmpid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageAddCorpsExchangeItemNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 CorpsID = 2;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
    // optional uint32 LeagueBagTmpID = 3;
    if (has_leaguebagtmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->leaguebagtmpid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageAddCorpsExchangeItemNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageAddCorpsExchangeItemNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageAddCorpsExchangeItemNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageAddCorpsExchangeItemNotify::MergeFrom(const CMessageAddCorpsExchangeItemNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_corpsid(from.corpsid());
    }
    if (from._has_bit(2)) {
      set_leaguebagtmpid(from.leaguebagtmpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageAddCorpsExchangeItemNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAddCorpsExchangeItemNotify::CopyFrom(const CMessageAddCorpsExchangeItemNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAddCorpsExchangeItemNotify::Swap(CMessageAddCorpsExchangeItemNotify* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(corpsid_, other->corpsid_);
    std::swap(leaguebagtmpid_, other->leaguebagtmpid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageAddCorpsExchangeItemNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageAddCorpsExchangeItemNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageAddCorpsExchangeItemNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageAddCorpsExchangeItemNotify_reflection_;
}

// ===================================================================

const ::std::string CMessageGateEntityGMMove::_default_rolename_;
#ifndef _MSC_VER
const int CMessageGateEntityGMMove::kRoleNameFieldNumber;
const int CMessageGateEntityGMMove::kLineIDFieldNumber;
const int CMessageGateEntityGMMove::kMapIDFieldNumber;
const int CMessageGateEntityGMMove::kPosXFieldNumber;
const int CMessageGateEntityGMMove::kPosYFieldNumber;
const int CMessageGateEntityGMMove::kKeyFieldNumber;
#endif  // !_MSC_VER

CMessageGateEntityGMMove::CMessageGateEntityGMMove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGateEntityGMMove::InitAsDefaultInstance() {}

CMessageGateEntityGMMove::CMessageGateEntityGMMove(const CMessageGateEntityGMMove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGateEntityGMMove::SharedCtor() {
  _cached_size_ = 0;
  rolename_ = const_cast< ::std::string*>(&_default_rolename_);
  lineid_ = 0;
  mapid_ = 0;
  posx_ = 0;
  posy_ = 0;
  key_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGateEntityGMMove::~CMessageGateEntityGMMove() {
  SharedDtor();
}

void CMessageGateEntityGMMove::SharedDtor() {
  if (rolename_ != &_default_rolename_) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGateEntityGMMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGateEntityGMMove_descriptor_;
}

const CMessageGateEntityGMMove& CMessageGateEntityGMMove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGateEntityGMMove* CMessageGateEntityGMMove::default_instance_ = NULL;

CMessageGateEntityGMMove* CMessageGateEntityGMMove::New() const {
  return new CMessageGateEntityGMMove;
}

void CMessageGateEntityGMMove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (rolename_ != &_default_rolename_) {
        rolename_->clear();
      }
    }
    lineid_ = 0;
    mapid_ = 0;
    posx_ = 0;
    posy_ = 0;
    key_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGateEntityGMMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string RoleName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_rolename()));
        if (input->ExpectTag(16)) goto parse_LineID;
        break;
      }
      
      // optional int32 LineID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &lineid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_MapID;
        break;
      }
      
      // optional int32 MapID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &mapid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_PosX;
        break;
      }
      
      // optional int32 PosX = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosX:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &posx_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_PosY;
        break;
      }
      
      // optional int32 PosY = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosY:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &posy_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Key;
        break;
      }
      
      // optional int64 Key = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Key:
        DO_(::google::protobuf::internal::WireFormat::ReadInt64(
              input, &key_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGateEntityGMMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGateEntityGMMove::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string RoleName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->rolename(), output);
  }
  
  // optional int32 LineID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(2, this->lineid(), output);
  }
  
  // optional int32 MapID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->mapid(), output);
  }
  
  // optional int32 PosX = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->posx(), output);
  }
  
  // optional int32 PosY = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(5, this->posy(), output);
  }
  
  // optional int64 Key = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteInt64(6, this->key(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGateEntityGMMove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string RoleName = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->rolename(), target);
  }
  
  // optional int32 LineID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(2, this->lineid(), target);
  }
  
  // optional int32 MapID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->mapid(), target);
  }
  
  // optional int32 PosX = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->posx(), target);
  }
  
  // optional int32 PosY = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(5, this->posy(), target);
  }
  
  // optional int64 Key = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt64ToArray(6, this->key(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGateEntityGMMove::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string RoleName = 1;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->rolename());
    }
    
    // optional int32 LineID = 2;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->lineid());
    }
    
    // optional int32 MapID = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->mapid());
    }
    
    // optional int32 PosX = 4;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->posx());
    }
    
    // optional int32 PosY = 5;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->posy());
    }
    
    // optional int64 Key = 6;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int64Size(
          this->key());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGateEntityGMMove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGateEntityGMMove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGateEntityGMMove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGateEntityGMMove::MergeFrom(const CMessageGateEntityGMMove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_rolename(from.rolename());
    }
    if (from._has_bit(1)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(2)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(3)) {
      set_posx(from.posx());
    }
    if (from._has_bit(4)) {
      set_posy(from.posy());
    }
    if (from._has_bit(5)) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGateEntityGMMove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGateEntityGMMove::CopyFrom(const CMessageGateEntityGMMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGateEntityGMMove::Swap(CMessageGateEntityGMMove* other) {
  if (other != this) {
    std::swap(rolename_, other->rolename_);
    std::swap(lineid_, other->lineid_);
    std::swap(mapid_, other->mapid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGateEntityGMMove::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGateEntityGMMove::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGateEntityGMMove::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGateEntityGMMove_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageSceneEntityGMMove::kRoleIDFieldNumber;
const int CMessageSceneEntityGMMove::kLineIDFieldNumber;
const int CMessageSceneEntityGMMove::kMapIDFieldNumber;
const int CMessageSceneEntityGMMove::kPosXFieldNumber;
const int CMessageSceneEntityGMMove::kPosYFieldNumber;
const int CMessageSceneEntityGMMove::kKeyFieldNumber;
#endif  // !_MSC_VER

CMessageSceneEntityGMMove::CMessageSceneEntityGMMove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageSceneEntityGMMove::InitAsDefaultInstance() {}

CMessageSceneEntityGMMove::CMessageSceneEntityGMMove(const CMessageSceneEntityGMMove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageSceneEntityGMMove::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  lineid_ = 0;
  mapid_ = 0;
  posx_ = 0;
  posy_ = 0;
  key_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageSceneEntityGMMove::~CMessageSceneEntityGMMove() {
  SharedDtor();
}

void CMessageSceneEntityGMMove::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageSceneEntityGMMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageSceneEntityGMMove_descriptor_;
}

const CMessageSceneEntityGMMove& CMessageSceneEntityGMMove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageSceneEntityGMMove* CMessageSceneEntityGMMove::default_instance_ = NULL;

CMessageSceneEntityGMMove* CMessageSceneEntityGMMove::New() const {
  return new CMessageSceneEntityGMMove;
}

void CMessageSceneEntityGMMove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    lineid_ = 0;
    mapid_ = 0;
    posx_ = 0;
    posy_ = 0;
    key_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageSceneEntityGMMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional int32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_LineID;
        break;
      }
      
      // optional int32 LineID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &lineid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_MapID;
        break;
      }
      
      // optional int32 MapID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &mapid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_PosX;
        break;
      }
      
      // optional int32 PosX = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosX:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &posx_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_PosY;
        break;
      }
      
      // optional int32 PosY = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosY:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &posy_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Key;
        break;
      }
      
      // optional int64 Key = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Key:
        DO_(::google::protobuf::internal::WireFormat::ReadInt64(
              input, &key_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageSceneEntityGMMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageSceneEntityGMMove::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(1, this->roleid(), output);
  }
  
  // optional int32 LineID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(2, this->lineid(), output);
  }
  
  // optional int32 MapID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->mapid(), output);
  }
  
  // optional int32 PosX = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->posx(), output);
  }
  
  // optional int32 PosY = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(5, this->posy(), output);
  }
  
  // optional int64 Key = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteInt64(6, this->key(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageSceneEntityGMMove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(1, this->roleid(), target);
  }
  
  // optional int32 LineID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(2, this->lineid(), target);
  }
  
  // optional int32 MapID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->mapid(), target);
  }
  
  // optional int32 PosX = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->posx(), target);
  }
  
  // optional int32 PosY = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(5, this->posy(), target);
  }
  
  // optional int64 Key = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt64ToArray(6, this->key(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageSceneEntityGMMove::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->roleid());
    }
    
    // optional int32 LineID = 2;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->lineid());
    }
    
    // optional int32 MapID = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->mapid());
    }
    
    // optional int32 PosX = 4;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->posx());
    }
    
    // optional int32 PosY = 5;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->posy());
    }
    
    // optional int64 Key = 6;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int64Size(
          this->key());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageSceneEntityGMMove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageSceneEntityGMMove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageSceneEntityGMMove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageSceneEntityGMMove::MergeFrom(const CMessageSceneEntityGMMove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(2)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(3)) {
      set_posx(from.posx());
    }
    if (from._has_bit(4)) {
      set_posy(from.posy());
    }
    if (from._has_bit(5)) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageSceneEntityGMMove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSceneEntityGMMove::CopyFrom(const CMessageSceneEntityGMMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSceneEntityGMMove::Swap(CMessageSceneEntityGMMove* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(lineid_, other->lineid_);
    std::swap(mapid_, other->mapid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageSceneEntityGMMove::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageSceneEntityGMMove::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageSceneEntityGMMove::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageSceneEntityGMMove_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int SingleActivityObj::kActivityIDFieldNumber;
const int SingleActivityObj::kTimeTypeFieldNumber;
const int SingleActivityObj::kTimeInfoFieldNumber;
const int SingleActivityObj::kLmtLevelFieldNumber;
const int SingleActivityObj::kMaxTimesFieldNumber;
const int SingleActivityObj::kStateFieldNumber;
#endif  // !_MSC_VER

SingleActivityObj::SingleActivityObj()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleActivityObj::InitAsDefaultInstance() {}

SingleActivityObj::SingleActivityObj(const SingleActivityObj& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleActivityObj::SharedCtor() {
  _cached_size_ = 0;
  activityid_ = 0u;
  timetype_ = 0u;
  timeinfo_ = 0u;
  lmtlevel_ = 0u;
  maxtimes_ = 0u;
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleActivityObj::~SingleActivityObj() {
  SharedDtor();
}

void SingleActivityObj::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SingleActivityObj::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleActivityObj_descriptor_;
}

const SingleActivityObj& SingleActivityObj::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

SingleActivityObj* SingleActivityObj::default_instance_ = NULL;

SingleActivityObj* SingleActivityObj::New() const {
  return new SingleActivityObj;
}

void SingleActivityObj::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activityid_ = 0u;
    timetype_ = 0u;
    timeinfo_ = 0u;
    lmtlevel_ = 0u;
    maxtimes_ = 0u;
    state_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleActivityObj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ActivityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &activityid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_TimeType;
        break;
      }
      
      // optional uint32 TimeType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TimeType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &timetype_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_TimeInfo;
        break;
      }
      
      // optional uint32 TimeInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TimeInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &timeinfo_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_LmtLevel;
        break;
      }
      
      // optional uint32 LmtLevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LmtLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lmtlevel_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_MaxTimes;
        break;
      }
      
      // optional uint32 MaxTimes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxTimes:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxtimes_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_State;
        break;
      }
      
      // optional uint32 State = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_State:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &state_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleActivityObj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SingleActivityObj::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ActivityID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->activityid(), output);
  }
  
  // optional uint32 TimeType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->timetype(), output);
  }
  
  // optional uint32 TimeInfo = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->timeinfo(), output);
  }
  
  // optional uint32 LmtLevel = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->lmtlevel(), output);
  }
  
  // optional uint32 MaxTimes = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->maxtimes(), output);
  }
  
  // optional uint32 State = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->state(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleActivityObj::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ActivityID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->activityid(), target);
  }
  
  // optional uint32 TimeType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->timetype(), target);
  }
  
  // optional uint32 TimeInfo = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->timeinfo(), target);
  }
  
  // optional uint32 LmtLevel = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->lmtlevel(), target);
  }
  
  // optional uint32 MaxTimes = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->maxtimes(), target);
  }
  
  // optional uint32 State = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->state(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleActivityObj::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ActivityID = 1;
    if (has_activityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->activityid());
    }
    
    // optional uint32 TimeType = 2;
    if (has_timetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->timetype());
    }
    
    // optional uint32 TimeInfo = 3;
    if (has_timeinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->timeinfo());
    }
    
    // optional uint32 LmtLevel = 4;
    if (has_lmtlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lmtlevel());
    }
    
    // optional uint32 MaxTimes = 5;
    if (has_maxtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxtimes());
    }
    
    // optional uint32 State = 6;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->state());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SingleActivityObj::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleActivityObj* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleActivityObj*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleActivityObj::MergeFrom(const SingleActivityObj& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_activityid(from.activityid());
    }
    if (from._has_bit(1)) {
      set_timetype(from.timetype());
    }
    if (from._has_bit(2)) {
      set_timeinfo(from.timeinfo());
    }
    if (from._has_bit(3)) {
      set_lmtlevel(from.lmtlevel());
    }
    if (from._has_bit(4)) {
      set_maxtimes(from.maxtimes());
    }
    if (from._has_bit(5)) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleActivityObj::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleActivityObj::CopyFrom(const SingleActivityObj& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleActivityObj::Swap(SingleActivityObj* other) {
  if (other != this) {
    std::swap(activityid_, other->activityid_);
    std::swap(timetype_, other->timetype_);
    std::swap(timeinfo_, other->timeinfo_);
    std::swap(lmtlevel_, other->lmtlevel_);
    std::swap(maxtimes_, other->maxtimes_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool SingleActivityObj::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* SingleActivityObj::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* SingleActivityObj::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return SingleActivityObj_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int DropInfo::kOgreIDFieldNumber;
const int DropInfo::kDropIDFieldNumber;
#endif  // !_MSC_VER

DropInfo::DropInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DropInfo::InitAsDefaultInstance() {}

DropInfo::DropInfo(const DropInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DropInfo::SharedCtor() {
  _cached_size_ = 0;
  ogreid_ = 0u;
  dropid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DropInfo::~DropInfo() {
  SharedDtor();
}

void DropInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DropInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DropInfo_descriptor_;
}

const DropInfo& DropInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

DropInfo* DropInfo::default_instance_ = NULL;

DropInfo* DropInfo::New() const {
  return new DropInfo;
}

void DropInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ogreid_ = 0u;
    dropid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DropInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 OgreID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ogreid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_DropID;
        break;
      }
      
      // optional uint32 DropID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DropID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &dropid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DropInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DropInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 OgreID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->ogreid(), output);
  }
  
  // optional uint32 DropID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->dropid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DropInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 OgreID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->ogreid(), target);
  }
  
  // optional uint32 DropID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->dropid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DropInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 OgreID = 1;
    if (has_ogreid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ogreid());
    }
    
    // optional uint32 DropID = 2;
    if (has_dropid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->dropid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DropInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DropInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DropInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DropInfo::MergeFrom(const DropInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_ogreid(from.ogreid());
    }
    if (from._has_bit(1)) {
      set_dropid(from.dropid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DropInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropInfo::CopyFrom(const DropInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropInfo::Swap(DropInfo* other) {
  if (other != this) {
    std::swap(ogreid_, other->ogreid_);
    std::swap(dropid_, other->dropid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool DropInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* DropInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* DropInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return DropInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int MapDrop::kDropIDFieldNumber;
const int MapDrop::kDropTypeFieldNumber;
const int MapDrop::kMapIDsFieldNumber;
#endif  // !_MSC_VER

MapDrop::MapDrop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapDrop::InitAsDefaultInstance() {}

MapDrop::MapDrop(const MapDrop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapDrop::SharedCtor() {
  _cached_size_ = 0;
  dropid_ = 0u;
  droptype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapDrop::~MapDrop() {
  SharedDtor();
}

void MapDrop::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MapDrop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapDrop_descriptor_;
}

const MapDrop& MapDrop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

MapDrop* MapDrop::default_instance_ = NULL;

MapDrop* MapDrop::New() const {
  return new MapDrop;
}

void MapDrop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dropid_ = 0u;
    droptype_ = 0u;
  }
  mapids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapDrop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 DropID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &dropid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_DropType;
        break;
      }
      
      // optional uint32 DropType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DropType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &droptype_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_MapIDs;
        break;
      }
      
      // repeated uint32 MapIDs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapIDs:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_mapids(value);
        if (input->ExpectTag(24)) goto parse_MapIDs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapDrop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MapDrop::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 DropID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->dropid(), output);
  }
  
  // optional uint32 DropType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->droptype(), output);
  }
  
  // repeated uint32 MapIDs = 3;
  for (int i = 0; i < this->mapids_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->mapids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapDrop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 DropID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->dropid(), target);
  }
  
  // optional uint32 DropType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->droptype(), target);
  }
  
  // repeated uint32 MapIDs = 3;
  for (int i = 0; i < this->mapids_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->mapids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapDrop::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 DropID = 1;
    if (has_dropid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->dropid());
    }
    
    // optional uint32 DropType = 2;
    if (has_droptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->droptype());
    }
    
  }
  // repeated uint32 MapIDs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->mapids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->mapids(i));
    }
    total_size += 1 * this->mapids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MapDrop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapDrop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapDrop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapDrop::MergeFrom(const MapDrop& from) {
  GOOGLE_CHECK_NE(&from, this);
  mapids_.MergeFrom(from.mapids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_dropid(from.dropid());
    }
    if (from._has_bit(1)) {
      set_droptype(from.droptype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapDrop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapDrop::CopyFrom(const MapDrop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapDrop::Swap(MapDrop* other) {
  if (other != this) {
    std::swap(dropid_, other->dropid_);
    std::swap(droptype_, other->droptype_);
    mapids_.Swap(&other->mapids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool MapDrop::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* MapDrop::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* MapDrop::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return MapDrop_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int SingleActivityInfo::kActivityIDFieldNumber;
const int SingleActivityInfo::kDropinfoFieldNumber;
const int SingleActivityInfo::kOgreindexFieldNumber;
#endif  // !_MSC_VER

SingleActivityInfo::SingleActivityInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleActivityInfo::InitAsDefaultInstance() {}

SingleActivityInfo::SingleActivityInfo(const SingleActivityInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleActivityInfo::SharedCtor() {
  _cached_size_ = 0;
  activityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleActivityInfo::~SingleActivityInfo() {
  SharedDtor();
}

void SingleActivityInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SingleActivityInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleActivityInfo_descriptor_;
}

const SingleActivityInfo& SingleActivityInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

SingleActivityInfo* SingleActivityInfo::default_instance_ = NULL;

SingleActivityInfo* SingleActivityInfo::New() const {
  return new SingleActivityInfo;
}

void SingleActivityInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activityid_ = 0u;
  }
  dropinfo_.Clear();
  ogreindex_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleActivityInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ActivityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &activityid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_dropinfo;
        break;
      }
      
      // repeated .DropInfo dropinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_dropinfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_dropinfo()));
        if (input->ExpectTag(18)) goto parse_dropinfo;
        if (input->ExpectTag(24)) goto parse_ogreindex;
        break;
      }
      
      // repeated uint32 ogreindex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ogreindex:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_ogreindex(value);
        if (input->ExpectTag(24)) goto parse_ogreindex;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleActivityInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SingleActivityInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ActivityID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->activityid(), output);
  }
  
  // repeated .DropInfo dropinfo = 2;
  for (int i = 0; i < this->dropinfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->dropinfo(i), output);
  }
  
  // repeated uint32 ogreindex = 3;
  for (int i = 0; i < this->ogreindex_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->ogreindex(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleActivityInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ActivityID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->activityid(), target);
  }
  
  // repeated .DropInfo dropinfo = 2;
  for (int i = 0; i < this->dropinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->dropinfo(i), target);
  }
  
  // repeated uint32 ogreindex = 3;
  for (int i = 0; i < this->ogreindex_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->ogreindex(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleActivityInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ActivityID = 1;
    if (has_activityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->activityid());
    }
    
  }
  // repeated .DropInfo dropinfo = 2;
  total_size += 1 * this->dropinfo_size();
  for (int i = 0; i < this->dropinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->dropinfo(i));
  }
  
  // repeated uint32 ogreindex = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->ogreindex_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->ogreindex(i));
    }
    total_size += 1 * this->ogreindex_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SingleActivityInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleActivityInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleActivityInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleActivityInfo::MergeFrom(const SingleActivityInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  dropinfo_.MergeFrom(from.dropinfo_);
  ogreindex_.MergeFrom(from.ogreindex_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_activityid(from.activityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleActivityInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleActivityInfo::CopyFrom(const SingleActivityInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleActivityInfo::Swap(SingleActivityInfo* other) {
  if (other != this) {
    std::swap(activityid_, other->activityid_);
    dropinfo_.Swap(&other->dropinfo_);
    ogreindex_.Swap(&other->ogreindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool SingleActivityInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* SingleActivityInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* SingleActivityInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return SingleActivityInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageTodayActivitysNotify::kActivityListFieldNumber;
const int CMessageTodayActivitysNotify::kActivityInfoFieldNumber;
#endif  // !_MSC_VER

CMessageTodayActivitysNotify::CMessageTodayActivitysNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTodayActivitysNotify::InitAsDefaultInstance() {}

CMessageTodayActivitysNotify::CMessageTodayActivitysNotify(const CMessageTodayActivitysNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTodayActivitysNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTodayActivitysNotify::~CMessageTodayActivitysNotify() {
  SharedDtor();
}

void CMessageTodayActivitysNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTodayActivitysNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTodayActivitysNotify_descriptor_;
}

const CMessageTodayActivitysNotify& CMessageTodayActivitysNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTodayActivitysNotify* CMessageTodayActivitysNotify::default_instance_ = NULL;

CMessageTodayActivitysNotify* CMessageTodayActivitysNotify::New() const {
  return new CMessageTodayActivitysNotify;
}

void CMessageTodayActivitysNotify::Clear() {
  activitylist_.Clear();
  activityinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTodayActivitysNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .SingleActivityObj ActivityList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ActivityList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_activitylist()));
        if (input->ExpectTag(10)) goto parse_ActivityList;
        if (input->ExpectTag(18)) goto parse_ActivityInfo;
        break;
      }
      
      // repeated .SingleActivityInfo ActivityInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ActivityInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_activityinfo()));
        if (input->ExpectTag(18)) goto parse_ActivityInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTodayActivitysNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTodayActivitysNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .SingleActivityObj ActivityList = 1;
  for (int i = 0; i < this->activitylist_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->activitylist(i), output);
  }
  
  // repeated .SingleActivityInfo ActivityInfo = 2;
  for (int i = 0; i < this->activityinfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->activityinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTodayActivitysNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SingleActivityObj ActivityList = 1;
  for (int i = 0; i < this->activitylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->activitylist(i), target);
  }
  
  // repeated .SingleActivityInfo ActivityInfo = 2;
  for (int i = 0; i < this->activityinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->activityinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTodayActivitysNotify::ByteSize() const {
  int total_size = 0;
  
  // repeated .SingleActivityObj ActivityList = 1;
  total_size += 1 * this->activitylist_size();
  for (int i = 0; i < this->activitylist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->activitylist(i));
  }
  
  // repeated .SingleActivityInfo ActivityInfo = 2;
  total_size += 1 * this->activityinfo_size();
  for (int i = 0; i < this->activityinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->activityinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTodayActivitysNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTodayActivitysNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTodayActivitysNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTodayActivitysNotify::MergeFrom(const CMessageTodayActivitysNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  activitylist_.MergeFrom(from.activitylist_);
  activityinfo_.MergeFrom(from.activityinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTodayActivitysNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTodayActivitysNotify::CopyFrom(const CMessageTodayActivitysNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTodayActivitysNotify::Swap(CMessageTodayActivitysNotify* other) {
  if (other != this) {
    activitylist_.Swap(&other->activitylist_);
    activityinfo_.Swap(&other->activityinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTodayActivitysNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTodayActivitysNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTodayActivitysNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTodayActivitysNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int SingleActivity::kActivityIDFieldNumber;
const int SingleActivity::kActivityStateFieldNumber;
const int SingleActivity::kMapDropsFieldNumber;
#endif  // !_MSC_VER

SingleActivity::SingleActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleActivity::InitAsDefaultInstance() {}

SingleActivity::SingleActivity(const SingleActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleActivity::SharedCtor() {
  _cached_size_ = 0;
  activityid_ = 0u;
  activitystate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleActivity::~SingleActivity() {
  SharedDtor();
}

void SingleActivity::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SingleActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleActivity_descriptor_;
}

const SingleActivity& SingleActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

SingleActivity* SingleActivity::default_instance_ = NULL;

SingleActivity* SingleActivity::New() const {
  return new SingleActivity;
}

void SingleActivity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activityid_ = 0u;
    activitystate_ = 0u;
  }
  mapdrops_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ActivityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &activityid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ActivityState;
        break;
      }
      
      // optional uint32 ActivityState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ActivityState:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &activitystate_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_MapDrops;
        break;
      }
      
      // repeated .MapDrop MapDrops = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MapDrops:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_mapdrops()));
        if (input->ExpectTag(26)) goto parse_MapDrops;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SingleActivity::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ActivityID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->activityid(), output);
  }
  
  // optional uint32 ActivityState = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->activitystate(), output);
  }
  
  // repeated .MapDrop MapDrops = 3;
  for (int i = 0; i < this->mapdrops_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->mapdrops(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ActivityID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->activityid(), target);
  }
  
  // optional uint32 ActivityState = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->activitystate(), target);
  }
  
  // repeated .MapDrop MapDrops = 3;
  for (int i = 0; i < this->mapdrops_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->mapdrops(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleActivity::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ActivityID = 1;
    if (has_activityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->activityid());
    }
    
    // optional uint32 ActivityState = 2;
    if (has_activitystate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->activitystate());
    }
    
  }
  // repeated .MapDrop MapDrops = 3;
  total_size += 1 * this->mapdrops_size();
  for (int i = 0; i < this->mapdrops_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->mapdrops(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SingleActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleActivity::MergeFrom(const SingleActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  mapdrops_.MergeFrom(from.mapdrops_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_activityid(from.activityid());
    }
    if (from._has_bit(1)) {
      set_activitystate(from.activitystate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleActivity::CopyFrom(const SingleActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleActivity::Swap(SingleActivity* other) {
  if (other != this) {
    std::swap(activityid_, other->activityid_);
    std::swap(activitystate_, other->activitystate_);
    mapdrops_.Swap(&other->mapdrops_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool SingleActivity::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* SingleActivity::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* SingleActivity::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return SingleActivity_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageActivityChangeNotify::kActivityListFieldNumber;
#endif  // !_MSC_VER

CMessageActivityChangeNotify::CMessageActivityChangeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageActivityChangeNotify::InitAsDefaultInstance() {}

CMessageActivityChangeNotify::CMessageActivityChangeNotify(const CMessageActivityChangeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageActivityChangeNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageActivityChangeNotify::~CMessageActivityChangeNotify() {
  SharedDtor();
}

void CMessageActivityChangeNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageActivityChangeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageActivityChangeNotify_descriptor_;
}

const CMessageActivityChangeNotify& CMessageActivityChangeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageActivityChangeNotify* CMessageActivityChangeNotify::default_instance_ = NULL;

CMessageActivityChangeNotify* CMessageActivityChangeNotify::New() const {
  return new CMessageActivityChangeNotify;
}

void CMessageActivityChangeNotify::Clear() {
  activitylist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageActivityChangeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .SingleActivity ActivityList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ActivityList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_activitylist()));
        if (input->ExpectTag(10)) goto parse_ActivityList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageActivityChangeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageActivityChangeNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .SingleActivity ActivityList = 1;
  for (int i = 0; i < this->activitylist_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->activitylist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageActivityChangeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SingleActivity ActivityList = 1;
  for (int i = 0; i < this->activitylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->activitylist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageActivityChangeNotify::ByteSize() const {
  int total_size = 0;
  
  // repeated .SingleActivity ActivityList = 1;
  total_size += 1 * this->activitylist_size();
  for (int i = 0; i < this->activitylist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->activitylist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageActivityChangeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageActivityChangeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageActivityChangeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageActivityChangeNotify::MergeFrom(const CMessageActivityChangeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  activitylist_.MergeFrom(from.activitylist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageActivityChangeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageActivityChangeNotify::CopyFrom(const CMessageActivityChangeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageActivityChangeNotify::Swap(CMessageActivityChangeNotify* other) {
  if (other != this) {
    activitylist_.Swap(&other->activitylist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageActivityChangeNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageActivityChangeNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageActivityChangeNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageActivityChangeNotify_reflection_;
}

// ===================================================================

const ::std::string CMessageChangePasswordStatusNotify::_default_password_;
#ifndef _MSC_VER
const int CMessageChangePasswordStatusNotify::kRoleIDFieldNumber;
const int CMessageChangePasswordStatusNotify::kPwdStatusFieldNumber;
const int CMessageChangePasswordStatusNotify::kPasswordFieldNumber;
#endif  // !_MSC_VER

CMessageChangePasswordStatusNotify::CMessageChangePasswordStatusNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangePasswordStatusNotify::InitAsDefaultInstance() {}

CMessageChangePasswordStatusNotify::CMessageChangePasswordStatusNotify(const CMessageChangePasswordStatusNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangePasswordStatusNotify::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  pwdstatus_ = 0u;
  password_ = const_cast< ::std::string*>(&_default_password_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangePasswordStatusNotify::~CMessageChangePasswordStatusNotify() {
  SharedDtor();
}

void CMessageChangePasswordStatusNotify::SharedDtor() {
  if (password_ != &_default_password_) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageChangePasswordStatusNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangePasswordStatusNotify_descriptor_;
}

const CMessageChangePasswordStatusNotify& CMessageChangePasswordStatusNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangePasswordStatusNotify* CMessageChangePasswordStatusNotify::default_instance_ = NULL;

CMessageChangePasswordStatusNotify* CMessageChangePasswordStatusNotify::New() const {
  return new CMessageChangePasswordStatusNotify;
}

void CMessageChangePasswordStatusNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    pwdstatus_ = 0u;
    if (_has_bit(2)) {
      if (password_ != &_default_password_) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangePasswordStatusNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_PwdStatus;
        break;
      }
      
      // optional uint32 PwdStatus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PwdStatus:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pwdstatus_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_Password;
        break;
      }
      
      // optional string Password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Password:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_password()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangePasswordStatusNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangePasswordStatusNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional uint32 PwdStatus = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->pwdstatus(), output);
  }
  
  // optional string Password = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->password(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangePasswordStatusNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional uint32 PwdStatus = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->pwdstatus(), target);
  }
  
  // optional string Password = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->password(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangePasswordStatusNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 PwdStatus = 2;
    if (has_pwdstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pwdstatus());
    }
    
    // optional string Password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->password());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangePasswordStatusNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangePasswordStatusNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangePasswordStatusNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangePasswordStatusNotify::MergeFrom(const CMessageChangePasswordStatusNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_pwdstatus(from.pwdstatus());
    }
    if (from._has_bit(2)) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangePasswordStatusNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangePasswordStatusNotify::CopyFrom(const CMessageChangePasswordStatusNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangePasswordStatusNotify::Swap(CMessageChangePasswordStatusNotify* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(pwdstatus_, other->pwdstatus_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangePasswordStatusNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangePasswordStatusNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangePasswordStatusNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangePasswordStatusNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageUpdateNationTitleNotice::kRoleIDFieldNumber;
const int CMessageUpdateNationTitleNotice::kTitleIDFieldNumber;
const int CMessageUpdateNationTitleNotice::kIsAddFieldNumber;
#endif  // !_MSC_VER

CMessageUpdateNationTitleNotice::CMessageUpdateNationTitleNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUpdateNationTitleNotice::InitAsDefaultInstance() {}

CMessageUpdateNationTitleNotice::CMessageUpdateNationTitleNotice(const CMessageUpdateNationTitleNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUpdateNationTitleNotice::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  titleid_ = 0u;
  isadd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUpdateNationTitleNotice::~CMessageUpdateNationTitleNotice() {
  SharedDtor();
}

void CMessageUpdateNationTitleNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageUpdateNationTitleNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUpdateNationTitleNotice_descriptor_;
}

const CMessageUpdateNationTitleNotice& CMessageUpdateNationTitleNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageUpdateNationTitleNotice* CMessageUpdateNationTitleNotice::default_instance_ = NULL;

CMessageUpdateNationTitleNotice* CMessageUpdateNationTitleNotice::New() const {
  return new CMessageUpdateNationTitleNotice;
}

void CMessageUpdateNationTitleNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    titleid_ = 0u;
    isadd_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUpdateNationTitleNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional int32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_TitleID;
        break;
      }
      
      // optional uint32 TitleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TitleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &titleid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_IsAdd;
        break;
      }
      
      // optional uint32 IsAdd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IsAdd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &isadd_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUpdateNationTitleNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUpdateNationTitleNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(1, this->roleid(), output);
  }
  
  // optional uint32 TitleID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->titleid(), output);
  }
  
  // optional uint32 IsAdd = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->isadd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUpdateNationTitleNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(1, this->roleid(), target);
  }
  
  // optional uint32 TitleID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->titleid(), target);
  }
  
  // optional uint32 IsAdd = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->isadd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUpdateNationTitleNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->roleid());
    }
    
    // optional uint32 TitleID = 2;
    if (has_titleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->titleid());
    }
    
    // optional uint32 IsAdd = 3;
    if (has_isadd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->isadd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUpdateNationTitleNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUpdateNationTitleNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUpdateNationTitleNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUpdateNationTitleNotice::MergeFrom(const CMessageUpdateNationTitleNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_titleid(from.titleid());
    }
    if (from._has_bit(2)) {
      set_isadd(from.isadd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUpdateNationTitleNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUpdateNationTitleNotice::CopyFrom(const CMessageUpdateNationTitleNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUpdateNationTitleNotice::Swap(CMessageUpdateNationTitleNotice* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(titleid_, other->titleid_);
    std::swap(isadd_, other->isadd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUpdateNationTitleNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUpdateNationTitleNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUpdateNationTitleNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUpdateNationTitleNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetNationTitleListRequest::kRoleIDFieldNumber;
#endif  // !_MSC_VER

CMessageGetNationTitleListRequest::CMessageGetNationTitleListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetNationTitleListRequest::InitAsDefaultInstance() {}

CMessageGetNationTitleListRequest::CMessageGetNationTitleListRequest(const CMessageGetNationTitleListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetNationTitleListRequest::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetNationTitleListRequest::~CMessageGetNationTitleListRequest() {
  SharedDtor();
}

void CMessageGetNationTitleListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGetNationTitleListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetNationTitleListRequest_descriptor_;
}

const CMessageGetNationTitleListRequest& CMessageGetNationTitleListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetNationTitleListRequest* CMessageGetNationTitleListRequest::default_instance_ = NULL;

CMessageGetNationTitleListRequest* CMessageGetNationTitleListRequest::New() const {
  return new CMessageGetNationTitleListRequest;
}

void CMessageGetNationTitleListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetNationTitleListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional int32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetNationTitleListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetNationTitleListRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(1, this->roleid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetNationTitleListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(1, this->roleid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetNationTitleListRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->roleid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetNationTitleListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetNationTitleListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetNationTitleListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetNationTitleListRequest::MergeFrom(const CMessageGetNationTitleListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetNationTitleListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetNationTitleListRequest::CopyFrom(const CMessageGetNationTitleListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetNationTitleListRequest::Swap(CMessageGetNationTitleListRequest* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetNationTitleListRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetNationTitleListRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetNationTitleListRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetNationTitleListRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetNationTitleListResponse::kRoleIDFieldNumber;
const int CMessageGetNationTitleListResponse::kTitleListFieldNumber;
#endif  // !_MSC_VER

CMessageGetNationTitleListResponse::CMessageGetNationTitleListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetNationTitleListResponse::InitAsDefaultInstance() {}

CMessageGetNationTitleListResponse::CMessageGetNationTitleListResponse(const CMessageGetNationTitleListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetNationTitleListResponse::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetNationTitleListResponse::~CMessageGetNationTitleListResponse() {
  SharedDtor();
}

void CMessageGetNationTitleListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGetNationTitleListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetNationTitleListResponse_descriptor_;
}

const CMessageGetNationTitleListResponse& CMessageGetNationTitleListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetNationTitleListResponse* CMessageGetNationTitleListResponse::default_instance_ = NULL;

CMessageGetNationTitleListResponse* CMessageGetNationTitleListResponse::New() const {
  return new CMessageGetNationTitleListResponse;
}

void CMessageGetNationTitleListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
  }
  titlelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetNationTitleListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional int32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_TitleList;
        break;
      }
      
      // repeated uint32 TitleList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TitleList:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_titlelist(value);
        if (input->ExpectTag(16)) goto parse_TitleList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetNationTitleListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetNationTitleListResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(1, this->roleid(), output);
  }
  
  // repeated uint32 TitleList = 2;
  for (int i = 0; i < this->titlelist_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->titlelist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetNationTitleListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(1, this->roleid(), target);
  }
  
  // repeated uint32 TitleList = 2;
  for (int i = 0; i < this->titlelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->titlelist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetNationTitleListResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->roleid());
    }
    
  }
  // repeated uint32 TitleList = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->titlelist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->titlelist(i));
    }
    total_size += 1 * this->titlelist_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetNationTitleListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetNationTitleListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetNationTitleListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetNationTitleListResponse::MergeFrom(const CMessageGetNationTitleListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  titlelist_.MergeFrom(from.titlelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetNationTitleListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetNationTitleListResponse::CopyFrom(const CMessageGetNationTitleListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetNationTitleListResponse::Swap(CMessageGetNationTitleListResponse* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    titlelist_.Swap(&other->titlelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetNationTitleListResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetNationTitleListResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetNationTitleListResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetNationTitleListResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageSGProVipFlagNotice::kRoleIDFieldNumber;
const int CMessageSGProVipFlagNotice::kVipFlagFieldNumber;
#endif  // !_MSC_VER

CMessageSGProVipFlagNotice::CMessageSGProVipFlagNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageSGProVipFlagNotice::InitAsDefaultInstance() {}

CMessageSGProVipFlagNotice::CMessageSGProVipFlagNotice(const CMessageSGProVipFlagNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageSGProVipFlagNotice::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  vipflag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageSGProVipFlagNotice::~CMessageSGProVipFlagNotice() {
  SharedDtor();
}

void CMessageSGProVipFlagNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageSGProVipFlagNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageSGProVipFlagNotice_descriptor_;
}

const CMessageSGProVipFlagNotice& CMessageSGProVipFlagNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageSGProVipFlagNotice* CMessageSGProVipFlagNotice::default_instance_ = NULL;

CMessageSGProVipFlagNotice* CMessageSGProVipFlagNotice::New() const {
  return new CMessageSGProVipFlagNotice;
}

void CMessageSGProVipFlagNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    vipflag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageSGProVipFlagNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional int32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_VipFlag;
        break;
      }
      
      // optional uint32 VipFlag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_VipFlag:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &vipflag_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageSGProVipFlagNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageSGProVipFlagNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(1, this->roleid(), output);
  }
  
  // optional uint32 VipFlag = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->vipflag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageSGProVipFlagNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(1, this->roleid(), target);
  }
  
  // optional uint32 VipFlag = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->vipflag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageSGProVipFlagNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->roleid());
    }
    
    // optional uint32 VipFlag = 2;
    if (has_vipflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->vipflag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageSGProVipFlagNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageSGProVipFlagNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageSGProVipFlagNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageSGProVipFlagNotice::MergeFrom(const CMessageSGProVipFlagNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_vipflag(from.vipflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageSGProVipFlagNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSGProVipFlagNotice::CopyFrom(const CMessageSGProVipFlagNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSGProVipFlagNotice::Swap(CMessageSGProVipFlagNotice* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(vipflag_, other->vipflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageSGProVipFlagNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageSGProVipFlagNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageSGProVipFlagNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageSGProVipFlagNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageResetRolePasswordNotify::kRoleIDFieldNumber;
#endif  // !_MSC_VER

CMessageResetRolePasswordNotify::CMessageResetRolePasswordNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageResetRolePasswordNotify::InitAsDefaultInstance() {}

CMessageResetRolePasswordNotify::CMessageResetRolePasswordNotify(const CMessageResetRolePasswordNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageResetRolePasswordNotify::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageResetRolePasswordNotify::~CMessageResetRolePasswordNotify() {
  SharedDtor();
}

void CMessageResetRolePasswordNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageResetRolePasswordNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageResetRolePasswordNotify_descriptor_;
}

const CMessageResetRolePasswordNotify& CMessageResetRolePasswordNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageResetRolePasswordNotify* CMessageResetRolePasswordNotify::default_instance_ = NULL;

CMessageResetRolePasswordNotify* CMessageResetRolePasswordNotify::New() const {
  return new CMessageResetRolePasswordNotify;
}

void CMessageResetRolePasswordNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageResetRolePasswordNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageResetRolePasswordNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageResetRolePasswordNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageResetRolePasswordNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageResetRolePasswordNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageResetRolePasswordNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageResetRolePasswordNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageResetRolePasswordNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageResetRolePasswordNotify::MergeFrom(const CMessageResetRolePasswordNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageResetRolePasswordNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageResetRolePasswordNotify::CopyFrom(const CMessageResetRolePasswordNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageResetRolePasswordNotify::Swap(CMessageResetRolePasswordNotify* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageResetRolePasswordNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageResetRolePasswordNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageResetRolePasswordNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageResetRolePasswordNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessgeSafeShutdownNotify::kServerTypeFieldNumber;
const int CMessgeSafeShutdownNotify::kServerIDFieldNumber;
const int CMessgeSafeShutdownNotify::kOpTypeFieldNumber;
#endif  // !_MSC_VER

CMessgeSafeShutdownNotify::CMessgeSafeShutdownNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessgeSafeShutdownNotify::InitAsDefaultInstance() {}

CMessgeSafeShutdownNotify::CMessgeSafeShutdownNotify(const CMessgeSafeShutdownNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessgeSafeShutdownNotify::SharedCtor() {
  _cached_size_ = 0;
  servertype_ = 0u;
  serverid_ = 0u;
  optype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessgeSafeShutdownNotify::~CMessgeSafeShutdownNotify() {
  SharedDtor();
}

void CMessgeSafeShutdownNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessgeSafeShutdownNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessgeSafeShutdownNotify_descriptor_;
}

const CMessgeSafeShutdownNotify& CMessgeSafeShutdownNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessgeSafeShutdownNotify* CMessgeSafeShutdownNotify::default_instance_ = NULL;

CMessgeSafeShutdownNotify* CMessgeSafeShutdownNotify::New() const {
  return new CMessgeSafeShutdownNotify;
}

void CMessgeSafeShutdownNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    servertype_ = 0u;
    serverid_ = 0u;
    optype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessgeSafeShutdownNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ServerType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &servertype_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ServerID;
        break;
      }
      
      // optional uint32 ServerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ServerID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &serverid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_OpType;
        break;
      }
      
      // optional uint32 OpType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &optype_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessgeSafeShutdownNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessgeSafeShutdownNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ServerType = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->servertype(), output);
  }
  
  // optional uint32 ServerID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->serverid(), output);
  }
  
  // optional uint32 OpType = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->optype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessgeSafeShutdownNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ServerType = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->servertype(), target);
  }
  
  // optional uint32 ServerID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->serverid(), target);
  }
  
  // optional uint32 OpType = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->optype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessgeSafeShutdownNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ServerType = 1;
    if (has_servertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->servertype());
    }
    
    // optional uint32 ServerID = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->serverid());
    }
    
    // optional uint32 OpType = 3;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->optype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessgeSafeShutdownNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessgeSafeShutdownNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessgeSafeShutdownNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessgeSafeShutdownNotify::MergeFrom(const CMessgeSafeShutdownNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_servertype(from.servertype());
    }
    if (from._has_bit(1)) {
      set_serverid(from.serverid());
    }
    if (from._has_bit(2)) {
      set_optype(from.optype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessgeSafeShutdownNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessgeSafeShutdownNotify::CopyFrom(const CMessgeSafeShutdownNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessgeSafeShutdownNotify::Swap(CMessgeSafeShutdownNotify* other) {
  if (other != this) {
    std::swap(servertype_, other->servertype_);
    std::swap(serverid_, other->serverid_);
    std::swap(optype_, other->optype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessgeSafeShutdownNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessgeSafeShutdownNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessgeSafeShutdownNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessgeSafeShutdownNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessgeSafeShutdownAck::kServerTypeFieldNumber;
const int CMessgeSafeShutdownAck::kServerIDFieldNumber;
const int CMessgeSafeShutdownAck::kOpTypeFieldNumber;
#endif  // !_MSC_VER

CMessgeSafeShutdownAck::CMessgeSafeShutdownAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessgeSafeShutdownAck::InitAsDefaultInstance() {}

CMessgeSafeShutdownAck::CMessgeSafeShutdownAck(const CMessgeSafeShutdownAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessgeSafeShutdownAck::SharedCtor() {
  _cached_size_ = 0;
  servertype_ = 0u;
  serverid_ = 0u;
  optype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessgeSafeShutdownAck::~CMessgeSafeShutdownAck() {
  SharedDtor();
}

void CMessgeSafeShutdownAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessgeSafeShutdownAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessgeSafeShutdownAck_descriptor_;
}

const CMessgeSafeShutdownAck& CMessgeSafeShutdownAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessgeSafeShutdownAck* CMessgeSafeShutdownAck::default_instance_ = NULL;

CMessgeSafeShutdownAck* CMessgeSafeShutdownAck::New() const {
  return new CMessgeSafeShutdownAck;
}

void CMessgeSafeShutdownAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    servertype_ = 0u;
    serverid_ = 0u;
    optype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessgeSafeShutdownAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ServerType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &servertype_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ServerID;
        break;
      }
      
      // optional uint32 ServerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ServerID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &serverid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_OpType;
        break;
      }
      
      // optional uint32 OpType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &optype_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessgeSafeShutdownAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessgeSafeShutdownAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ServerType = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->servertype(), output);
  }
  
  // optional uint32 ServerID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->serverid(), output);
  }
  
  // optional uint32 OpType = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->optype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessgeSafeShutdownAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ServerType = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->servertype(), target);
  }
  
  // optional uint32 ServerID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->serverid(), target);
  }
  
  // optional uint32 OpType = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->optype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessgeSafeShutdownAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ServerType = 1;
    if (has_servertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->servertype());
    }
    
    // optional uint32 ServerID = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->serverid());
    }
    
    // optional uint32 OpType = 3;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->optype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessgeSafeShutdownAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessgeSafeShutdownAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessgeSafeShutdownAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessgeSafeShutdownAck::MergeFrom(const CMessgeSafeShutdownAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_servertype(from.servertype());
    }
    if (from._has_bit(1)) {
      set_serverid(from.serverid());
    }
    if (from._has_bit(2)) {
      set_optype(from.optype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessgeSafeShutdownAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessgeSafeShutdownAck::CopyFrom(const CMessgeSafeShutdownAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessgeSafeShutdownAck::Swap(CMessgeSafeShutdownAck* other) {
  if (other != this) {
    std::swap(servertype_, other->servertype_);
    std::swap(serverid_, other->serverid_);
    std::swap(optype_, other->optype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessgeSafeShutdownAck::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessgeSafeShutdownAck::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessgeSafeShutdownAck::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessgeSafeShutdownAck_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageRollCorpsMoneyRequest::kIsAllFieldNumber;
const int CMessageRollCorpsMoneyRequest::kCorpsIDFieldNumber;
const int CMessageRollCorpsMoneyRequest::kNpcIDFieldNumber;
#endif  // !_MSC_VER

CMessageRollCorpsMoneyRequest::CMessageRollCorpsMoneyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRollCorpsMoneyRequest::InitAsDefaultInstance() {}

CMessageRollCorpsMoneyRequest::CMessageRollCorpsMoneyRequest(const CMessageRollCorpsMoneyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRollCorpsMoneyRequest::SharedCtor() {
  _cached_size_ = 0;
  isall_ = 0u;
  corpsid_ = 0u;
  npcid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRollCorpsMoneyRequest::~CMessageRollCorpsMoneyRequest() {
  SharedDtor();
}

void CMessageRollCorpsMoneyRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageRollCorpsMoneyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRollCorpsMoneyRequest_descriptor_;
}

const CMessageRollCorpsMoneyRequest& CMessageRollCorpsMoneyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRollCorpsMoneyRequest* CMessageRollCorpsMoneyRequest::default_instance_ = NULL;

CMessageRollCorpsMoneyRequest* CMessageRollCorpsMoneyRequest::New() const {
  return new CMessageRollCorpsMoneyRequest;
}

void CMessageRollCorpsMoneyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isall_ = 0u;
    corpsid_ = 0u;
    npcid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRollCorpsMoneyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 IsAll = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &isall_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CorpsID;
        break;
      }
      
      // optional uint32 CorpsID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_NpcID;
        break;
      }
      
      // optional uint32 NpcID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageRollCorpsMoneyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRollCorpsMoneyRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 IsAll = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->isall(), output);
  }
  
  // optional uint32 CorpsID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->corpsid(), output);
  }
  
  // optional uint32 NpcID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->npcid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRollCorpsMoneyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 IsAll = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->isall(), target);
  }
  
  // optional uint32 CorpsID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->corpsid(), target);
  }
  
  // optional uint32 NpcID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->npcid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRollCorpsMoneyRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 IsAll = 1;
    if (has_isall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->isall());
    }
    
    // optional uint32 CorpsID = 2;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
    // optional uint32 NpcID = 3;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRollCorpsMoneyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRollCorpsMoneyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRollCorpsMoneyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRollCorpsMoneyRequest::MergeFrom(const CMessageRollCorpsMoneyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_isall(from.isall());
    }
    if (from._has_bit(1)) {
      set_corpsid(from.corpsid());
    }
    if (from._has_bit(2)) {
      set_npcid(from.npcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRollCorpsMoneyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRollCorpsMoneyRequest::CopyFrom(const CMessageRollCorpsMoneyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRollCorpsMoneyRequest::Swap(CMessageRollCorpsMoneyRequest* other) {
  if (other != this) {
    std::swap(isall_, other->isall_);
    std::swap(corpsid_, other->corpsid_);
    std::swap(npcid_, other->npcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRollCorpsMoneyRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRollCorpsMoneyRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRollCorpsMoneyRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRollCorpsMoneyRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCorpsBattleMapNotice::kBattleKeyFieldNumber;
const int CMessageCorpsBattleMapNotice::kRoleIDFieldNumber;
#endif  // !_MSC_VER

CMessageCorpsBattleMapNotice::CMessageCorpsBattleMapNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCorpsBattleMapNotice::InitAsDefaultInstance() {}

CMessageCorpsBattleMapNotice::CMessageCorpsBattleMapNotice(const CMessageCorpsBattleMapNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCorpsBattleMapNotice::SharedCtor() {
  _cached_size_ = 0;
  battlekey_ = GOOGLE_ULONGLONG(0);
  roleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCorpsBattleMapNotice::~CMessageCorpsBattleMapNotice() {
  SharedDtor();
}

void CMessageCorpsBattleMapNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCorpsBattleMapNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsBattleMapNotice_descriptor_;
}

const CMessageCorpsBattleMapNotice& CMessageCorpsBattleMapNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCorpsBattleMapNotice* CMessageCorpsBattleMapNotice::default_instance_ = NULL;

CMessageCorpsBattleMapNotice* CMessageCorpsBattleMapNotice::New() const {
  return new CMessageCorpsBattleMapNotice;
}

void CMessageCorpsBattleMapNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battlekey_ = GOOGLE_ULONGLONG(0);
    roleid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCorpsBattleMapNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint64 BattleKey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &battlekey_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCorpsBattleMapNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCorpsBattleMapNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint64 BattleKey = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(1, this->battlekey(), output);
  }
  
  // optional uint32 RoleID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->roleid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCorpsBattleMapNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 BattleKey = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(1, this->battlekey(), target);
  }
  
  // optional uint32 RoleID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->roleid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCorpsBattleMapNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 BattleKey = 1;
    if (has_battlekey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->battlekey());
    }
    
    // optional uint32 RoleID = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCorpsBattleMapNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCorpsBattleMapNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCorpsBattleMapNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCorpsBattleMapNotice::MergeFrom(const CMessageCorpsBattleMapNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_battlekey(from.battlekey());
    }
    if (from._has_bit(1)) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCorpsBattleMapNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsBattleMapNotice::CopyFrom(const CMessageCorpsBattleMapNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCorpsBattleMapNotice::Swap(CMessageCorpsBattleMapNotice* other) {
  if (other != this) {
    std::swap(battlekey_, other->battlekey_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCorpsBattleMapNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCorpsBattleMapNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCorpsBattleMapNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCorpsBattleMapNotice_reflection_;
}

// ===================================================================

const ::std::string CMessageTrySummonRequest::_default_charname_;
#ifndef _MSC_VER
const int CMessageTrySummonRequest::kCharIDFieldNumber;
const int CMessageTrySummonRequest::kCharNameFieldNumber;
const int CMessageTrySummonRequest::kItemIndexFieldNumber;
const int CMessageTrySummonRequest::kSummonTypeFieldNumber;
#endif  // !_MSC_VER

CMessageTrySummonRequest::CMessageTrySummonRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTrySummonRequest::InitAsDefaultInstance() {}

CMessageTrySummonRequest::CMessageTrySummonRequest(const CMessageTrySummonRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTrySummonRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  charname_ = const_cast< ::std::string*>(&_default_charname_);
  itemindex_ = 0u;
  summontype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTrySummonRequest::~CMessageTrySummonRequest() {
  SharedDtor();
}

void CMessageTrySummonRequest::SharedDtor() {
  if (charname_ != &_default_charname_) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTrySummonRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTrySummonRequest_descriptor_;
}

const CMessageTrySummonRequest& CMessageTrySummonRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTrySummonRequest* CMessageTrySummonRequest::default_instance_ = NULL;

CMessageTrySummonRequest* CMessageTrySummonRequest::New() const {
  return new CMessageTrySummonRequest;
}

void CMessageTrySummonRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (_has_bit(1)) {
      if (charname_ != &_default_charname_) {
        charname_->clear();
      }
    }
    itemindex_ = 0u;
    summontype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTrySummonRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_CharName;
        break;
      }
      
      // optional string CharName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CharName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_charname()));
        if (input->ExpectTag(24)) goto parse_ItemIndex;
        break;
      }
      
      // optional uint32 ItemIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemIndex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemindex_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_SummonType;
        break;
      }
      
      // optional uint32 SummonType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SummonType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &summontype_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTrySummonRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTrySummonRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional string CharName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->charname(), output);
  }
  
  // optional uint32 ItemIndex = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->itemindex(), output);
  }
  
  // optional uint32 SummonType = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->summontype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTrySummonRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional string CharName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->charname(), target);
  }
  
  // optional uint32 ItemIndex = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->itemindex(), target);
  }
  
  // optional uint32 SummonType = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->summontype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTrySummonRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional string CharName = 2;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->charname());
    }
    
    // optional uint32 ItemIndex = 3;
    if (has_itemindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemindex());
    }
    
    // optional uint32 SummonType = 4;
    if (has_summontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->summontype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTrySummonRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTrySummonRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTrySummonRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTrySummonRequest::MergeFrom(const CMessageTrySummonRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_charname(from.charname());
    }
    if (from._has_bit(2)) {
      set_itemindex(from.itemindex());
    }
    if (from._has_bit(3)) {
      set_summontype(from.summontype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTrySummonRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTrySummonRequest::CopyFrom(const CMessageTrySummonRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTrySummonRequest::Swap(CMessageTrySummonRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(itemindex_, other->itemindex_);
    std::swap(summontype_, other->summontype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTrySummonRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTrySummonRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTrySummonRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTrySummonRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageTrySummonResponse::_default_charname_;
#ifndef _MSC_VER
const int CMessageTrySummonResponse::kCharIDFieldNumber;
const int CMessageTrySummonResponse::kCharNameFieldNumber;
const int CMessageTrySummonResponse::kResultFieldNumber;
const int CMessageTrySummonResponse::kItemIndexFieldNumber;
const int CMessageTrySummonResponse::kSummonTypeFieldNumber;
#endif  // !_MSC_VER

CMessageTrySummonResponse::CMessageTrySummonResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTrySummonResponse::InitAsDefaultInstance() {}

CMessageTrySummonResponse::CMessageTrySummonResponse(const CMessageTrySummonResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTrySummonResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  charname_ = const_cast< ::std::string*>(&_default_charname_);
  result_ = 0u;
  itemindex_ = 0u;
  summontype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTrySummonResponse::~CMessageTrySummonResponse() {
  SharedDtor();
}

void CMessageTrySummonResponse::SharedDtor() {
  if (charname_ != &_default_charname_) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTrySummonResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTrySummonResponse_descriptor_;
}

const CMessageTrySummonResponse& CMessageTrySummonResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTrySummonResponse* CMessageTrySummonResponse::default_instance_ = NULL;

CMessageTrySummonResponse* CMessageTrySummonResponse::New() const {
  return new CMessageTrySummonResponse;
}

void CMessageTrySummonResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (_has_bit(1)) {
      if (charname_ != &_default_charname_) {
        charname_->clear();
      }
    }
    result_ = 0u;
    itemindex_ = 0u;
    summontype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTrySummonResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_CharName;
        break;
      }
      
      // optional string CharName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CharName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_charname()));
        if (input->ExpectTag(24)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_ItemIndex;
        break;
      }
      
      // optional uint32 ItemIndex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemIndex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemindex_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_SummonType;
        break;
      }
      
      // optional uint32 SummonType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SummonType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &summontype_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTrySummonResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTrySummonResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional string CharName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->charname(), output);
  }
  
  // optional uint32 Result = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->result(), output);
  }
  
  // optional uint32 ItemIndex = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->itemindex(), output);
  }
  
  // optional uint32 SummonType = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->summontype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTrySummonResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional string CharName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->charname(), target);
  }
  
  // optional uint32 Result = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->result(), target);
  }
  
  // optional uint32 ItemIndex = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->itemindex(), target);
  }
  
  // optional uint32 SummonType = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->summontype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTrySummonResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional string CharName = 2;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->charname());
    }
    
    // optional uint32 Result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 ItemIndex = 4;
    if (has_itemindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemindex());
    }
    
    // optional uint32 SummonType = 5;
    if (has_summontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->summontype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTrySummonResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTrySummonResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTrySummonResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTrySummonResponse::MergeFrom(const CMessageTrySummonResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_charname(from.charname());
    }
    if (from._has_bit(2)) {
      set_result(from.result());
    }
    if (from._has_bit(3)) {
      set_itemindex(from.itemindex());
    }
    if (from._has_bit(4)) {
      set_summontype(from.summontype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTrySummonResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTrySummonResponse::CopyFrom(const CMessageTrySummonResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTrySummonResponse::Swap(CMessageTrySummonResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(result_, other->result_);
    std::swap(itemindex_, other->itemindex_);
    std::swap(summontype_, other->summontype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTrySummonResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTrySummonResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTrySummonResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTrySummonResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageRealSummonRequest::_default_charname_;
#ifndef _MSC_VER
const int CMessageRealSummonRequest::kCharIDFieldNumber;
const int CMessageRealSummonRequest::kCharNameFieldNumber;
const int CMessageRealSummonRequest::kSummonTypeFieldNumber;
const int CMessageRealSummonRequest::kLineIDFieldNumber;
const int CMessageRealSummonRequest::kMapIDFieldNumber;
const int CMessageRealSummonRequest::kPosXFieldNumber;
const int CMessageRealSummonRequest::kPosYFieldNumber;
#endif  // !_MSC_VER

CMessageRealSummonRequest::CMessageRealSummonRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRealSummonRequest::InitAsDefaultInstance() {}

CMessageRealSummonRequest::CMessageRealSummonRequest(const CMessageRealSummonRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRealSummonRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  charname_ = const_cast< ::std::string*>(&_default_charname_);
  summontype_ = 0u;
  lineid_ = 0u;
  mapid_ = 0u;
  posx_ = 0u;
  posy_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRealSummonRequest::~CMessageRealSummonRequest() {
  SharedDtor();
}

void CMessageRealSummonRequest::SharedDtor() {
  if (charname_ != &_default_charname_) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageRealSummonRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRealSummonRequest_descriptor_;
}

const CMessageRealSummonRequest& CMessageRealSummonRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRealSummonRequest* CMessageRealSummonRequest::default_instance_ = NULL;

CMessageRealSummonRequest* CMessageRealSummonRequest::New() const {
  return new CMessageRealSummonRequest;
}

void CMessageRealSummonRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (_has_bit(1)) {
      if (charname_ != &_default_charname_) {
        charname_->clear();
      }
    }
    summontype_ = 0u;
    lineid_ = 0u;
    mapid_ = 0u;
    posx_ = 0u;
    posy_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRealSummonRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_CharName;
        break;
      }
      
      // optional string CharName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CharName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_charname()));
        if (input->ExpectTag(24)) goto parse_SummonType;
        break;
      }
      
      // optional uint32 SummonType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SummonType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &summontype_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_LineID;
        break;
      }
      
      // optional uint32 LineID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lineid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_PosX;
        break;
      }
      
      // optional uint32 PosX = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosX:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posx_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_PosY;
        break;
      }
      
      // optional uint32 PosY = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posy_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageRealSummonRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRealSummonRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional string CharName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->charname(), output);
  }
  
  // optional uint32 SummonType = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->summontype(), output);
  }
  
  // optional uint32 LineID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->lineid(), output);
  }
  
  // optional uint32 MapID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->mapid(), output);
  }
  
  // optional uint32 PosX = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->posx(), output);
  }
  
  // optional uint32 PosY = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->posy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRealSummonRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional string CharName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->charname(), target);
  }
  
  // optional uint32 SummonType = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->summontype(), target);
  }
  
  // optional uint32 LineID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->lineid(), target);
  }
  
  // optional uint32 MapID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->mapid(), target);
  }
  
  // optional uint32 PosX = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->posx(), target);
  }
  
  // optional uint32 PosY = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->posy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRealSummonRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional string CharName = 2;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->charname());
    }
    
    // optional uint32 SummonType = 3;
    if (has_summontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->summontype());
    }
    
    // optional uint32 LineID = 4;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lineid());
    }
    
    // optional uint32 MapID = 5;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 PosX = 6;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posx());
    }
    
    // optional uint32 PosY = 7;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posy());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRealSummonRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRealSummonRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRealSummonRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRealSummonRequest::MergeFrom(const CMessageRealSummonRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_charname(from.charname());
    }
    if (from._has_bit(2)) {
      set_summontype(from.summontype());
    }
    if (from._has_bit(3)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(4)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(5)) {
      set_posx(from.posx());
    }
    if (from._has_bit(6)) {
      set_posy(from.posy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRealSummonRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRealSummonRequest::CopyFrom(const CMessageRealSummonRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRealSummonRequest::Swap(CMessageRealSummonRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(summontype_, other->summontype_);
    std::swap(lineid_, other->lineid_);
    std::swap(mapid_, other->mapid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRealSummonRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRealSummonRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRealSummonRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRealSummonRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageRealSummonNotify::_default_srccharname_;
#ifndef _MSC_VER
const int CMessageRealSummonNotify::kSrcCharNameFieldNumber;
const int CMessageRealSummonNotify::kLineIDFieldNumber;
const int CMessageRealSummonNotify::kMapIDFieldNumber;
const int CMessageRealSummonNotify::kPosXFieldNumber;
const int CMessageRealSummonNotify::kPosYFieldNumber;
const int CMessageRealSummonNotify::kTokenIDFieldNumber;
const int CMessageRealSummonNotify::kDesCharIDFieldNumber;
const int CMessageRealSummonNotify::kFamilyIDFieldNumber;
const int CMessageRealSummonNotify::kCorpsIDFieldNumber;
const int CMessageRealSummonNotify::kSrcCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageRealSummonNotify::CMessageRealSummonNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRealSummonNotify::InitAsDefaultInstance() {}

CMessageRealSummonNotify::CMessageRealSummonNotify(const CMessageRealSummonNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRealSummonNotify::SharedCtor() {
  _cached_size_ = 0;
  srccharname_ = const_cast< ::std::string*>(&_default_srccharname_);
  lineid_ = 0u;
  mapid_ = 0u;
  posx_ = 0u;
  posy_ = 0u;
  tokenid_ = 0u;
  descharid_ = 0u;
  familyid_ = 0u;
  corpsid_ = 0u;
  srccharid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRealSummonNotify::~CMessageRealSummonNotify() {
  SharedDtor();
}

void CMessageRealSummonNotify::SharedDtor() {
  if (srccharname_ != &_default_srccharname_) {
    delete srccharname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageRealSummonNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRealSummonNotify_descriptor_;
}

const CMessageRealSummonNotify& CMessageRealSummonNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRealSummonNotify* CMessageRealSummonNotify::default_instance_ = NULL;

CMessageRealSummonNotify* CMessageRealSummonNotify::New() const {
  return new CMessageRealSummonNotify;
}

void CMessageRealSummonNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (srccharname_ != &_default_srccharname_) {
        srccharname_->clear();
      }
    }
    lineid_ = 0u;
    mapid_ = 0u;
    posx_ = 0u;
    posy_ = 0u;
    tokenid_ = 0u;
    descharid_ = 0u;
    familyid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    corpsid_ = 0u;
    srccharid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRealSummonNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string SrcCharName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_srccharname()));
        if (input->ExpectTag(16)) goto parse_LineID;
        break;
      }
      
      // optional uint32 LineID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lineid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_PosX;
        break;
      }
      
      // optional uint32 PosX = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosX:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posx_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_PosY;
        break;
      }
      
      // optional uint32 PosY = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posy_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_TokenID;
        break;
      }
      
      // optional uint32 TokenID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TokenID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tokenid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_DesCharID;
        break;
      }
      
      // optional uint32 DesCharID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DesCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &descharid_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_FamilyID;
        break;
      }
      
      // optional uint32 FamilyID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_CorpsID;
        break;
      }
      
      // optional uint32 CorpsID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_SrcCharID;
        break;
      }
      
      // optional uint32 SrcCharID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SrcCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srccharid_));
        _set_bit(9);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageRealSummonNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRealSummonNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string SrcCharName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->srccharname(), output);
  }
  
  // optional uint32 LineID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->lineid(), output);
  }
  
  // optional uint32 MapID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->mapid(), output);
  }
  
  // optional uint32 PosX = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->posx(), output);
  }
  
  // optional uint32 PosY = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->posy(), output);
  }
  
  // optional uint32 TokenID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->tokenid(), output);
  }
  
  // optional uint32 DesCharID = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->descharid(), output);
  }
  
  // optional uint32 FamilyID = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->familyid(), output);
  }
  
  // optional uint32 CorpsID = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->corpsid(), output);
  }
  
  // optional uint32 SrcCharID = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->srccharid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRealSummonNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string SrcCharName = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->srccharname(), target);
  }
  
  // optional uint32 LineID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->lineid(), target);
  }
  
  // optional uint32 MapID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->mapid(), target);
  }
  
  // optional uint32 PosX = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->posx(), target);
  }
  
  // optional uint32 PosY = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->posy(), target);
  }
  
  // optional uint32 TokenID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->tokenid(), target);
  }
  
  // optional uint32 DesCharID = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->descharid(), target);
  }
  
  // optional uint32 FamilyID = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->familyid(), target);
  }
  
  // optional uint32 CorpsID = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->corpsid(), target);
  }
  
  // optional uint32 SrcCharID = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->srccharid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRealSummonNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string SrcCharName = 1;
    if (has_srccharname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->srccharname());
    }
    
    // optional uint32 LineID = 2;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lineid());
    }
    
    // optional uint32 MapID = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 PosX = 4;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posx());
    }
    
    // optional uint32 PosY = 5;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posy());
    }
    
    // optional uint32 TokenID = 6;
    if (has_tokenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tokenid());
    }
    
    // optional uint32 DesCharID = 7;
    if (has_descharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->descharid());
    }
    
    // optional uint32 FamilyID = 8;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 CorpsID = 9;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
    // optional uint32 SrcCharID = 10;
    if (has_srccharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srccharid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRealSummonNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRealSummonNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRealSummonNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRealSummonNotify::MergeFrom(const CMessageRealSummonNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_srccharname(from.srccharname());
    }
    if (from._has_bit(1)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(2)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(3)) {
      set_posx(from.posx());
    }
    if (from._has_bit(4)) {
      set_posy(from.posy());
    }
    if (from._has_bit(5)) {
      set_tokenid(from.tokenid());
    }
    if (from._has_bit(6)) {
      set_descharid(from.descharid());
    }
    if (from._has_bit(7)) {
      set_familyid(from.familyid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_corpsid(from.corpsid());
    }
    if (from._has_bit(9)) {
      set_srccharid(from.srccharid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRealSummonNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRealSummonNotify::CopyFrom(const CMessageRealSummonNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRealSummonNotify::Swap(CMessageRealSummonNotify* other) {
  if (other != this) {
    std::swap(srccharname_, other->srccharname_);
    std::swap(lineid_, other->lineid_);
    std::swap(mapid_, other->mapid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(tokenid_, other->tokenid_);
    std::swap(descharid_, other->descharid_);
    std::swap(familyid_, other->familyid_);
    std::swap(corpsid_, other->corpsid_);
    std::swap(srccharid_, other->srccharid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRealSummonNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRealSummonNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRealSummonNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRealSummonNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLockGoodsRequest::kGoodsIDFieldNumber;
const int CMessageLockGoodsRequest::kLockCountFieldNumber;
const int CMessageLockGoodsRequest::kRoleIDFieldNumber;
const int CMessageLockGoodsRequest::kTransObjIDFieldNumber;
#endif  // !_MSC_VER

CMessageLockGoodsRequest::CMessageLockGoodsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLockGoodsRequest::InitAsDefaultInstance() {}

CMessageLockGoodsRequest::CMessageLockGoodsRequest(const CMessageLockGoodsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLockGoodsRequest::SharedCtor() {
  _cached_size_ = 0;
  goodsid_ = 0u;
  lockcount_ = 0;
  roleid_ = 0u;
  transobjid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLockGoodsRequest::~CMessageLockGoodsRequest() {
  SharedDtor();
}

void CMessageLockGoodsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLockGoodsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLockGoodsRequest_descriptor_;
}

const CMessageLockGoodsRequest& CMessageLockGoodsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageLockGoodsRequest* CMessageLockGoodsRequest::default_instance_ = NULL;

CMessageLockGoodsRequest* CMessageLockGoodsRequest::New() const {
  return new CMessageLockGoodsRequest;
}

void CMessageLockGoodsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    goodsid_ = 0u;
    lockcount_ = 0;
    roleid_ = 0u;
    transobjid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLockGoodsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 GoodsID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &goodsid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_LockCount;
        break;
      }
      
      // optional int32 LockCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LockCount:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &lockcount_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_TransObjID;
        break;
      }
      
      // optional int32 TransObjID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TransObjID:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &transobjid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLockGoodsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLockGoodsRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 GoodsID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->goodsid(), output);
  }
  
  // optional int32 LockCount = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(2, this->lockcount(), output);
  }
  
  // optional uint32 RoleID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->roleid(), output);
  }
  
  // optional int32 TransObjID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->transobjid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLockGoodsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 GoodsID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->goodsid(), target);
  }
  
  // optional int32 LockCount = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(2, this->lockcount(), target);
  }
  
  // optional uint32 RoleID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->roleid(), target);
  }
  
  // optional int32 TransObjID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->transobjid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLockGoodsRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 GoodsID = 1;
    if (has_goodsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->goodsid());
    }
    
    // optional int32 LockCount = 2;
    if (has_lockcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->lockcount());
    }
    
    // optional uint32 RoleID = 3;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional int32 TransObjID = 4;
    if (has_transobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->transobjid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLockGoodsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLockGoodsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLockGoodsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLockGoodsRequest::MergeFrom(const CMessageLockGoodsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_goodsid(from.goodsid());
    }
    if (from._has_bit(1)) {
      set_lockcount(from.lockcount());
    }
    if (from._has_bit(2)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(3)) {
      set_transobjid(from.transobjid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLockGoodsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLockGoodsRequest::CopyFrom(const CMessageLockGoodsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLockGoodsRequest::Swap(CMessageLockGoodsRequest* other) {
  if (other != this) {
    std::swap(goodsid_, other->goodsid_);
    std::swap(lockcount_, other->lockcount_);
    std::swap(roleid_, other->roleid_);
    std::swap(transobjid_, other->transobjid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLockGoodsRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLockGoodsRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLockGoodsRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLockGoodsRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLockGoodsResponse::kResultFieldNumber;
const int CMessageLockGoodsResponse::kGoodsIDFieldNumber;
const int CMessageLockGoodsResponse::kRoleIDFieldNumber;
const int CMessageLockGoodsResponse::kLockCountFieldNumber;
const int CMessageLockGoodsResponse::kRemainFieldNumber;
const int CMessageLockGoodsResponse::kTransObjIDFieldNumber;
#endif  // !_MSC_VER

CMessageLockGoodsResponse::CMessageLockGoodsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLockGoodsResponse::InitAsDefaultInstance() {}

CMessageLockGoodsResponse::CMessageLockGoodsResponse(const CMessageLockGoodsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLockGoodsResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  goodsid_ = 0u;
  roleid_ = 0u;
  lockcount_ = 0;
  remain_ = 0;
  transobjid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLockGoodsResponse::~CMessageLockGoodsResponse() {
  SharedDtor();
}

void CMessageLockGoodsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLockGoodsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLockGoodsResponse_descriptor_;
}

const CMessageLockGoodsResponse& CMessageLockGoodsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageLockGoodsResponse* CMessageLockGoodsResponse::default_instance_ = NULL;

CMessageLockGoodsResponse* CMessageLockGoodsResponse::New() const {
  return new CMessageLockGoodsResponse;
}

void CMessageLockGoodsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    goodsid_ = 0u;
    roleid_ = 0u;
    lockcount_ = 0;
    remain_ = 0;
    transobjid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLockGoodsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional int32 Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_GoodsID;
        break;
      }
      
      // optional uint32 GoodsID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GoodsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &goodsid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_LockCount;
        break;
      }
      
      // optional int32 LockCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LockCount:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &lockcount_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Remain;
        break;
      }
      
      // optional int32 Remain = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Remain:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &remain_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_TransObjID;
        break;
      }
      
      // optional int32 TransObjID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TransObjID:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &transobjid_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLockGoodsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLockGoodsResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 Result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(1, this->result(), output);
  }
  
  // optional uint32 GoodsID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->goodsid(), output);
  }
  
  // optional uint32 RoleID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->roleid(), output);
  }
  
  // optional int32 LockCount = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->lockcount(), output);
  }
  
  // optional int32 Remain = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(5, this->remain(), output);
  }
  
  // optional int32 TransObjID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(6, this->transobjid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLockGoodsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(1, this->result(), target);
  }
  
  // optional uint32 GoodsID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->goodsid(), target);
  }
  
  // optional uint32 RoleID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->roleid(), target);
  }
  
  // optional int32 LockCount = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->lockcount(), target);
  }
  
  // optional int32 Remain = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(5, this->remain(), target);
  }
  
  // optional int32 TransObjID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(6, this->transobjid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLockGoodsResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->result());
    }
    
    // optional uint32 GoodsID = 2;
    if (has_goodsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->goodsid());
    }
    
    // optional uint32 RoleID = 3;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional int32 LockCount = 4;
    if (has_lockcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->lockcount());
    }
    
    // optional int32 Remain = 5;
    if (has_remain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->remain());
    }
    
    // optional int32 TransObjID = 6;
    if (has_transobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->transobjid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLockGoodsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLockGoodsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLockGoodsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLockGoodsResponse::MergeFrom(const CMessageLockGoodsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_goodsid(from.goodsid());
    }
    if (from._has_bit(2)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(3)) {
      set_lockcount(from.lockcount());
    }
    if (from._has_bit(4)) {
      set_remain(from.remain());
    }
    if (from._has_bit(5)) {
      set_transobjid(from.transobjid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLockGoodsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLockGoodsResponse::CopyFrom(const CMessageLockGoodsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLockGoodsResponse::Swap(CMessageLockGoodsResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(goodsid_, other->goodsid_);
    std::swap(roleid_, other->roleid_);
    std::swap(lockcount_, other->lockcount_);
    std::swap(remain_, other->remain_);
    std::swap(transobjid_, other->transobjid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLockGoodsResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLockGoodsResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLockGoodsResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLockGoodsResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageS2GRoleMove::_default_srcrole_;
const ::std::string CMessageS2GRoleMove::_default_desrole_;
#ifndef _MSC_VER
const int CMessageS2GRoleMove::kSrcRoleFieldNumber;
const int CMessageS2GRoleMove::kDesRoleFieldNumber;
#endif  // !_MSC_VER

CMessageS2GRoleMove::CMessageS2GRoleMove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageS2GRoleMove::InitAsDefaultInstance() {}

CMessageS2GRoleMove::CMessageS2GRoleMove(const CMessageS2GRoleMove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageS2GRoleMove::SharedCtor() {
  _cached_size_ = 0;
  srcrole_ = const_cast< ::std::string*>(&_default_srcrole_);
  desrole_ = const_cast< ::std::string*>(&_default_desrole_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageS2GRoleMove::~CMessageS2GRoleMove() {
  SharedDtor();
}

void CMessageS2GRoleMove::SharedDtor() {
  if (srcrole_ != &_default_srcrole_) {
    delete srcrole_;
  }
  if (desrole_ != &_default_desrole_) {
    delete desrole_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageS2GRoleMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageS2GRoleMove_descriptor_;
}

const CMessageS2GRoleMove& CMessageS2GRoleMove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageS2GRoleMove* CMessageS2GRoleMove::default_instance_ = NULL;

CMessageS2GRoleMove* CMessageS2GRoleMove::New() const {
  return new CMessageS2GRoleMove;
}

void CMessageS2GRoleMove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (srcrole_ != &_default_srcrole_) {
        srcrole_->clear();
      }
    }
    if (_has_bit(1)) {
      if (desrole_ != &_default_desrole_) {
        desrole_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageS2GRoleMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string SrcRole = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_srcrole()));
        if (input->ExpectTag(18)) goto parse_DesRole;
        break;
      }
      
      // optional string DesRole = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_DesRole:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_desrole()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageS2GRoleMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageS2GRoleMove::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string SrcRole = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->srcrole(), output);
  }
  
  // optional string DesRole = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->desrole(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageS2GRoleMove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string SrcRole = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->srcrole(), target);
  }
  
  // optional string DesRole = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->desrole(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageS2GRoleMove::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string SrcRole = 1;
    if (has_srcrole()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->srcrole());
    }
    
    // optional string DesRole = 2;
    if (has_desrole()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->desrole());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageS2GRoleMove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageS2GRoleMove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageS2GRoleMove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageS2GRoleMove::MergeFrom(const CMessageS2GRoleMove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_srcrole(from.srcrole());
    }
    if (from._has_bit(1)) {
      set_desrole(from.desrole());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageS2GRoleMove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageS2GRoleMove::CopyFrom(const CMessageS2GRoleMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageS2GRoleMove::Swap(CMessageS2GRoleMove* other) {
  if (other != this) {
    std::swap(srcrole_, other->srcrole_);
    std::swap(desrole_, other->desrole_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageS2GRoleMove::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageS2GRoleMove::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageS2GRoleMove::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageS2GRoleMove_reflection_;
}

// ===================================================================

const ::std::string CMessageG2SRoleMove::_default_srcrole_;
const ::std::string CMessageG2SRoleMove::_default_desrole_;
#ifndef _MSC_VER
const int CMessageG2SRoleMove::kSrcRoleFieldNumber;
const int CMessageG2SRoleMove::kDesRoleFieldNumber;
#endif  // !_MSC_VER

CMessageG2SRoleMove::CMessageG2SRoleMove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageG2SRoleMove::InitAsDefaultInstance() {}

CMessageG2SRoleMove::CMessageG2SRoleMove(const CMessageG2SRoleMove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageG2SRoleMove::SharedCtor() {
  _cached_size_ = 0;
  srcrole_ = const_cast< ::std::string*>(&_default_srcrole_);
  desrole_ = const_cast< ::std::string*>(&_default_desrole_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageG2SRoleMove::~CMessageG2SRoleMove() {
  SharedDtor();
}

void CMessageG2SRoleMove::SharedDtor() {
  if (srcrole_ != &_default_srcrole_) {
    delete srcrole_;
  }
  if (desrole_ != &_default_desrole_) {
    delete desrole_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageG2SRoleMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageG2SRoleMove_descriptor_;
}

const CMessageG2SRoleMove& CMessageG2SRoleMove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageG2SRoleMove* CMessageG2SRoleMove::default_instance_ = NULL;

CMessageG2SRoleMove* CMessageG2SRoleMove::New() const {
  return new CMessageG2SRoleMove;
}

void CMessageG2SRoleMove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (srcrole_ != &_default_srcrole_) {
        srcrole_->clear();
      }
    }
    if (_has_bit(1)) {
      if (desrole_ != &_default_desrole_) {
        desrole_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageG2SRoleMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string SrcRole = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_srcrole()));
        if (input->ExpectTag(18)) goto parse_DesRole;
        break;
      }
      
      // optional string DesRole = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_DesRole:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_desrole()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageG2SRoleMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageG2SRoleMove::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string SrcRole = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->srcrole(), output);
  }
  
  // optional string DesRole = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->desrole(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageG2SRoleMove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string SrcRole = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->srcrole(), target);
  }
  
  // optional string DesRole = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->desrole(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageG2SRoleMove::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string SrcRole = 1;
    if (has_srcrole()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->srcrole());
    }
    
    // optional string DesRole = 2;
    if (has_desrole()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->desrole());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageG2SRoleMove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageG2SRoleMove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageG2SRoleMove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageG2SRoleMove::MergeFrom(const CMessageG2SRoleMove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_srcrole(from.srcrole());
    }
    if (from._has_bit(1)) {
      set_desrole(from.desrole());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageG2SRoleMove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageG2SRoleMove::CopyFrom(const CMessageG2SRoleMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageG2SRoleMove::Swap(CMessageG2SRoleMove* other) {
  if (other != this) {
    std::swap(srcrole_, other->srcrole_);
    std::swap(desrole_, other->desrole_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageG2SRoleMove::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageG2SRoleMove::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageG2SRoleMove::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageG2SRoleMove_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageWarChangeNotify::kWorldIDFieldNumber;
const int CMessageWarChangeNotify::kSeedTypeFieldNumber;
const int CMessageWarChangeNotify::kSeedValueFieldNumber;
const int CMessageWarChangeNotify::kSourceTypeFieldNumber;
const int CMessageWarChangeNotify::kSourceValueFieldNumber;
const int CMessageWarChangeNotify::kMapIDFieldNumber;
#endif  // !_MSC_VER

CMessageWarChangeNotify::CMessageWarChangeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageWarChangeNotify::InitAsDefaultInstance() {}

CMessageWarChangeNotify::CMessageWarChangeNotify(const CMessageWarChangeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageWarChangeNotify::SharedCtor() {
  _cached_size_ = 0;
  worldid_ = 0u;
  seedtype_ = 0u;
  seedvalue_ = 0u;
  sourcetype_ = 0u;
  sourcevalue_ = 0u;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageWarChangeNotify::~CMessageWarChangeNotify() {
  SharedDtor();
}

void CMessageWarChangeNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageWarChangeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageWarChangeNotify_descriptor_;
}

const CMessageWarChangeNotify& CMessageWarChangeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageWarChangeNotify* CMessageWarChangeNotify::default_instance_ = NULL;

CMessageWarChangeNotify* CMessageWarChangeNotify::New() const {
  return new CMessageWarChangeNotify;
}

void CMessageWarChangeNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    worldid_ = 0u;
    seedtype_ = 0u;
    seedvalue_ = 0u;
    sourcetype_ = 0u;
    sourcevalue_ = 0u;
    mapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageWarChangeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 WorldID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &worldid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_SeedType;
        break;
      }
      
      // optional uint32 SeedType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SeedType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &seedtype_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_SeedValue;
        break;
      }
      
      // optional uint32 SeedValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SeedValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &seedvalue_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_SourceType;
        break;
      }
      
      // optional uint32 SourceType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SourceType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sourcetype_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_SourceValue;
        break;
      }
      
      // optional uint32 SourceValue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SourceValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sourcevalue_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageWarChangeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageWarChangeNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 WorldID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->worldid(), output);
  }
  
  // optional uint32 SeedType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->seedtype(), output);
  }
  
  // optional uint32 SeedValue = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->seedvalue(), output);
  }
  
  // optional uint32 SourceType = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->sourcetype(), output);
  }
  
  // optional uint32 SourceValue = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->sourcevalue(), output);
  }
  
  // optional uint32 MapID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->mapid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageWarChangeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 WorldID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->worldid(), target);
  }
  
  // optional uint32 SeedType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->seedtype(), target);
  }
  
  // optional uint32 SeedValue = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->seedvalue(), target);
  }
  
  // optional uint32 SourceType = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->sourcetype(), target);
  }
  
  // optional uint32 SourceValue = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->sourcevalue(), target);
  }
  
  // optional uint32 MapID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->mapid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageWarChangeNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 WorldID = 1;
    if (has_worldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->worldid());
    }
    
    // optional uint32 SeedType = 2;
    if (has_seedtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->seedtype());
    }
    
    // optional uint32 SeedValue = 3;
    if (has_seedvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->seedvalue());
    }
    
    // optional uint32 SourceType = 4;
    if (has_sourcetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sourcetype());
    }
    
    // optional uint32 SourceValue = 5;
    if (has_sourcevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sourcevalue());
    }
    
    // optional uint32 MapID = 6;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageWarChangeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageWarChangeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageWarChangeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageWarChangeNotify::MergeFrom(const CMessageWarChangeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_worldid(from.worldid());
    }
    if (from._has_bit(1)) {
      set_seedtype(from.seedtype());
    }
    if (from._has_bit(2)) {
      set_seedvalue(from.seedvalue());
    }
    if (from._has_bit(3)) {
      set_sourcetype(from.sourcetype());
    }
    if (from._has_bit(4)) {
      set_sourcevalue(from.sourcevalue());
    }
    if (from._has_bit(5)) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageWarChangeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageWarChangeNotify::CopyFrom(const CMessageWarChangeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageWarChangeNotify::Swap(CMessageWarChangeNotify* other) {
  if (other != this) {
    std::swap(worldid_, other->worldid_);
    std::swap(seedtype_, other->seedtype_);
    std::swap(seedvalue_, other->seedvalue_);
    std::swap(sourcetype_, other->sourcetype_);
    std::swap(sourcevalue_, other->sourcevalue_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageWarChangeNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageWarChangeNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageWarChangeNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageWarChangeNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageReliveChangeNotify::kWorldIDFieldNumber;
const int CMessageReliveChangeNotify::kCampIDFieldNumber;
const int CMessageReliveChangeNotify::kWarStatusFieldNumber;
#endif  // !_MSC_VER

CMessageReliveChangeNotify::CMessageReliveChangeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageReliveChangeNotify::InitAsDefaultInstance() {}

CMessageReliveChangeNotify::CMessageReliveChangeNotify(const CMessageReliveChangeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageReliveChangeNotify::SharedCtor() {
  _cached_size_ = 0;
  warstatus_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageReliveChangeNotify::~CMessageReliveChangeNotify() {
  SharedDtor();
}

void CMessageReliveChangeNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageReliveChangeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageReliveChangeNotify_descriptor_;
}

const CMessageReliveChangeNotify& CMessageReliveChangeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageReliveChangeNotify* CMessageReliveChangeNotify::default_instance_ = NULL;

CMessageReliveChangeNotify* CMessageReliveChangeNotify::New() const {
  return new CMessageReliveChangeNotify;
}

void CMessageReliveChangeNotify::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    warstatus_ = 0u;
  }
  worldid_.Clear();
  campid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageReliveChangeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated uint32 WorldID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WorldID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_worldid(value);
        if (input->ExpectTag(8)) goto parse_WorldID;
        if (input->ExpectTag(16)) goto parse_CampID;
        break;
      }
      
      // repeated uint32 CampID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CampID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_campid(value);
        if (input->ExpectTag(16)) goto parse_CampID;
        if (input->ExpectTag(24)) goto parse_WarStatus;
        break;
      }
      
      // optional uint32 WarStatus = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarStatus:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warstatus_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageReliveChangeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageReliveChangeNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated uint32 WorldID = 1;
  for (int i = 0; i < this->worldid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->worldid(i), output);
  }
  
  // repeated uint32 CampID = 2;
  for (int i = 0; i < this->campid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->campid(i), output);
  }
  
  // optional uint32 WarStatus = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->warstatus(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageReliveChangeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 WorldID = 1;
  for (int i = 0; i < this->worldid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->worldid(i), target);
  }
  
  // repeated uint32 CampID = 2;
  for (int i = 0; i < this->campid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->campid(i), target);
  }
  
  // optional uint32 WarStatus = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->warstatus(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageReliveChangeNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 WarStatus = 3;
    if (has_warstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warstatus());
    }
    
  }
  // repeated uint32 WorldID = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->worldid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->worldid(i));
    }
    total_size += 1 * this->worldid_size() + data_size;
  }
  
  // repeated uint32 CampID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->campid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->campid(i));
    }
    total_size += 1 * this->campid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageReliveChangeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageReliveChangeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageReliveChangeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageReliveChangeNotify::MergeFrom(const CMessageReliveChangeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  worldid_.MergeFrom(from.worldid_);
  campid_.MergeFrom(from.campid_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from._has_bit(2)) {
      set_warstatus(from.warstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageReliveChangeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReliveChangeNotify::CopyFrom(const CMessageReliveChangeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReliveChangeNotify::Swap(CMessageReliveChangeNotify* other) {
  if (other != this) {
    worldid_.Swap(&other->worldid_);
    campid_.Swap(&other->campid_);
    std::swap(warstatus_, other->warstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageReliveChangeNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageReliveChangeNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageReliveChangeNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageReliveChangeNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int WarHonorData::kCharIDFieldNumber;
const int WarHonorData::kWarHonorFieldNumber;
const int WarHonorData::kWarKillFieldNumber;
#endif  // !_MSC_VER

WarHonorData::WarHonorData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WarHonorData::InitAsDefaultInstance() {}

WarHonorData::WarHonorData(const WarHonorData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WarHonorData::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  warhonor_ = 0u;
  warkill_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WarHonorData::~WarHonorData() {
  SharedDtor();
}

void WarHonorData::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* WarHonorData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WarHonorData_descriptor_;
}

const WarHonorData& WarHonorData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

WarHonorData* WarHonorData::default_instance_ = NULL;

WarHonorData* WarHonorData::New() const {
  return new WarHonorData;
}

void WarHonorData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    warhonor_ = 0u;
    warkill_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WarHonorData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_WarHonor;
        break;
      }
      
      // optional uint32 WarHonor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarHonor:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warhonor_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_WarKill;
        break;
      }
      
      // optional uint32 WarKill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarKill:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warkill_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WarHonorData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    WarHonorData::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 WarHonor = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->warhonor(), output);
  }
  
  // optional uint32 WarKill = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->warkill(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WarHonorData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 WarHonor = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->warhonor(), target);
  }
  
  // optional uint32 WarKill = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->warkill(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WarHonorData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 WarHonor = 2;
    if (has_warhonor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warhonor());
    }
    
    // optional uint32 WarKill = 3;
    if (has_warkill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warkill());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void WarHonorData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WarHonorData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WarHonorData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WarHonorData::MergeFrom(const WarHonorData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_warhonor(from.warhonor());
    }
    if (from._has_bit(2)) {
      set_warkill(from.warkill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WarHonorData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarHonorData::CopyFrom(const WarHonorData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarHonorData::Swap(WarHonorData* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(warhonor_, other->warhonor_);
    std::swap(warkill_, other->warkill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool WarHonorData::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* WarHonorData::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* WarHonorData::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return WarHonorData_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageObtainWarHonorNotify::kWarHonorFieldNumber;
const int CMessageObtainWarHonorNotify::kIsKillFieldNumber;
#endif  // !_MSC_VER

CMessageObtainWarHonorNotify::CMessageObtainWarHonorNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageObtainWarHonorNotify::InitAsDefaultInstance() {}

CMessageObtainWarHonorNotify::CMessageObtainWarHonorNotify(const CMessageObtainWarHonorNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageObtainWarHonorNotify::SharedCtor() {
  _cached_size_ = 0;
  iskill_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageObtainWarHonorNotify::~CMessageObtainWarHonorNotify() {
  SharedDtor();
}

void CMessageObtainWarHonorNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageObtainWarHonorNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageObtainWarHonorNotify_descriptor_;
}

const CMessageObtainWarHonorNotify& CMessageObtainWarHonorNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageObtainWarHonorNotify* CMessageObtainWarHonorNotify::default_instance_ = NULL;

CMessageObtainWarHonorNotify* CMessageObtainWarHonorNotify::New() const {
  return new CMessageObtainWarHonorNotify;
}

void CMessageObtainWarHonorNotify::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    iskill_ = 0u;
  }
  warhonor_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageObtainWarHonorNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .WarHonorData WarHonor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_WarHonor:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_warhonor()));
        if (input->ExpectTag(10)) goto parse_WarHonor;
        if (input->ExpectTag(16)) goto parse_IsKill;
        break;
      }
      
      // optional uint32 IsKill = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IsKill:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &iskill_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageObtainWarHonorNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageObtainWarHonorNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .WarHonorData WarHonor = 1;
  for (int i = 0; i < this->warhonor_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->warhonor(i), output);
  }
  
  // optional uint32 IsKill = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->iskill(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageObtainWarHonorNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .WarHonorData WarHonor = 1;
  for (int i = 0; i < this->warhonor_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->warhonor(i), target);
  }
  
  // optional uint32 IsKill = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->iskill(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageObtainWarHonorNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 IsKill = 2;
    if (has_iskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->iskill());
    }
    
  }
  // repeated .WarHonorData WarHonor = 1;
  total_size += 1 * this->warhonor_size();
  for (int i = 0; i < this->warhonor_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->warhonor(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageObtainWarHonorNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageObtainWarHonorNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageObtainWarHonorNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageObtainWarHonorNotify::MergeFrom(const CMessageObtainWarHonorNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  warhonor_.MergeFrom(from.warhonor_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_iskill(from.iskill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageObtainWarHonorNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageObtainWarHonorNotify::CopyFrom(const CMessageObtainWarHonorNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageObtainWarHonorNotify::Swap(CMessageObtainWarHonorNotify* other) {
  if (other != this) {
    warhonor_.Swap(&other->warhonor_);
    std::swap(iskill_, other->iskill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageObtainWarHonorNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageObtainWarHonorNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageObtainWarHonorNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageObtainWarHonorNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBourseG2SLoadList::kListIDFieldNumber;
const int CMessageBourseG2SLoadList::kBuyListFieldNumber;
const int CMessageBourseG2SLoadList::kSellListFieldNumber;
#endif  // !_MSC_VER

CMessageBourseG2SLoadList::CMessageBourseG2SLoadList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBourseG2SLoadList::InitAsDefaultInstance() {  buylist_ = const_cast< ::PBBourseDetailList*>(&::PBBourseDetailList::default_instance());
  selllist_ = const_cast< ::PBBourseDetailList*>(&::PBBourseDetailList::default_instance());
}

CMessageBourseG2SLoadList::CMessageBourseG2SLoadList(const CMessageBourseG2SLoadList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBourseG2SLoadList::SharedCtor() {
  _cached_size_ = 0;
  listid_ = 0u;
  buylist_ = NULL;
  selllist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBourseG2SLoadList::~CMessageBourseG2SLoadList() {
  SharedDtor();
}

void CMessageBourseG2SLoadList::SharedDtor() {
  if (this != default_instance_) {
    delete buylist_;
    delete selllist_;
  }
}

const ::google::protobuf::Descriptor* CMessageBourseG2SLoadList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBourseG2SLoadList_descriptor_;
}

const CMessageBourseG2SLoadList& CMessageBourseG2SLoadList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageBourseG2SLoadList* CMessageBourseG2SLoadList::default_instance_ = NULL;

CMessageBourseG2SLoadList* CMessageBourseG2SLoadList::New() const {
  return new CMessageBourseG2SLoadList;
}

void CMessageBourseG2SLoadList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    listid_ = 0u;
    if (_has_bit(1)) {
      if (buylist_ != NULL) buylist_->::PBBourseDetailList::Clear();
    }
    if (_has_bit(2)) {
      if (selllist_ != NULL) selllist_->::PBBourseDetailList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBourseG2SLoadList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ListID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &listid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_BuyList;
        break;
      }
      
      // optional .PBBourseDetailList BuyList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_BuyList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_buylist()));
        if (input->ExpectTag(26)) goto parse_SellList;
        break;
      }
      
      // optional .PBBourseDetailList SellList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SellList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_selllist()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBourseG2SLoadList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBourseG2SLoadList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ListID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->listid(), output);
  }
  
  // optional .PBBourseDetailList BuyList = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->buylist(), output);
  }
  
  // optional .PBBourseDetailList SellList = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->selllist(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBourseG2SLoadList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ListID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->listid(), target);
  }
  
  // optional .PBBourseDetailList BuyList = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->buylist(), target);
  }
  
  // optional .PBBourseDetailList SellList = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->selllist(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBourseG2SLoadList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ListID = 1;
    if (has_listid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->listid());
    }
    
    // optional .PBBourseDetailList BuyList = 2;
    if (has_buylist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->buylist());
    }
    
    // optional .PBBourseDetailList SellList = 3;
    if (has_selllist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->selllist());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBourseG2SLoadList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBourseG2SLoadList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBourseG2SLoadList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBourseG2SLoadList::MergeFrom(const CMessageBourseG2SLoadList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_listid(from.listid());
    }
    if (from._has_bit(1)) {
      mutable_buylist()->::PBBourseDetailList::MergeFrom(from.buylist());
    }
    if (from._has_bit(2)) {
      mutable_selllist()->::PBBourseDetailList::MergeFrom(from.selllist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBourseG2SLoadList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBourseG2SLoadList::CopyFrom(const CMessageBourseG2SLoadList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBourseG2SLoadList::Swap(CMessageBourseG2SLoadList* other) {
  if (other != this) {
    std::swap(listid_, other->listid_);
    std::swap(buylist_, other->buylist_);
    std::swap(selllist_, other->selllist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBourseG2SLoadList::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBourseG2SLoadList::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBourseG2SLoadList::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBourseG2SLoadList_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMessageBourseS2GLoadList::CMessageBourseS2GLoadList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBourseS2GLoadList::InitAsDefaultInstance() {}

CMessageBourseS2GLoadList::CMessageBourseS2GLoadList(const CMessageBourseS2GLoadList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBourseS2GLoadList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBourseS2GLoadList::~CMessageBourseS2GLoadList() {
  SharedDtor();
}

void CMessageBourseS2GLoadList::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageBourseS2GLoadList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBourseS2GLoadList_descriptor_;
}

const CMessageBourseS2GLoadList& CMessageBourseS2GLoadList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageBourseS2GLoadList* CMessageBourseS2GLoadList::default_instance_ = NULL;

CMessageBourseS2GLoadList* CMessageBourseS2GLoadList::New() const {
  return new CMessageBourseS2GLoadList;
}

void CMessageBourseS2GLoadList::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBourseS2GLoadList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMessageBourseS2GLoadList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBourseS2GLoadList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBourseS2GLoadList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBourseS2GLoadList::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBourseS2GLoadList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBourseS2GLoadList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBourseS2GLoadList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBourseS2GLoadList::MergeFrom(const CMessageBourseS2GLoadList& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBourseS2GLoadList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBourseS2GLoadList::CopyFrom(const CMessageBourseS2GLoadList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBourseS2GLoadList::Swap(CMessageBourseS2GLoadList* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBourseS2GLoadList::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBourseS2GLoadList::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBourseS2GLoadList::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBourseS2GLoadList_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageSyncWarStatusNotify::kWarStatusFieldNumber;
const int CMessageSyncWarStatusNotify::kWarSerialFieldNumber;
#endif  // !_MSC_VER

CMessageSyncWarStatusNotify::CMessageSyncWarStatusNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageSyncWarStatusNotify::InitAsDefaultInstance() {}

CMessageSyncWarStatusNotify::CMessageSyncWarStatusNotify(const CMessageSyncWarStatusNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageSyncWarStatusNotify::SharedCtor() {
  _cached_size_ = 0;
  warstatus_ = 0u;
  warserial_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageSyncWarStatusNotify::~CMessageSyncWarStatusNotify() {
  SharedDtor();
}

void CMessageSyncWarStatusNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageSyncWarStatusNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageSyncWarStatusNotify_descriptor_;
}

const CMessageSyncWarStatusNotify& CMessageSyncWarStatusNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageSyncWarStatusNotify* CMessageSyncWarStatusNotify::default_instance_ = NULL;

CMessageSyncWarStatusNotify* CMessageSyncWarStatusNotify::New() const {
  return new CMessageSyncWarStatusNotify;
}

void CMessageSyncWarStatusNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    warstatus_ = 0u;
    warserial_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageSyncWarStatusNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 WarStatus = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warstatus_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_WarSerial;
        break;
      }
      
      // optional uint32 WarSerial = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarSerial:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warserial_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageSyncWarStatusNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageSyncWarStatusNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 WarStatus = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->warstatus(), output);
  }
  
  // optional uint32 WarSerial = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->warserial(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageSyncWarStatusNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 WarStatus = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->warstatus(), target);
  }
  
  // optional uint32 WarSerial = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->warserial(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageSyncWarStatusNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 WarStatus = 1;
    if (has_warstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warstatus());
    }
    
    // optional uint32 WarSerial = 2;
    if (has_warserial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warserial());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageSyncWarStatusNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageSyncWarStatusNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageSyncWarStatusNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageSyncWarStatusNotify::MergeFrom(const CMessageSyncWarStatusNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_warstatus(from.warstatus());
    }
    if (from._has_bit(1)) {
      set_warserial(from.warserial());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageSyncWarStatusNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSyncWarStatusNotify::CopyFrom(const CMessageSyncWarStatusNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSyncWarStatusNotify::Swap(CMessageSyncWarStatusNotify* other) {
  if (other != this) {
    std::swap(warstatus_, other->warstatus_);
    std::swap(warserial_, other->warserial_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageSyncWarStatusNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageSyncWarStatusNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageSyncWarStatusNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageSyncWarStatusNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageWarControlNotify::kControlStateFieldNumber;
const int CMessageWarControlNotify::kGMHourFieldNumber;
const int CMessageWarControlNotify::kGMMinFieldNumber;
const int CMessageWarControlNotify::kGMDayFieldNumber;
const int CMessageWarControlNotify::kWarSerialFieldNumber;
#endif  // !_MSC_VER

CMessageWarControlNotify::CMessageWarControlNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageWarControlNotify::InitAsDefaultInstance() {}

CMessageWarControlNotify::CMessageWarControlNotify(const CMessageWarControlNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageWarControlNotify::SharedCtor() {
  _cached_size_ = 0;
  controlstate_ = 0u;
  gmhour_ = 0;
  gmmin_ = 0;
  gmday_ = 0;
  warserial_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageWarControlNotify::~CMessageWarControlNotify() {
  SharedDtor();
}

void CMessageWarControlNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageWarControlNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageWarControlNotify_descriptor_;
}

const CMessageWarControlNotify& CMessageWarControlNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageWarControlNotify* CMessageWarControlNotify::default_instance_ = NULL;

CMessageWarControlNotify* CMessageWarControlNotify::New() const {
  return new CMessageWarControlNotify;
}

void CMessageWarControlNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    controlstate_ = 0u;
    gmhour_ = 0;
    gmmin_ = 0;
    gmday_ = 0;
    warserial_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageWarControlNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ControlState = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &controlstate_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_GMHour;
        break;
      }
      
      // optional int32 GMHour = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GMHour:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &gmhour_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_GMMin;
        break;
      }
      
      // optional int32 GMMin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GMMin:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &gmmin_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_GMDay;
        break;
      }
      
      // optional int32 GMDay = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GMDay:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &gmday_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_WarSerial;
        break;
      }
      
      // optional uint32 WarSerial = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarSerial:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warserial_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageWarControlNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageWarControlNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ControlState = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->controlstate(), output);
  }
  
  // optional int32 GMHour = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(2, this->gmhour(), output);
  }
  
  // optional int32 GMMin = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->gmmin(), output);
  }
  
  // optional int32 GMDay = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->gmday(), output);
  }
  
  // optional uint32 WarSerial = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->warserial(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageWarControlNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ControlState = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->controlstate(), target);
  }
  
  // optional int32 GMHour = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(2, this->gmhour(), target);
  }
  
  // optional int32 GMMin = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->gmmin(), target);
  }
  
  // optional int32 GMDay = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->gmday(), target);
  }
  
  // optional uint32 WarSerial = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->warserial(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageWarControlNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ControlState = 1;
    if (has_controlstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->controlstate());
    }
    
    // optional int32 GMHour = 2;
    if (has_gmhour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->gmhour());
    }
    
    // optional int32 GMMin = 3;
    if (has_gmmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->gmmin());
    }
    
    // optional int32 GMDay = 4;
    if (has_gmday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->gmday());
    }
    
    // optional uint32 WarSerial = 5;
    if (has_warserial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warserial());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageWarControlNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageWarControlNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageWarControlNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageWarControlNotify::MergeFrom(const CMessageWarControlNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_controlstate(from.controlstate());
    }
    if (from._has_bit(1)) {
      set_gmhour(from.gmhour());
    }
    if (from._has_bit(2)) {
      set_gmmin(from.gmmin());
    }
    if (from._has_bit(3)) {
      set_gmday(from.gmday());
    }
    if (from._has_bit(4)) {
      set_warserial(from.warserial());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageWarControlNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageWarControlNotify::CopyFrom(const CMessageWarControlNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageWarControlNotify::Swap(CMessageWarControlNotify* other) {
  if (other != this) {
    std::swap(controlstate_, other->controlstate_);
    std::swap(gmhour_, other->gmhour_);
    std::swap(gmmin_, other->gmmin_);
    std::swap(gmday_, other->gmday_);
    std::swap(warserial_, other->warserial_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageWarControlNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageWarControlNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageWarControlNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageWarControlNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBourseTradeNotice::kBuyDetailFieldNumber;
const int CMessageBourseTradeNotice::kSellDetailFieldNumber;
#endif  // !_MSC_VER

CMessageBourseTradeNotice::CMessageBourseTradeNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBourseTradeNotice::InitAsDefaultInstance() {  buydetail_ = const_cast< ::PBBourseDetail*>(&::PBBourseDetail::default_instance());
  selldetail_ = const_cast< ::PBBourseDetail*>(&::PBBourseDetail::default_instance());
}

CMessageBourseTradeNotice::CMessageBourseTradeNotice(const CMessageBourseTradeNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBourseTradeNotice::SharedCtor() {
  _cached_size_ = 0;
  buydetail_ = NULL;
  selldetail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBourseTradeNotice::~CMessageBourseTradeNotice() {
  SharedDtor();
}

void CMessageBourseTradeNotice::SharedDtor() {
  if (this != default_instance_) {
    delete buydetail_;
    delete selldetail_;
  }
}

const ::google::protobuf::Descriptor* CMessageBourseTradeNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBourseTradeNotice_descriptor_;
}

const CMessageBourseTradeNotice& CMessageBourseTradeNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageBourseTradeNotice* CMessageBourseTradeNotice::default_instance_ = NULL;

CMessageBourseTradeNotice* CMessageBourseTradeNotice::New() const {
  return new CMessageBourseTradeNotice;
}

void CMessageBourseTradeNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (buydetail_ != NULL) buydetail_->::PBBourseDetail::Clear();
    }
    if (_has_bit(1)) {
      if (selldetail_ != NULL) selldetail_->::PBBourseDetail::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBourseTradeNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBBourseDetail BuyDetail = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_buydetail()));
        if (input->ExpectTag(18)) goto parse_SellDetail;
        break;
      }
      
      // optional .PBBourseDetail SellDetail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SellDetail:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_selldetail()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBourseTradeNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBourseTradeNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBBourseDetail BuyDetail = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->buydetail(), output);
  }
  
  // optional .PBBourseDetail SellDetail = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->selldetail(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBourseTradeNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBBourseDetail BuyDetail = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->buydetail(), target);
  }
  
  // optional .PBBourseDetail SellDetail = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->selldetail(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBourseTradeNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBBourseDetail BuyDetail = 1;
    if (has_buydetail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->buydetail());
    }
    
    // optional .PBBourseDetail SellDetail = 2;
    if (has_selldetail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->selldetail());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBourseTradeNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBourseTradeNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBourseTradeNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBourseTradeNotice::MergeFrom(const CMessageBourseTradeNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_buydetail()->::PBBourseDetail::MergeFrom(from.buydetail());
    }
    if (from._has_bit(1)) {
      mutable_selldetail()->::PBBourseDetail::MergeFrom(from.selldetail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBourseTradeNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBourseTradeNotice::CopyFrom(const CMessageBourseTradeNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBourseTradeNotice::Swap(CMessageBourseTradeNotice* other) {
  if (other != this) {
    std::swap(buydetail_, other->buydetail_);
    std::swap(selldetail_, other->selldetail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBourseTradeNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBourseTradeNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBourseTradeNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBourseTradeNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageReSavePlayerRequest::kRoleIDFieldNumber;
#endif  // !_MSC_VER

CMessageReSavePlayerRequest::CMessageReSavePlayerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageReSavePlayerRequest::InitAsDefaultInstance() {}

CMessageReSavePlayerRequest::CMessageReSavePlayerRequest(const CMessageReSavePlayerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageReSavePlayerRequest::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageReSavePlayerRequest::~CMessageReSavePlayerRequest() {
  SharedDtor();
}

void CMessageReSavePlayerRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageReSavePlayerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageReSavePlayerRequest_descriptor_;
}

const CMessageReSavePlayerRequest& CMessageReSavePlayerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageReSavePlayerRequest* CMessageReSavePlayerRequest::default_instance_ = NULL;

CMessageReSavePlayerRequest* CMessageReSavePlayerRequest::New() const {
  return new CMessageReSavePlayerRequest;
}

void CMessageReSavePlayerRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageReSavePlayerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageReSavePlayerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageReSavePlayerRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageReSavePlayerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageReSavePlayerRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageReSavePlayerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageReSavePlayerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageReSavePlayerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageReSavePlayerRequest::MergeFrom(const CMessageReSavePlayerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageReSavePlayerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReSavePlayerRequest::CopyFrom(const CMessageReSavePlayerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReSavePlayerRequest::Swap(CMessageReSavePlayerRequest* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageReSavePlayerRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageReSavePlayerRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageReSavePlayerRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageReSavePlayerRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageReSavePlayerResponse::kRoleIDFieldNumber;
const int CMessageReSavePlayerResponse::kResultFieldNumber;
const int CMessageReSavePlayerResponse::kLineIDFieldNumber;
const int CMessageReSavePlayerResponse::kMapIDFieldNumber;
const int CMessageReSavePlayerResponse::kAccountIDFieldNumber;
const int CMessageReSavePlayerResponse::kPosXFieldNumber;
const int CMessageReSavePlayerResponse::kPosYFieldNumber;
#endif  // !_MSC_VER

CMessageReSavePlayerResponse::CMessageReSavePlayerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageReSavePlayerResponse::InitAsDefaultInstance() {}

CMessageReSavePlayerResponse::CMessageReSavePlayerResponse(const CMessageReSavePlayerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageReSavePlayerResponse::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  result_ = 0u;
  lineid_ = 0u;
  mapid_ = 0u;
  accountid_ = 0u;
  posx_ = 0u;
  posy_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageReSavePlayerResponse::~CMessageReSavePlayerResponse() {
  SharedDtor();
}

void CMessageReSavePlayerResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageReSavePlayerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageReSavePlayerResponse_descriptor_;
}

const CMessageReSavePlayerResponse& CMessageReSavePlayerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageReSavePlayerResponse* CMessageReSavePlayerResponse::default_instance_ = NULL;

CMessageReSavePlayerResponse* CMessageReSavePlayerResponse::New() const {
  return new CMessageReSavePlayerResponse;
}

void CMessageReSavePlayerResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    result_ = 0u;
    lineid_ = 0u;
    mapid_ = 0u;
    accountid_ = 0u;
    posx_ = 0u;
    posy_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageReSavePlayerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_LineID;
        break;
      }
      
      // optional uint32 LineID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lineid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_AccountID;
        break;
      }
      
      // optional uint32 AccountID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AccountID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_PosX;
        break;
      }
      
      // optional uint32 PosX = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosX:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posx_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_PosY;
        break;
      }
      
      // optional uint32 PosY = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posy_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageReSavePlayerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageReSavePlayerResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  // optional uint32 LineID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->lineid(), output);
  }
  
  // optional uint32 MapID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->mapid(), output);
  }
  
  // optional uint32 AccountID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->accountid(), output);
  }
  
  // optional uint32 PosX = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->posx(), output);
  }
  
  // optional uint32 PosY = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->posy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageReSavePlayerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  // optional uint32 LineID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->lineid(), target);
  }
  
  // optional uint32 MapID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->mapid(), target);
  }
  
  // optional uint32 AccountID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->accountid(), target);
  }
  
  // optional uint32 PosX = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->posx(), target);
  }
  
  // optional uint32 PosY = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->posy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageReSavePlayerResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 LineID = 3;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lineid());
    }
    
    // optional uint32 MapID = 4;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 AccountID = 5;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 PosX = 6;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posx());
    }
    
    // optional uint32 PosY = 7;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posy());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageReSavePlayerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageReSavePlayerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageReSavePlayerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageReSavePlayerResponse::MergeFrom(const CMessageReSavePlayerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(3)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(4)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(5)) {
      set_posx(from.posx());
    }
    if (from._has_bit(6)) {
      set_posy(from.posy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageReSavePlayerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReSavePlayerResponse::CopyFrom(const CMessageReSavePlayerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReSavePlayerResponse::Swap(CMessageReSavePlayerResponse* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(result_, other->result_);
    std::swap(lineid_, other->lineid_);
    std::swap(mapid_, other->mapid_);
    std::swap(accountid_, other->accountid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageReSavePlayerResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageReSavePlayerResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageReSavePlayerResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageReSavePlayerResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBoursePlayerTradeBuyNotice::kDetailFieldNumber;
#endif  // !_MSC_VER

CMessageBoursePlayerTradeBuyNotice::CMessageBoursePlayerTradeBuyNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBoursePlayerTradeBuyNotice::InitAsDefaultInstance() {  detail_ = const_cast< ::PBBourseDetail*>(&::PBBourseDetail::default_instance());
}

CMessageBoursePlayerTradeBuyNotice::CMessageBoursePlayerTradeBuyNotice(const CMessageBoursePlayerTradeBuyNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBoursePlayerTradeBuyNotice::SharedCtor() {
  _cached_size_ = 0;
  detail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBoursePlayerTradeBuyNotice::~CMessageBoursePlayerTradeBuyNotice() {
  SharedDtor();
}

void CMessageBoursePlayerTradeBuyNotice::SharedDtor() {
  if (this != default_instance_) {
    delete detail_;
  }
}

const ::google::protobuf::Descriptor* CMessageBoursePlayerTradeBuyNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBoursePlayerTradeBuyNotice_descriptor_;
}

const CMessageBoursePlayerTradeBuyNotice& CMessageBoursePlayerTradeBuyNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageBoursePlayerTradeBuyNotice* CMessageBoursePlayerTradeBuyNotice::default_instance_ = NULL;

CMessageBoursePlayerTradeBuyNotice* CMessageBoursePlayerTradeBuyNotice::New() const {
  return new CMessageBoursePlayerTradeBuyNotice;
}

void CMessageBoursePlayerTradeBuyNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (detail_ != NULL) detail_->::PBBourseDetail::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBoursePlayerTradeBuyNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBBourseDetail Detail = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_detail()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBoursePlayerTradeBuyNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBoursePlayerTradeBuyNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBBourseDetail Detail = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->detail(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBoursePlayerTradeBuyNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBBourseDetail Detail = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->detail(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBoursePlayerTradeBuyNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBBourseDetail Detail = 1;
    if (has_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->detail());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBoursePlayerTradeBuyNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBoursePlayerTradeBuyNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBoursePlayerTradeBuyNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBoursePlayerTradeBuyNotice::MergeFrom(const CMessageBoursePlayerTradeBuyNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_detail()->::PBBourseDetail::MergeFrom(from.detail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBoursePlayerTradeBuyNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBoursePlayerTradeBuyNotice::CopyFrom(const CMessageBoursePlayerTradeBuyNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBoursePlayerTradeBuyNotice::Swap(CMessageBoursePlayerTradeBuyNotice* other) {
  if (other != this) {
    std::swap(detail_, other->detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBoursePlayerTradeBuyNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBoursePlayerTradeBuyNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBoursePlayerTradeBuyNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBoursePlayerTradeBuyNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBoursePlayerTradeSellNotice::kDetailFieldNumber;
#endif  // !_MSC_VER

CMessageBoursePlayerTradeSellNotice::CMessageBoursePlayerTradeSellNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBoursePlayerTradeSellNotice::InitAsDefaultInstance() {  detail_ = const_cast< ::PBBourseDetail*>(&::PBBourseDetail::default_instance());
}

CMessageBoursePlayerTradeSellNotice::CMessageBoursePlayerTradeSellNotice(const CMessageBoursePlayerTradeSellNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBoursePlayerTradeSellNotice::SharedCtor() {
  _cached_size_ = 0;
  detail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBoursePlayerTradeSellNotice::~CMessageBoursePlayerTradeSellNotice() {
  SharedDtor();
}

void CMessageBoursePlayerTradeSellNotice::SharedDtor() {
  if (this != default_instance_) {
    delete detail_;
  }
}

const ::google::protobuf::Descriptor* CMessageBoursePlayerTradeSellNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBoursePlayerTradeSellNotice_descriptor_;
}

const CMessageBoursePlayerTradeSellNotice& CMessageBoursePlayerTradeSellNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageBoursePlayerTradeSellNotice* CMessageBoursePlayerTradeSellNotice::default_instance_ = NULL;

CMessageBoursePlayerTradeSellNotice* CMessageBoursePlayerTradeSellNotice::New() const {
  return new CMessageBoursePlayerTradeSellNotice;
}

void CMessageBoursePlayerTradeSellNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (detail_ != NULL) detail_->::PBBourseDetail::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBoursePlayerTradeSellNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBBourseDetail Detail = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_detail()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBoursePlayerTradeSellNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBoursePlayerTradeSellNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBBourseDetail Detail = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->detail(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBoursePlayerTradeSellNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBBourseDetail Detail = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->detail(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBoursePlayerTradeSellNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBBourseDetail Detail = 1;
    if (has_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->detail());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBoursePlayerTradeSellNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBoursePlayerTradeSellNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBoursePlayerTradeSellNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBoursePlayerTradeSellNotice::MergeFrom(const CMessageBoursePlayerTradeSellNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_detail()->::PBBourseDetail::MergeFrom(from.detail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBoursePlayerTradeSellNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBoursePlayerTradeSellNotice::CopyFrom(const CMessageBoursePlayerTradeSellNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBoursePlayerTradeSellNotice::Swap(CMessageBoursePlayerTradeSellNotice* other) {
  if (other != this) {
    std::swap(detail_, other->detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBoursePlayerTradeSellNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBoursePlayerTradeSellNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBoursePlayerTradeSellNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBoursePlayerTradeSellNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageWarStoneOverNotify::kMapIDFieldNumber;
#endif  // !_MSC_VER

CMessageWarStoneOverNotify::CMessageWarStoneOverNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageWarStoneOverNotify::InitAsDefaultInstance() {}

CMessageWarStoneOverNotify::CMessageWarStoneOverNotify(const CMessageWarStoneOverNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageWarStoneOverNotify::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageWarStoneOverNotify::~CMessageWarStoneOverNotify() {
  SharedDtor();
}

void CMessageWarStoneOverNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageWarStoneOverNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageWarStoneOverNotify_descriptor_;
}

const CMessageWarStoneOverNotify& CMessageWarStoneOverNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageWarStoneOverNotify* CMessageWarStoneOverNotify::default_instance_ = NULL;

CMessageWarStoneOverNotify* CMessageWarStoneOverNotify::New() const {
  return new CMessageWarStoneOverNotify;
}

void CMessageWarStoneOverNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageWarStoneOverNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 MapID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageWarStoneOverNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageWarStoneOverNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 MapID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->mapid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageWarStoneOverNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 MapID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->mapid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageWarStoneOverNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MapID = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageWarStoneOverNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageWarStoneOverNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageWarStoneOverNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageWarStoneOverNotify::MergeFrom(const CMessageWarStoneOverNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageWarStoneOverNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageWarStoneOverNotify::CopyFrom(const CMessageWarStoneOverNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageWarStoneOverNotify::Swap(CMessageWarStoneOverNotify* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageWarStoneOverNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageWarStoneOverNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageWarStoneOverNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageWarStoneOverNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCreateWarStoneNotify::kStoneLevelFieldNumber;
const int CMessageCreateWarStoneNotify::kMapIDFieldNumber;
#endif  // !_MSC_VER

CMessageCreateWarStoneNotify::CMessageCreateWarStoneNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCreateWarStoneNotify::InitAsDefaultInstance() {}

CMessageCreateWarStoneNotify::CMessageCreateWarStoneNotify(const CMessageCreateWarStoneNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCreateWarStoneNotify::SharedCtor() {
  _cached_size_ = 0;
  stonelevel_ = 0u;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCreateWarStoneNotify::~CMessageCreateWarStoneNotify() {
  SharedDtor();
}

void CMessageCreateWarStoneNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCreateWarStoneNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCreateWarStoneNotify_descriptor_;
}

const CMessageCreateWarStoneNotify& CMessageCreateWarStoneNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCreateWarStoneNotify* CMessageCreateWarStoneNotify::default_instance_ = NULL;

CMessageCreateWarStoneNotify* CMessageCreateWarStoneNotify::New() const {
  return new CMessageCreateWarStoneNotify;
}

void CMessageCreateWarStoneNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stonelevel_ = 0u;
    mapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCreateWarStoneNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 StoneLevel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &stonelevel_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCreateWarStoneNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCreateWarStoneNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 StoneLevel = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->stonelevel(), output);
  }
  
  // optional uint32 MapID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->mapid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCreateWarStoneNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 StoneLevel = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->stonelevel(), target);
  }
  
  // optional uint32 MapID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->mapid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCreateWarStoneNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 StoneLevel = 1;
    if (has_stonelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->stonelevel());
    }
    
    // optional uint32 MapID = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCreateWarStoneNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCreateWarStoneNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCreateWarStoneNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCreateWarStoneNotify::MergeFrom(const CMessageCreateWarStoneNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_stonelevel(from.stonelevel());
    }
    if (from._has_bit(1)) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCreateWarStoneNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCreateWarStoneNotify::CopyFrom(const CMessageCreateWarStoneNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCreateWarStoneNotify::Swap(CMessageCreateWarStoneNotify* other) {
  if (other != this) {
    std::swap(stonelevel_, other->stonelevel_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCreateWarStoneNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCreateWarStoneNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCreateWarStoneNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCreateWarStoneNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageAddTaxNotify::kMoneyFieldNumber;
#endif  // !_MSC_VER

CMessageAddTaxNotify::CMessageAddTaxNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageAddTaxNotify::InitAsDefaultInstance() {}

CMessageAddTaxNotify::CMessageAddTaxNotify(const CMessageAddTaxNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageAddTaxNotify::SharedCtor() {
  _cached_size_ = 0;
  money_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageAddTaxNotify::~CMessageAddTaxNotify() {
  SharedDtor();
}

void CMessageAddTaxNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageAddTaxNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageAddTaxNotify_descriptor_;
}

const CMessageAddTaxNotify& CMessageAddTaxNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageAddTaxNotify* CMessageAddTaxNotify::default_instance_ = NULL;

CMessageAddTaxNotify* CMessageAddTaxNotify::New() const {
  return new CMessageAddTaxNotify;
}

void CMessageAddTaxNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    money_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageAddTaxNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Money = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageAddTaxNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageAddTaxNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Money = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->money(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageAddTaxNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Money = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->money(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageAddTaxNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Money = 1;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageAddTaxNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageAddTaxNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageAddTaxNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageAddTaxNotify::MergeFrom(const CMessageAddTaxNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageAddTaxNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAddTaxNotify::CopyFrom(const CMessageAddTaxNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAddTaxNotify::Swap(CMessageAddTaxNotify* other) {
  if (other != this) {
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageAddTaxNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageAddTaxNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageAddTaxNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageAddTaxNotify_reflection_;
}

// ===================================================================

const ::std::string CMessageSendSysMailToPlayer::_default_role_name_;
const ::std::string CMessageSendSysMailToPlayer::_default_sender_name_;
const ::std::string CMessageSendSysMailToPlayer::_default_title_;
const ::std::string CMessageSendSysMailToPlayer::_default_body_;
#ifndef _MSC_VER
const int CMessageSendSysMailToPlayer::kRoleNameFieldNumber;
const int CMessageSendSysMailToPlayer::kRoleIdFieldNumber;
const int CMessageSendSysMailToPlayer::kSenderNameFieldNumber;
const int CMessageSendSysMailToPlayer::kTitleFieldNumber;
const int CMessageSendSysMailToPlayer::kBodyFieldNumber;
const int CMessageSendSysMailToPlayer::kReceiveCountryidFieldNumber;
const int CMessageSendSysMailToPlayer::kGatewayIdFieldNumber;
const int CMessageSendSysMailToPlayer::kGameIdFieldNumber;
const int CMessageSendSysMailToPlayer::kFdFieldNumber;
const int CMessageSendSysMailToPlayer::kTypeFieldNumber;
const int CMessageSendSysMailToPlayer::kSessionIdFieldNumber;
const int CMessageSendSysMailToPlayer::kItemIDFieldNumber;
const int CMessageSendSysMailToPlayer::kItemNumFieldNumber;
const int CMessageSendSysMailToPlayer::kMailSendTypeFieldNumber;
#endif  // !_MSC_VER

CMessageSendSysMailToPlayer::CMessageSendSysMailToPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageSendSysMailToPlayer::InitAsDefaultInstance() {}

CMessageSendSysMailToPlayer::CMessageSendSysMailToPlayer(const CMessageSendSysMailToPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageSendSysMailToPlayer::SharedCtor() {
  _cached_size_ = 0;
  role_name_ = const_cast< ::std::string*>(&_default_role_name_);
  role_id_ = 0u;
  sender_name_ = const_cast< ::std::string*>(&_default_sender_name_);
  title_ = const_cast< ::std::string*>(&_default_title_);
  body_ = const_cast< ::std::string*>(&_default_body_);
  receive_countryid_ = 0u;
  gateway_id_ = 0u;
  game_id_ = 0u;
  fd_ = 0u;
  type_ = 0u;
  session_id_ = 0u;
  mailsendtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageSendSysMailToPlayer::~CMessageSendSysMailToPlayer() {
  SharedDtor();
}

void CMessageSendSysMailToPlayer::SharedDtor() {
  if (role_name_ != &_default_role_name_) {
    delete role_name_;
  }
  if (sender_name_ != &_default_sender_name_) {
    delete sender_name_;
  }
  if (title_ != &_default_title_) {
    delete title_;
  }
  if (body_ != &_default_body_) {
    delete body_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageSendSysMailToPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageSendSysMailToPlayer_descriptor_;
}

const CMessageSendSysMailToPlayer& CMessageSendSysMailToPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageSendSysMailToPlayer* CMessageSendSysMailToPlayer::default_instance_ = NULL;

CMessageSendSysMailToPlayer* CMessageSendSysMailToPlayer::New() const {
  return new CMessageSendSysMailToPlayer;
}

void CMessageSendSysMailToPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (role_name_ != &_default_role_name_) {
        role_name_->clear();
      }
    }
    role_id_ = 0u;
    if (_has_bit(2)) {
      if (sender_name_ != &_default_sender_name_) {
        sender_name_->clear();
      }
    }
    if (_has_bit(3)) {
      if (title_ != &_default_title_) {
        title_->clear();
      }
    }
    if (_has_bit(4)) {
      if (body_ != &_default_body_) {
        body_->clear();
      }
    }
    receive_countryid_ = 0u;
    gateway_id_ = 0u;
    game_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    fd_ = 0u;
    type_ = 0u;
    session_id_ = 0u;
    mailsendtype_ = 0u;
  }
  itemid_.Clear();
  itemnum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageSendSysMailToPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string role_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_role_name()));
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }
      
      // optional uint32 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &role_id_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_sender_name;
        break;
      }
      
      // optional string sender_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sender_name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_sender_name()));
        if (input->ExpectTag(34)) goto parse_title;
        break;
      }
      
      // optional string title = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_title:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_title()));
        if (input->ExpectTag(42)) goto parse_body;
        break;
      }
      
      // optional string body = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_body:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_body()));
        if (input->ExpectTag(48)) goto parse_receive_countryid;
        break;
      }
      
      // optional uint32 receive_countryid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_receive_countryid:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &receive_countryid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_gateway_id;
        break;
      }
      
      // optional uint32 gateway_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_gateway_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &gateway_id_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_game_id;
        break;
      }
      
      // optional uint32 game_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_game_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &game_id_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_fd;
        break;
      }
      
      // optional uint32 fd = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fd_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_type;
        break;
      }
      
      // optional uint32 type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_session_id;
        break;
      }
      
      // optional uint32 session_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_session_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &session_id_));
        _set_bit(10);
        if (input->ExpectTag(104)) goto parse_ItemID;
        break;
      }
      
      // repeated uint32 ItemID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_itemid(value);
        if (input->ExpectTag(104)) goto parse_ItemID;
        if (input->ExpectTag(112)) goto parse_ItemNum;
        break;
      }
      
      // repeated uint32 ItemNum = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemNum:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_itemnum(value);
        if (input->ExpectTag(112)) goto parse_ItemNum;
        if (input->ExpectTag(120)) goto parse_MailSendType;
        break;
      }
      
      // optional uint32 MailSendType = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MailSendType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mailsendtype_));
        _set_bit(13);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageSendSysMailToPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageSendSysMailToPlayer::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string role_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->role_name(), output);
  }
  
  // optional uint32 role_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->role_id(), output);
  }
  
  // optional string sender_name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->sender_name(), output);
  }
  
  // optional string title = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->title(), output);
  }
  
  // optional string body = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->body(), output);
  }
  
  // optional uint32 receive_countryid = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->receive_countryid(), output);
  }
  
  // optional uint32 gateway_id = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->gateway_id(), output);
  }
  
  // optional uint32 game_id = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->game_id(), output);
  }
  
  // optional uint32 fd = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->fd(), output);
  }
  
  // optional uint32 type = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->type(), output);
  }
  
  // optional uint32 session_id = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->session_id(), output);
  }
  
  // repeated uint32 ItemID = 13;
  for (int i = 0; i < this->itemid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->itemid(i), output);
  }
  
  // repeated uint32 ItemNum = 14;
  for (int i = 0; i < this->itemnum_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->itemnum(i), output);
  }
  
  // optional uint32 MailSendType = 15;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(15, this->mailsendtype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageSendSysMailToPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string role_name = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->role_name(), target);
  }
  
  // optional uint32 role_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->role_id(), target);
  }
  
  // optional string sender_name = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->sender_name(), target);
  }
  
  // optional string title = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->title(), target);
  }
  
  // optional string body = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->body(), target);
  }
  
  // optional uint32 receive_countryid = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->receive_countryid(), target);
  }
  
  // optional uint32 gateway_id = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->gateway_id(), target);
  }
  
  // optional uint32 game_id = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->game_id(), target);
  }
  
  // optional uint32 fd = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->fd(), target);
  }
  
  // optional uint32 type = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->type(), target);
  }
  
  // optional uint32 session_id = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->session_id(), target);
  }
  
  // repeated uint32 ItemID = 13;
  for (int i = 0; i < this->itemid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->itemid(i), target);
  }
  
  // repeated uint32 ItemNum = 14;
  for (int i = 0; i < this->itemnum_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->itemnum(i), target);
  }
  
  // optional uint32 MailSendType = 15;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(15, this->mailsendtype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageSendSysMailToPlayer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string role_name = 1;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->role_name());
    }
    
    // optional uint32 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->role_id());
    }
    
    // optional string sender_name = 3;
    if (has_sender_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->sender_name());
    }
    
    // optional string title = 4;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->title());
    }
    
    // optional string body = 5;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->body());
    }
    
    // optional uint32 receive_countryid = 6;
    if (has_receive_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->receive_countryid());
    }
    
    // optional uint32 gateway_id = 7;
    if (has_gateway_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->gateway_id());
    }
    
    // optional uint32 game_id = 8;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->game_id());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 fd = 9;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fd());
    }
    
    // optional uint32 type = 10;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
    // optional uint32 session_id = 11;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->session_id());
    }
    
    // optional uint32 MailSendType = 15;
    if (has_mailsendtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mailsendtype());
    }
    
  }
  // repeated uint32 ItemID = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->itemid(i));
    }
    total_size += 1 * this->itemid_size() + data_size;
  }
  
  // repeated uint32 ItemNum = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemnum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->itemnum(i));
    }
    total_size += 1 * this->itemnum_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageSendSysMailToPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageSendSysMailToPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageSendSysMailToPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageSendSysMailToPlayer::MergeFrom(const CMessageSendSysMailToPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemid_.MergeFrom(from.itemid_);
  itemnum_.MergeFrom(from.itemnum_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_role_name(from.role_name());
    }
    if (from._has_bit(1)) {
      set_role_id(from.role_id());
    }
    if (from._has_bit(2)) {
      set_sender_name(from.sender_name());
    }
    if (from._has_bit(3)) {
      set_title(from.title());
    }
    if (from._has_bit(4)) {
      set_body(from.body());
    }
    if (from._has_bit(5)) {
      set_receive_countryid(from.receive_countryid());
    }
    if (from._has_bit(6)) {
      set_gateway_id(from.gateway_id());
    }
    if (from._has_bit(7)) {
      set_game_id(from.game_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_fd(from.fd());
    }
    if (from._has_bit(9)) {
      set_type(from.type());
    }
    if (from._has_bit(10)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(13)) {
      set_mailsendtype(from.mailsendtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageSendSysMailToPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSendSysMailToPlayer::CopyFrom(const CMessageSendSysMailToPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSendSysMailToPlayer::Swap(CMessageSendSysMailToPlayer* other) {
  if (other != this) {
    std::swap(role_name_, other->role_name_);
    std::swap(role_id_, other->role_id_);
    std::swap(sender_name_, other->sender_name_);
    std::swap(title_, other->title_);
    std::swap(body_, other->body_);
    std::swap(receive_countryid_, other->receive_countryid_);
    std::swap(gateway_id_, other->gateway_id_);
    std::swap(game_id_, other->game_id_);
    std::swap(fd_, other->fd_);
    std::swap(type_, other->type_);
    std::swap(session_id_, other->session_id_);
    itemid_.Swap(&other->itemid_);
    itemnum_.Swap(&other->itemnum_);
    std::swap(mailsendtype_, other->mailsendtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageSendSysMailToPlayer::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageSendSysMailToPlayer::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageSendSysMailToPlayer::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageSendSysMailToPlayer_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCampAddHonerScore::kRoleIdFieldNumber;
const int CMessageCampAddHonerScore::kHonerValueFieldNumber;
const int CMessageCampAddHonerScore::kCampIdFieldNumber;
#endif  // !_MSC_VER

CMessageCampAddHonerScore::CMessageCampAddHonerScore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCampAddHonerScore::InitAsDefaultInstance() {}

CMessageCampAddHonerScore::CMessageCampAddHonerScore(const CMessageCampAddHonerScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCampAddHonerScore::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  honer_value_ = 0u;
  camp_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCampAddHonerScore::~CMessageCampAddHonerScore() {
  SharedDtor();
}

void CMessageCampAddHonerScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCampAddHonerScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCampAddHonerScore_descriptor_;
}

const CMessageCampAddHonerScore& CMessageCampAddHonerScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCampAddHonerScore* CMessageCampAddHonerScore::default_instance_ = NULL;

CMessageCampAddHonerScore* CMessageCampAddHonerScore::New() const {
  return new CMessageCampAddHonerScore;
}

void CMessageCampAddHonerScore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    honer_value_ = 0u;
    camp_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCampAddHonerScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &role_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_honer_value;
        break;
      }
      
      // optional uint32 honer_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_honer_value:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &honer_value_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_camp_id;
        break;
      }
      
      // optional uint32 camp_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_camp_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &camp_id_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCampAddHonerScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCampAddHonerScore::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 role_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->role_id(), output);
  }
  
  // optional uint32 honer_value = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->honer_value(), output);
  }
  
  // optional uint32 camp_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->camp_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCampAddHonerScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 role_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->role_id(), target);
  }
  
  // optional uint32 honer_value = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->honer_value(), target);
  }
  
  // optional uint32 camp_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->camp_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCampAddHonerScore::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->role_id());
    }
    
    // optional uint32 honer_value = 2;
    if (has_honer_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->honer_value());
    }
    
    // optional uint32 camp_id = 3;
    if (has_camp_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->camp_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCampAddHonerScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCampAddHonerScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCampAddHonerScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCampAddHonerScore::MergeFrom(const CMessageCampAddHonerScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_role_id(from.role_id());
    }
    if (from._has_bit(1)) {
      set_honer_value(from.honer_value());
    }
    if (from._has_bit(2)) {
      set_camp_id(from.camp_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCampAddHonerScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCampAddHonerScore::CopyFrom(const CMessageCampAddHonerScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCampAddHonerScore::Swap(CMessageCampAddHonerScore* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(honer_value_, other->honer_value_);
    std::swap(camp_id_, other->camp_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCampAddHonerScore::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCampAddHonerScore::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCampAddHonerScore::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCampAddHonerScore_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBattleTeamFixWait::kCharIDFieldNumber;
const int CMessageBattleTeamFixWait::kLevelFieldNumber;
const int CMessageBattleTeamFixWait::kBattleIDFieldNumber;
const int CMessageBattleTeamFixWait::kMapIDFieldNumber;
#endif  // !_MSC_VER

CMessageBattleTeamFixWait::CMessageBattleTeamFixWait()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBattleTeamFixWait::InitAsDefaultInstance() {}

CMessageBattleTeamFixWait::CMessageBattleTeamFixWait(const CMessageBattleTeamFixWait& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBattleTeamFixWait::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  level_ = 0u;
  battleid_ = 0u;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBattleTeamFixWait::~CMessageBattleTeamFixWait() {
  SharedDtor();
}

void CMessageBattleTeamFixWait::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageBattleTeamFixWait::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBattleTeamFixWait_descriptor_;
}

const CMessageBattleTeamFixWait& CMessageBattleTeamFixWait::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageBattleTeamFixWait* CMessageBattleTeamFixWait::default_instance_ = NULL;

CMessageBattleTeamFixWait* CMessageBattleTeamFixWait::New() const {
  return new CMessageBattleTeamFixWait;
}

void CMessageBattleTeamFixWait::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    level_ = 0u;
    battleid_ = 0u;
    mapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBattleTeamFixWait::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_BattleID;
        break;
      }
      
      // optional uint32 BattleID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BattleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &battleid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBattleTeamFixWait::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBattleTeamFixWait::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 Level = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->level(), output);
  }
  
  // optional uint32 BattleID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->battleid(), output);
  }
  
  // optional uint32 MapID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->mapid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBattleTeamFixWait::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 Level = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->level(), target);
  }
  
  // optional uint32 BattleID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->battleid(), target);
  }
  
  // optional uint32 MapID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->mapid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBattleTeamFixWait::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 Level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
    // optional uint32 BattleID = 3;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->battleid());
    }
    
    // optional uint32 MapID = 4;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBattleTeamFixWait::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBattleTeamFixWait* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBattleTeamFixWait*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBattleTeamFixWait::MergeFrom(const CMessageBattleTeamFixWait& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_level(from.level());
    }
    if (from._has_bit(2)) {
      set_battleid(from.battleid());
    }
    if (from._has_bit(3)) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBattleTeamFixWait::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBattleTeamFixWait::CopyFrom(const CMessageBattleTeamFixWait& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBattleTeamFixWait::Swap(CMessageBattleTeamFixWait* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(level_, other->level_);
    std::swap(battleid_, other->battleid_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBattleTeamFixWait::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBattleTeamFixWait::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBattleTeamFixWait::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBattleTeamFixWait_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageActivityEventNotify::kActivityIDFieldNumber;
const int CMessageActivityEventNotify::kEventIDFieldNumber;
const int CMessageActivityEventNotify::kIntParamsFieldNumber;
const int CMessageActivityEventNotify::kStrParamsFieldNumber;
#endif  // !_MSC_VER

CMessageActivityEventNotify::CMessageActivityEventNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageActivityEventNotify::InitAsDefaultInstance() {}

CMessageActivityEventNotify::CMessageActivityEventNotify(const CMessageActivityEventNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageActivityEventNotify::SharedCtor() {
  _cached_size_ = 0;
  activityid_ = 0u;
  eventid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageActivityEventNotify::~CMessageActivityEventNotify() {
  SharedDtor();
}

void CMessageActivityEventNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageActivityEventNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageActivityEventNotify_descriptor_;
}

const CMessageActivityEventNotify& CMessageActivityEventNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageActivityEventNotify* CMessageActivityEventNotify::default_instance_ = NULL;

CMessageActivityEventNotify* CMessageActivityEventNotify::New() const {
  return new CMessageActivityEventNotify;
}

void CMessageActivityEventNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activityid_ = 0u;
    eventid_ = 0u;
  }
  intparams_.Clear();
  strparams_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageActivityEventNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ActivityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &activityid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_EventID;
        break;
      }
      
      // optional uint32 EventID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EventID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &eventid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_IntParams;
        break;
      }
      
      // repeated uint32 IntParams = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IntParams:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_intparams(value);
        if (input->ExpectTag(24)) goto parse_IntParams;
        if (input->ExpectTag(34)) goto parse_StrParams;
        break;
      }
      
      // repeated string StrParams = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_StrParams:
        DO_(::google::protobuf::internal::WireFormat::ReadString(
             input, add_strparams()));
        if (input->ExpectTag(34)) goto parse_StrParams;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageActivityEventNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageActivityEventNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ActivityID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->activityid(), output);
  }
  
  // optional uint32 EventID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->eventid(), output);
  }
  
  // repeated uint32 IntParams = 3;
  for (int i = 0; i < this->intparams_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->intparams(i), output);
  }
  
  // repeated string StrParams = 4;
  for (int i = 0; i < this->strparams_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->strparams(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageActivityEventNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ActivityID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->activityid(), target);
  }
  
  // optional uint32 EventID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->eventid(), target);
  }
  
  // repeated uint32 IntParams = 3;
  for (int i = 0; i < this->intparams_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->intparams(i), target);
  }
  
  // repeated string StrParams = 4;
  for (int i = 0; i < this->strparams_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->strparams(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageActivityEventNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ActivityID = 1;
    if (has_activityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->activityid());
    }
    
    // optional uint32 EventID = 2;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->eventid());
    }
    
  }
  // repeated uint32 IntParams = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->intparams_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->intparams(i));
    }
    total_size += 1 * this->intparams_size() + data_size;
  }
  
  // repeated string StrParams = 4;
  total_size += 1 * this->strparams_size();
  for (int i = 0; i < this->strparams_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormat::StringSize(
      this->strparams(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageActivityEventNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageActivityEventNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageActivityEventNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageActivityEventNotify::MergeFrom(const CMessageActivityEventNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  intparams_.MergeFrom(from.intparams_);
  strparams_.MergeFrom(from.strparams_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_activityid(from.activityid());
    }
    if (from._has_bit(1)) {
      set_eventid(from.eventid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageActivityEventNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageActivityEventNotify::CopyFrom(const CMessageActivityEventNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageActivityEventNotify::Swap(CMessageActivityEventNotify* other) {
  if (other != this) {
    std::swap(activityid_, other->activityid_);
    std::swap(eventid_, other->eventid_);
    intparams_.Swap(&other->intparams_);
    strparams_.Swap(&other->strparams_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageActivityEventNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageActivityEventNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageActivityEventNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageActivityEventNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageAddMasterPointRequest::kMasterIDFieldNumber;
const int CMessageAddMasterPointRequest::kPointFieldNumber;
#endif  // !_MSC_VER

CMessageAddMasterPointRequest::CMessageAddMasterPointRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageAddMasterPointRequest::InitAsDefaultInstance() {}

CMessageAddMasterPointRequest::CMessageAddMasterPointRequest(const CMessageAddMasterPointRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageAddMasterPointRequest::SharedCtor() {
  _cached_size_ = 0;
  masterid_ = 0u;
  point_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageAddMasterPointRequest::~CMessageAddMasterPointRequest() {
  SharedDtor();
}

void CMessageAddMasterPointRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageAddMasterPointRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageAddMasterPointRequest_descriptor_;
}

const CMessageAddMasterPointRequest& CMessageAddMasterPointRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageAddMasterPointRequest* CMessageAddMasterPointRequest::default_instance_ = NULL;

CMessageAddMasterPointRequest* CMessageAddMasterPointRequest::New() const {
  return new CMessageAddMasterPointRequest;
}

void CMessageAddMasterPointRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    masterid_ = 0u;
    point_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageAddMasterPointRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 MasterID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &masterid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Point;
        break;
      }
      
      // optional uint32 Point = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Point:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &point_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageAddMasterPointRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageAddMasterPointRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 MasterID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->masterid(), output);
  }
  
  // optional uint32 Point = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->point(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageAddMasterPointRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 MasterID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->masterid(), target);
  }
  
  // optional uint32 Point = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->point(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageAddMasterPointRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MasterID = 1;
    if (has_masterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->masterid());
    }
    
    // optional uint32 Point = 2;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->point());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageAddMasterPointRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageAddMasterPointRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageAddMasterPointRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageAddMasterPointRequest::MergeFrom(const CMessageAddMasterPointRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_masterid(from.masterid());
    }
    if (from._has_bit(1)) {
      set_point(from.point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageAddMasterPointRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAddMasterPointRequest::CopyFrom(const CMessageAddMasterPointRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAddMasterPointRequest::Swap(CMessageAddMasterPointRequest* other) {
  if (other != this) {
    std::swap(masterid_, other->masterid_);
    std::swap(point_, other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageAddMasterPointRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageAddMasterPointRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageAddMasterPointRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageAddMasterPointRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageAddMasterPointNotify::kCharIDFieldNumber;
const int CMessageAddMasterPointNotify::kPointFieldNumber;
#endif  // !_MSC_VER

CMessageAddMasterPointNotify::CMessageAddMasterPointNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageAddMasterPointNotify::InitAsDefaultInstance() {}

CMessageAddMasterPointNotify::CMessageAddMasterPointNotify(const CMessageAddMasterPointNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageAddMasterPointNotify::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  point_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageAddMasterPointNotify::~CMessageAddMasterPointNotify() {
  SharedDtor();
}

void CMessageAddMasterPointNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageAddMasterPointNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageAddMasterPointNotify_descriptor_;
}

const CMessageAddMasterPointNotify& CMessageAddMasterPointNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageAddMasterPointNotify* CMessageAddMasterPointNotify::default_instance_ = NULL;

CMessageAddMasterPointNotify* CMessageAddMasterPointNotify::New() const {
  return new CMessageAddMasterPointNotify;
}

void CMessageAddMasterPointNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    point_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageAddMasterPointNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Point;
        break;
      }
      
      // optional uint32 Point = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Point:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &point_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageAddMasterPointNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageAddMasterPointNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 Point = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->point(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageAddMasterPointNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 Point = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->point(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageAddMasterPointNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 Point = 2;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->point());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageAddMasterPointNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageAddMasterPointNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageAddMasterPointNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageAddMasterPointNotify::MergeFrom(const CMessageAddMasterPointNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_point(from.point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageAddMasterPointNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAddMasterPointNotify::CopyFrom(const CMessageAddMasterPointNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAddMasterPointNotify::Swap(CMessageAddMasterPointNotify* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(point_, other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageAddMasterPointNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageAddMasterPointNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageAddMasterPointNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageAddMasterPointNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBattleSingleFixWait::kCharIDFieldNumber;
const int CMessageBattleSingleFixWait::kLevelFieldNumber;
const int CMessageBattleSingleFixWait::kBattleIDFieldNumber;
const int CMessageBattleSingleFixWait::kMapIDFieldNumber;
#endif  // !_MSC_VER

CMessageBattleSingleFixWait::CMessageBattleSingleFixWait()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBattleSingleFixWait::InitAsDefaultInstance() {}

CMessageBattleSingleFixWait::CMessageBattleSingleFixWait(const CMessageBattleSingleFixWait& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBattleSingleFixWait::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  level_ = 0u;
  battleid_ = 0u;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBattleSingleFixWait::~CMessageBattleSingleFixWait() {
  SharedDtor();
}

void CMessageBattleSingleFixWait::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageBattleSingleFixWait::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBattleSingleFixWait_descriptor_;
}

const CMessageBattleSingleFixWait& CMessageBattleSingleFixWait::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageBattleSingleFixWait* CMessageBattleSingleFixWait::default_instance_ = NULL;

CMessageBattleSingleFixWait* CMessageBattleSingleFixWait::New() const {
  return new CMessageBattleSingleFixWait;
}

void CMessageBattleSingleFixWait::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    level_ = 0u;
    battleid_ = 0u;
    mapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBattleSingleFixWait::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_BattleID;
        break;
      }
      
      // optional uint32 BattleID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BattleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &battleid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBattleSingleFixWait::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBattleSingleFixWait::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 Level = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->level(), output);
  }
  
  // optional uint32 BattleID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->battleid(), output);
  }
  
  // optional uint32 MapID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->mapid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBattleSingleFixWait::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 Level = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->level(), target);
  }
  
  // optional uint32 BattleID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->battleid(), target);
  }
  
  // optional uint32 MapID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->mapid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBattleSingleFixWait::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 Level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
    // optional uint32 BattleID = 3;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->battleid());
    }
    
    // optional uint32 MapID = 4;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBattleSingleFixWait::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBattleSingleFixWait* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBattleSingleFixWait*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBattleSingleFixWait::MergeFrom(const CMessageBattleSingleFixWait& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_level(from.level());
    }
    if (from._has_bit(2)) {
      set_battleid(from.battleid());
    }
    if (from._has_bit(3)) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBattleSingleFixWait::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBattleSingleFixWait::CopyFrom(const CMessageBattleSingleFixWait& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBattleSingleFixWait::Swap(CMessageBattleSingleFixWait* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(level_, other->level_);
    std::swap(battleid_, other->battleid_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBattleSingleFixWait::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBattleSingleFixWait::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBattleSingleFixWait::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBattleSingleFixWait_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageSpecialEventNotify::kSrcWorldIDFieldNumber;
const int CMessageSpecialEventNotify::kDesWorldIDFieldNumber;
const int CMessageSpecialEventNotify::kEventTypeFieldNumber;
const int CMessageSpecialEventNotify::kCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageSpecialEventNotify::CMessageSpecialEventNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageSpecialEventNotify::InitAsDefaultInstance() {}

CMessageSpecialEventNotify::CMessageSpecialEventNotify(const CMessageSpecialEventNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageSpecialEventNotify::SharedCtor() {
  _cached_size_ = 0;
  srcworldid_ = 0u;
  desworldid_ = 0u;
  eventtype_ = 0u;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageSpecialEventNotify::~CMessageSpecialEventNotify() {
  SharedDtor();
}

void CMessageSpecialEventNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageSpecialEventNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageSpecialEventNotify_descriptor_;
}

const CMessageSpecialEventNotify& CMessageSpecialEventNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageSpecialEventNotify* CMessageSpecialEventNotify::default_instance_ = NULL;

CMessageSpecialEventNotify* CMessageSpecialEventNotify::New() const {
  return new CMessageSpecialEventNotify;
}

void CMessageSpecialEventNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    srcworldid_ = 0u;
    desworldid_ = 0u;
    eventtype_ = 0u;
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageSpecialEventNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 SrcWorldID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srcworldid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_DesWorldID;
        break;
      }
      
      // optional uint32 DesWorldID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DesWorldID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &desworldid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_EventType;
        break;
      }
      
      // optional uint32 EventType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EventType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &eventtype_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageSpecialEventNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageSpecialEventNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 SrcWorldID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->srcworldid(), output);
  }
  
  // optional uint32 DesWorldID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->desworldid(), output);
  }
  
  // optional uint32 EventType = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->eventtype(), output);
  }
  
  // optional uint32 CharID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->charid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageSpecialEventNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 SrcWorldID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->srcworldid(), target);
  }
  
  // optional uint32 DesWorldID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->desworldid(), target);
  }
  
  // optional uint32 EventType = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->eventtype(), target);
  }
  
  // optional uint32 CharID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->charid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageSpecialEventNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SrcWorldID = 1;
    if (has_srcworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srcworldid());
    }
    
    // optional uint32 DesWorldID = 2;
    if (has_desworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->desworldid());
    }
    
    // optional uint32 EventType = 3;
    if (has_eventtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->eventtype());
    }
    
    // optional uint32 CharID = 4;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageSpecialEventNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageSpecialEventNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageSpecialEventNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageSpecialEventNotify::MergeFrom(const CMessageSpecialEventNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_srcworldid(from.srcworldid());
    }
    if (from._has_bit(1)) {
      set_desworldid(from.desworldid());
    }
    if (from._has_bit(2)) {
      set_eventtype(from.eventtype());
    }
    if (from._has_bit(3)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageSpecialEventNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSpecialEventNotify::CopyFrom(const CMessageSpecialEventNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSpecialEventNotify::Swap(CMessageSpecialEventNotify* other) {
  if (other != this) {
    std::swap(srcworldid_, other->srcworldid_);
    std::swap(desworldid_, other->desworldid_);
    std::swap(eventtype_, other->eventtype_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageSpecialEventNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageSpecialEventNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageSpecialEventNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageSpecialEventNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageAcquireMasterNotify::kSlaveIDFieldNumber;
const int CMessageAcquireMasterNotify::kMasterIDFieldNumber;
#endif  // !_MSC_VER

CMessageAcquireMasterNotify::CMessageAcquireMasterNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageAcquireMasterNotify::InitAsDefaultInstance() {}

CMessageAcquireMasterNotify::CMessageAcquireMasterNotify(const CMessageAcquireMasterNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageAcquireMasterNotify::SharedCtor() {
  _cached_size_ = 0;
  slaveid_ = 0u;
  masterid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageAcquireMasterNotify::~CMessageAcquireMasterNotify() {
  SharedDtor();
}

void CMessageAcquireMasterNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageAcquireMasterNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageAcquireMasterNotify_descriptor_;
}

const CMessageAcquireMasterNotify& CMessageAcquireMasterNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageAcquireMasterNotify* CMessageAcquireMasterNotify::default_instance_ = NULL;

CMessageAcquireMasterNotify* CMessageAcquireMasterNotify::New() const {
  return new CMessageAcquireMasterNotify;
}

void CMessageAcquireMasterNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slaveid_ = 0u;
    masterid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageAcquireMasterNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 SlaveID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &slaveid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_MasterID;
        break;
      }
      
      // optional uint32 MasterID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MasterID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &masterid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageAcquireMasterNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageAcquireMasterNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 SlaveID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->slaveid(), output);
  }
  
  // optional uint32 MasterID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->masterid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageAcquireMasterNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 SlaveID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->slaveid(), target);
  }
  
  // optional uint32 MasterID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->masterid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageAcquireMasterNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SlaveID = 1;
    if (has_slaveid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->slaveid());
    }
    
    // optional uint32 MasterID = 2;
    if (has_masterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->masterid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageAcquireMasterNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageAcquireMasterNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageAcquireMasterNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageAcquireMasterNotify::MergeFrom(const CMessageAcquireMasterNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_slaveid(from.slaveid());
    }
    if (from._has_bit(1)) {
      set_masterid(from.masterid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageAcquireMasterNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAcquireMasterNotify::CopyFrom(const CMessageAcquireMasterNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAcquireMasterNotify::Swap(CMessageAcquireMasterNotify* other) {
  if (other != this) {
    std::swap(slaveid_, other->slaveid_);
    std::swap(masterid_, other->masterid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageAcquireMasterNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageAcquireMasterNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageAcquireMasterNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageAcquireMasterNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBattleWinnerNotify::kHasWinnerFieldNumber;
const int CMessageBattleWinnerNotify::kBattleIDFieldNumber;
const int CMessageBattleWinnerNotify::kLevelFieldNumber;
const int CMessageBattleWinnerNotify::kCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageBattleWinnerNotify::CMessageBattleWinnerNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBattleWinnerNotify::InitAsDefaultInstance() {}

CMessageBattleWinnerNotify::CMessageBattleWinnerNotify(const CMessageBattleWinnerNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBattleWinnerNotify::SharedCtor() {
  _cached_size_ = 0;
  haswinner_ = 0u;
  battleid_ = 0u;
  level_ = 0u;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBattleWinnerNotify::~CMessageBattleWinnerNotify() {
  SharedDtor();
}

void CMessageBattleWinnerNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageBattleWinnerNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBattleWinnerNotify_descriptor_;
}

const CMessageBattleWinnerNotify& CMessageBattleWinnerNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageBattleWinnerNotify* CMessageBattleWinnerNotify::default_instance_ = NULL;

CMessageBattleWinnerNotify* CMessageBattleWinnerNotify::New() const {
  return new CMessageBattleWinnerNotify;
}

void CMessageBattleWinnerNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    haswinner_ = 0u;
    battleid_ = 0u;
    level_ = 0u;
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBattleWinnerNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 HasWinner = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &haswinner_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_BattleID;
        break;
      }
      
      // optional uint32 BattleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BattleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &battleid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBattleWinnerNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBattleWinnerNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 HasWinner = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->haswinner(), output);
  }
  
  // optional uint32 BattleID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->battleid(), output);
  }
  
  // optional uint32 Level = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->level(), output);
  }
  
  // optional uint32 CharID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->charid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBattleWinnerNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 HasWinner = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->haswinner(), target);
  }
  
  // optional uint32 BattleID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->battleid(), target);
  }
  
  // optional uint32 Level = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->level(), target);
  }
  
  // optional uint32 CharID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->charid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBattleWinnerNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 HasWinner = 1;
    if (has_haswinner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->haswinner());
    }
    
    // optional uint32 BattleID = 2;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->battleid());
    }
    
    // optional uint32 Level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
    // optional uint32 CharID = 4;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBattleWinnerNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBattleWinnerNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBattleWinnerNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBattleWinnerNotify::MergeFrom(const CMessageBattleWinnerNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_haswinner(from.haswinner());
    }
    if (from._has_bit(1)) {
      set_battleid(from.battleid());
    }
    if (from._has_bit(2)) {
      set_level(from.level());
    }
    if (from._has_bit(3)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBattleWinnerNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBattleWinnerNotify::CopyFrom(const CMessageBattleWinnerNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBattleWinnerNotify::Swap(CMessageBattleWinnerNotify* other) {
  if (other != this) {
    std::swap(haswinner_, other->haswinner_);
    std::swap(battleid_, other->battleid_);
    std::swap(level_, other->level_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBattleWinnerNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBattleWinnerNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBattleWinnerNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBattleWinnerNotify_reflection_;
}

// ===================================================================

const ::std::string CMessageChangeFamilyStabilityNotify::_default_rolename_;
#ifndef _MSC_VER
const int CMessageChangeFamilyStabilityNotify::kFamilyIDFieldNumber;
const int CMessageChangeFamilyStabilityNotify::kRoleIDFieldNumber;
const int CMessageChangeFamilyStabilityNotify::kReasonFieldNumber;
const int CMessageChangeFamilyStabilityNotify::kRoleNameFieldNumber;
const int CMessageChangeFamilyStabilityNotify::kOnLineTimeFieldNumber;
const int CMessageChangeFamilyStabilityNotify::kRoleLevelFieldNumber;
const int CMessageChangeFamilyStabilityNotify::kValueFieldNumber;
#endif  // !_MSC_VER

CMessageChangeFamilyStabilityNotify::CMessageChangeFamilyStabilityNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeFamilyStabilityNotify::InitAsDefaultInstance() {}

CMessageChangeFamilyStabilityNotify::CMessageChangeFamilyStabilityNotify(const CMessageChangeFamilyStabilityNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeFamilyStabilityNotify::SharedCtor() {
  _cached_size_ = 0;
  familyid_ = 0u;
  roleid_ = 0u;
  reason_ = 0u;
  rolename_ = const_cast< ::std::string*>(&_default_rolename_);
  onlinetime_ = 0u;
  rolelevel_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeFamilyStabilityNotify::~CMessageChangeFamilyStabilityNotify() {
  SharedDtor();
}

void CMessageChangeFamilyStabilityNotify::SharedDtor() {
  if (rolename_ != &_default_rolename_) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageChangeFamilyStabilityNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeFamilyStabilityNotify_descriptor_;
}

const CMessageChangeFamilyStabilityNotify& CMessageChangeFamilyStabilityNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeFamilyStabilityNotify* CMessageChangeFamilyStabilityNotify::default_instance_ = NULL;

CMessageChangeFamilyStabilityNotify* CMessageChangeFamilyStabilityNotify::New() const {
  return new CMessageChangeFamilyStabilityNotify;
}

void CMessageChangeFamilyStabilityNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    familyid_ = 0u;
    roleid_ = 0u;
    reason_ = 0u;
    if (_has_bit(3)) {
      if (rolename_ != &_default_rolename_) {
        rolename_->clear();
      }
    }
    onlinetime_ = 0u;
    rolelevel_ = 0u;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeFamilyStabilityNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 FamilyID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(0);
        if (input->ExpectTag(24)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(1);
        if (input->ExpectTag(32)) goto parse_Reason;
        break;
      }
      
      // optional uint32 Reason = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Reason:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &reason_));
        _set_bit(2);
        if (input->ExpectTag(42)) goto parse_RoleName;
        break;
      }
      
      // optional string RoleName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RoleName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_rolename()));
        if (input->ExpectTag(48)) goto parse_OnLineTime;
        break;
      }
      
      // optional uint32 OnLineTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OnLineTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &onlinetime_));
        _set_bit(4);
        if (input->ExpectTag(56)) goto parse_RoleLevel;
        break;
      }
      
      // optional uint32 RoleLevel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rolelevel_));
        _set_bit(5);
        if (input->ExpectTag(72)) goto parse_Value;
        break;
      }
      
      // optional uint32 Value = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Value:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &value_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeFamilyStabilityNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeFamilyStabilityNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 FamilyID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->familyid(), output);
  }
  
  // optional uint32 RoleID = 3;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->roleid(), output);
  }
  
  // optional uint32 Reason = 4;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->reason(), output);
  }
  
  // optional string RoleName = 5;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->rolename(), output);
  }
  
  // optional uint32 OnLineTime = 6;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->onlinetime(), output);
  }
  
  // optional uint32 RoleLevel = 7;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->rolelevel(), output);
  }
  
  // optional uint32 Value = 9;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeFamilyStabilityNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 FamilyID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->familyid(), target);
  }
  
  // optional uint32 RoleID = 3;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->roleid(), target);
  }
  
  // optional uint32 Reason = 4;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->reason(), target);
  }
  
  // optional string RoleName = 5;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->rolename(), target);
  }
  
  // optional uint32 OnLineTime = 6;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->onlinetime(), target);
  }
  
  // optional uint32 RoleLevel = 7;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->rolelevel(), target);
  }
  
  // optional uint32 Value = 9;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeFamilyStabilityNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 FamilyID = 1;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
    // optional uint32 RoleID = 3;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 Reason = 4;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->reason());
    }
    
    // optional string RoleName = 5;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->rolename());
    }
    
    // optional uint32 OnLineTime = 6;
    if (has_onlinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->onlinetime());
    }
    
    // optional uint32 RoleLevel = 7;
    if (has_rolelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rolelevel());
    }
    
    // optional uint32 Value = 9;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeFamilyStabilityNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeFamilyStabilityNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeFamilyStabilityNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeFamilyStabilityNotify::MergeFrom(const CMessageChangeFamilyStabilityNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_familyid(from.familyid());
    }
    if (from._has_bit(1)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(2)) {
      set_reason(from.reason());
    }
    if (from._has_bit(3)) {
      set_rolename(from.rolename());
    }
    if (from._has_bit(4)) {
      set_onlinetime(from.onlinetime());
    }
    if (from._has_bit(5)) {
      set_rolelevel(from.rolelevel());
    }
    if (from._has_bit(6)) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeFamilyStabilityNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeFamilyStabilityNotify::CopyFrom(const CMessageChangeFamilyStabilityNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeFamilyStabilityNotify::Swap(CMessageChangeFamilyStabilityNotify* other) {
  if (other != this) {
    std::swap(familyid_, other->familyid_);
    std::swap(roleid_, other->roleid_);
    std::swap(reason_, other->reason_);
    std::swap(rolename_, other->rolename_);
    std::swap(onlinetime_, other->onlinetime_);
    std::swap(rolelevel_, other->rolelevel_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeFamilyStabilityNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeFamilyStabilityNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeFamilyStabilityNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeFamilyStabilityNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageS2GJoinOnTimeOpenBattleRequest::kBattleIDFieldNumber;
const int CMessageS2GJoinOnTimeOpenBattleRequest::kMapIDFieldNumber;
const int CMessageS2GJoinOnTimeOpenBattleRequest::kCharIDFieldNumber;
const int CMessageS2GJoinOnTimeOpenBattleRequest::kPosXFieldNumber;
const int CMessageS2GJoinOnTimeOpenBattleRequest::kPosYFieldNumber;
const int CMessageS2GJoinOnTimeOpenBattleRequest::kLevelFieldNumber;
#endif  // !_MSC_VER

CMessageS2GJoinOnTimeOpenBattleRequest::CMessageS2GJoinOnTimeOpenBattleRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageS2GJoinOnTimeOpenBattleRequest::InitAsDefaultInstance() {}

CMessageS2GJoinOnTimeOpenBattleRequest::CMessageS2GJoinOnTimeOpenBattleRequest(const CMessageS2GJoinOnTimeOpenBattleRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageS2GJoinOnTimeOpenBattleRequest::SharedCtor() {
  _cached_size_ = 0;
  battleid_ = 0u;
  mapid_ = 0u;
  charid_ = 0u;
  posx_ = 0u;
  posy_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageS2GJoinOnTimeOpenBattleRequest::~CMessageS2GJoinOnTimeOpenBattleRequest() {
  SharedDtor();
}

void CMessageS2GJoinOnTimeOpenBattleRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageS2GJoinOnTimeOpenBattleRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageS2GJoinOnTimeOpenBattleRequest_descriptor_;
}

const CMessageS2GJoinOnTimeOpenBattleRequest& CMessageS2GJoinOnTimeOpenBattleRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageS2GJoinOnTimeOpenBattleRequest* CMessageS2GJoinOnTimeOpenBattleRequest::default_instance_ = NULL;

CMessageS2GJoinOnTimeOpenBattleRequest* CMessageS2GJoinOnTimeOpenBattleRequest::New() const {
  return new CMessageS2GJoinOnTimeOpenBattleRequest;
}

void CMessageS2GJoinOnTimeOpenBattleRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battleid_ = 0u;
    mapid_ = 0u;
    charid_ = 0u;
    posx_ = 0u;
    posy_ = 0u;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageS2GJoinOnTimeOpenBattleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 BattleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &battleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_PosX;
        break;
      }
      
      // optional uint32 PosX = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosX:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posx_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_PosY;
        break;
      }
      
      // optional uint32 PosY = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posy_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageS2GJoinOnTimeOpenBattleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageS2GJoinOnTimeOpenBattleRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 BattleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->battleid(), output);
  }
  
  // optional uint32 MapID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->mapid(), output);
  }
  
  // optional uint32 CharID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->charid(), output);
  }
  
  // optional uint32 PosX = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->posx(), output);
  }
  
  // optional uint32 PosY = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->posy(), output);
  }
  
  // optional uint32 Level = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageS2GJoinOnTimeOpenBattleRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 BattleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->battleid(), target);
  }
  
  // optional uint32 MapID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->mapid(), target);
  }
  
  // optional uint32 CharID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->charid(), target);
  }
  
  // optional uint32 PosX = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->posx(), target);
  }
  
  // optional uint32 PosY = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->posy(), target);
  }
  
  // optional uint32 Level = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageS2GJoinOnTimeOpenBattleRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BattleID = 1;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->battleid());
    }
    
    // optional uint32 MapID = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 CharID = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 PosX = 4;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posx());
    }
    
    // optional uint32 PosY = 5;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posy());
    }
    
    // optional uint32 Level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageS2GJoinOnTimeOpenBattleRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageS2GJoinOnTimeOpenBattleRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageS2GJoinOnTimeOpenBattleRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageS2GJoinOnTimeOpenBattleRequest::MergeFrom(const CMessageS2GJoinOnTimeOpenBattleRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_battleid(from.battleid());
    }
    if (from._has_bit(1)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(2)) {
      set_charid(from.charid());
    }
    if (from._has_bit(3)) {
      set_posx(from.posx());
    }
    if (from._has_bit(4)) {
      set_posy(from.posy());
    }
    if (from._has_bit(5)) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageS2GJoinOnTimeOpenBattleRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageS2GJoinOnTimeOpenBattleRequest::CopyFrom(const CMessageS2GJoinOnTimeOpenBattleRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageS2GJoinOnTimeOpenBattleRequest::Swap(CMessageS2GJoinOnTimeOpenBattleRequest* other) {
  if (other != this) {
    std::swap(battleid_, other->battleid_);
    std::swap(mapid_, other->mapid_);
    std::swap(charid_, other->charid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageS2GJoinOnTimeOpenBattleRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageS2GJoinOnTimeOpenBattleRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageS2GJoinOnTimeOpenBattleRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageS2GJoinOnTimeOpenBattleRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageSyncGTAndLWNotify::kGTInfoFieldNumber;
const int CMessageSyncGTAndLWNotify::kLWInfoFieldNumber;
#endif  // !_MSC_VER

CMessageSyncGTAndLWNotify::CMessageSyncGTAndLWNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageSyncGTAndLWNotify::InitAsDefaultInstance() {}

CMessageSyncGTAndLWNotify::CMessageSyncGTAndLWNotify(const CMessageSyncGTAndLWNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageSyncGTAndLWNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageSyncGTAndLWNotify::~CMessageSyncGTAndLWNotify() {
  SharedDtor();
}

void CMessageSyncGTAndLWNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageSyncGTAndLWNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageSyncGTAndLWNotify_descriptor_;
}

const CMessageSyncGTAndLWNotify& CMessageSyncGTAndLWNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageSyncGTAndLWNotify* CMessageSyncGTAndLWNotify::default_instance_ = NULL;

CMessageSyncGTAndLWNotify* CMessageSyncGTAndLWNotify::New() const {
  return new CMessageSyncGTAndLWNotify;
}

void CMessageSyncGTAndLWNotify::Clear() {
  gtinfo_.Clear();
  lwinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageSyncGTAndLWNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .GTAndLWInfo GTInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_GTInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_gtinfo()));
        if (input->ExpectTag(10)) goto parse_GTInfo;
        if (input->ExpectTag(18)) goto parse_LWInfo;
        break;
      }
      
      // repeated .GTAndLWInfo LWInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_LWInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_lwinfo()));
        if (input->ExpectTag(18)) goto parse_LWInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageSyncGTAndLWNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageSyncGTAndLWNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .GTAndLWInfo GTInfo = 1;
  for (int i = 0; i < this->gtinfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->gtinfo(i), output);
  }
  
  // repeated .GTAndLWInfo LWInfo = 2;
  for (int i = 0; i < this->lwinfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->lwinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageSyncGTAndLWNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GTAndLWInfo GTInfo = 1;
  for (int i = 0; i < this->gtinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->gtinfo(i), target);
  }
  
  // repeated .GTAndLWInfo LWInfo = 2;
  for (int i = 0; i < this->lwinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->lwinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageSyncGTAndLWNotify::ByteSize() const {
  int total_size = 0;
  
  // repeated .GTAndLWInfo GTInfo = 1;
  total_size += 1 * this->gtinfo_size();
  for (int i = 0; i < this->gtinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->gtinfo(i));
  }
  
  // repeated .GTAndLWInfo LWInfo = 2;
  total_size += 1 * this->lwinfo_size();
  for (int i = 0; i < this->lwinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->lwinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageSyncGTAndLWNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageSyncGTAndLWNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageSyncGTAndLWNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageSyncGTAndLWNotify::MergeFrom(const CMessageSyncGTAndLWNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  gtinfo_.MergeFrom(from.gtinfo_);
  lwinfo_.MergeFrom(from.lwinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageSyncGTAndLWNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSyncGTAndLWNotify::CopyFrom(const CMessageSyncGTAndLWNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSyncGTAndLWNotify::Swap(CMessageSyncGTAndLWNotify* other) {
  if (other != this) {
    gtinfo_.Swap(&other->gtinfo_);
    lwinfo_.Swap(&other->lwinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageSyncGTAndLWNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageSyncGTAndLWNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageSyncGTAndLWNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageSyncGTAndLWNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageS2GBattleClose::kBattleIDFieldNumber;
const int CMessageS2GBattleClose::kMapIDFieldNumber;
#endif  // !_MSC_VER

CMessageS2GBattleClose::CMessageS2GBattleClose()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageS2GBattleClose::InitAsDefaultInstance() {}

CMessageS2GBattleClose::CMessageS2GBattleClose(const CMessageS2GBattleClose& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageS2GBattleClose::SharedCtor() {
  _cached_size_ = 0;
  battleid_ = 0u;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageS2GBattleClose::~CMessageS2GBattleClose() {
  SharedDtor();
}

void CMessageS2GBattleClose::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageS2GBattleClose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageS2GBattleClose_descriptor_;
}

const CMessageS2GBattleClose& CMessageS2GBattleClose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageS2GBattleClose* CMessageS2GBattleClose::default_instance_ = NULL;

CMessageS2GBattleClose* CMessageS2GBattleClose::New() const {
  return new CMessageS2GBattleClose;
}

void CMessageS2GBattleClose::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battleid_ = 0u;
    mapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageS2GBattleClose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 BattleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &battleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageS2GBattleClose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageS2GBattleClose::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 BattleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->battleid(), output);
  }
  
  // optional uint32 MapID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->mapid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageS2GBattleClose::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 BattleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->battleid(), target);
  }
  
  // optional uint32 MapID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->mapid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageS2GBattleClose::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BattleID = 1;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->battleid());
    }
    
    // optional uint32 MapID = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageS2GBattleClose::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageS2GBattleClose* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageS2GBattleClose*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageS2GBattleClose::MergeFrom(const CMessageS2GBattleClose& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_battleid(from.battleid());
    }
    if (from._has_bit(1)) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageS2GBattleClose::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageS2GBattleClose::CopyFrom(const CMessageS2GBattleClose& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageS2GBattleClose::Swap(CMessageS2GBattleClose* other) {
  if (other != this) {
    std::swap(battleid_, other->battleid_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageS2GBattleClose::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageS2GBattleClose::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageS2GBattleClose::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageS2GBattleClose_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageS2GIntoCorpsBossRepetion::kBattleIDFieldNumber;
const int CMessageS2GIntoCorpsBossRepetion::kMapIDFieldNumber;
const int CMessageS2GIntoCorpsBossRepetion::kCharIDFieldNumber;
const int CMessageS2GIntoCorpsBossRepetion::kCorpsIDFieldNumber;
const int CMessageS2GIntoCorpsBossRepetion::kPostXFieldNumber;
const int CMessageS2GIntoCorpsBossRepetion::kPostYFieldNumber;
#endif  // !_MSC_VER

CMessageS2GIntoCorpsBossRepetion::CMessageS2GIntoCorpsBossRepetion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageS2GIntoCorpsBossRepetion::InitAsDefaultInstance() {}

CMessageS2GIntoCorpsBossRepetion::CMessageS2GIntoCorpsBossRepetion(const CMessageS2GIntoCorpsBossRepetion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageS2GIntoCorpsBossRepetion::SharedCtor() {
  _cached_size_ = 0;
  battleid_ = 0u;
  mapid_ = 0u;
  charid_ = 0u;
  corpsid_ = 0u;
  postx_ = 0u;
  posty_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageS2GIntoCorpsBossRepetion::~CMessageS2GIntoCorpsBossRepetion() {
  SharedDtor();
}

void CMessageS2GIntoCorpsBossRepetion::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageS2GIntoCorpsBossRepetion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageS2GIntoCorpsBossRepetion_descriptor_;
}

const CMessageS2GIntoCorpsBossRepetion& CMessageS2GIntoCorpsBossRepetion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageS2GIntoCorpsBossRepetion* CMessageS2GIntoCorpsBossRepetion::default_instance_ = NULL;

CMessageS2GIntoCorpsBossRepetion* CMessageS2GIntoCorpsBossRepetion::New() const {
  return new CMessageS2GIntoCorpsBossRepetion;
}

void CMessageS2GIntoCorpsBossRepetion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battleid_ = 0u;
    mapid_ = 0u;
    charid_ = 0u;
    corpsid_ = 0u;
    postx_ = 0u;
    posty_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageS2GIntoCorpsBossRepetion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 BattleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &battleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_CorpsID;
        break;
      }
      
      // optional uint32 CorpsID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_PostX;
        break;
      }
      
      // optional uint32 PostX = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PostX:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &postx_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_PostY;
        break;
      }
      
      // optional uint32 PostY = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PostY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posty_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageS2GIntoCorpsBossRepetion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageS2GIntoCorpsBossRepetion::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 BattleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->battleid(), output);
  }
  
  // optional uint32 MapID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->mapid(), output);
  }
  
  // optional uint32 CharID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->charid(), output);
  }
  
  // optional uint32 CorpsID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->corpsid(), output);
  }
  
  // optional uint32 PostX = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->postx(), output);
  }
  
  // optional uint32 PostY = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->posty(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageS2GIntoCorpsBossRepetion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 BattleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->battleid(), target);
  }
  
  // optional uint32 MapID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->mapid(), target);
  }
  
  // optional uint32 CharID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->charid(), target);
  }
  
  // optional uint32 CorpsID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->corpsid(), target);
  }
  
  // optional uint32 PostX = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->postx(), target);
  }
  
  // optional uint32 PostY = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->posty(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageS2GIntoCorpsBossRepetion::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BattleID = 1;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->battleid());
    }
    
    // optional uint32 MapID = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 CharID = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 CorpsID = 4;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
    // optional uint32 PostX = 5;
    if (has_postx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->postx());
    }
    
    // optional uint32 PostY = 6;
    if (has_posty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posty());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageS2GIntoCorpsBossRepetion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageS2GIntoCorpsBossRepetion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageS2GIntoCorpsBossRepetion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageS2GIntoCorpsBossRepetion::MergeFrom(const CMessageS2GIntoCorpsBossRepetion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_battleid(from.battleid());
    }
    if (from._has_bit(1)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(2)) {
      set_charid(from.charid());
    }
    if (from._has_bit(3)) {
      set_corpsid(from.corpsid());
    }
    if (from._has_bit(4)) {
      set_postx(from.postx());
    }
    if (from._has_bit(5)) {
      set_posty(from.posty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageS2GIntoCorpsBossRepetion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageS2GIntoCorpsBossRepetion::CopyFrom(const CMessageS2GIntoCorpsBossRepetion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageS2GIntoCorpsBossRepetion::Swap(CMessageS2GIntoCorpsBossRepetion* other) {
  if (other != this) {
    std::swap(battleid_, other->battleid_);
    std::swap(mapid_, other->mapid_);
    std::swap(charid_, other->charid_);
    std::swap(corpsid_, other->corpsid_);
    std::swap(postx_, other->postx_);
    std::swap(posty_, other->posty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageS2GIntoCorpsBossRepetion::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageS2GIntoCorpsBossRepetion::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageS2GIntoCorpsBossRepetion::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageS2GIntoCorpsBossRepetion_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessgeS2GEndCorpsBossRepetion::kBattleIDFieldNumber;
const int CMessgeS2GEndCorpsBossRepetion::kMapIDFieldNumber;
const int CMessgeS2GEndCorpsBossRepetion::kCorpsIDFieldNumber;
#endif  // !_MSC_VER

CMessgeS2GEndCorpsBossRepetion::CMessgeS2GEndCorpsBossRepetion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessgeS2GEndCorpsBossRepetion::InitAsDefaultInstance() {}

CMessgeS2GEndCorpsBossRepetion::CMessgeS2GEndCorpsBossRepetion(const CMessgeS2GEndCorpsBossRepetion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessgeS2GEndCorpsBossRepetion::SharedCtor() {
  _cached_size_ = 0;
  battleid_ = 0u;
  mapid_ = 0u;
  corpsid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessgeS2GEndCorpsBossRepetion::~CMessgeS2GEndCorpsBossRepetion() {
  SharedDtor();
}

void CMessgeS2GEndCorpsBossRepetion::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessgeS2GEndCorpsBossRepetion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessgeS2GEndCorpsBossRepetion_descriptor_;
}

const CMessgeS2GEndCorpsBossRepetion& CMessgeS2GEndCorpsBossRepetion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessgeS2GEndCorpsBossRepetion* CMessgeS2GEndCorpsBossRepetion::default_instance_ = NULL;

CMessgeS2GEndCorpsBossRepetion* CMessgeS2GEndCorpsBossRepetion::New() const {
  return new CMessgeS2GEndCorpsBossRepetion;
}

void CMessgeS2GEndCorpsBossRepetion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battleid_ = 0u;
    mapid_ = 0u;
    corpsid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessgeS2GEndCorpsBossRepetion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 BattleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &battleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_CorpsID;
        break;
      }
      
      // optional uint32 CorpsID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessgeS2GEndCorpsBossRepetion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessgeS2GEndCorpsBossRepetion::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 BattleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->battleid(), output);
  }
  
  // optional uint32 MapID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->mapid(), output);
  }
  
  // optional uint32 CorpsID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->corpsid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessgeS2GEndCorpsBossRepetion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 BattleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->battleid(), target);
  }
  
  // optional uint32 MapID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->mapid(), target);
  }
  
  // optional uint32 CorpsID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->corpsid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessgeS2GEndCorpsBossRepetion::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BattleID = 1;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->battleid());
    }
    
    // optional uint32 MapID = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 CorpsID = 3;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessgeS2GEndCorpsBossRepetion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessgeS2GEndCorpsBossRepetion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessgeS2GEndCorpsBossRepetion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessgeS2GEndCorpsBossRepetion::MergeFrom(const CMessgeS2GEndCorpsBossRepetion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_battleid(from.battleid());
    }
    if (from._has_bit(1)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(2)) {
      set_corpsid(from.corpsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessgeS2GEndCorpsBossRepetion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessgeS2GEndCorpsBossRepetion::CopyFrom(const CMessgeS2GEndCorpsBossRepetion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessgeS2GEndCorpsBossRepetion::Swap(CMessgeS2GEndCorpsBossRepetion* other) {
  if (other != this) {
    std::swap(battleid_, other->battleid_);
    std::swap(mapid_, other->mapid_);
    std::swap(corpsid_, other->corpsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessgeS2GEndCorpsBossRepetion::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessgeS2GEndCorpsBossRepetion::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessgeS2GEndCorpsBossRepetion::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessgeS2GEndCorpsBossRepetion_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBGroupTasks::kTaskIDFieldNumber;
const int PBGroupTasks::kTaskStateFieldNumber;
#endif  // !_MSC_VER

PBGroupTasks::PBGroupTasks()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGroupTasks::InitAsDefaultInstance() {}

PBGroupTasks::PBGroupTasks(const PBGroupTasks& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGroupTasks::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  taskstate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGroupTasks::~PBGroupTasks() {
  SharedDtor();
}

void PBGroupTasks::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBGroupTasks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGroupTasks_descriptor_;
}

const PBGroupTasks& PBGroupTasks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

PBGroupTasks* PBGroupTasks::default_instance_ = NULL;

PBGroupTasks* PBGroupTasks::New() const {
  return new PBGroupTasks;
}

void PBGroupTasks::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0u;
    taskstate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGroupTasks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TaskID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_TaskState;
        break;
      }
      
      // optional uint32 TaskState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TaskState:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskstate_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGroupTasks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBGroupTasks::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->taskid(), output);
  }
  
  // optional uint32 TaskState = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->taskstate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGroupTasks::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->taskid(), target);
  }
  
  // optional uint32 TaskState = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->taskstate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGroupTasks::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskid());
    }
    
    // optional uint32 TaskState = 2;
    if (has_taskstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskstate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBGroupTasks::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGroupTasks* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGroupTasks*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGroupTasks::MergeFrom(const PBGroupTasks& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_taskid(from.taskid());
    }
    if (from._has_bit(1)) {
      set_taskstate(from.taskstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGroupTasks::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGroupTasks::CopyFrom(const PBGroupTasks& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGroupTasks::Swap(PBGroupTasks* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(taskstate_, other->taskstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBGroupTasks::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBGroupTasks::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBGroupTasks::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBGroupTasks_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGateCheckGroupPublishRequest::kCharIDFieldNumber;
const int CMessageGateCheckGroupPublishRequest::kPublishTypeFieldNumber;
#endif  // !_MSC_VER

CMessageGateCheckGroupPublishRequest::CMessageGateCheckGroupPublishRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGateCheckGroupPublishRequest::InitAsDefaultInstance() {}

CMessageGateCheckGroupPublishRequest::CMessageGateCheckGroupPublishRequest(const CMessageGateCheckGroupPublishRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGateCheckGroupPublishRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  publishtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGateCheckGroupPublishRequest::~CMessageGateCheckGroupPublishRequest() {
  SharedDtor();
}

void CMessageGateCheckGroupPublishRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGateCheckGroupPublishRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGateCheckGroupPublishRequest_descriptor_;
}

const CMessageGateCheckGroupPublishRequest& CMessageGateCheckGroupPublishRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGateCheckGroupPublishRequest* CMessageGateCheckGroupPublishRequest::default_instance_ = NULL;

CMessageGateCheckGroupPublishRequest* CMessageGateCheckGroupPublishRequest::New() const {
  return new CMessageGateCheckGroupPublishRequest;
}

void CMessageGateCheckGroupPublishRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    publishtype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGateCheckGroupPublishRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_PublishType;
        break;
      }
      
      // optional uint32 PublishType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PublishType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &publishtype_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGateCheckGroupPublishRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGateCheckGroupPublishRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 PublishType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->publishtype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGateCheckGroupPublishRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 PublishType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->publishtype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGateCheckGroupPublishRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 PublishType = 2;
    if (has_publishtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->publishtype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGateCheckGroupPublishRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGateCheckGroupPublishRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGateCheckGroupPublishRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGateCheckGroupPublishRequest::MergeFrom(const CMessageGateCheckGroupPublishRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_publishtype(from.publishtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGateCheckGroupPublishRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGateCheckGroupPublishRequest::CopyFrom(const CMessageGateCheckGroupPublishRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGateCheckGroupPublishRequest::Swap(CMessageGateCheckGroupPublishRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(publishtype_, other->publishtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGateCheckGroupPublishRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGateCheckGroupPublishRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGateCheckGroupPublishRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGateCheckGroupPublishRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGatePublishGroupRequest::kCharIDFieldNumber;
const int CMessageGatePublishGroupRequest::kTaskIDFieldNumber;
const int CMessageGatePublishGroupRequest::kPublishTypeFieldNumber;
const int CMessageGatePublishGroupRequest::kTaskStateFieldNumber;
const int CMessageGatePublishGroupRequest::kPayGroupMoneyFieldNumber;
#endif  // !_MSC_VER

CMessageGatePublishGroupRequest::CMessageGatePublishGroupRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGatePublishGroupRequest::InitAsDefaultInstance() {}

CMessageGatePublishGroupRequest::CMessageGatePublishGroupRequest(const CMessageGatePublishGroupRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGatePublishGroupRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  taskid_ = 0u;
  publishtype_ = 0u;
  taskstate_ = 0u;
  paygroupmoney_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGatePublishGroupRequest::~CMessageGatePublishGroupRequest() {
  SharedDtor();
}

void CMessageGatePublishGroupRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGatePublishGroupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGatePublishGroupRequest_descriptor_;
}

const CMessageGatePublishGroupRequest& CMessageGatePublishGroupRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGatePublishGroupRequest* CMessageGatePublishGroupRequest::default_instance_ = NULL;

CMessageGatePublishGroupRequest* CMessageGatePublishGroupRequest::New() const {
  return new CMessageGatePublishGroupRequest;
}

void CMessageGatePublishGroupRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    taskid_ = 0u;
    publishtype_ = 0u;
    taskstate_ = 0u;
    paygroupmoney_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGatePublishGroupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_TaskID;
        break;
      }
      
      // optional uint32 TaskID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TaskID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_PublishType;
        break;
      }
      
      // optional uint32 PublishType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PublishType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &publishtype_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_TaskState;
        break;
      }
      
      // optional uint32 TaskState = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TaskState:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskstate_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_PayGroupMoney;
        break;
      }
      
      // optional uint32 PayGroupMoney = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PayGroupMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &paygroupmoney_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGatePublishGroupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGatePublishGroupRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 TaskID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->taskid(), output);
  }
  
  // optional uint32 PublishType = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->publishtype(), output);
  }
  
  // optional uint32 TaskState = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->taskstate(), output);
  }
  
  // optional uint32 PayGroupMoney = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->paygroupmoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGatePublishGroupRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 TaskID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->taskid(), target);
  }
  
  // optional uint32 PublishType = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->publishtype(), target);
  }
  
  // optional uint32 TaskState = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->taskstate(), target);
  }
  
  // optional uint32 PayGroupMoney = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->paygroupmoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGatePublishGroupRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 TaskID = 2;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskid());
    }
    
    // optional uint32 PublishType = 3;
    if (has_publishtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->publishtype());
    }
    
    // optional uint32 TaskState = 4;
    if (has_taskstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskstate());
    }
    
    // optional uint32 PayGroupMoney = 5;
    if (has_paygroupmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->paygroupmoney());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGatePublishGroupRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGatePublishGroupRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGatePublishGroupRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGatePublishGroupRequest::MergeFrom(const CMessageGatePublishGroupRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_taskid(from.taskid());
    }
    if (from._has_bit(2)) {
      set_publishtype(from.publishtype());
    }
    if (from._has_bit(3)) {
      set_taskstate(from.taskstate());
    }
    if (from._has_bit(4)) {
      set_paygroupmoney(from.paygroupmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGatePublishGroupRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGatePublishGroupRequest::CopyFrom(const CMessageGatePublishGroupRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGatePublishGroupRequest::Swap(CMessageGatePublishGroupRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(taskid_, other->taskid_);
    std::swap(publishtype_, other->publishtype_);
    std::swap(taskstate_, other->taskstate_);
    std::swap(paygroupmoney_, other->paygroupmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGatePublishGroupRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGatePublishGroupRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGatePublishGroupRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGatePublishGroupRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBGroupInfo::kGroupIDFieldNumber;
const int PBGroupInfo::kGroupLevelFieldNumber;
const int PBGroupInfo::kGroupMoneyFieldNumber;
const int PBGroupInfo::kPlayerPositionFieldNumber;
#endif  // !_MSC_VER

PBGroupInfo::PBGroupInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGroupInfo::InitAsDefaultInstance() {}

PBGroupInfo::PBGroupInfo(const PBGroupInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGroupInfo::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = 0u;
  grouplevel_ = 0u;
  groupmoney_ = 0u;
  playerposition_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGroupInfo::~PBGroupInfo() {
  SharedDtor();
}

void PBGroupInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBGroupInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGroupInfo_descriptor_;
}

const PBGroupInfo& PBGroupInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

PBGroupInfo* PBGroupInfo::default_instance_ = NULL;

PBGroupInfo* PBGroupInfo::New() const {
  return new PBGroupInfo;
}

void PBGroupInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = 0u;
    grouplevel_ = 0u;
    groupmoney_ = 0u;
    playerposition_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGroupInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 GroupID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &groupid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_GroupLevel;
        break;
      }
      
      // optional uint32 GroupLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GroupLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &grouplevel_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_GroupMoney;
        break;
      }
      
      // optional uint32 GroupMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GroupMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &groupmoney_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_PlayerPosition;
        break;
      }
      
      // optional uint32 PlayerPosition = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PlayerPosition:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playerposition_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGroupInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBGroupInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 GroupID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->groupid(), output);
  }
  
  // optional uint32 GroupLevel = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->grouplevel(), output);
  }
  
  // optional uint32 GroupMoney = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->groupmoney(), output);
  }
  
  // optional uint32 PlayerPosition = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->playerposition(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGroupInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 GroupID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->groupid(), target);
  }
  
  // optional uint32 GroupLevel = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->grouplevel(), target);
  }
  
  // optional uint32 GroupMoney = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->groupmoney(), target);
  }
  
  // optional uint32 PlayerPosition = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->playerposition(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGroupInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 GroupID = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->groupid());
    }
    
    // optional uint32 GroupLevel = 2;
    if (has_grouplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->grouplevel());
    }
    
    // optional uint32 GroupMoney = 3;
    if (has_groupmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->groupmoney());
    }
    
    // optional uint32 PlayerPosition = 4;
    if (has_playerposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playerposition());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBGroupInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGroupInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGroupInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGroupInfo::MergeFrom(const PBGroupInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_groupid(from.groupid());
    }
    if (from._has_bit(1)) {
      set_grouplevel(from.grouplevel());
    }
    if (from._has_bit(2)) {
      set_groupmoney(from.groupmoney());
    }
    if (from._has_bit(3)) {
      set_playerposition(from.playerposition());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGroupInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGroupInfo::CopyFrom(const PBGroupInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGroupInfo::Swap(PBGroupInfo* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(grouplevel_, other->grouplevel_);
    std::swap(groupmoney_, other->groupmoney_);
    std::swap(playerposition_, other->playerposition_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBGroupInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBGroupInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBGroupInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBGroupInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGateCheckGroupPublishResponse::kCharIDFieldNumber;
const int CMessageGateCheckGroupPublishResponse::kPublishTypeFieldNumber;
const int CMessageGateCheckGroupPublishResponse::kTasksFieldNumber;
const int CMessageGateCheckGroupPublishResponse::kGroupInfoFieldNumber;
const int CMessageGateCheckGroupPublishResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMessageGateCheckGroupPublishResponse::CMessageGateCheckGroupPublishResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGateCheckGroupPublishResponse::InitAsDefaultInstance() {  groupinfo_ = const_cast< ::PBGroupInfo*>(&::PBGroupInfo::default_instance());
}

CMessageGateCheckGroupPublishResponse::CMessageGateCheckGroupPublishResponse(const CMessageGateCheckGroupPublishResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGateCheckGroupPublishResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  publishtype_ = 0u;
  groupinfo_ = NULL;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGateCheckGroupPublishResponse::~CMessageGateCheckGroupPublishResponse() {
  SharedDtor();
}

void CMessageGateCheckGroupPublishResponse::SharedDtor() {
  if (this != default_instance_) {
    delete groupinfo_;
  }
}

const ::google::protobuf::Descriptor* CMessageGateCheckGroupPublishResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGateCheckGroupPublishResponse_descriptor_;
}

const CMessageGateCheckGroupPublishResponse& CMessageGateCheckGroupPublishResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGateCheckGroupPublishResponse* CMessageGateCheckGroupPublishResponse::default_instance_ = NULL;

CMessageGateCheckGroupPublishResponse* CMessageGateCheckGroupPublishResponse::New() const {
  return new CMessageGateCheckGroupPublishResponse;
}

void CMessageGateCheckGroupPublishResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    publishtype_ = 0u;
    if (_has_bit(3)) {
      if (groupinfo_ != NULL) groupinfo_->::PBGroupInfo::Clear();
    }
    result_ = 0u;
  }
  tasks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGateCheckGroupPublishResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_PublishType;
        break;
      }
      
      // optional uint32 PublishType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PublishType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &publishtype_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_Tasks;
        break;
      }
      
      // repeated .PBGroupTasks Tasks = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Tasks:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_tasks()));
        if (input->ExpectTag(26)) goto parse_Tasks;
        if (input->ExpectTag(34)) goto parse_GroupInfo;
        break;
      }
      
      // optional .PBGroupInfo GroupInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_GroupInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_groupinfo()));
        if (input->ExpectTag(40)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGateCheckGroupPublishResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGateCheckGroupPublishResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 PublishType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->publishtype(), output);
  }
  
  // repeated .PBGroupTasks Tasks = 3;
  for (int i = 0; i < this->tasks_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->tasks(i), output);
  }
  
  // optional .PBGroupInfo GroupInfo = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->groupinfo(), output);
  }
  
  // optional uint32 Result = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGateCheckGroupPublishResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 PublishType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->publishtype(), target);
  }
  
  // repeated .PBGroupTasks Tasks = 3;
  for (int i = 0; i < this->tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->tasks(i), target);
  }
  
  // optional .PBGroupInfo GroupInfo = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(4, this->groupinfo(), target);
  }
  
  // optional uint32 Result = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGateCheckGroupPublishResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 PublishType = 2;
    if (has_publishtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->publishtype());
    }
    
    // optional .PBGroupInfo GroupInfo = 4;
    if (has_groupinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->groupinfo());
    }
    
    // optional uint32 Result = 5;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
  }
  // repeated .PBGroupTasks Tasks = 3;
  total_size += 1 * this->tasks_size();
  for (int i = 0; i < this->tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->tasks(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGateCheckGroupPublishResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGateCheckGroupPublishResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGateCheckGroupPublishResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGateCheckGroupPublishResponse::MergeFrom(const CMessageGateCheckGroupPublishResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  tasks_.MergeFrom(from.tasks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_publishtype(from.publishtype());
    }
    if (from._has_bit(3)) {
      mutable_groupinfo()->::PBGroupInfo::MergeFrom(from.groupinfo());
    }
    if (from._has_bit(4)) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGateCheckGroupPublishResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGateCheckGroupPublishResponse::CopyFrom(const CMessageGateCheckGroupPublishResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGateCheckGroupPublishResponse::Swap(CMessageGateCheckGroupPublishResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(publishtype_, other->publishtype_);
    tasks_.Swap(&other->tasks_);
    std::swap(groupinfo_, other->groupinfo_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGateCheckGroupPublishResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGateCheckGroupPublishResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGateCheckGroupPublishResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGateCheckGroupPublishResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGatePublishGroupResponse::kCharIDFieldNumber;
const int CMessageGatePublishGroupResponse::kTaskIDFieldNumber;
const int CMessageGatePublishGroupResponse::kPublishTypeFieldNumber;
const int CMessageGatePublishGroupResponse::kTaskStateFieldNumber;
const int CMessageGatePublishGroupResponse::kTaskAcionFieldNumber;
const int CMessageGatePublishGroupResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMessageGatePublishGroupResponse::CMessageGatePublishGroupResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGatePublishGroupResponse::InitAsDefaultInstance() {}

CMessageGatePublishGroupResponse::CMessageGatePublishGroupResponse(const CMessageGatePublishGroupResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGatePublishGroupResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  taskid_ = 0u;
  publishtype_ = 0u;
  taskstate_ = 0u;
  taskacion_ = 0u;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGatePublishGroupResponse::~CMessageGatePublishGroupResponse() {
  SharedDtor();
}

void CMessageGatePublishGroupResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGatePublishGroupResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGatePublishGroupResponse_descriptor_;
}

const CMessageGatePublishGroupResponse& CMessageGatePublishGroupResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servermessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGatePublishGroupResponse* CMessageGatePublishGroupResponse::default_instance_ = NULL;

CMessageGatePublishGroupResponse* CMessageGatePublishGroupResponse::New() const {
  return new CMessageGatePublishGroupResponse;
}

void CMessageGatePublishGroupResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    taskid_ = 0u;
    publishtype_ = 0u;
    taskstate_ = 0u;
    taskacion_ = 0u;
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGatePublishGroupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_TaskID;
        break;
      }
      
      // optional uint32 TaskID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TaskID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_PublishType;
        break;
      }
      
      // optional uint32 PublishType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PublishType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &publishtype_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_TaskState;
        break;
      }
      
      // optional uint32 TaskState = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TaskState:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskstate_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_TaskAcion;
        break;
      }
      
      // optional uint32 TaskAcion = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TaskAcion:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskacion_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGatePublishGroupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGatePublishGroupResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 TaskID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->taskid(), output);
  }
  
  // optional uint32 PublishType = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->publishtype(), output);
  }
  
  // optional uint32 TaskState = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->taskstate(), output);
  }
  
  // optional uint32 TaskAcion = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->taskacion(), output);
  }
  
  // optional uint32 Result = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGatePublishGroupResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 TaskID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->taskid(), target);
  }
  
  // optional uint32 PublishType = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->publishtype(), target);
  }
  
  // optional uint32 TaskState = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->taskstate(), target);
  }
  
  // optional uint32 TaskAcion = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->taskacion(), target);
  }
  
  // optional uint32 Result = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGatePublishGroupResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 TaskID = 2;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskid());
    }
    
    // optional uint32 PublishType = 3;
    if (has_publishtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->publishtype());
    }
    
    // optional uint32 TaskState = 4;
    if (has_taskstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskstate());
    }
    
    // optional uint32 TaskAcion = 5;
    if (has_taskacion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskacion());
    }
    
    // optional uint32 Result = 6;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGatePublishGroupResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGatePublishGroupResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGatePublishGroupResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGatePublishGroupResponse::MergeFrom(const CMessageGatePublishGroupResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_taskid(from.taskid());
    }
    if (from._has_bit(2)) {
      set_publishtype(from.publishtype());
    }
    if (from._has_bit(3)) {
      set_taskstate(from.taskstate());
    }
    if (from._has_bit(4)) {
      set_taskacion(from.taskacion());
    }
    if (from._has_bit(5)) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGatePublishGroupResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGatePublishGroupResponse::CopyFrom(const CMessageGatePublishGroupResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGatePublishGroupResponse::Swap(CMessageGatePublishGroupResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(taskid_, other->taskid_);
    std::swap(publishtype_, other->publishtype_);
    std::swap(taskstate_, other->taskstate_);
    std::swap(taskacion_, other->taskacion_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGatePublishGroupResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGatePublishGroupResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGatePublishGroupResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGatePublishGroupResponse_reflection_;
}
