// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "globalserver_pb.hxx.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>
#ifdef LEAK_CHK_DEBUG_NEW
#include "debug_new.h"
#endif

namespace {

const ::google::protobuf::Descriptor* CMapData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMapData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGlobalTeleportRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGlobalTeleportRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGlobalTeleportResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGlobalTeleportResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeServerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeServerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeServerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeServerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCreateRepetionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCreateRepetionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCreateRepetionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCreateRepetionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePlayerApplyWarRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePlayerApplyWarRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePlayerApplyWarResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePlayerApplyWarResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageWarEnableNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageWarEnableNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePlayerLeaveWarNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePlayerLeaveWarNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageWarEndNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageWarEndNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageKickGlobalPlayerNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageKickGlobalPlayerNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageKickGlobalPlayerACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageKickGlobalPlayerACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBWorldPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBWorldPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageSyncGlobalPlayeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageSyncGlobalPlayeNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EMGlobalServerMessageID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_globalserver_5fpb_2ehxx() {
  protobuf_AddDesc_globalserver_5fpb_2ehxx();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "globalserver_pb.hxx");
  GOOGLE_CHECK(file != NULL);
  CMapData_descriptor_ = file->message_type(0);
  static const int CMapData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMapData, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMapData, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMapData, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMapData, lineid_),
  };
  CMapData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMapData_descriptor_,
      CMapData::default_instance_,
      CMapData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMapData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMapData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMapData));
  CMessageGlobalTeleportRequest_descriptor_ = file->message_type(1);
  static const int CMessageGlobalTeleportRequest_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGlobalTeleportRequest, servertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGlobalTeleportRequest, worldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGlobalTeleportRequest, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGlobalTeleportRequest, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGlobalTeleportRequest, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGlobalTeleportRequest, originalserverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGlobalTeleportRequest, originalworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGlobalTeleportRequest, teletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGlobalTeleportRequest, mapdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGlobalTeleportRequest, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGlobalTeleportRequest, mac_),
  };
  CMessageGlobalTeleportRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGlobalTeleportRequest_descriptor_,
      CMessageGlobalTeleportRequest::default_instance_,
      CMessageGlobalTeleportRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGlobalTeleportRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGlobalTeleportRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGlobalTeleportRequest));
  CMessageGlobalTeleportResponse_descriptor_ = file->message_type(2);
  static const int CMessageGlobalTeleportResponse_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGlobalTeleportResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGlobalTeleportResponse, addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGlobalTeleportResponse, logintoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGlobalTeleportResponse, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGlobalTeleportResponse, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGlobalTeleportResponse, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGlobalTeleportResponse, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGlobalTeleportResponse, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGlobalTeleportResponse, reptionkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGlobalTeleportResponse, teamflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGlobalTeleportResponse, repetionindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGlobalTeleportResponse, sceneworldid_),
  };
  CMessageGlobalTeleportResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGlobalTeleportResponse_descriptor_,
      CMessageGlobalTeleportResponse::default_instance_,
      CMessageGlobalTeleportResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGlobalTeleportResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGlobalTeleportResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGlobalTeleportResponse));
  CMessageChangeServerRequest_descriptor_ = file->message_type(3);
  static const int CMessageChangeServerRequest_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeServerRequest, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeServerRequest, worldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeServerRequest, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeServerRequest, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeServerRequest, currentworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeServerRequest, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeServerRequest, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeServerRequest, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeServerRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeServerRequest, serverkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeServerRequest, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeServerRequest, teamflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeServerRequest, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeServerRequest, mac_),
  };
  CMessageChangeServerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeServerRequest_descriptor_,
      CMessageChangeServerRequest::default_instance_,
      CMessageChangeServerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeServerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeServerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeServerRequest));
  CMessageChangeServerResponse_descriptor_ = file->message_type(4);
  static const int CMessageChangeServerResponse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeServerResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeServerResponse, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeServerResponse, worldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeServerResponse, serverkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeServerResponse, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeServerResponse, addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeServerResponse, logintoken_),
  };
  CMessageChangeServerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeServerResponse_descriptor_,
      CMessageChangeServerResponse::default_instance_,
      CMessageChangeServerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeServerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeServerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeServerResponse));
  CMessageCreateRepetionRequest_descriptor_ = file->message_type(5);
  static const int CMessageCreateRepetionRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateRepetionRequest, reptionindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateRepetionRequest, regkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateRepetionRequest, repetionlevel_),
  };
  CMessageCreateRepetionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCreateRepetionRequest_descriptor_,
      CMessageCreateRepetionRequest::default_instance_,
      CMessageCreateRepetionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateRepetionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateRepetionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCreateRepetionRequest));
  CMessageCreateRepetionResponse_descriptor_ = file->message_type(6);
  static const int CMessageCreateRepetionResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateRepetionResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateRepetionResponse, regkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateRepetionResponse, reptionkey_),
  };
  CMessageCreateRepetionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCreateRepetionResponse_descriptor_,
      CMessageCreateRepetionResponse::default_instance_,
      CMessageCreateRepetionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateRepetionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateRepetionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCreateRepetionResponse));
  CMessagePlayerApplyWarRequest_descriptor_ = file->message_type(7);
  static const int CMessagePlayerApplyWarRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerApplyWarRequest, worldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerApplyWarRequest, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerApplyWarRequest, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerApplyWarRequest, rolelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerApplyWarRequest, repetionindex_),
  };
  CMessagePlayerApplyWarRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePlayerApplyWarRequest_descriptor_,
      CMessagePlayerApplyWarRequest::default_instance_,
      CMessagePlayerApplyWarRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerApplyWarRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerApplyWarRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePlayerApplyWarRequest));
  CMessagePlayerApplyWarResponse_descriptor_ = file->message_type(8);
  static const int CMessagePlayerApplyWarResponse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerApplyWarResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerApplyWarResponse, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerApplyWarResponse, regkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerApplyWarResponse, canstart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerApplyWarResponse, minlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerApplyWarResponse, maxlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerApplyWarResponse, teamflag_),
  };
  CMessagePlayerApplyWarResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePlayerApplyWarResponse_descriptor_,
      CMessagePlayerApplyWarResponse::default_instance_,
      CMessagePlayerApplyWarResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerApplyWarResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerApplyWarResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePlayerApplyWarResponse));
  CMessageWarEnableNotify_descriptor_ = file->message_type(9);
  static const int CMessageWarEnableNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarEnableNotify, warregkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarEnableNotify, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarEnableNotify, teamflag_),
  };
  CMessageWarEnableNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageWarEnableNotify_descriptor_,
      CMessageWarEnableNotify::default_instance_,
      CMessageWarEnableNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarEnableNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarEnableNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageWarEnableNotify));
  CMessagePlayerLeaveWarNotify_descriptor_ = file->message_type(10);
  static const int CMessagePlayerLeaveWarNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerLeaveWarNotify, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerLeaveWarNotify, reason_),
  };
  CMessagePlayerLeaveWarNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePlayerLeaveWarNotify_descriptor_,
      CMessagePlayerLeaveWarNotify::default_instance_,
      CMessagePlayerLeaveWarNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerLeaveWarNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerLeaveWarNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePlayerLeaveWarNotify));
  CMessageWarEndNotify_descriptor_ = file->message_type(11);
  static const int CMessageWarEndNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarEndNotify, reptionkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarEndNotify, warregkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarEndNotify, reason_),
  };
  CMessageWarEndNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageWarEndNotify_descriptor_,
      CMessageWarEndNotify::default_instance_,
      CMessageWarEndNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarEndNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWarEndNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageWarEndNotify));
  CMessageKickGlobalPlayerNotify_descriptor_ = file->message_type(12);
  static const int CMessageKickGlobalPlayerNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickGlobalPlayerNotify, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickGlobalPlayerNotify, reason_),
  };
  CMessageKickGlobalPlayerNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageKickGlobalPlayerNotify_descriptor_,
      CMessageKickGlobalPlayerNotify::default_instance_,
      CMessageKickGlobalPlayerNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickGlobalPlayerNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickGlobalPlayerNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageKickGlobalPlayerNotify));
  CMessageKickGlobalPlayerACK_descriptor_ = file->message_type(13);
  static const int CMessageKickGlobalPlayerACK_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickGlobalPlayerACK, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickGlobalPlayerACK, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickGlobalPlayerACK, roleworldid_),
  };
  CMessageKickGlobalPlayerACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageKickGlobalPlayerACK_descriptor_,
      CMessageKickGlobalPlayerACK::default_instance_,
      CMessageKickGlobalPlayerACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickGlobalPlayerACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickGlobalPlayerACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageKickGlobalPlayerACK));
  PBWorldPlayer_descriptor_ = file->message_type(14);
  static const int PBWorldPlayer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldPlayer, worldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldPlayer, roleid_),
  };
  PBWorldPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBWorldPlayer_descriptor_,
      PBWorldPlayer::default_instance_,
      PBWorldPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBWorldPlayer));
  CMessageSyncGlobalPlayeNotify_descriptor_ = file->message_type(15);
  static const int CMessageSyncGlobalPlayeNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSyncGlobalPlayeNotify, worldplayerlist_),
  };
  CMessageSyncGlobalPlayeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageSyncGlobalPlayeNotify_descriptor_,
      CMessageSyncGlobalPlayeNotify::default_instance_,
      CMessageSyncGlobalPlayeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSyncGlobalPlayeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSyncGlobalPlayeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageSyncGlobalPlayeNotify));
  EMGlobalServerMessageID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_globalserver_5fpb_2ehxx);
}

void protobuf_RegisterTypes() {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMapData_descriptor_, &CMapData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGlobalTeleportRequest_descriptor_, &CMessageGlobalTeleportRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGlobalTeleportResponse_descriptor_, &CMessageGlobalTeleportResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeServerRequest_descriptor_, &CMessageChangeServerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeServerResponse_descriptor_, &CMessageChangeServerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCreateRepetionRequest_descriptor_, &CMessageCreateRepetionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCreateRepetionResponse_descriptor_, &CMessageCreateRepetionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePlayerApplyWarRequest_descriptor_, &CMessagePlayerApplyWarRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePlayerApplyWarResponse_descriptor_, &CMessagePlayerApplyWarResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageWarEnableNotify_descriptor_, &CMessageWarEnableNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePlayerLeaveWarNotify_descriptor_, &CMessagePlayerLeaveWarNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageWarEndNotify_descriptor_, &CMessageWarEndNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageKickGlobalPlayerNotify_descriptor_, &CMessageKickGlobalPlayerNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageKickGlobalPlayerACK_descriptor_, &CMessageKickGlobalPlayerACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBWorldPlayer_descriptor_, &PBWorldPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageSyncGlobalPlayeNotify_descriptor_, &CMessageSyncGlobalPlayeNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_globalserver_5fpb_2ehxx() {
  delete CMapData::default_instance_;
  delete CMapData_reflection_;
  delete CMessageGlobalTeleportRequest::default_instance_;
  delete CMessageGlobalTeleportRequest_reflection_;
  delete CMessageGlobalTeleportResponse::default_instance_;
  delete CMessageGlobalTeleportResponse_reflection_;
  delete CMessageChangeServerRequest::default_instance_;
  delete CMessageChangeServerRequest_reflection_;
  delete CMessageChangeServerResponse::default_instance_;
  delete CMessageChangeServerResponse_reflection_;
  delete CMessageCreateRepetionRequest::default_instance_;
  delete CMessageCreateRepetionRequest_reflection_;
  delete CMessageCreateRepetionResponse::default_instance_;
  delete CMessageCreateRepetionResponse_reflection_;
  delete CMessagePlayerApplyWarRequest::default_instance_;
  delete CMessagePlayerApplyWarRequest_reflection_;
  delete CMessagePlayerApplyWarResponse::default_instance_;
  delete CMessagePlayerApplyWarResponse_reflection_;
  delete CMessageWarEnableNotify::default_instance_;
  delete CMessageWarEnableNotify_reflection_;
  delete CMessagePlayerLeaveWarNotify::default_instance_;
  delete CMessagePlayerLeaveWarNotify_reflection_;
  delete CMessageWarEndNotify::default_instance_;
  delete CMessageWarEndNotify_reflection_;
  delete CMessageKickGlobalPlayerNotify::default_instance_;
  delete CMessageKickGlobalPlayerNotify_reflection_;
  delete CMessageKickGlobalPlayerACK::default_instance_;
  delete CMessageKickGlobalPlayerACK_reflection_;
  delete PBWorldPlayer::default_instance_;
  delete PBWorldPlayer_reflection_;
  delete CMessageSyncGlobalPlayeNotify::default_instance_;
  delete CMessageSyncGlobalPlayeNotify_reflection_;
}

void protobuf_AddDesc_globalserver_5fpb_2ehxx() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  #ifndef _NO_PROTOBUF_STR_
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023globalserver_pb.hxx\"E\n\010CMapData\022\r\n\005Map"
    "ID\030\001 \001(\r\022\014\n\004PosX\030\002 \001(\r\022\014\n\004PosY\030\003 \001(\r\022\016\n\006"
    "LineID\030\004 \001(\r\"\367\001\n\035CMessageGlobalTeleportR"
    "equest\022\022\n\nServerType\030\001 \001(\r\022\017\n\007WorldID\030\002 "
    "\001(\r\022\020\n\010ServerID\030\003 \001(\r\022\016\n\006RoleID\030\004 \001(\r\022\021\n"
    "\tAccountID\030\005 \001(\r\022\030\n\020OriginalServerID\030\006 \001"
    "(\r\022\027\n\017OriginalWorldID\030\007 \001(\r\022\020\n\010TeleType\030"
    "\010 \001(\r\022\032\n\007MapData\030\t \001(\0132\t.CMapData\022\016\n\006Gam"
    "eID\030\n \001(\r\022\013\n\003Mac\030\013 \001(\t\"\361\001\n\036CMessageGloba"
    "lTeleportResponse\022\017\n\007Errcode\030\001 \001(\r\022\014\n\004Ad"
    "dr\030\002 \001(\t\022\022\n\nLoginToken\030\003 \001(\r\022\016\n\006RoleID\030\004"
    " \001(\r\022\016\n\006LineID\030\005 \001(\r\022\r\n\005MapID\030\006 \001(\r\022\014\n\004P"
    "osX\030\007 \001(\r\022\014\n\004PosY\030\010 \001(\r\022\022\n\nReptionKey\030\n "
    "\001(\004\022\020\n\010TeamFlag\030\013 \001(\r\022\025\n\rRepetionIndex\030\014"
    " \001(\r\022\024\n\014SceneWorldID\030\r \001(\r\"\205\002\n\033CMessageC"
    "hangeServerRequest\022\016\n\006RoleID\030\001 \001(\r\022\017\n\007Wo"
    "rldID\030\002 \001(\r\022\020\n\010ServerID\030\003 \001(\r\022\021\n\tAccount"
    "ID\030\004 \001(\r\022\026\n\016CurrentWorldID\030\005 \001(\r\022\r\n\005MapI"
    "D\030\006 \001(\r\022\014\n\004PosX\030\007 \001(\r\022\014\n\004PosY\030\010 \001(\r\022\013\n\003K"
    "ey\030\t \001(\004\022\021\n\tServerKey\030\n \001(\r\022\016\n\006LineID\030\013 "
    "\001(\r\022\020\n\010TeamFlag\030\014 \001(\r\022\016\n\006GameID\030\r \001(\r\022\013\n"
    "\003Mac\030\016 \001(\t\"\227\001\n\034CMessageChangeServerRespo"
    "nse\022\017\n\007Errcode\030\001 \001(\r\022\016\n\006RoleID\030\002 \001(\r\022\017\n\007"
    "WorldID\030\003 \001(\r\022\021\n\tServerKey\030\004 \001(\r\022\020\n\010Serv"
    "erID\030\005 \001(\r\022\014\n\004Addr\030\006 \001(\t\022\022\n\nLoginToken\030\007"
    " \001(\r\"\\\n\035CMessageCreateRepetionRequest\022\024\n"
    "\014ReptionIndex\030\001 \001(\r\022\016\n\006RegKey\030\002 \001(\r\022\025\n\rR"
    "epetionLevel\030\003 \001(\004\"U\n\036CMessageCreateRepe"
    "tionResponse\022\017\n\007Errcode\030\001 \001(\r\022\016\n\006RegKey\030"
    "\002 \001(\r\022\022\n\nReptionKey\030\003 \001(\004\"|\n\035CMessagePla"
    "yerApplyWarRequest\022\017\n\007WorldID\030\001 \001(\r\022\020\n\010S"
    "erverID\030\002 \001(\r\022\016\n\006RoleID\030\003 \001(\r\022\021\n\tRoleLev"
    "el\030\004 \001(\r\022\025\n\rRepetionIndex\030\005 \001(\r\"\231\001\n\036CMes"
    "sagePlayerApplyWarResponse\022\017\n\007Errcode\030\001 "
    "\001(\r\022\016\n\006RoleID\030\002 \001(\r\022\016\n\006RegKey\030\003 \001(\r\022\020\n\010C"
    "anStart\030\004 \001(\r\022\020\n\010MinLevel\030\005 \001(\r\022\020\n\010MaxLe"
    "vel\030\006 \001(\r\022\020\n\010TeamFlag\030\007 \001(\r\"N\n\027CMessageW"
    "arEnableNotify\022\021\n\tWarRegKey\030\001 \001(\r\022\016\n\006Rol"
    "eID\030\002 \001(\r\022\020\n\010TeamFlag\030\003 \001(\r\">\n\034CMessageP"
    "layerLeaveWarNotify\022\016\n\006RoleID\030\001 \001(\r\022\016\n\006R"
    "eason\030\002 \001(\r\"M\n\024CMessageWarEndNotify\022\022\n\nR"
    "eptionKey\030\001 \001(\004\022\021\n\tWarRegKey\030\002 \001(\r\022\016\n\006Re"
    "ason\030\003 \001(\r\"@\n\036CMessageKickGlobalPlayerNo"
    "tify\022\016\n\006RoleID\030\001 \001(\r\022\016\n\006Reason\030\002 \001(\r\"U\n\033"
    "CMessageKickGlobalPlayerACK\022\016\n\006RoleID\030\001 "
    "\001(\r\022\021\n\tAccountID\030\002 \001(\r\022\023\n\013RoleWorldID\030\003 "
    "\001(\r\"0\n\rPBWorldPlayer\022\017\n\007WorldID\030\001 \001(\r\022\016\n"
    "\006RoleID\030\002 \003(\r\"H\n\035CMessageSyncGlobalPlaye"
    "Notify\022\'\n\017WorldPlayerList\030\001 \003(\0132\016.PBWorl"
    "dPlayer*\224\004\n\027EMGlobalServerMessageID\022#\n\035I"
    "D_S2D_REQUEST_GLOBALTELEPORT\020\200\310\003\022$\n\036ID_D"
    "2S_RESPONSE_GLOBALTELEPORT\020\201\310\003\022!\n\033ID_D2G"
    "_REQUEST_CHANGESERVER\020\202\310\003\022\"\n\034ID_G2D_RESP"
    "ONSE_CHANGESERVER\020\203\310\003\022#\n\035ID_D2G_REQUEST_"
    "CREATEREPETION\020\204\310\003\022$\n\036ID_G2D_RESPONSE_CR"
    "EATEREPETION\020\205\310\003\022#\n\035ID_S2D_REQUEST_PLAYE"
    "RAPPLYWAR\020\206\310\003\022$\n\036ID_D2S_REQPONSE_PLAYERA"
    "PPLYWAR\020\207\310\003\022\035\n\027ID_D2S_NOTIFY_WARENABLE\020\210"
    "\310\003\022\"\n\034ID_S2D_NOTIFY_PLAYERLEAVEWAR\020\211\310\003\022\032"
    "\n\024ID_S2D_NOTIFY_WAREND\020\212\310\003\022$\n\036ID_S2S_NOT"
    "IFY_KICKGLOBALPLAYER\020\213\310\003\022\'\n!ID_S2S_NOTIF"
    "Y_KICKGLOBALPLAYERACK\020\214\310\003\022#\n\035ID_S2S_NOTI"
    "FY_SYNCGLOBALPLAYE\020\215\310\003B\002H\001", 2506);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "globalserver_pb.hxx", &protobuf_RegisterTypes);
  #endif
  CMapData::default_instance_ = new CMapData();
  CMessageGlobalTeleportRequest::default_instance_ = new CMessageGlobalTeleportRequest();
  CMessageGlobalTeleportResponse::default_instance_ = new CMessageGlobalTeleportResponse();
  CMessageChangeServerRequest::default_instance_ = new CMessageChangeServerRequest();
  CMessageChangeServerResponse::default_instance_ = new CMessageChangeServerResponse();
  CMessageCreateRepetionRequest::default_instance_ = new CMessageCreateRepetionRequest();
  CMessageCreateRepetionResponse::default_instance_ = new CMessageCreateRepetionResponse();
  CMessagePlayerApplyWarRequest::default_instance_ = new CMessagePlayerApplyWarRequest();
  CMessagePlayerApplyWarResponse::default_instance_ = new CMessagePlayerApplyWarResponse();
  CMessageWarEnableNotify::default_instance_ = new CMessageWarEnableNotify();
  CMessagePlayerLeaveWarNotify::default_instance_ = new CMessagePlayerLeaveWarNotify();
  CMessageWarEndNotify::default_instance_ = new CMessageWarEndNotify();
  CMessageKickGlobalPlayerNotify::default_instance_ = new CMessageKickGlobalPlayerNotify();
  CMessageKickGlobalPlayerACK::default_instance_ = new CMessageKickGlobalPlayerACK();
  PBWorldPlayer::default_instance_ = new PBWorldPlayer();
  CMessageSyncGlobalPlayeNotify::default_instance_ = new CMessageSyncGlobalPlayeNotify();
  CMapData::default_instance_->InitAsDefaultInstance();
  CMessageGlobalTeleportRequest::default_instance_->InitAsDefaultInstance();
  CMessageGlobalTeleportResponse::default_instance_->InitAsDefaultInstance();
  CMessageChangeServerRequest::default_instance_->InitAsDefaultInstance();
  CMessageChangeServerResponse::default_instance_->InitAsDefaultInstance();
  CMessageCreateRepetionRequest::default_instance_->InitAsDefaultInstance();
  CMessageCreateRepetionResponse::default_instance_->InitAsDefaultInstance();
  CMessagePlayerApplyWarRequest::default_instance_->InitAsDefaultInstance();
  CMessagePlayerApplyWarResponse::default_instance_->InitAsDefaultInstance();
  CMessageWarEnableNotify::default_instance_->InitAsDefaultInstance();
  CMessagePlayerLeaveWarNotify::default_instance_->InitAsDefaultInstance();
  CMessageWarEndNotify::default_instance_->InitAsDefaultInstance();
  CMessageKickGlobalPlayerNotify::default_instance_->InitAsDefaultInstance();
  CMessageKickGlobalPlayerACK::default_instance_->InitAsDefaultInstance();
  PBWorldPlayer::default_instance_->InitAsDefaultInstance();
  CMessageSyncGlobalPlayeNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_globalserver_5fpb_2ehxx);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_globalserver_5fpb_2ehxx {
  StaticDescriptorInitializer_globalserver_5fpb_2ehxx() {
    protobuf_AddDesc_globalserver_5fpb_2ehxx();
  }
} static_descriptor_initializer_globalserver_5fpb_2ehxx_;

const ::google::protobuf::EnumDescriptor* EMGlobalServerMessageID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMGlobalServerMessageID_descriptor_;
}
bool EMGlobalServerMessageID_IsValid(int value) {
  switch(value) {
    case 58368:
    case 58369:
    case 58370:
    case 58371:
    case 58372:
    case 58373:
    case 58374:
    case 58375:
    case 58376:
    case 58377:
    case 58378:
    case 58379:
    case 58380:
    case 58381:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CMapData::kMapIDFieldNumber;
const int CMapData::kPosXFieldNumber;
const int CMapData::kPosYFieldNumber;
const int CMapData::kLineIDFieldNumber;
#endif  // !_MSC_VER

CMapData::CMapData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMapData::InitAsDefaultInstance() {}

CMapData::CMapData(const CMapData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMapData::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  posx_ = 0u;
  posy_ = 0u;
  lineid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMapData::~CMapData() {
  SharedDtor();
}

void CMapData::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMapData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMapData_descriptor_;
}

const CMapData& CMapData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_globalserver_5fpb_2ehxx();  return *default_instance_;
}

CMapData* CMapData::default_instance_ = NULL;

CMapData* CMapData::New() const {
  return new CMapData;
}

void CMapData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0u;
    posx_ = 0u;
    posy_ = 0u;
    lineid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMapData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 MapID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_PosX;
        break;
      }
      
      // optional uint32 PosX = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosX:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posx_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_PosY;
        break;
      }
      
      // optional uint32 PosY = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posy_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_LineID;
        break;
      }
      
      // optional uint32 LineID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lineid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMapData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMapData::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 MapID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->mapid(), output);
  }
  
  // optional uint32 PosX = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->posx(), output);
  }
  
  // optional uint32 PosY = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->posy(), output);
  }
  
  // optional uint32 LineID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->lineid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMapData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 MapID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->mapid(), target);
  }
  
  // optional uint32 PosX = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->posx(), target);
  }
  
  // optional uint32 PosY = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->posy(), target);
  }
  
  // optional uint32 LineID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->lineid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMapData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MapID = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 PosX = 2;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posx());
    }
    
    // optional uint32 PosY = 3;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posy());
    }
    
    // optional uint32 LineID = 4;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lineid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMapData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMapData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMapData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMapData::MergeFrom(const CMapData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(1)) {
      set_posx(from.posx());
    }
    if (from._has_bit(2)) {
      set_posy(from.posy());
    }
    if (from._has_bit(3)) {
      set_lineid(from.lineid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMapData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMapData::CopyFrom(const CMapData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMapData::Swap(CMapData* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(lineid_, other->lineid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMapData::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMapData::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMapData::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMapData_reflection_;
}

// ===================================================================

const ::std::string CMessageGlobalTeleportRequest::_default_mac_;
#ifndef _MSC_VER
const int CMessageGlobalTeleportRequest::kServerTypeFieldNumber;
const int CMessageGlobalTeleportRequest::kWorldIDFieldNumber;
const int CMessageGlobalTeleportRequest::kServerIDFieldNumber;
const int CMessageGlobalTeleportRequest::kRoleIDFieldNumber;
const int CMessageGlobalTeleportRequest::kAccountIDFieldNumber;
const int CMessageGlobalTeleportRequest::kOriginalServerIDFieldNumber;
const int CMessageGlobalTeleportRequest::kOriginalWorldIDFieldNumber;
const int CMessageGlobalTeleportRequest::kTeleTypeFieldNumber;
const int CMessageGlobalTeleportRequest::kMapDataFieldNumber;
const int CMessageGlobalTeleportRequest::kGameIDFieldNumber;
const int CMessageGlobalTeleportRequest::kMacFieldNumber;
#endif  // !_MSC_VER

CMessageGlobalTeleportRequest::CMessageGlobalTeleportRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGlobalTeleportRequest::InitAsDefaultInstance() {  mapdata_ = const_cast< ::CMapData*>(&::CMapData::default_instance());
}

CMessageGlobalTeleportRequest::CMessageGlobalTeleportRequest(const CMessageGlobalTeleportRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGlobalTeleportRequest::SharedCtor() {
  _cached_size_ = 0;
  servertype_ = 0u;
  worldid_ = 0u;
  serverid_ = 0u;
  roleid_ = 0u;
  accountid_ = 0u;
  originalserverid_ = 0u;
  originalworldid_ = 0u;
  teletype_ = 0u;
  mapdata_ = NULL;
  gameid_ = 0u;
  mac_ = const_cast< ::std::string*>(&_default_mac_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGlobalTeleportRequest::~CMessageGlobalTeleportRequest() {
  SharedDtor();
}

void CMessageGlobalTeleportRequest::SharedDtor() {
  if (mac_ != &_default_mac_) {
    delete mac_;
  }
  if (this != default_instance_) {
    delete mapdata_;
  }
}

const ::google::protobuf::Descriptor* CMessageGlobalTeleportRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGlobalTeleportRequest_descriptor_;
}

const CMessageGlobalTeleportRequest& CMessageGlobalTeleportRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_globalserver_5fpb_2ehxx();  return *default_instance_;
}

CMessageGlobalTeleportRequest* CMessageGlobalTeleportRequest::default_instance_ = NULL;

CMessageGlobalTeleportRequest* CMessageGlobalTeleportRequest::New() const {
  return new CMessageGlobalTeleportRequest;
}

void CMessageGlobalTeleportRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    servertype_ = 0u;
    worldid_ = 0u;
    serverid_ = 0u;
    roleid_ = 0u;
    accountid_ = 0u;
    originalserverid_ = 0u;
    originalworldid_ = 0u;
    teletype_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (mapdata_ != NULL) mapdata_->::CMapData::Clear();
    }
    gameid_ = 0u;
    if (_has_bit(10)) {
      if (mac_ != &_default_mac_) {
        mac_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGlobalTeleportRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ServerType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &servertype_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_WorldID;
        break;
      }
      
      // optional uint32 WorldID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WorldID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &worldid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_ServerID;
        break;
      }
      
      // optional uint32 ServerID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ServerID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &serverid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_AccountID;
        break;
      }
      
      // optional uint32 AccountID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AccountID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_OriginalServerID;
        break;
      }
      
      // optional uint32 OriginalServerID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OriginalServerID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &originalserverid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_OriginalWorldID;
        break;
      }
      
      // optional uint32 OriginalWorldID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OriginalWorldID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &originalworldid_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_TeleType;
        break;
      }
      
      // optional uint32 TeleType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TeleType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &teletype_));
        _set_bit(7);
        if (input->ExpectTag(74)) goto parse_MapData;
        break;
      }
      
      // optional .CMapData MapData = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MapData:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_mapdata()));
        if (input->ExpectTag(80)) goto parse_GameID;
        break;
      }
      
      // optional uint32 GameID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GameID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &gameid_));
        _set_bit(9);
        if (input->ExpectTag(90)) goto parse_Mac;
        break;
      }
      
      // optional string Mac = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Mac:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_mac()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGlobalTeleportRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGlobalTeleportRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ServerType = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->servertype(), output);
  }
  
  // optional uint32 WorldID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->worldid(), output);
  }
  
  // optional uint32 ServerID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->serverid(), output);
  }
  
  // optional uint32 RoleID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->roleid(), output);
  }
  
  // optional uint32 AccountID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->accountid(), output);
  }
  
  // optional uint32 OriginalServerID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->originalserverid(), output);
  }
  
  // optional uint32 OriginalWorldID = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->originalworldid(), output);
  }
  
  // optional uint32 TeleType = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->teletype(), output);
  }
  
  // optional .CMapData MapData = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(9, this->mapdata(), output);
  }
  
  // optional uint32 GameID = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->gameid(), output);
  }
  
  // optional string Mac = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteString(11, this->mac(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGlobalTeleportRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ServerType = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->servertype(), target);
  }
  
  // optional uint32 WorldID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->worldid(), target);
  }
  
  // optional uint32 ServerID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->serverid(), target);
  }
  
  // optional uint32 RoleID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->roleid(), target);
  }
  
  // optional uint32 AccountID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->accountid(), target);
  }
  
  // optional uint32 OriginalServerID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->originalserverid(), target);
  }
  
  // optional uint32 OriginalWorldID = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->originalworldid(), target);
  }
  
  // optional uint32 TeleType = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->teletype(), target);
  }
  
  // optional .CMapData MapData = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(9, this->mapdata(), target);
  }
  
  // optional uint32 GameID = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->gameid(), target);
  }
  
  // optional string Mac = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(11, this->mac(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGlobalTeleportRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ServerType = 1;
    if (has_servertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->servertype());
    }
    
    // optional uint32 WorldID = 2;
    if (has_worldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->worldid());
    }
    
    // optional uint32 ServerID = 3;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->serverid());
    }
    
    // optional uint32 RoleID = 4;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 AccountID = 5;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 OriginalServerID = 6;
    if (has_originalserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->originalserverid());
    }
    
    // optional uint32 OriginalWorldID = 7;
    if (has_originalworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->originalworldid());
    }
    
    // optional uint32 TeleType = 8;
    if (has_teletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->teletype());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .CMapData MapData = 9;
    if (has_mapdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->mapdata());
    }
    
    // optional uint32 GameID = 10;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->gameid());
    }
    
    // optional string Mac = 11;
    if (has_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->mac());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGlobalTeleportRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGlobalTeleportRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGlobalTeleportRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGlobalTeleportRequest::MergeFrom(const CMessageGlobalTeleportRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_servertype(from.servertype());
    }
    if (from._has_bit(1)) {
      set_worldid(from.worldid());
    }
    if (from._has_bit(2)) {
      set_serverid(from.serverid());
    }
    if (from._has_bit(3)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(4)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(5)) {
      set_originalserverid(from.originalserverid());
    }
    if (from._has_bit(6)) {
      set_originalworldid(from.originalworldid());
    }
    if (from._has_bit(7)) {
      set_teletype(from.teletype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      mutable_mapdata()->::CMapData::MergeFrom(from.mapdata());
    }
    if (from._has_bit(9)) {
      set_gameid(from.gameid());
    }
    if (from._has_bit(10)) {
      set_mac(from.mac());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGlobalTeleportRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGlobalTeleportRequest::CopyFrom(const CMessageGlobalTeleportRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGlobalTeleportRequest::Swap(CMessageGlobalTeleportRequest* other) {
  if (other != this) {
    std::swap(servertype_, other->servertype_);
    std::swap(worldid_, other->worldid_);
    std::swap(serverid_, other->serverid_);
    std::swap(roleid_, other->roleid_);
    std::swap(accountid_, other->accountid_);
    std::swap(originalserverid_, other->originalserverid_);
    std::swap(originalworldid_, other->originalworldid_);
    std::swap(teletype_, other->teletype_);
    std::swap(mapdata_, other->mapdata_);
    std::swap(gameid_, other->gameid_);
    std::swap(mac_, other->mac_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGlobalTeleportRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGlobalTeleportRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGlobalTeleportRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGlobalTeleportRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageGlobalTeleportResponse::_default_addr_;
#ifndef _MSC_VER
const int CMessageGlobalTeleportResponse::kErrcodeFieldNumber;
const int CMessageGlobalTeleportResponse::kAddrFieldNumber;
const int CMessageGlobalTeleportResponse::kLoginTokenFieldNumber;
const int CMessageGlobalTeleportResponse::kRoleIDFieldNumber;
const int CMessageGlobalTeleportResponse::kLineIDFieldNumber;
const int CMessageGlobalTeleportResponse::kMapIDFieldNumber;
const int CMessageGlobalTeleportResponse::kPosXFieldNumber;
const int CMessageGlobalTeleportResponse::kPosYFieldNumber;
const int CMessageGlobalTeleportResponse::kReptionKeyFieldNumber;
const int CMessageGlobalTeleportResponse::kTeamFlagFieldNumber;
const int CMessageGlobalTeleportResponse::kRepetionIndexFieldNumber;
const int CMessageGlobalTeleportResponse::kSceneWorldIDFieldNumber;
#endif  // !_MSC_VER

CMessageGlobalTeleportResponse::CMessageGlobalTeleportResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGlobalTeleportResponse::InitAsDefaultInstance() {}

CMessageGlobalTeleportResponse::CMessageGlobalTeleportResponse(const CMessageGlobalTeleportResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGlobalTeleportResponse::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  addr_ = const_cast< ::std::string*>(&_default_addr_);
  logintoken_ = 0u;
  roleid_ = 0u;
  lineid_ = 0u;
  mapid_ = 0u;
  posx_ = 0u;
  posy_ = 0u;
  reptionkey_ = GOOGLE_ULONGLONG(0);
  teamflag_ = 0u;
  repetionindex_ = 0u;
  sceneworldid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGlobalTeleportResponse::~CMessageGlobalTeleportResponse() {
  SharedDtor();
}

void CMessageGlobalTeleportResponse::SharedDtor() {
  if (addr_ != &_default_addr_) {
    delete addr_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGlobalTeleportResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGlobalTeleportResponse_descriptor_;
}

const CMessageGlobalTeleportResponse& CMessageGlobalTeleportResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_globalserver_5fpb_2ehxx();  return *default_instance_;
}

CMessageGlobalTeleportResponse* CMessageGlobalTeleportResponse::default_instance_ = NULL;

CMessageGlobalTeleportResponse* CMessageGlobalTeleportResponse::New() const {
  return new CMessageGlobalTeleportResponse;
}

void CMessageGlobalTeleportResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
    if (_has_bit(1)) {
      if (addr_ != &_default_addr_) {
        addr_->clear();
      }
    }
    logintoken_ = 0u;
    roleid_ = 0u;
    lineid_ = 0u;
    mapid_ = 0u;
    posx_ = 0u;
    posy_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    reptionkey_ = GOOGLE_ULONGLONG(0);
    teamflag_ = 0u;
    repetionindex_ = 0u;
    sceneworldid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGlobalTeleportResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Errcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Addr;
        break;
      }
      
      // optional string Addr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Addr:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_addr()));
        if (input->ExpectTag(24)) goto parse_LoginToken;
        break;
      }
      
      // optional uint32 LoginToken = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LoginToken:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &logintoken_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_LineID;
        break;
      }
      
      // optional uint32 LineID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lineid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_PosX;
        break;
      }
      
      // optional uint32 PosX = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosX:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posx_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_PosY;
        break;
      }
      
      // optional uint32 PosY = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posy_));
        _set_bit(7);
        if (input->ExpectTag(80)) goto parse_ReptionKey;
        break;
      }
      
      // optional uint64 ReptionKey = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ReptionKey:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &reptionkey_));
        _set_bit(8);
        if (input->ExpectTag(88)) goto parse_TeamFlag;
        break;
      }
      
      // optional uint32 TeamFlag = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TeamFlag:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &teamflag_));
        _set_bit(9);
        if (input->ExpectTag(96)) goto parse_RepetionIndex;
        break;
      }
      
      // optional uint32 RepetionIndex = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RepetionIndex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &repetionindex_));
        _set_bit(10);
        if (input->ExpectTag(104)) goto parse_SceneWorldID;
        break;
      }
      
      // optional uint32 SceneWorldID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SceneWorldID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sceneworldid_));
        _set_bit(11);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGlobalTeleportResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGlobalTeleportResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->errcode(), output);
  }
  
  // optional string Addr = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->addr(), output);
  }
  
  // optional uint32 LoginToken = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->logintoken(), output);
  }
  
  // optional uint32 RoleID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->roleid(), output);
  }
  
  // optional uint32 LineID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->lineid(), output);
  }
  
  // optional uint32 MapID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->mapid(), output);
  }
  
  // optional uint32 PosX = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->posx(), output);
  }
  
  // optional uint32 PosY = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->posy(), output);
  }
  
  // optional uint64 ReptionKey = 10;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(10, this->reptionkey(), output);
  }
  
  // optional uint32 TeamFlag = 11;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->teamflag(), output);
  }
  
  // optional uint32 RepetionIndex = 12;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->repetionindex(), output);
  }
  
  // optional uint32 SceneWorldID = 13;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->sceneworldid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGlobalTeleportResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  // optional string Addr = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->addr(), target);
  }
  
  // optional uint32 LoginToken = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->logintoken(), target);
  }
  
  // optional uint32 RoleID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->roleid(), target);
  }
  
  // optional uint32 LineID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->lineid(), target);
  }
  
  // optional uint32 MapID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->mapid(), target);
  }
  
  // optional uint32 PosX = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->posx(), target);
  }
  
  // optional uint32 PosY = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->posy(), target);
  }
  
  // optional uint64 ReptionKey = 10;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(10, this->reptionkey(), target);
  }
  
  // optional uint32 TeamFlag = 11;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->teamflag(), target);
  }
  
  // optional uint32 RepetionIndex = 12;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->repetionindex(), target);
  }
  
  // optional uint32 SceneWorldID = 13;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->sceneworldid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGlobalTeleportResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional string Addr = 2;
    if (has_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->addr());
    }
    
    // optional uint32 LoginToken = 3;
    if (has_logintoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->logintoken());
    }
    
    // optional uint32 RoleID = 4;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 LineID = 5;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lineid());
    }
    
    // optional uint32 MapID = 6;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 PosX = 7;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posx());
    }
    
    // optional uint32 PosY = 8;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posy());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 ReptionKey = 10;
    if (has_reptionkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->reptionkey());
    }
    
    // optional uint32 TeamFlag = 11;
    if (has_teamflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->teamflag());
    }
    
    // optional uint32 RepetionIndex = 12;
    if (has_repetionindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->repetionindex());
    }
    
    // optional uint32 SceneWorldID = 13;
    if (has_sceneworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sceneworldid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGlobalTeleportResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGlobalTeleportResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGlobalTeleportResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGlobalTeleportResponse::MergeFrom(const CMessageGlobalTeleportResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(1)) {
      set_addr(from.addr());
    }
    if (from._has_bit(2)) {
      set_logintoken(from.logintoken());
    }
    if (from._has_bit(3)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(4)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(5)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(6)) {
      set_posx(from.posx());
    }
    if (from._has_bit(7)) {
      set_posy(from.posy());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_reptionkey(from.reptionkey());
    }
    if (from._has_bit(9)) {
      set_teamflag(from.teamflag());
    }
    if (from._has_bit(10)) {
      set_repetionindex(from.repetionindex());
    }
    if (from._has_bit(11)) {
      set_sceneworldid(from.sceneworldid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGlobalTeleportResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGlobalTeleportResponse::CopyFrom(const CMessageGlobalTeleportResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGlobalTeleportResponse::Swap(CMessageGlobalTeleportResponse* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(addr_, other->addr_);
    std::swap(logintoken_, other->logintoken_);
    std::swap(roleid_, other->roleid_);
    std::swap(lineid_, other->lineid_);
    std::swap(mapid_, other->mapid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(reptionkey_, other->reptionkey_);
    std::swap(teamflag_, other->teamflag_);
    std::swap(repetionindex_, other->repetionindex_);
    std::swap(sceneworldid_, other->sceneworldid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGlobalTeleportResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGlobalTeleportResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGlobalTeleportResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGlobalTeleportResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageChangeServerRequest::_default_mac_;
#ifndef _MSC_VER
const int CMessageChangeServerRequest::kRoleIDFieldNumber;
const int CMessageChangeServerRequest::kWorldIDFieldNumber;
const int CMessageChangeServerRequest::kServerIDFieldNumber;
const int CMessageChangeServerRequest::kAccountIDFieldNumber;
const int CMessageChangeServerRequest::kCurrentWorldIDFieldNumber;
const int CMessageChangeServerRequest::kMapIDFieldNumber;
const int CMessageChangeServerRequest::kPosXFieldNumber;
const int CMessageChangeServerRequest::kPosYFieldNumber;
const int CMessageChangeServerRequest::kKeyFieldNumber;
const int CMessageChangeServerRequest::kServerKeyFieldNumber;
const int CMessageChangeServerRequest::kLineIDFieldNumber;
const int CMessageChangeServerRequest::kTeamFlagFieldNumber;
const int CMessageChangeServerRequest::kGameIDFieldNumber;
const int CMessageChangeServerRequest::kMacFieldNumber;
#endif  // !_MSC_VER

CMessageChangeServerRequest::CMessageChangeServerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeServerRequest::InitAsDefaultInstance() {}

CMessageChangeServerRequest::CMessageChangeServerRequest(const CMessageChangeServerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeServerRequest::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  worldid_ = 0u;
  serverid_ = 0u;
  accountid_ = 0u;
  currentworldid_ = 0u;
  mapid_ = 0u;
  posx_ = 0u;
  posy_ = 0u;
  key_ = GOOGLE_ULONGLONG(0);
  serverkey_ = 0u;
  lineid_ = 0u;
  teamflag_ = 0u;
  gameid_ = 0u;
  mac_ = const_cast< ::std::string*>(&_default_mac_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeServerRequest::~CMessageChangeServerRequest() {
  SharedDtor();
}

void CMessageChangeServerRequest::SharedDtor() {
  if (mac_ != &_default_mac_) {
    delete mac_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageChangeServerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeServerRequest_descriptor_;
}

const CMessageChangeServerRequest& CMessageChangeServerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_globalserver_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeServerRequest* CMessageChangeServerRequest::default_instance_ = NULL;

CMessageChangeServerRequest* CMessageChangeServerRequest::New() const {
  return new CMessageChangeServerRequest;
}

void CMessageChangeServerRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    worldid_ = 0u;
    serverid_ = 0u;
    accountid_ = 0u;
    currentworldid_ = 0u;
    mapid_ = 0u;
    posx_ = 0u;
    posy_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    key_ = GOOGLE_ULONGLONG(0);
    serverkey_ = 0u;
    lineid_ = 0u;
    teamflag_ = 0u;
    gameid_ = 0u;
    if (_has_bit(13)) {
      if (mac_ != &_default_mac_) {
        mac_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeServerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_WorldID;
        break;
      }
      
      // optional uint32 WorldID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WorldID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &worldid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_ServerID;
        break;
      }
      
      // optional uint32 ServerID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ServerID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &serverid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_AccountID;
        break;
      }
      
      // optional uint32 AccountID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AccountID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_CurrentWorldID;
        break;
      }
      
      // optional uint32 CurrentWorldID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CurrentWorldID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &currentworldid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_PosX;
        break;
      }
      
      // optional uint32 PosX = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosX:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posx_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_PosY;
        break;
      }
      
      // optional uint32 PosY = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posy_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_Key;
        break;
      }
      
      // optional uint64 Key = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Key:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &key_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_ServerKey;
        break;
      }
      
      // optional uint32 ServerKey = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ServerKey:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &serverkey_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_LineID;
        break;
      }
      
      // optional uint32 LineID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lineid_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_TeamFlag;
        break;
      }
      
      // optional uint32 TeamFlag = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TeamFlag:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &teamflag_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_GameID;
        break;
      }
      
      // optional uint32 GameID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GameID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &gameid_));
        _set_bit(12);
        if (input->ExpectTag(114)) goto parse_Mac;
        break;
      }
      
      // optional string Mac = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Mac:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_mac()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeServerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeServerRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional uint32 WorldID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->worldid(), output);
  }
  
  // optional uint32 ServerID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->serverid(), output);
  }
  
  // optional uint32 AccountID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->accountid(), output);
  }
  
  // optional uint32 CurrentWorldID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->currentworldid(), output);
  }
  
  // optional uint32 MapID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->mapid(), output);
  }
  
  // optional uint32 PosX = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->posx(), output);
  }
  
  // optional uint32 PosY = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->posy(), output);
  }
  
  // optional uint64 Key = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(9, this->key(), output);
  }
  
  // optional uint32 ServerKey = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->serverkey(), output);
  }
  
  // optional uint32 LineID = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->lineid(), output);
  }
  
  // optional uint32 TeamFlag = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->teamflag(), output);
  }
  
  // optional uint32 GameID = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->gameid(), output);
  }
  
  // optional string Mac = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteString(14, this->mac(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeServerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional uint32 WorldID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->worldid(), target);
  }
  
  // optional uint32 ServerID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->serverid(), target);
  }
  
  // optional uint32 AccountID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->accountid(), target);
  }
  
  // optional uint32 CurrentWorldID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->currentworldid(), target);
  }
  
  // optional uint32 MapID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->mapid(), target);
  }
  
  // optional uint32 PosX = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->posx(), target);
  }
  
  // optional uint32 PosY = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->posy(), target);
  }
  
  // optional uint64 Key = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(9, this->key(), target);
  }
  
  // optional uint32 ServerKey = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->serverkey(), target);
  }
  
  // optional uint32 LineID = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->lineid(), target);
  }
  
  // optional uint32 TeamFlag = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->teamflag(), target);
  }
  
  // optional uint32 GameID = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->gameid(), target);
  }
  
  // optional string Mac = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(14, this->mac(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeServerRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 WorldID = 2;
    if (has_worldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->worldid());
    }
    
    // optional uint32 ServerID = 3;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->serverid());
    }
    
    // optional uint32 AccountID = 4;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 CurrentWorldID = 5;
    if (has_currentworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->currentworldid());
    }
    
    // optional uint32 MapID = 6;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 PosX = 7;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posx());
    }
    
    // optional uint32 PosY = 8;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posy());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 Key = 9;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->key());
    }
    
    // optional uint32 ServerKey = 10;
    if (has_serverkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->serverkey());
    }
    
    // optional uint32 LineID = 11;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lineid());
    }
    
    // optional uint32 TeamFlag = 12;
    if (has_teamflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->teamflag());
    }
    
    // optional uint32 GameID = 13;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->gameid());
    }
    
    // optional string Mac = 14;
    if (has_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->mac());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeServerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeServerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeServerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeServerRequest::MergeFrom(const CMessageChangeServerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_worldid(from.worldid());
    }
    if (from._has_bit(2)) {
      set_serverid(from.serverid());
    }
    if (from._has_bit(3)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(4)) {
      set_currentworldid(from.currentworldid());
    }
    if (from._has_bit(5)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(6)) {
      set_posx(from.posx());
    }
    if (from._has_bit(7)) {
      set_posy(from.posy());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_key(from.key());
    }
    if (from._has_bit(9)) {
      set_serverkey(from.serverkey());
    }
    if (from._has_bit(10)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(11)) {
      set_teamflag(from.teamflag());
    }
    if (from._has_bit(12)) {
      set_gameid(from.gameid());
    }
    if (from._has_bit(13)) {
      set_mac(from.mac());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeServerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeServerRequest::CopyFrom(const CMessageChangeServerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeServerRequest::Swap(CMessageChangeServerRequest* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(worldid_, other->worldid_);
    std::swap(serverid_, other->serverid_);
    std::swap(accountid_, other->accountid_);
    std::swap(currentworldid_, other->currentworldid_);
    std::swap(mapid_, other->mapid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(key_, other->key_);
    std::swap(serverkey_, other->serverkey_);
    std::swap(lineid_, other->lineid_);
    std::swap(teamflag_, other->teamflag_);
    std::swap(gameid_, other->gameid_);
    std::swap(mac_, other->mac_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeServerRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeServerRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeServerRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeServerRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageChangeServerResponse::_default_addr_;
#ifndef _MSC_VER
const int CMessageChangeServerResponse::kErrcodeFieldNumber;
const int CMessageChangeServerResponse::kRoleIDFieldNumber;
const int CMessageChangeServerResponse::kWorldIDFieldNumber;
const int CMessageChangeServerResponse::kServerKeyFieldNumber;
const int CMessageChangeServerResponse::kServerIDFieldNumber;
const int CMessageChangeServerResponse::kAddrFieldNumber;
const int CMessageChangeServerResponse::kLoginTokenFieldNumber;
#endif  // !_MSC_VER

CMessageChangeServerResponse::CMessageChangeServerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeServerResponse::InitAsDefaultInstance() {}

CMessageChangeServerResponse::CMessageChangeServerResponse(const CMessageChangeServerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeServerResponse::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  roleid_ = 0u;
  worldid_ = 0u;
  serverkey_ = 0u;
  serverid_ = 0u;
  addr_ = const_cast< ::std::string*>(&_default_addr_);
  logintoken_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeServerResponse::~CMessageChangeServerResponse() {
  SharedDtor();
}

void CMessageChangeServerResponse::SharedDtor() {
  if (addr_ != &_default_addr_) {
    delete addr_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageChangeServerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeServerResponse_descriptor_;
}

const CMessageChangeServerResponse& CMessageChangeServerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_globalserver_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeServerResponse* CMessageChangeServerResponse::default_instance_ = NULL;

CMessageChangeServerResponse* CMessageChangeServerResponse::New() const {
  return new CMessageChangeServerResponse;
}

void CMessageChangeServerResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
    roleid_ = 0u;
    worldid_ = 0u;
    serverkey_ = 0u;
    serverid_ = 0u;
    if (_has_bit(5)) {
      if (addr_ != &_default_addr_) {
        addr_->clear();
      }
    }
    logintoken_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeServerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Errcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_WorldID;
        break;
      }
      
      // optional uint32 WorldID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WorldID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &worldid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_ServerKey;
        break;
      }
      
      // optional uint32 ServerKey = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ServerKey:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &serverkey_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_ServerID;
        break;
      }
      
      // optional uint32 ServerID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ServerID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &serverid_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_Addr;
        break;
      }
      
      // optional string Addr = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Addr:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_addr()));
        if (input->ExpectTag(56)) goto parse_LoginToken;
        break;
      }
      
      // optional uint32 LoginToken = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LoginToken:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &logintoken_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeServerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeServerResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->errcode(), output);
  }
  
  // optional uint32 RoleID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->roleid(), output);
  }
  
  // optional uint32 WorldID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->worldid(), output);
  }
  
  // optional uint32 ServerKey = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->serverkey(), output);
  }
  
  // optional uint32 ServerID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->serverid(), output);
  }
  
  // optional string Addr = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteString(6, this->addr(), output);
  }
  
  // optional uint32 LoginToken = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->logintoken(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeServerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  // optional uint32 RoleID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->roleid(), target);
  }
  
  // optional uint32 WorldID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->worldid(), target);
  }
  
  // optional uint32 ServerKey = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->serverkey(), target);
  }
  
  // optional uint32 ServerID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->serverid(), target);
  }
  
  // optional string Addr = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(6, this->addr(), target);
  }
  
  // optional uint32 LoginToken = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->logintoken(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeServerResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional uint32 RoleID = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 WorldID = 3;
    if (has_worldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->worldid());
    }
    
    // optional uint32 ServerKey = 4;
    if (has_serverkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->serverkey());
    }
    
    // optional uint32 ServerID = 5;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->serverid());
    }
    
    // optional string Addr = 6;
    if (has_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->addr());
    }
    
    // optional uint32 LoginToken = 7;
    if (has_logintoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->logintoken());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeServerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeServerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeServerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeServerResponse::MergeFrom(const CMessageChangeServerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(1)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(2)) {
      set_worldid(from.worldid());
    }
    if (from._has_bit(3)) {
      set_serverkey(from.serverkey());
    }
    if (from._has_bit(4)) {
      set_serverid(from.serverid());
    }
    if (from._has_bit(5)) {
      set_addr(from.addr());
    }
    if (from._has_bit(6)) {
      set_logintoken(from.logintoken());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeServerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeServerResponse::CopyFrom(const CMessageChangeServerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeServerResponse::Swap(CMessageChangeServerResponse* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(roleid_, other->roleid_);
    std::swap(worldid_, other->worldid_);
    std::swap(serverkey_, other->serverkey_);
    std::swap(serverid_, other->serverid_);
    std::swap(addr_, other->addr_);
    std::swap(logintoken_, other->logintoken_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeServerResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeServerResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeServerResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeServerResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCreateRepetionRequest::kReptionIndexFieldNumber;
const int CMessageCreateRepetionRequest::kRegKeyFieldNumber;
const int CMessageCreateRepetionRequest::kRepetionLevelFieldNumber;
#endif  // !_MSC_VER

CMessageCreateRepetionRequest::CMessageCreateRepetionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCreateRepetionRequest::InitAsDefaultInstance() {}

CMessageCreateRepetionRequest::CMessageCreateRepetionRequest(const CMessageCreateRepetionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCreateRepetionRequest::SharedCtor() {
  _cached_size_ = 0;
  reptionindex_ = 0u;
  regkey_ = 0u;
  repetionlevel_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCreateRepetionRequest::~CMessageCreateRepetionRequest() {
  SharedDtor();
}

void CMessageCreateRepetionRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCreateRepetionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCreateRepetionRequest_descriptor_;
}

const CMessageCreateRepetionRequest& CMessageCreateRepetionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_globalserver_5fpb_2ehxx();  return *default_instance_;
}

CMessageCreateRepetionRequest* CMessageCreateRepetionRequest::default_instance_ = NULL;

CMessageCreateRepetionRequest* CMessageCreateRepetionRequest::New() const {
  return new CMessageCreateRepetionRequest;
}

void CMessageCreateRepetionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reptionindex_ = 0u;
    regkey_ = 0u;
    repetionlevel_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCreateRepetionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ReptionIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &reptionindex_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_RegKey;
        break;
      }
      
      // optional uint32 RegKey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RegKey:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &regkey_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_RepetionLevel;
        break;
      }
      
      // optional uint64 RepetionLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RepetionLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &repetionlevel_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCreateRepetionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCreateRepetionRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ReptionIndex = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->reptionindex(), output);
  }
  
  // optional uint32 RegKey = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->regkey(), output);
  }
  
  // optional uint64 RepetionLevel = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(3, this->repetionlevel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCreateRepetionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ReptionIndex = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->reptionindex(), target);
  }
  
  // optional uint32 RegKey = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->regkey(), target);
  }
  
  // optional uint64 RepetionLevel = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(3, this->repetionlevel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCreateRepetionRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ReptionIndex = 1;
    if (has_reptionindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->reptionindex());
    }
    
    // optional uint32 RegKey = 2;
    if (has_regkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->regkey());
    }
    
    // optional uint64 RepetionLevel = 3;
    if (has_repetionlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->repetionlevel());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCreateRepetionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCreateRepetionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCreateRepetionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCreateRepetionRequest::MergeFrom(const CMessageCreateRepetionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_reptionindex(from.reptionindex());
    }
    if (from._has_bit(1)) {
      set_regkey(from.regkey());
    }
    if (from._has_bit(2)) {
      set_repetionlevel(from.repetionlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCreateRepetionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCreateRepetionRequest::CopyFrom(const CMessageCreateRepetionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCreateRepetionRequest::Swap(CMessageCreateRepetionRequest* other) {
  if (other != this) {
    std::swap(reptionindex_, other->reptionindex_);
    std::swap(regkey_, other->regkey_);
    std::swap(repetionlevel_, other->repetionlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCreateRepetionRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCreateRepetionRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCreateRepetionRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCreateRepetionRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCreateRepetionResponse::kErrcodeFieldNumber;
const int CMessageCreateRepetionResponse::kRegKeyFieldNumber;
const int CMessageCreateRepetionResponse::kReptionKeyFieldNumber;
#endif  // !_MSC_VER

CMessageCreateRepetionResponse::CMessageCreateRepetionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCreateRepetionResponse::InitAsDefaultInstance() {}

CMessageCreateRepetionResponse::CMessageCreateRepetionResponse(const CMessageCreateRepetionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCreateRepetionResponse::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  regkey_ = 0u;
  reptionkey_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCreateRepetionResponse::~CMessageCreateRepetionResponse() {
  SharedDtor();
}

void CMessageCreateRepetionResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCreateRepetionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCreateRepetionResponse_descriptor_;
}

const CMessageCreateRepetionResponse& CMessageCreateRepetionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_globalserver_5fpb_2ehxx();  return *default_instance_;
}

CMessageCreateRepetionResponse* CMessageCreateRepetionResponse::default_instance_ = NULL;

CMessageCreateRepetionResponse* CMessageCreateRepetionResponse::New() const {
  return new CMessageCreateRepetionResponse;
}

void CMessageCreateRepetionResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
    regkey_ = 0u;
    reptionkey_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCreateRepetionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Errcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_RegKey;
        break;
      }
      
      // optional uint32 RegKey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RegKey:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &regkey_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_ReptionKey;
        break;
      }
      
      // optional uint64 ReptionKey = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ReptionKey:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &reptionkey_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCreateRepetionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCreateRepetionResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->errcode(), output);
  }
  
  // optional uint32 RegKey = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->regkey(), output);
  }
  
  // optional uint64 ReptionKey = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(3, this->reptionkey(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCreateRepetionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  // optional uint32 RegKey = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->regkey(), target);
  }
  
  // optional uint64 ReptionKey = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(3, this->reptionkey(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCreateRepetionResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional uint32 RegKey = 2;
    if (has_regkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->regkey());
    }
    
    // optional uint64 ReptionKey = 3;
    if (has_reptionkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->reptionkey());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCreateRepetionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCreateRepetionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCreateRepetionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCreateRepetionResponse::MergeFrom(const CMessageCreateRepetionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(1)) {
      set_regkey(from.regkey());
    }
    if (from._has_bit(2)) {
      set_reptionkey(from.reptionkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCreateRepetionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCreateRepetionResponse::CopyFrom(const CMessageCreateRepetionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCreateRepetionResponse::Swap(CMessageCreateRepetionResponse* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(regkey_, other->regkey_);
    std::swap(reptionkey_, other->reptionkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCreateRepetionResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCreateRepetionResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCreateRepetionResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCreateRepetionResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessagePlayerApplyWarRequest::kWorldIDFieldNumber;
const int CMessagePlayerApplyWarRequest::kServerIDFieldNumber;
const int CMessagePlayerApplyWarRequest::kRoleIDFieldNumber;
const int CMessagePlayerApplyWarRequest::kRoleLevelFieldNumber;
const int CMessagePlayerApplyWarRequest::kRepetionIndexFieldNumber;
#endif  // !_MSC_VER

CMessagePlayerApplyWarRequest::CMessagePlayerApplyWarRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePlayerApplyWarRequest::InitAsDefaultInstance() {}

CMessagePlayerApplyWarRequest::CMessagePlayerApplyWarRequest(const CMessagePlayerApplyWarRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePlayerApplyWarRequest::SharedCtor() {
  _cached_size_ = 0;
  worldid_ = 0u;
  serverid_ = 0u;
  roleid_ = 0u;
  rolelevel_ = 0u;
  repetionindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePlayerApplyWarRequest::~CMessagePlayerApplyWarRequest() {
  SharedDtor();
}

void CMessagePlayerApplyWarRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessagePlayerApplyWarRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerApplyWarRequest_descriptor_;
}

const CMessagePlayerApplyWarRequest& CMessagePlayerApplyWarRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_globalserver_5fpb_2ehxx();  return *default_instance_;
}

CMessagePlayerApplyWarRequest* CMessagePlayerApplyWarRequest::default_instance_ = NULL;

CMessagePlayerApplyWarRequest* CMessagePlayerApplyWarRequest::New() const {
  return new CMessagePlayerApplyWarRequest;
}

void CMessagePlayerApplyWarRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    worldid_ = 0u;
    serverid_ = 0u;
    roleid_ = 0u;
    rolelevel_ = 0u;
    repetionindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePlayerApplyWarRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 WorldID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &worldid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ServerID;
        break;
      }
      
      // optional uint32 ServerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ServerID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &serverid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_RoleLevel;
        break;
      }
      
      // optional uint32 RoleLevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rolelevel_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_RepetionIndex;
        break;
      }
      
      // optional uint32 RepetionIndex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RepetionIndex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &repetionindex_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePlayerApplyWarRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePlayerApplyWarRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 WorldID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->worldid(), output);
  }
  
  // optional uint32 ServerID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->serverid(), output);
  }
  
  // optional uint32 RoleID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->roleid(), output);
  }
  
  // optional uint32 RoleLevel = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->rolelevel(), output);
  }
  
  // optional uint32 RepetionIndex = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->repetionindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePlayerApplyWarRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 WorldID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->worldid(), target);
  }
  
  // optional uint32 ServerID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->serverid(), target);
  }
  
  // optional uint32 RoleID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->roleid(), target);
  }
  
  // optional uint32 RoleLevel = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->rolelevel(), target);
  }
  
  // optional uint32 RepetionIndex = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->repetionindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePlayerApplyWarRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 WorldID = 1;
    if (has_worldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->worldid());
    }
    
    // optional uint32 ServerID = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->serverid());
    }
    
    // optional uint32 RoleID = 3;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 RoleLevel = 4;
    if (has_rolelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rolelevel());
    }
    
    // optional uint32 RepetionIndex = 5;
    if (has_repetionindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->repetionindex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePlayerApplyWarRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePlayerApplyWarRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePlayerApplyWarRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePlayerApplyWarRequest::MergeFrom(const CMessagePlayerApplyWarRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_worldid(from.worldid());
    }
    if (from._has_bit(1)) {
      set_serverid(from.serverid());
    }
    if (from._has_bit(2)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(3)) {
      set_rolelevel(from.rolelevel());
    }
    if (from._has_bit(4)) {
      set_repetionindex(from.repetionindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePlayerApplyWarRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerApplyWarRequest::CopyFrom(const CMessagePlayerApplyWarRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerApplyWarRequest::Swap(CMessagePlayerApplyWarRequest* other) {
  if (other != this) {
    std::swap(worldid_, other->worldid_);
    std::swap(serverid_, other->serverid_);
    std::swap(roleid_, other->roleid_);
    std::swap(rolelevel_, other->rolelevel_);
    std::swap(repetionindex_, other->repetionindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePlayerApplyWarRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePlayerApplyWarRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePlayerApplyWarRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerApplyWarRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessagePlayerApplyWarResponse::kErrcodeFieldNumber;
const int CMessagePlayerApplyWarResponse::kRoleIDFieldNumber;
const int CMessagePlayerApplyWarResponse::kRegKeyFieldNumber;
const int CMessagePlayerApplyWarResponse::kCanStartFieldNumber;
const int CMessagePlayerApplyWarResponse::kMinLevelFieldNumber;
const int CMessagePlayerApplyWarResponse::kMaxLevelFieldNumber;
const int CMessagePlayerApplyWarResponse::kTeamFlagFieldNumber;
#endif  // !_MSC_VER

CMessagePlayerApplyWarResponse::CMessagePlayerApplyWarResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePlayerApplyWarResponse::InitAsDefaultInstance() {}

CMessagePlayerApplyWarResponse::CMessagePlayerApplyWarResponse(const CMessagePlayerApplyWarResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePlayerApplyWarResponse::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  roleid_ = 0u;
  regkey_ = 0u;
  canstart_ = 0u;
  minlevel_ = 0u;
  maxlevel_ = 0u;
  teamflag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePlayerApplyWarResponse::~CMessagePlayerApplyWarResponse() {
  SharedDtor();
}

void CMessagePlayerApplyWarResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessagePlayerApplyWarResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerApplyWarResponse_descriptor_;
}

const CMessagePlayerApplyWarResponse& CMessagePlayerApplyWarResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_globalserver_5fpb_2ehxx();  return *default_instance_;
}

CMessagePlayerApplyWarResponse* CMessagePlayerApplyWarResponse::default_instance_ = NULL;

CMessagePlayerApplyWarResponse* CMessagePlayerApplyWarResponse::New() const {
  return new CMessagePlayerApplyWarResponse;
}

void CMessagePlayerApplyWarResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
    roleid_ = 0u;
    regkey_ = 0u;
    canstart_ = 0u;
    minlevel_ = 0u;
    maxlevel_ = 0u;
    teamflag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePlayerApplyWarResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Errcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_RegKey;
        break;
      }
      
      // optional uint32 RegKey = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RegKey:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &regkey_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_CanStart;
        break;
      }
      
      // optional uint32 CanStart = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CanStart:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &canstart_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_MinLevel;
        break;
      }
      
      // optional uint32 MinLevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MinLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &minlevel_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_MaxLevel;
        break;
      }
      
      // optional uint32 MaxLevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxlevel_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_TeamFlag;
        break;
      }
      
      // optional uint32 TeamFlag = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TeamFlag:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &teamflag_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePlayerApplyWarResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePlayerApplyWarResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->errcode(), output);
  }
  
  // optional uint32 RoleID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->roleid(), output);
  }
  
  // optional uint32 RegKey = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->regkey(), output);
  }
  
  // optional uint32 CanStart = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->canstart(), output);
  }
  
  // optional uint32 MinLevel = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->minlevel(), output);
  }
  
  // optional uint32 MaxLevel = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->maxlevel(), output);
  }
  
  // optional uint32 TeamFlag = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->teamflag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePlayerApplyWarResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  // optional uint32 RoleID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->roleid(), target);
  }
  
  // optional uint32 RegKey = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->regkey(), target);
  }
  
  // optional uint32 CanStart = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->canstart(), target);
  }
  
  // optional uint32 MinLevel = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->minlevel(), target);
  }
  
  // optional uint32 MaxLevel = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->maxlevel(), target);
  }
  
  // optional uint32 TeamFlag = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->teamflag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePlayerApplyWarResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional uint32 RoleID = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 RegKey = 3;
    if (has_regkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->regkey());
    }
    
    // optional uint32 CanStart = 4;
    if (has_canstart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->canstart());
    }
    
    // optional uint32 MinLevel = 5;
    if (has_minlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->minlevel());
    }
    
    // optional uint32 MaxLevel = 6;
    if (has_maxlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxlevel());
    }
    
    // optional uint32 TeamFlag = 7;
    if (has_teamflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->teamflag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePlayerApplyWarResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePlayerApplyWarResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePlayerApplyWarResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePlayerApplyWarResponse::MergeFrom(const CMessagePlayerApplyWarResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(1)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(2)) {
      set_regkey(from.regkey());
    }
    if (from._has_bit(3)) {
      set_canstart(from.canstart());
    }
    if (from._has_bit(4)) {
      set_minlevel(from.minlevel());
    }
    if (from._has_bit(5)) {
      set_maxlevel(from.maxlevel());
    }
    if (from._has_bit(6)) {
      set_teamflag(from.teamflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePlayerApplyWarResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerApplyWarResponse::CopyFrom(const CMessagePlayerApplyWarResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerApplyWarResponse::Swap(CMessagePlayerApplyWarResponse* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(roleid_, other->roleid_);
    std::swap(regkey_, other->regkey_);
    std::swap(canstart_, other->canstart_);
    std::swap(minlevel_, other->minlevel_);
    std::swap(maxlevel_, other->maxlevel_);
    std::swap(teamflag_, other->teamflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePlayerApplyWarResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePlayerApplyWarResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePlayerApplyWarResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerApplyWarResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageWarEnableNotify::kWarRegKeyFieldNumber;
const int CMessageWarEnableNotify::kRoleIDFieldNumber;
const int CMessageWarEnableNotify::kTeamFlagFieldNumber;
#endif  // !_MSC_VER

CMessageWarEnableNotify::CMessageWarEnableNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageWarEnableNotify::InitAsDefaultInstance() {}

CMessageWarEnableNotify::CMessageWarEnableNotify(const CMessageWarEnableNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageWarEnableNotify::SharedCtor() {
  _cached_size_ = 0;
  warregkey_ = 0u;
  roleid_ = 0u;
  teamflag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageWarEnableNotify::~CMessageWarEnableNotify() {
  SharedDtor();
}

void CMessageWarEnableNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageWarEnableNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageWarEnableNotify_descriptor_;
}

const CMessageWarEnableNotify& CMessageWarEnableNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_globalserver_5fpb_2ehxx();  return *default_instance_;
}

CMessageWarEnableNotify* CMessageWarEnableNotify::default_instance_ = NULL;

CMessageWarEnableNotify* CMessageWarEnableNotify::New() const {
  return new CMessageWarEnableNotify;
}

void CMessageWarEnableNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    warregkey_ = 0u;
    roleid_ = 0u;
    teamflag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageWarEnableNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 WarRegKey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warregkey_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_TeamFlag;
        break;
      }
      
      // optional uint32 TeamFlag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TeamFlag:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &teamflag_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageWarEnableNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageWarEnableNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 WarRegKey = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->warregkey(), output);
  }
  
  // optional uint32 RoleID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->roleid(), output);
  }
  
  // optional uint32 TeamFlag = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->teamflag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageWarEnableNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 WarRegKey = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->warregkey(), target);
  }
  
  // optional uint32 RoleID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->roleid(), target);
  }
  
  // optional uint32 TeamFlag = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->teamflag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageWarEnableNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 WarRegKey = 1;
    if (has_warregkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warregkey());
    }
    
    // optional uint32 RoleID = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 TeamFlag = 3;
    if (has_teamflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->teamflag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageWarEnableNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageWarEnableNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageWarEnableNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageWarEnableNotify::MergeFrom(const CMessageWarEnableNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_warregkey(from.warregkey());
    }
    if (from._has_bit(1)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(2)) {
      set_teamflag(from.teamflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageWarEnableNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageWarEnableNotify::CopyFrom(const CMessageWarEnableNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageWarEnableNotify::Swap(CMessageWarEnableNotify* other) {
  if (other != this) {
    std::swap(warregkey_, other->warregkey_);
    std::swap(roleid_, other->roleid_);
    std::swap(teamflag_, other->teamflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageWarEnableNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageWarEnableNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageWarEnableNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageWarEnableNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessagePlayerLeaveWarNotify::kRoleIDFieldNumber;
const int CMessagePlayerLeaveWarNotify::kReasonFieldNumber;
#endif  // !_MSC_VER

CMessagePlayerLeaveWarNotify::CMessagePlayerLeaveWarNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePlayerLeaveWarNotify::InitAsDefaultInstance() {}

CMessagePlayerLeaveWarNotify::CMessagePlayerLeaveWarNotify(const CMessagePlayerLeaveWarNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePlayerLeaveWarNotify::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePlayerLeaveWarNotify::~CMessagePlayerLeaveWarNotify() {
  SharedDtor();
}

void CMessagePlayerLeaveWarNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessagePlayerLeaveWarNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerLeaveWarNotify_descriptor_;
}

const CMessagePlayerLeaveWarNotify& CMessagePlayerLeaveWarNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_globalserver_5fpb_2ehxx();  return *default_instance_;
}

CMessagePlayerLeaveWarNotify* CMessagePlayerLeaveWarNotify::default_instance_ = NULL;

CMessagePlayerLeaveWarNotify* CMessagePlayerLeaveWarNotify::New() const {
  return new CMessagePlayerLeaveWarNotify;
}

void CMessagePlayerLeaveWarNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    reason_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePlayerLeaveWarNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Reason;
        break;
      }
      
      // optional uint32 Reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Reason:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &reason_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePlayerLeaveWarNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePlayerLeaveWarNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional uint32 Reason = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->reason(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePlayerLeaveWarNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional uint32 Reason = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->reason(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePlayerLeaveWarNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 Reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->reason());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePlayerLeaveWarNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePlayerLeaveWarNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePlayerLeaveWarNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePlayerLeaveWarNotify::MergeFrom(const CMessagePlayerLeaveWarNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePlayerLeaveWarNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerLeaveWarNotify::CopyFrom(const CMessagePlayerLeaveWarNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerLeaveWarNotify::Swap(CMessagePlayerLeaveWarNotify* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePlayerLeaveWarNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePlayerLeaveWarNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePlayerLeaveWarNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerLeaveWarNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageWarEndNotify::kReptionKeyFieldNumber;
const int CMessageWarEndNotify::kWarRegKeyFieldNumber;
const int CMessageWarEndNotify::kReasonFieldNumber;
#endif  // !_MSC_VER

CMessageWarEndNotify::CMessageWarEndNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageWarEndNotify::InitAsDefaultInstance() {}

CMessageWarEndNotify::CMessageWarEndNotify(const CMessageWarEndNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageWarEndNotify::SharedCtor() {
  _cached_size_ = 0;
  reptionkey_ = GOOGLE_ULONGLONG(0);
  warregkey_ = 0u;
  reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageWarEndNotify::~CMessageWarEndNotify() {
  SharedDtor();
}

void CMessageWarEndNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageWarEndNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageWarEndNotify_descriptor_;
}

const CMessageWarEndNotify& CMessageWarEndNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_globalserver_5fpb_2ehxx();  return *default_instance_;
}

CMessageWarEndNotify* CMessageWarEndNotify::default_instance_ = NULL;

CMessageWarEndNotify* CMessageWarEndNotify::New() const {
  return new CMessageWarEndNotify;
}

void CMessageWarEndNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reptionkey_ = GOOGLE_ULONGLONG(0);
    warregkey_ = 0u;
    reason_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageWarEndNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint64 ReptionKey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &reptionkey_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_WarRegKey;
        break;
      }
      
      // optional uint32 WarRegKey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarRegKey:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warregkey_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Reason;
        break;
      }
      
      // optional uint32 Reason = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Reason:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &reason_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageWarEndNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageWarEndNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint64 ReptionKey = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(1, this->reptionkey(), output);
  }
  
  // optional uint32 WarRegKey = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->warregkey(), output);
  }
  
  // optional uint32 Reason = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->reason(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageWarEndNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 ReptionKey = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(1, this->reptionkey(), target);
  }
  
  // optional uint32 WarRegKey = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->warregkey(), target);
  }
  
  // optional uint32 Reason = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->reason(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageWarEndNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ReptionKey = 1;
    if (has_reptionkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->reptionkey());
    }
    
    // optional uint32 WarRegKey = 2;
    if (has_warregkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warregkey());
    }
    
    // optional uint32 Reason = 3;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->reason());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageWarEndNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageWarEndNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageWarEndNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageWarEndNotify::MergeFrom(const CMessageWarEndNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_reptionkey(from.reptionkey());
    }
    if (from._has_bit(1)) {
      set_warregkey(from.warregkey());
    }
    if (from._has_bit(2)) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageWarEndNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageWarEndNotify::CopyFrom(const CMessageWarEndNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageWarEndNotify::Swap(CMessageWarEndNotify* other) {
  if (other != this) {
    std::swap(reptionkey_, other->reptionkey_);
    std::swap(warregkey_, other->warregkey_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageWarEndNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageWarEndNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageWarEndNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageWarEndNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageKickGlobalPlayerNotify::kRoleIDFieldNumber;
const int CMessageKickGlobalPlayerNotify::kReasonFieldNumber;
#endif  // !_MSC_VER

CMessageKickGlobalPlayerNotify::CMessageKickGlobalPlayerNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageKickGlobalPlayerNotify::InitAsDefaultInstance() {}

CMessageKickGlobalPlayerNotify::CMessageKickGlobalPlayerNotify(const CMessageKickGlobalPlayerNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageKickGlobalPlayerNotify::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageKickGlobalPlayerNotify::~CMessageKickGlobalPlayerNotify() {
  SharedDtor();
}

void CMessageKickGlobalPlayerNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageKickGlobalPlayerNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageKickGlobalPlayerNotify_descriptor_;
}

const CMessageKickGlobalPlayerNotify& CMessageKickGlobalPlayerNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_globalserver_5fpb_2ehxx();  return *default_instance_;
}

CMessageKickGlobalPlayerNotify* CMessageKickGlobalPlayerNotify::default_instance_ = NULL;

CMessageKickGlobalPlayerNotify* CMessageKickGlobalPlayerNotify::New() const {
  return new CMessageKickGlobalPlayerNotify;
}

void CMessageKickGlobalPlayerNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    reason_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageKickGlobalPlayerNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Reason;
        break;
      }
      
      // optional uint32 Reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Reason:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &reason_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageKickGlobalPlayerNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageKickGlobalPlayerNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional uint32 Reason = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->reason(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageKickGlobalPlayerNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional uint32 Reason = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->reason(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageKickGlobalPlayerNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 Reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->reason());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageKickGlobalPlayerNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageKickGlobalPlayerNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageKickGlobalPlayerNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageKickGlobalPlayerNotify::MergeFrom(const CMessageKickGlobalPlayerNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageKickGlobalPlayerNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageKickGlobalPlayerNotify::CopyFrom(const CMessageKickGlobalPlayerNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageKickGlobalPlayerNotify::Swap(CMessageKickGlobalPlayerNotify* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageKickGlobalPlayerNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageKickGlobalPlayerNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageKickGlobalPlayerNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageKickGlobalPlayerNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageKickGlobalPlayerACK::kRoleIDFieldNumber;
const int CMessageKickGlobalPlayerACK::kAccountIDFieldNumber;
const int CMessageKickGlobalPlayerACK::kRoleWorldIDFieldNumber;
#endif  // !_MSC_VER

CMessageKickGlobalPlayerACK::CMessageKickGlobalPlayerACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageKickGlobalPlayerACK::InitAsDefaultInstance() {}

CMessageKickGlobalPlayerACK::CMessageKickGlobalPlayerACK(const CMessageKickGlobalPlayerACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageKickGlobalPlayerACK::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  accountid_ = 0u;
  roleworldid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageKickGlobalPlayerACK::~CMessageKickGlobalPlayerACK() {
  SharedDtor();
}

void CMessageKickGlobalPlayerACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageKickGlobalPlayerACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageKickGlobalPlayerACK_descriptor_;
}

const CMessageKickGlobalPlayerACK& CMessageKickGlobalPlayerACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_globalserver_5fpb_2ehxx();  return *default_instance_;
}

CMessageKickGlobalPlayerACK* CMessageKickGlobalPlayerACK::default_instance_ = NULL;

CMessageKickGlobalPlayerACK* CMessageKickGlobalPlayerACK::New() const {
  return new CMessageKickGlobalPlayerACK;
}

void CMessageKickGlobalPlayerACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    accountid_ = 0u;
    roleworldid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageKickGlobalPlayerACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_AccountID;
        break;
      }
      
      // optional uint32 AccountID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AccountID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_RoleWorldID;
        break;
      }
      
      // optional uint32 RoleWorldID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleWorldID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleworldid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageKickGlobalPlayerACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageKickGlobalPlayerACK::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional uint32 AccountID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->accountid(), output);
  }
  
  // optional uint32 RoleWorldID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->roleworldid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageKickGlobalPlayerACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional uint32 AccountID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->accountid(), target);
  }
  
  // optional uint32 RoleWorldID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->roleworldid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageKickGlobalPlayerACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 AccountID = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 RoleWorldID = 3;
    if (has_roleworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleworldid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageKickGlobalPlayerACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageKickGlobalPlayerACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageKickGlobalPlayerACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageKickGlobalPlayerACK::MergeFrom(const CMessageKickGlobalPlayerACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(2)) {
      set_roleworldid(from.roleworldid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageKickGlobalPlayerACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageKickGlobalPlayerACK::CopyFrom(const CMessageKickGlobalPlayerACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageKickGlobalPlayerACK::Swap(CMessageKickGlobalPlayerACK* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(accountid_, other->accountid_);
    std::swap(roleworldid_, other->roleworldid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageKickGlobalPlayerACK::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageKickGlobalPlayerACK::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageKickGlobalPlayerACK::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageKickGlobalPlayerACK_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBWorldPlayer::kWorldIDFieldNumber;
const int PBWorldPlayer::kRoleIDFieldNumber;
#endif  // !_MSC_VER

PBWorldPlayer::PBWorldPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBWorldPlayer::InitAsDefaultInstance() {}

PBWorldPlayer::PBWorldPlayer(const PBWorldPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBWorldPlayer::SharedCtor() {
  _cached_size_ = 0;
  worldid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBWorldPlayer::~PBWorldPlayer() {
  SharedDtor();
}

void PBWorldPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBWorldPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBWorldPlayer_descriptor_;
}

const PBWorldPlayer& PBWorldPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_globalserver_5fpb_2ehxx();  return *default_instance_;
}

PBWorldPlayer* PBWorldPlayer::default_instance_ = NULL;

PBWorldPlayer* PBWorldPlayer::New() const {
  return new PBWorldPlayer;
}

void PBWorldPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    worldid_ = 0u;
  }
  roleid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBWorldPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 WorldID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &worldid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_RoleID;
        break;
      }
      
      // repeated uint32 RoleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_roleid(value);
        if (input->ExpectTag(16)) goto parse_RoleID;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBWorldPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBWorldPlayer::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 WorldID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->worldid(), output);
  }
  
  // repeated uint32 RoleID = 2;
  for (int i = 0; i < this->roleid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->roleid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBWorldPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 WorldID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->worldid(), target);
  }
  
  // repeated uint32 RoleID = 2;
  for (int i = 0; i < this->roleid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->roleid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBWorldPlayer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 WorldID = 1;
    if (has_worldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->worldid());
    }
    
  }
  // repeated uint32 RoleID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->roleid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->roleid(i));
    }
    total_size += 1 * this->roleid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBWorldPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBWorldPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBWorldPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBWorldPlayer::MergeFrom(const PBWorldPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  roleid_.MergeFrom(from.roleid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_worldid(from.worldid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBWorldPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBWorldPlayer::CopyFrom(const PBWorldPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBWorldPlayer::Swap(PBWorldPlayer* other) {
  if (other != this) {
    std::swap(worldid_, other->worldid_);
    roleid_.Swap(&other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBWorldPlayer::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBWorldPlayer::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBWorldPlayer::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBWorldPlayer_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageSyncGlobalPlayeNotify::kWorldPlayerListFieldNumber;
#endif  // !_MSC_VER

CMessageSyncGlobalPlayeNotify::CMessageSyncGlobalPlayeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageSyncGlobalPlayeNotify::InitAsDefaultInstance() {}

CMessageSyncGlobalPlayeNotify::CMessageSyncGlobalPlayeNotify(const CMessageSyncGlobalPlayeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageSyncGlobalPlayeNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageSyncGlobalPlayeNotify::~CMessageSyncGlobalPlayeNotify() {
  SharedDtor();
}

void CMessageSyncGlobalPlayeNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageSyncGlobalPlayeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageSyncGlobalPlayeNotify_descriptor_;
}

const CMessageSyncGlobalPlayeNotify& CMessageSyncGlobalPlayeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_globalserver_5fpb_2ehxx();  return *default_instance_;
}

CMessageSyncGlobalPlayeNotify* CMessageSyncGlobalPlayeNotify::default_instance_ = NULL;

CMessageSyncGlobalPlayeNotify* CMessageSyncGlobalPlayeNotify::New() const {
  return new CMessageSyncGlobalPlayeNotify;
}

void CMessageSyncGlobalPlayeNotify::Clear() {
  worldplayerlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageSyncGlobalPlayeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .PBWorldPlayer WorldPlayerList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_WorldPlayerList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_worldplayerlist()));
        if (input->ExpectTag(10)) goto parse_WorldPlayerList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageSyncGlobalPlayeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageSyncGlobalPlayeNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .PBWorldPlayer WorldPlayerList = 1;
  for (int i = 0; i < this->worldplayerlist_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->worldplayerlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageSyncGlobalPlayeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBWorldPlayer WorldPlayerList = 1;
  for (int i = 0; i < this->worldplayerlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->worldplayerlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageSyncGlobalPlayeNotify::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBWorldPlayer WorldPlayerList = 1;
  total_size += 1 * this->worldplayerlist_size();
  for (int i = 0; i < this->worldplayerlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->worldplayerlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageSyncGlobalPlayeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageSyncGlobalPlayeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageSyncGlobalPlayeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageSyncGlobalPlayeNotify::MergeFrom(const CMessageSyncGlobalPlayeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  worldplayerlist_.MergeFrom(from.worldplayerlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageSyncGlobalPlayeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSyncGlobalPlayeNotify::CopyFrom(const CMessageSyncGlobalPlayeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSyncGlobalPlayeNotify::Swap(CMessageSyncGlobalPlayeNotify* other) {
  if (other != this) {
    worldplayerlist_.Swap(&other->worldplayerlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageSyncGlobalPlayeNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageSyncGlobalPlayeNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageSyncGlobalPlayeNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageSyncGlobalPlayeNotify_reflection_;
}
